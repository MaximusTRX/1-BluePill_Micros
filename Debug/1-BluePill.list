
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a84c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a958  0800a958  0000b958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9cc  0800a9cc  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9cc  0800a9cc  0000c17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9cc  0800a9cc  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9cc  0800a9cc  0000b9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d0  0800a9d0  0000b9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a9d4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  2000017c  0800ab50  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800ab50  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019366  00000000  00000000  0000c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbe  00000000  00000000  0002550b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  0002a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b0  00000000  00000000  0002b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d287  00000000  00000000  00046ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968fb  00000000  00000000  00064127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faa22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  000faa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00100990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a940 	.word	0x0800a940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800a940 	.word	0x0800a940

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0 = bufADC[0];
 8000154:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000156:	881a      	ldrh	r2, [r3, #0]
 8000158:	4b12      	ldr	r3, [pc, #72]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800015a:	801a      	strh	r2, [r3, #0]
	ir.sensor1 = bufADC[1];
 800015c:	4b10      	ldr	r3, [pc, #64]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800015e:	885a      	ldrh	r2, [r3, #2]
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000162:	805a      	strh	r2, [r3, #2]
	ir.sensor2 = bufADC[2];
 8000164:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000166:	889a      	ldrh	r2, [r3, #4]
 8000168:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800016a:	809a      	strh	r2, [r3, #4]
	ir.sensor3 = bufADC[3];
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800016e:	88da      	ldrh	r2, [r3, #6]
 8000170:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000172:	80da      	strh	r2, [r3, #6]
	ir.sensor4 = bufADC[4];
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000176:	891a      	ldrh	r2, [r3, #8]
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800017a:	811a      	strh	r2, [r3, #8]
	ir.sensor5 = bufADC[5];
 800017c:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800017e:	895a      	ldrh	r2, [r3, #10]
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000182:	815a      	strh	r2, [r3, #10]
	ir.sensor6 = bufADC[6];
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000186:	899a      	ldrh	r2, [r3, #12]
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800018a:	819a      	strh	r2, [r3, #12]
	ir.sensor7 = bufADC[7];
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000192:	81da      	strh	r2, [r3, #14]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000564 	.word	0x20000564
 80001a4:	200003a8 	.word	0x200003a8

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a15      	ldr	r2, [pc, #84]	@ (800020c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d10b      	bne.n	80001d2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		t100ms--;
 80001ba:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	3b01      	subs	r3, #1
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001c4:	701a      	strb	r2, [r3, #0]
		t500ms--;
 80001c6:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001d0:	701a      	strb	r2, [r3, #0]
	}
	if(t100ms==0){
 80001d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d107      	bne.n	80001ea <HAL_TIM_PeriodElapsedCallback+0x42>
		flags1.F100MS = 1;
 80001da:	4a0f      	ldr	r2, [pc, #60]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001dc:	7813      	ldrb	r3, [r2, #0]
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	7013      	strb	r3, [r2, #0]
		t100ms=10;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001e6:	220a      	movs	r2, #10
 80001e8:	701a      	strb	r2, [r3, #0]
	}
	if(t500ms==0){
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d107      	bne.n	8000202 <HAL_TIM_PeriodElapsedCallback+0x5a>
		flags1.F500MS = 1;
 80001f2:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001f4:	7813      	ldrb	r3, [r2, #0]
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	7013      	strb	r3, [r2, #0]
		t500ms=50;
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001fe:	2232      	movs	r2, #50	@ 0x32
 8000200:	701a      	strb	r2, [r3, #0]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40012c00 	.word	0x40012c00
 8000210:	20000560 	.word	0x20000560
 8000214:	20000561 	.word	0x20000561
 8000218:	200003a4 	.word	0x200003a4

0800021c <HAL_UART_RxCpltCallback>:

/*=============>Recepci贸n de datos desde USART<=============
 * Interrupci贸n que es llamada cuando se produce una recepci贸n de datos.
 * Cargo los datos recibidos al Buffer de Recepci贸n
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <HAL_UART_RxCpltCallback+0x38>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d10d      	bne.n	800024a <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	b2d1      	uxtb	r1, r2
 8000236:	4a08      	ldr	r2, [pc, #32]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000238:	7111      	strb	r1, [r2, #4]
 800023a:	3308      	adds	r3, #8
 800023c:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 800023e:	4413      	add	r3, r2
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	4805      	ldr	r0, [pc, #20]	@ (800025c <HAL_UART_RxCpltCallback+0x40>)
 8000246:	f005 fa25 	bl	8005694 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40013800 	.word	0x40013800
 8000258:	2000019c 	.word	0x2000019c
 800025c:	20000518 	.word	0x20000518

08000260 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e00c      	b.n	800028c <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <USBReceive+0x40>)
 800027a:	7912      	ldrb	r2, [r2, #4]
 800027c:	4611      	mov	r1, r2
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <USBReceive+0x40>)
 8000282:	440b      	add	r3, r1
 8000284:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	429a      	cmp	r2, r3
 8000292:	dbee      	blt.n	8000272 <USBReceive+0x12>
	}


}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	2000019c 	.word	0x2000019c

080002a4 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80002ac:	e0e3      	b.n	8000476 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 80002ae:	4b78      	ldr	r3, [pc, #480]	@ (8000490 <decodeProtocol+0x1ec>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	f200 80d8 	bhi.w	8000468 <decodeProtocol+0x1c4>
 80002b8:	a201      	add	r2, pc, #4	@ (adr r2, 80002c0 <decodeProtocol+0x1c>)
 80002ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002be:	bf00      	nop
 80002c0:	080002dd 	.word	0x080002dd
 80002c4:	08000305 	.word	0x08000305
 80002c8:	08000339 	.word	0x08000339
 80002cc:	0800036d 	.word	0x0800036d
 80002d0:	080003a1 	.word	0x080003a1
 80002d4:	080003c9 	.word	0x080003c9
 80002d8:	0800040b 	.word	0x0800040b
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	b2d1      	uxtb	r1, r2
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7151      	strb	r1, [r2, #5]
 80002e8:	461a      	mov	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	7a1b      	ldrb	r3, [r3, #8]
 80002f0:	2b55      	cmp	r3, #85	@ 0x55
 80002f2:	f040 80bd 	bne.w	8000470 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 80002f6:	4b66      	ldr	r3, [pc, #408]	@ (8000490 <decodeProtocol+0x1ec>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000302:	e0b5      	b.n	8000470 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	795b      	ldrb	r3, [r3, #5]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	b2d1      	uxtb	r1, r2
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	7151      	strb	r1, [r2, #5]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2b4e      	cmp	r3, #78	@ 0x4e
 800031a:	d103      	bne.n	8000324 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 800031c:	4b5c      	ldr	r3, [pc, #368]	@ (8000490 <decodeProtocol+0x1ec>)
 800031e:	2202      	movs	r2, #2
 8000320:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000322:	e0a8      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000330:	4b57      	ldr	r3, [pc, #348]	@ (8000490 <decodeProtocol+0x1ec>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
			break;
 8000336:	e09e      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	2b45      	cmp	r3, #69	@ 0x45
 800034e:	d103      	bne.n	8000358 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000350:	4b4f      	ldr	r3, [pc, #316]	@ (8000490 <decodeProtocol+0x1ec>)
 8000352:	2203      	movs	r2, #3
 8000354:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 8000356:	e08e      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	3b01      	subs	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000364:	4b4a      	ldr	r3, [pc, #296]	@ (8000490 <decodeProtocol+0x1ec>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
			break;
 800036a:	e084      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	b2d1      	uxtb	r1, r2
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7151      	strb	r1, [r2, #5]
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	7a1b      	ldrb	r3, [r3, #8]
 8000380:	2b52      	cmp	r3, #82	@ 0x52
 8000382:	d103      	bne.n	800038c <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000384:	4b42      	ldr	r3, [pc, #264]	@ (8000490 <decodeProtocol+0x1ec>)
 8000386:	2204      	movs	r2, #4
 8000388:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800038a:	e074      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	3b01      	subs	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000398:	4b3d      	ldr	r3, [pc, #244]	@ (8000490 <decodeProtocol+0x1ec>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			break;
 800039e:	e06a      	b.n	8000476 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795a      	ldrb	r2, [r3, #5]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	b2d1      	uxtb	r1, r2
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7151      	strb	r1, [r2, #5]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	7a1a      	ldrb	r2, [r3, #8]
 80003bc:	4b35      	ldr	r3, [pc, #212]	@ (8000494 <decodeProtocol+0x1f0>)
 80003be:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 80003c0:	4b33      	ldr	r3, [pc, #204]	@ (8000490 <decodeProtocol+0x1ec>)
 80003c2:	2205      	movs	r2, #5
 80003c4:	701a      	strb	r2, [r3, #0]
			break;
 80003c6:	e056      	b.n	8000476 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	b2d1      	uxtb	r1, r2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7151      	strb	r1, [r2, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80003de:	d10a      	bne.n	80003f6 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <decodeProtocol+0x1ec>)
 80003e2:	2206      	movs	r2, #6
 80003e4:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <decodeProtocol+0x1f0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80003f4:	e03f      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000402:	4b23      	ldr	r3, [pc, #140]	@ (8000490 <decodeProtocol+0x1ec>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
			break;
 8000408:	e035      	b.n	8000476 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <decodeProtocol+0x1f0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d90f      	bls.n	8000432 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b2d1      	uxtb	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7151      	strb	r1, [r2, #5]
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	7a1a      	ldrb	r2, [r3, #8]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	4053      	eors	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 8000432:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <decodeProtocol+0x1f0>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <decodeProtocol+0x1f0>)
 800043c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <decodeProtocol+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d116      	bne.n	8000474 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <decodeProtocol+0x1ec>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	789a      	ldrb	r2, [r3, #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	4619      	mov	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	440b      	add	r3, r1
 800045a:	7a1b      	ldrb	r3, [r3, #8]
 800045c:	429a      	cmp	r2, r3
 800045e:	d109      	bne.n	8000474 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 f819 	bl	8000498 <decodeData>
				}
			}
			break;
 8000466:	e005      	b.n	8000474 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <decodeProtocol+0x1ec>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
			break;
 800046e:	e002      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000470:	bf00      	nop
 8000472:	e000      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000474:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795a      	ldrb	r2, [r3, #5]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	f47f af15 	bne.w	80002ae <decodeProtocol+0xa>
		}
	}

}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000198 	.word	0x20000198
 8000494:	20000574 	.word	0x20000574

08000498 <decodeData>:

void decodeData(_sDato *datosCom){
 8000498:	b480      	push	{r7}
 800049a:	b091      	sub	sp, #68	@ 0x44
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80004a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004b0:	3340      	adds	r3, #64	@ 0x40
 80004b2:	443b      	add	r3, r7
 80004b4:	2255      	movs	r2, #85	@ 0x55
 80004b6:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80004ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004c4:	3340      	adds	r3, #64	@ 0x40
 80004c6:	443b      	add	r3, r7
 80004c8:	224e      	movs	r2, #78	@ 0x4e
 80004ca:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80004ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004d8:	3340      	adds	r3, #64	@ 0x40
 80004da:	443b      	add	r3, r7
 80004dc:	2245      	movs	r2, #69	@ 0x45
 80004de:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80004e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004ec:	3340      	adds	r3, #64	@ 0x40
 80004ee:	443b      	add	r3, r7
 80004f0:	2252      	movs	r2, #82	@ 0x52
 80004f2:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 80004f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000500:	3340      	adds	r3, #64	@ 0x40
 8000502:	443b      	add	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 800050a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000514:	3340      	adds	r3, #64	@ 0x40
 8000516:	443b      	add	r3, r7
 8000518:	223a      	movs	r2, #58	@ 0x3a
 800051a:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	3302      	adds	r3, #2
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	7a1b      	ldrb	r3, [r3, #8]
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d116      	bne.n	800055c <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 800052e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000538:	3340      	adds	r3, #64	@ 0x40
 800053a:	443b      	add	r3, r7
 800053c:	22f0      	movs	r2, #240	@ 0xf0
 800053e:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 8000542:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800054c:	3340      	adds	r3, #64	@ 0x40
 800054e:	443b      	add	r3, r7
 8000550:	220d      	movs	r2, #13
 8000552:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 8000556:	2303      	movs	r3, #3
 8000558:	733b      	strb	r3, [r7, #12]
			break;
 800055a:	e00c      	b.n	8000576 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800055c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000566:	3340      	adds	r3, #64	@ 0x40
 8000568:	443b      	add	r3, r7
 800056a:	22dd      	movs	r2, #221	@ 0xdd
 800056c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000570:	2302      	movs	r3, #2
 8000572:	733b      	strb	r3, [r7, #12]
			break;
 8000574:	bf00      	nop
	}

	cheksum=0;
 8000576:	2300      	movs	r3, #0
 8000578:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800057c:	2300      	movs	r3, #0
 800057e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000582:	e021      	b.n	80005c8 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000584:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000588:	3340      	adds	r3, #64	@ 0x40
 800058a:	443b      	add	r3, r7
 800058c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000590:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000594:	4053      	eors	r3, r2
 8000596:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800059a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <decodeData+0x160>)
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	b2c8      	uxtb	r0, r1
 80005a6:	4914      	ldr	r1, [pc, #80]	@ (80005f8 <decodeData+0x160>)
 80005a8:	7188      	strb	r0, [r1, #6]
 80005aa:	4619      	mov	r1, r3
 80005ac:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80005b0:	443b      	add	r3, r7
 80005b2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	440b      	add	r3, r1
 80005ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005c2:	3301      	adds	r3, #1
 80005c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005c8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80005cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3d7      	bcc.n	8000584 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <decodeData+0x160>)
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	b2d1      	uxtb	r1, r2
 80005dc:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <decodeData+0x160>)
 80005de:	7191      	strb	r1, [r2, #6]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80005ea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 80005ee:	bf00      	nop
 80005f0:	3744      	adds	r7, #68	@ 0x44
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	2000019c 	.word	0x2000019c

080005fc <encodeData>:

void encodeData(uint8_t id){
 80005fc:	b480      	push	{r7}
 80005fe:	b091      	sub	sp, #68	@ 0x44
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 800060c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000616:	3340      	adds	r3, #64	@ 0x40
 8000618:	443b      	add	r3, r7
 800061a:	2255      	movs	r2, #85	@ 0x55
 800061c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000620:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800062a:	3340      	adds	r3, #64	@ 0x40
 800062c:	443b      	add	r3, r7
 800062e:	224e      	movs	r2, #78	@ 0x4e
 8000630:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000634:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800063e:	3340      	adds	r3, #64	@ 0x40
 8000640:	443b      	add	r3, r7
 8000642:	2245      	movs	r2, #69	@ 0x45
 8000644:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000648:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000652:	3340      	adds	r3, #64	@ 0x40
 8000654:	443b      	add	r3, r7
 8000656:	2252      	movs	r2, #82	@ 0x52
 8000658:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 800065c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000666:	3340      	adds	r3, #64	@ 0x40
 8000668:	443b      	add	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800067a:	3340      	adds	r3, #64	@ 0x40
 800067c:	443b      	add	r3, r7
 800067e:	223a      	movs	r2, #58	@ 0x3a
 8000680:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2ba0      	cmp	r3, #160	@ 0xa0
 8000688:	f040 80fd 	bne.w	8000886 <encodeData+0x28a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 800068c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000696:	3340      	adds	r3, #64	@ 0x40
 8000698:	443b      	add	r3, r7
 800069a:	22a0      	movs	r2, #160	@ 0xa0
 800069c:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 80006a0:	2312      	movs	r3, #18
 80006a2:	733b      	strb	r3, [r7, #12]

		myWord.ui16[0] = ir.sensor0;
 80006a4:	4b9f      	ldr	r3, [pc, #636]	@ (8000924 <encodeData+0x328>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b9f      	ldr	r3, [pc, #636]	@ (8000928 <encodeData+0x32c>)
 80006aa:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b9b      	ldr	r3, [pc, #620]	@ (8000928 <encodeData+0x32c>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80006c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b95      	ldr	r3, [pc, #596]	@ (8000928 <encodeData+0x32c>)
 80006d4:	785a      	ldrb	r2, [r3, #1]
 80006d6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006da:	443b      	add	r3, r7
 80006dc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor1;
 80006e0:	4b90      	ldr	r3, [pc, #576]	@ (8000924 <encodeData+0x328>)
 80006e2:	885a      	ldrh	r2, [r3, #2]
 80006e4:	4b90      	ldr	r3, [pc, #576]	@ (8000928 <encodeData+0x32c>)
 80006e6:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006f2:	4619      	mov	r1, r3
 80006f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000928 <encodeData+0x32c>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000702:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800070c:	4619      	mov	r1, r3
 800070e:	4b86      	ldr	r3, [pc, #536]	@ (8000928 <encodeData+0x32c>)
 8000710:	785a      	ldrb	r2, [r3, #1]
 8000712:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000716:	443b      	add	r3, r7
 8000718:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor2;
 800071c:	4b81      	ldr	r3, [pc, #516]	@ (8000924 <encodeData+0x328>)
 800071e:	889a      	ldrh	r2, [r3, #4]
 8000720:	4b81      	ldr	r3, [pc, #516]	@ (8000928 <encodeData+0x32c>)
 8000722:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000724:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800072e:	4619      	mov	r1, r3
 8000730:	4b7d      	ldr	r3, [pc, #500]	@ (8000928 <encodeData+0x32c>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000738:	443b      	add	r3, r7
 800073a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800073e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000748:	4619      	mov	r1, r3
 800074a:	4b77      	ldr	r3, [pc, #476]	@ (8000928 <encodeData+0x32c>)
 800074c:	785a      	ldrb	r2, [r3, #1]
 800074e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000752:	443b      	add	r3, r7
 8000754:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor3;
 8000758:	4b72      	ldr	r3, [pc, #456]	@ (8000924 <encodeData+0x328>)
 800075a:	88da      	ldrh	r2, [r3, #6]
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <encodeData+0x32c>)
 800075e:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000760:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800076a:	4619      	mov	r1, r3
 800076c:	4b6e      	ldr	r3, [pc, #440]	@ (8000928 <encodeData+0x32c>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000774:	443b      	add	r3, r7
 8000776:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800077a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000784:	4619      	mov	r1, r3
 8000786:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <encodeData+0x32c>)
 8000788:	785a      	ldrb	r2, [r3, #1]
 800078a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800078e:	443b      	add	r3, r7
 8000790:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor4;
 8000794:	4b63      	ldr	r3, [pc, #396]	@ (8000924 <encodeData+0x328>)
 8000796:	891a      	ldrh	r2, [r3, #8]
 8000798:	4b63      	ldr	r3, [pc, #396]	@ (8000928 <encodeData+0x32c>)
 800079a:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800079c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <encodeData+0x32c>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007b0:	443b      	add	r3, r7
 80007b2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c0:	4619      	mov	r1, r3
 80007c2:	4b59      	ldr	r3, [pc, #356]	@ (8000928 <encodeData+0x32c>)
 80007c4:	785a      	ldrb	r2, [r3, #1]
 80007c6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ca:	443b      	add	r3, r7
 80007cc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor5;
 80007d0:	4b54      	ldr	r3, [pc, #336]	@ (8000924 <encodeData+0x328>)
 80007d2:	895a      	ldrh	r2, [r3, #10]
 80007d4:	4b54      	ldr	r3, [pc, #336]	@ (8000928 <encodeData+0x32c>)
 80007d6:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e2:	4619      	mov	r1, r3
 80007e4:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <encodeData+0x32c>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ec:	443b      	add	r3, r7
 80007ee:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007fc:	4619      	mov	r1, r3
 80007fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <encodeData+0x32c>)
 8000800:	785a      	ldrb	r2, [r3, #1]
 8000802:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000806:	443b      	add	r3, r7
 8000808:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor6;
 800080c:	4b45      	ldr	r3, [pc, #276]	@ (8000924 <encodeData+0x328>)
 800080e:	899a      	ldrh	r2, [r3, #12]
 8000810:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <encodeData+0x32c>)
 8000812:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000814:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800081e:	4619      	mov	r1, r3
 8000820:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <encodeData+0x32c>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000828:	443b      	add	r3, r7
 800082a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800082e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000838:	4619      	mov	r1, r3
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <encodeData+0x32c>)
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000842:	443b      	add	r3, r7
 8000844:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor7;
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <encodeData+0x328>)
 800084a:	89da      	ldrh	r2, [r3, #14]
 800084c:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <encodeData+0x32c>)
 800084e:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800085a:	4619      	mov	r1, r3
 800085c:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <encodeData+0x32c>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000864:	443b      	add	r3, r7
 8000866:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000874:	4619      	mov	r1, r3
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <encodeData+0x32c>)
 8000878:	785a      	ldrb	r2, [r3, #1]
 800087a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800087e:	443b      	add	r3, r7
 8000880:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 8000884:	e00c      	b.n	80008a0 <encodeData+0x2a4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000890:	3340      	adds	r3, #64	@ 0x40
 8000892:	443b      	add	r3, r7
 8000894:	22dd      	movs	r2, #221	@ 0xdd
 8000896:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 800089a:	2302      	movs	r3, #2
 800089c:	733b      	strb	r3, [r7, #12]
			break;
 800089e:	bf00      	nop
	}
	cheksum=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008ac:	e021      	b.n	80008f2 <encodeData+0x2f6>
	{
		cheksum ^= auxBuffTx[a];
 80008ae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008b2:	3340      	adds	r3, #64	@ 0x40
 80008b4:	443b      	add	r3, r7
 80008b6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80008be:	4053      	eors	r3, r2
 80008c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80008c4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <encodeData+0x330>)
 80008ca:	799b      	ldrb	r3, [r3, #6]
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	b2c8      	uxtb	r0, r1
 80008d0:	4916      	ldr	r1, [pc, #88]	@ (800092c <encodeData+0x330>)
 80008d2:	7188      	strb	r0, [r1, #6]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80008da:	443b      	add	r3, r7
 80008dc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <encodeData+0x330>)
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008e8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008f2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3d7      	bcc.n	80008ae <encodeData+0x2b2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <encodeData+0x330>)
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	b2d1      	uxtb	r1, r2
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <encodeData+0x330>)
 8000908:	7191      	strb	r1, [r2, #6]
 800090a:	461a      	mov	r2, r3
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <encodeData+0x330>)
 800090e:	4413      	add	r3, r2
 8000910:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000914:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000918:	bf00      	nop
 800091a:	3744      	adds	r7, #68	@ 0x44
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200003a8 	.word	0x200003a8
 8000928:	200003bc 	.word	0x200003bc
 800092c:	2000019c 	.word	0x2000019c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fd3a 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8b8 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 faca 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 faaa 	bl	8000e98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000944:	f000 fa7e 	bl	8000e44 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000948:	f000 f9de 	bl	8000d08 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800094c:	f009 fae0 	bl	8009f10 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000950:	f000 f90a 	bl	8000b68 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000954:	f000 f9aa 	bl	8000cac <MX_I2C2_Init>
  MX_TIM4_Init();
 8000958:	f000 fa26 	bl	8000da8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800095c:	484b      	ldr	r0, [pc, #300]	@ (8000a8c <main+0x15c>)
 800095e:	f004 fa9b 	bl	8004e98 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000962:	484b      	ldr	r0, [pc, #300]	@ (8000a90 <main+0x160>)
 8000964:	f009 fc0a 	bl	800a17c <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepi贸n del Buffer de Recepci贸n
 8000968:	4b4a      	ldr	r3, [pc, #296]	@ (8000a94 <main+0x164>)
 800096a:	2200      	movs	r2, #0
 800096c:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepci贸n
 800096e:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <main+0x164>)
 8000970:	2200      	movs	r2, #0
 8000972:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <main+0x164>)
 8000976:	2200      	movs	r2, #0
 8000978:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 800097a:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <main+0x164>)
 800097c:	2200      	movs	r2, #0
 800097e:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 8000980:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <main+0x164>)
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	3308      	adds	r3, #8
 8000986:	4a43      	ldr	r2, [pc, #268]	@ (8000a94 <main+0x164>)
 8000988:	4413      	add	r3, r2
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4842      	ldr	r0, [pc, #264]	@ (8000a98 <main+0x168>)
 8000990:	f004 fe80 	bl	8005694 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000994:	2208      	movs	r2, #8
 8000996:	4941      	ldr	r1, [pc, #260]	@ (8000a9c <main+0x16c>)
 8000998:	4841      	ldr	r0, [pc, #260]	@ (8000aa0 <main+0x170>)
 800099a:	f000 fe65 	bl	8001668 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a4:	483f      	ldr	r0, [pc, #252]	@ (8000aa4 <main+0x174>)
 80009a6:	f001 fe7d 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009aa:	2064      	movs	r0, #100	@ 0x64
 80009ac:	f000 fd60 	bl	8001470 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b6:	483b      	ldr	r0, [pc, #236]	@ (8000aa4 <main+0x174>)
 80009b8:	f001 fe74 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	@ 0x64
 80009be:	f000 fd57 	bl	8001470 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c8:	4836      	ldr	r0, [pc, #216]	@ (8000aa4 <main+0x174>)
 80009ca:	f001 fe6b 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009ce:	2064      	movs	r0, #100	@ 0x64
 80009d0:	f000 fd4e 	bl	8001470 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009da:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <main+0x174>)
 80009dc:	f001 fe62 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009e0:	2064      	movs	r0, #100	@ 0x64
 80009e2:	f000 fd45 	bl	8001470 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	482d      	ldr	r0, [pc, #180]	@ (8000aa4 <main+0x174>)
 80009ee:	f001 fe59 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f000 fd3c 	bl	8001470 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fe:	4829      	ldr	r0, [pc, #164]	@ (8000aa4 <main+0x174>)
 8000a00:	f001 fe50 	bl	80026a4 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  if (flags1.F250US==1) {
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
//	}

	  if(flags1.F100MS==1){
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <main+0x178>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d009      	beq.n	8000a26 <main+0xf6>
		  flags1.F100MS = 0;
 8000a12:	4a25      	ldr	r2, [pc, #148]	@ (8000aa8 <main+0x178>)
 8000a14:	7813      	ldrb	r3, [r2, #0]
 8000a16:	f36f 0341 	bfc	r3, #1, #1
 8000a1a:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000a1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a20:	4820      	ldr	r0, [pc, #128]	@ (8000aa4 <main+0x174>)
 8000a22:	f001 fe57 	bl	80026d4 <HAL_GPIO_TogglePin>
		  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS==1) {
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <main+0x178>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d007      	beq.n	8000a44 <main+0x114>
		  flags1.F500MS = 0;
 8000a34:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <main+0x178>)
 8000a36:	7813      	ldrb	r3, [r2, #0]
 8000a38:	f36f 0382 	bfc	r3, #2, #1
 8000a3c:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000a3e:	20a0      	movs	r0, #160	@ 0xa0
 8000a40:	f7ff fddc 	bl	80005fc <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <main+0x164>)
 8000a46:	795a      	ldrb	r2, [r3, #5]
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <main+0x164>)
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d002      	beq.n	8000a56 <main+0x126>
		  decodeProtocol(&datosComProtocol);
 8000a50:	4810      	ldr	r0, [pc, #64]	@ (8000a94 <main+0x164>)
 8000a52:	f7ff fc27 	bl	80002a4 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <main+0x164>)
 8000a58:	79da      	ldrb	r2, [r3, #7]
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <main+0x164>)
 8000a5c:	799b      	ldrb	r3, [r3, #6]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d0d0      	beq.n	8000a04 <main+0xd4>

		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], 1) == USBD_OK)){
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <main+0x164>)
 8000a64:	79db      	ldrb	r3, [r3, #7]
 8000a66:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <main+0x164>)
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f009 fb5d 	bl	800a130 <CDC_Transmit_FS>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1c3      	bne.n	8000a04 <main+0xd4>
			  datosComProtocol.indexReadTx++;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <main+0x164>)
 8000a7e:	79db      	ldrb	r3, [r3, #7]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <main+0x164>)
 8000a86:	71da      	strb	r2, [r3, #7]
	  if(flags1.F100MS==1){
 8000a88:	e7bc      	b.n	8000a04 <main+0xd4>
 8000a8a:	bf00      	nop
 8000a8c:	20000488 	.word	0x20000488
 8000a90:	08000261 	.word	0x08000261
 8000a94:	2000019c 	.word	0x2000019c
 8000a98:	20000518 	.word	0x20000518
 8000a9c:	20000564 	.word	0x20000564
 8000aa0:	200003c0 	.word	0x200003c0
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	200003a4 	.word	0x200003a4

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	@ 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab6:	2228      	movs	r2, #40	@ 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 ff14 	bl	800a8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000af8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fcb2 	bl	800446c <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b0e:	f000 fa5f 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 ff1e 	bl	8004970 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b3a:	f000 fa49 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f89c 	bl	8004c8c <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b5a:	f000 fa39 	bl	8000fd0 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca8 <MX_ADC1_Init+0x140>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b86:	4b47      	ldr	r3, [pc, #284]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b44      	ldr	r3, [pc, #272]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b94:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000ba0:	4b40      	ldr	r3, [pc, #256]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	483f      	ldr	r0, [pc, #252]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000ba8:	f000 fc86 	bl	80014b8 <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 fa0d 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4837      	ldr	r0, [pc, #220]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000bc8:	f000 fe3e 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f9fd 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4830      	ldr	r0, [pc, #192]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000be4:	f000 fe30 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 f9ef 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4829      	ldr	r0, [pc, #164]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c00:	f000 fe22 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f9e1 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4822      	ldr	r0, [pc, #136]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c1c:	f000 fe14 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c26:	f000 f9d3 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	481b      	ldr	r0, [pc, #108]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c38:	f000 fe06 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c42:	f000 f9c5 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c46:	2305      	movs	r3, #5
 8000c48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c54:	f000 fdf8 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c5e:	f000 f9b7 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c62:	2306      	movs	r3, #6
 8000c64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c70:	f000 fdea 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c7a:	f000 f9a9 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c82:	2308      	movs	r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c8c:	f000 fddc 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c96:	f000 f99b 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200003c0 	.word	0x200003c0
 8000ca8:	40012400 	.word	0x40012400

08000cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb2:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <MX_I2C2_Init+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_I2C2_Init+0x58>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cea:	f001 fd0d 	bl	8002708 <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cf4:	f000 f96c 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000434 	.word	0x20000434
 8000d00:	40005800 	.word	0x40005800
 8000d04:	000186a0 	.word	0x000186a0

08000d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d26:	4a1f      	ldr	r2, [pc, #124]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d2c:	2247      	movs	r2, #71	@ 0x47
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d52:	f004 f851 	bl	8004df8 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f938 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d6e:	f004 f9ed 	bl	800514c <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d78:	f000 f92a 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d8a:	f004 fbc3 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d94:	f000 f91c 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000488 	.word	0x20000488
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <MX_TIM4_Init+0x98>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dea:	4814      	ldr	r0, [pc, #80]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000dec:	f004 f804 	bl	8004df8 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 f8eb 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000e08:	f004 f9a0 	bl	800514c <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 f8dd 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_TIM4_Init+0x94>)
 8000e24:	f004 fb76 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 f8cf 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200004d0 	.word	0x200004d0
 8000e40:	40000800 	.word	0x40000800

08000e44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <MX_USART1_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f004 fbba 	bl	80055f4 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f000 f8a3 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000518 	.word	0x20000518
 8000e94:	40013800 	.word	0x40013800

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_DMA_Init+0x38>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f000 ff95 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec0:	200b      	movs	r0, #11
 8000ec2:	f000 ffae 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a34      	ldr	r2, [pc, #208]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a28      	ldr	r2, [pc, #160]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a22      	ldr	r2, [pc, #136]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <MX_GPIO_Init+0xec>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4e:	481d      	ldr	r0, [pc, #116]	@ (8000fc4 <MX_GPIO_Init+0xf0>)
 8000f50:	f001 fba8 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5a:	481b      	ldr	r0, [pc, #108]	@ (8000fc8 <MX_GPIO_Init+0xf4>)
 8000f5c:	f001 fba2 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0xf0>)
 8000f7a:	f001 fa0f 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <MX_GPIO_Init+0xf8>)
 8000f94:	f001 fa02 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_GPIO_Init+0xf4>)
 8000fb2:	f001 f9f3 	bl	800239c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <Error_Handler+0x8>

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <HAL_MspInit+0x5c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <HAL_MspInit+0x5c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_MspInit+0x60>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_MspInit+0x60>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000

08001040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <HAL_ADC_MspInit+0xbc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d149      	bne.n	80010f4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <HAL_ADC_MspInit+0xc0>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001090:	23ff      	movs	r3, #255	@ 0xff
 8001092:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001094:	2303      	movs	r3, #3
 8001096:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4819      	ldr	r0, [pc, #100]	@ (8001104 <HAL_ADC_MspInit+0xc4>)
 80010a0:	f001 f97c 	bl	800239c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010b8:	2280      	movs	r2, #128	@ 0x80
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010da:	f000 febd 	bl	8001e58 <HAL_DMA_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010e4:	f7ff ff74 	bl	8000fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010ec:	621a      	str	r2, [r3, #32]
 80010ee:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40012400 	.word	0x40012400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	200003f0 	.word	0x200003f0
 800110c:	40020008 	.word	0x40020008

08001110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_I2C_MspInit+0x74>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d124      	bne.n	800117a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001148:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800114c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	@ (800118c <HAL_I2C_MspInit+0x7c>)
 800115e:	f001 f91d 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_I2C_MspInit+0x78>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40005800 	.word	0x40005800
 8001188:	40021000 	.word	0x40021000
 800118c:	40010c00 	.word	0x40010c00

08001190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d114      	bne.n	80011cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a15      	ldr	r2, [pc, #84]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2019      	movs	r0, #25
 80011c0:	f000 fe13 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c4:	2019      	movs	r0, #25
 80011c6:	f000 fe2c 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ca:	e010      	b.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_TIM_Base_MspInit+0x70>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10b      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40000800 	.word	0x40000800

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <HAL_UART_MspInit+0x9c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d139      	bne.n	8001298 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1e      	ldr	r2, [pc, #120]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_UART_MspInit+0xa0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <HAL_UART_MspInit+0xa4>)
 800126a:	f001 f897 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <HAL_UART_MspInit+0xa4>)
 8001284:	f001 f88a 	bl	800239c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2025      	movs	r0, #37	@ 0x25
 800128e:	f000 fdac 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001292:	2025      	movs	r0, #37	@ 0x25
 8001294:	f000 fdc5 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010800 	.word	0x40010800

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f89c 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA1_Channel1_IRQHandler+0x10>)
 800130a:	f000 ff13 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200003f0 	.word	0x200003f0

08001318 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800131e:	f001 fc5c 	bl	8002bda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000c50 	.word	0x20000c50

0800132c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM1_UP_IRQHandler+0x10>)
 8001332:	f003 fe03 	bl	8004f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000488 	.word	0x20000488

08001340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <USART1_IRQHandler+0x10>)
 8001346:	f004 f9cb 	bl	80056e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000518 	.word	0x20000518

08001354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff fff8 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480b      	ldr	r0, [pc, #44]	@ (8001394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001366:	490c      	ldr	r1, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001368:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <LoopFillZerobss+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800137c:	4c09      	ldr	r4, [pc, #36]	@ (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f009 fab5 	bl	800a8f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138e:	f7ff facf 	bl	8000930 <main>
  bx lr
 8001392:	4770      	bx	lr
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800139c:	0800a9d4 	.word	0x0800a9d4
  ldr r2, =_sbss
 80013a0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80013a4:	20001160 	.word	0x20001160

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_Init+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_Init+0x28>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 fd09 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fe08 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd21 	bl	8001e3e <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 fce9 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000008 	.word	0x20000008
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_IncTick+0x1c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x20>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_IncTick+0x20>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000008 	.word	0x20000008
 8001458:	20000578 	.word	0x20000578

0800145c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b02      	ldr	r3, [pc, #8]	@ (800146c <HAL_GetTick+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000578 	.word	0x20000578

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff0 	bl	800145c <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffe0 	bl	800145c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0be      	b.n	8001658 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fda2 	bl	8001040 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 faf5 	bl	8001aec <ADC_ConversionStop_Disable>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 8099 	bne.w	8001646 <HAL_ADC_Init+0x18e>
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 8095 	bne.w	8001646 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001524:	f023 0302 	bic.w	r3, r3, #2
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001538:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7b1b      	ldrb	r3, [r3, #12]
 800153e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001540:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	4313      	orrs	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001550:	d003      	beq.n	800155a <HAL_ADC_Init+0xa2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <HAL_ADC_Init+0xa8>
 800155a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155e:	e000      	b.n	8001562 <HAL_ADC_Init+0xaa>
 8001560:	2300      	movs	r3, #0
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d119      	bne.n	80015a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7b1b      	ldrb	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	3b01      	subs	r3, #1
 800157e:	035a      	lsls	r2, r3, #13
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	e00b      	b.n	80015a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	f043 0220 	orr.w	r2, r3, #32
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_ADC_Init+0x1a8>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d4:	d003      	beq.n	80015de <HAL_ADC_Init+0x126>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d104      	bne.n	80015e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	051b      	lsls	r3, r3, #20
 80015e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_ADC_Init+0x1ac>)
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d10b      	bne.n	8001624 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	f023 0303 	bic.w	r3, r3, #3
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001622:	e018      	b.n	8001656 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f023 0312 	bic.w	r3, r3, #18
 800162c:	f043 0210 	orr.w	r2, r3, #16
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001644:	e007      	b.n	8001656 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164a:	f043 0210 	orr.w	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	ffe1f7fd 	.word	0xffe1f7fd
 8001664:	ff1f0efe 	.word	0xff1f0efe

08001668 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a64      	ldr	r2, [pc, #400]	@ (8001810 <HAL_ADC_Start_DMA+0x1a8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_ADC_Start_DMA+0x24>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a63      	ldr	r2, [pc, #396]	@ (8001814 <HAL_ADC_Start_DMA+0x1ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d106      	bne.n	800169a <HAL_ADC_Start_DMA+0x32>
 800168c:	4b60      	ldr	r3, [pc, #384]	@ (8001810 <HAL_ADC_Start_DMA+0x1a8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 80b3 	bne.w	8001800 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_Start_DMA+0x40>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0ae      	b.n	8001806 <HAL_ADC_Start_DMA+0x19e>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f9c1 	bl	8001a38 <ADC_Enable>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 809a 	bne.w	80017f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a4e      	ldr	r2, [pc, #312]	@ (8001814 <HAL_ADC_Start_DMA+0x1ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <HAL_ADC_Start_DMA+0x84>
 80016e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001810 <HAL_ADC_Start_DMA+0x1a8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d115      	bne.n	8001718 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d026      	beq.n	8001754 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800170e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001716:	e01d      	b.n	8001754 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a39      	ldr	r2, [pc, #228]	@ (8001810 <HAL_ADC_Start_DMA+0x1a8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d004      	beq.n	8001738 <HAL_ADC_Start_DMA+0xd0>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a38      	ldr	r2, [pc, #224]	@ (8001814 <HAL_ADC_Start_DMA+0x1ac>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d10d      	bne.n	8001754 <HAL_ADC_Start_DMA+0xec>
 8001738:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <HAL_ADC_Start_DMA+0x1a8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800174c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001764:	f023 0206 	bic.w	r2, r3, #6
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800176c:	e002      	b.n	8001774 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a25      	ldr	r2, [pc, #148]	@ (8001818 <HAL_ADC_Start_DMA+0x1b0>)
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a24      	ldr	r2, [pc, #144]	@ (800181c <HAL_ADC_Start_DMA+0x1b4>)
 800178a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <HAL_ADC_Start_DMA+0x1b8>)
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0202 	mvn.w	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a18      	ldr	r0, [r3, #32]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	334c      	adds	r3, #76	@ 0x4c
 80017b8:	4619      	mov	r1, r3
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f000 fba5 	bl	8001f0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017cc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017d0:	d108      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80017e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017e2:	e00f      	b.n	8001804 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80017f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017f4:	e006      	b.n	8001804 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001804:	7dfb      	ldrb	r3, [r7, #23]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012400 	.word	0x40012400
 8001814:	40012800 	.word	0x40012800
 8001818:	08001b6f 	.word	0x08001b6f
 800181c:	08001beb 	.word	0x08001beb
 8001820:	08001c07 	.word	0x08001c07

08001824 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x20>
 8001864:	2302      	movs	r3, #2
 8001866:	e0dc      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1da>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d81c      	bhi.n	80018b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b05      	subs	r3, #5
 800188a:	221f      	movs	r2, #31
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	4019      	ands	r1, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b05      	subs	r3, #5
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b0:	e03c      	b.n	800192c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d81c      	bhi.n	80018f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b23      	subs	r3, #35	@ 0x23
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4019      	ands	r1, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	3b23      	subs	r3, #35	@ 0x23
 80018e6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80018f2:	e01b      	b.n	800192c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b41      	subs	r3, #65	@ 0x41
 8001906:	221f      	movs	r2, #31
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b41      	subs	r3, #65	@ 0x41
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b09      	cmp	r3, #9
 8001932:	d91c      	bls.n	800196e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68d9      	ldr	r1, [r3, #12]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	3b1e      	subs	r3, #30
 8001946:	2207      	movs	r2, #7
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6898      	ldr	r0, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	3b1e      	subs	r3, #30
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	e019      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	2207      	movs	r2, #7
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	4019      	ands	r1, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6898      	ldr	r0, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d003      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ae:	2b11      	cmp	r3, #17
 80019b0:	d132      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_ADC_ConfigChannel+0x1e4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d125      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d126      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d11a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <HAL_ADC_ConfigChannel+0x1e8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a13      	ldr	r2, [pc, #76]	@ (8001a34 <HAL_ADC_ConfigChannel+0x1ec>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9a      	lsrs	r2, r3, #18
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019f8:	e002      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f9      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x1b2>
 8001a06:	e007      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012400 	.word	0x40012400
 8001a30:	20000000 	.word	0x20000000
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d040      	beq.n	8001ad8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <ADC_Enable+0xac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <ADC_Enable+0xb0>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a74:	e002      	b.n	8001a7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a82:	f7ff fceb 	bl	800145c <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a88:	e01f      	b.n	8001aca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a8a:	f7ff fce7 	bl	800145c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d918      	bls.n	8001aca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d011      	beq.n	8001aca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e007      	b.n	8001ada <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d1d8      	bne.n	8001a8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d12e      	bne.n	8001b64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b16:	f7ff fca1 	bl	800145c <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b1c:	e01b      	b.n	8001b56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b1e:	f7ff fc9d 	bl	800145c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d914      	bls.n	8001b56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10d      	bne.n	8001b56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	f043 0210 	orr.w	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e007      	b.n	8001b66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d0dc      	beq.n	8001b1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d127      	bne.n	8001bd8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b9e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ba2:	d115      	bne.n	8001bd0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7fe fabb 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bd6:	e004      	b.n	8001be2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fe13 	bl	8001824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	f043 0204 	orr.w	r2, r3, #4
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fe02 	bl	8001836 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4906      	ldr	r1, [pc, #24]	@ (8001cd4 <__NVIC_EnableIRQ+0x34>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff90 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff2d 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff42 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff90 	bl	8001d2c <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5f 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff35 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e043      	b.n	8001ef6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_DMA_Init+0xa8>)
 8001e76:	4413      	add	r3, r2
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_DMA_Init+0xac>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	009a      	lsls	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_DMA_Init+0xb0>)
 8001e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ea2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ea6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	bffdfff8 	.word	0xbffdfff8
 8001f04:	cccccccd 	.word	0xcccccccd
 8001f08:	40020000 	.word	0x40020000

08001f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Start_IT+0x20>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e04b      	b.n	8001fc4 <HAL_DMA_Start_IT+0xb8>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d13a      	bne.n	8001fb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f9eb 	bl	8002340 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 020e 	orr.w	r2, r2, #14
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e00f      	b.n	8001fa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 020a 	orr.w	r2, r2, #10
 8001fa2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e005      	b.n	8001fc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d008      	beq.n	8001ff6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e020      	b.n	8002038 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020e 	bic.w	r2, r2, #14
 8002004:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
	...

08002044 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d005      	beq.n	8002068 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2204      	movs	r2, #4
 8002060:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e051      	b.n	800210c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020e 	bic.w	r2, r2, #14
 8002076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	@ (8002118 <HAL_DMA_Abort_IT+0xd4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d029      	beq.n	80020e6 <HAL_DMA_Abort_IT+0xa2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_DMA_Abort_IT+0xd8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x9e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_DMA_Abort_IT+0xdc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_Abort_IT+0x98>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_DMA_Abort_IT+0xe0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d012      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x92>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_DMA_Abort_IT+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00a      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x8c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_DMA_Abort_IT+0xe8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d102      	bne.n	80020ca <HAL_DMA_Abort_IT+0x86>
 80020c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020c8:	e00e      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020ce:	e00b      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020d4:	e008      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	e005      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e0:	e002      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020e2:	2310      	movs	r3, #16
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_Abort_IT+0xa4>
 80020e6:	2301      	movs	r3, #1
 80020e8:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_DMA_Abort_IT+0xec>)
 80020ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
    } 
  }
  return status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40020008 	.word	0x40020008
 800211c:	4002001c 	.word	0x4002001c
 8002120:	40020030 	.word	0x40020030
 8002124:	40020044 	.word	0x40020044
 8002128:	40020058 	.word	0x40020058
 800212c:	4002006c 	.word	0x4002006c
 8002130:	40020000 	.word	0x40020000

08002134 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	2204      	movs	r2, #4
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d04f      	beq.n	80021fc <HAL_DMA_IRQHandler+0xc8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d04a      	beq.n	80021fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a66      	ldr	r2, [pc, #408]	@ (8002324 <HAL_DMA_IRQHandler+0x1f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d029      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xae>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_DMA_IRQHandler+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <HAL_DMA_IRQHandler+0xaa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a63      	ldr	r2, [pc, #396]	@ (800232c <HAL_DMA_IRQHandler+0x1f8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0xa4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a62      	ldr	r2, [pc, #392]	@ (8002330 <HAL_DMA_IRQHandler+0x1fc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d012      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x9e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a60      	ldr	r2, [pc, #384]	@ (8002334 <HAL_DMA_IRQHandler+0x200>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00a      	beq.n	80021cc <HAL_DMA_IRQHandler+0x98>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002338 <HAL_DMA_IRQHandler+0x204>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x92>
 80021c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c4:	e00e      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021ca:	e00b      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021d0:	e008      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021d6:	e005      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021dc:	e002      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021de:	2340      	movs	r3, #64	@ 0x40
 80021e0:	e000      	b.n	80021e4 <HAL_DMA_IRQHandler+0xb0>
 80021e2:	2304      	movs	r3, #4
 80021e4:	4a55      	ldr	r2, [pc, #340]	@ (800233c <HAL_DMA_IRQHandler+0x208>)
 80021e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8094 	beq.w	800231a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	e08e      	b.n	800231a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2202      	movs	r2, #2
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d056      	beq.n	80022ba <HAL_DMA_IRQHandler+0x186>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d051      	beq.n	80022ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020a 	bic.w	r2, r2, #10
 8002232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a38      	ldr	r2, [pc, #224]	@ (8002324 <HAL_DMA_IRQHandler+0x1f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d029      	beq.n	800229a <HAL_DMA_IRQHandler+0x166>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a37      	ldr	r2, [pc, #220]	@ (8002328 <HAL_DMA_IRQHandler+0x1f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_DMA_IRQHandler+0x162>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a35      	ldr	r2, [pc, #212]	@ (800232c <HAL_DMA_IRQHandler+0x1f8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01a      	beq.n	8002290 <HAL_DMA_IRQHandler+0x15c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a34      	ldr	r2, [pc, #208]	@ (8002330 <HAL_DMA_IRQHandler+0x1fc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d012      	beq.n	800228a <HAL_DMA_IRQHandler+0x156>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a32      	ldr	r2, [pc, #200]	@ (8002334 <HAL_DMA_IRQHandler+0x200>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00a      	beq.n	8002284 <HAL_DMA_IRQHandler+0x150>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a31      	ldr	r2, [pc, #196]	@ (8002338 <HAL_DMA_IRQHandler+0x204>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d102      	bne.n	800227e <HAL_DMA_IRQHandler+0x14a>
 8002278:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800227c:	e00e      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 800227e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002282:	e00b      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 8002284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002288:	e008      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 800228a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228e:	e005      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 8002290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002294:	e002      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 8002296:	2320      	movs	r3, #32
 8002298:	e000      	b.n	800229c <HAL_DMA_IRQHandler+0x168>
 800229a:	2302      	movs	r3, #2
 800229c:	4a27      	ldr	r2, [pc, #156]	@ (800233c <HAL_DMA_IRQHandler+0x208>)
 800229e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d034      	beq.n	800231a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022b8:	e02f      	b.n	800231a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_DMA_IRQHandler+0x1e8>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020e 	bic.w	r2, r2, #14
 80022e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    }
  }
  return;
 800231a:	bf00      	nop
 800231c:	bf00      	nop
}
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020008 	.word	0x40020008
 8002328:	4002001c 	.word	0x4002001c
 800232c:	40020030 	.word	0x40020030
 8002330:	40020044 	.word	0x40020044
 8002334:	40020058 	.word	0x40020058
 8002338:	4002006c 	.word	0x4002006c
 800233c:	40020000 	.word	0x40020000

08002340 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b10      	cmp	r3, #16
 800236c:	d108      	bne.n	8002380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800237e:	e007      	b.n	8002390 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
	...

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b08b      	sub	sp, #44	@ 0x2c
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ae:	e169      	b.n	8002684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b0:	2201      	movs	r2, #1
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 8158 	bne.w	800267e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a9a      	ldr	r2, [pc, #616]	@ (800263c <HAL_GPIO_Init+0x2a0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d05e      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
 80023d8:	4a98      	ldr	r2, [pc, #608]	@ (800263c <HAL_GPIO_Init+0x2a0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d875      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 80023de:	4a98      	ldr	r2, [pc, #608]	@ (8002640 <HAL_GPIO_Init+0x2a4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d058      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
 80023e4:	4a96      	ldr	r2, [pc, #600]	@ (8002640 <HAL_GPIO_Init+0x2a4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d86f      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 80023ea:	4a96      	ldr	r2, [pc, #600]	@ (8002644 <HAL_GPIO_Init+0x2a8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d052      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
 80023f0:	4a94      	ldr	r2, [pc, #592]	@ (8002644 <HAL_GPIO_Init+0x2a8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d869      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 80023f6:	4a94      	ldr	r2, [pc, #592]	@ (8002648 <HAL_GPIO_Init+0x2ac>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04c      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
 80023fc:	4a92      	ldr	r2, [pc, #584]	@ (8002648 <HAL_GPIO_Init+0x2ac>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d863      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 8002402:	4a92      	ldr	r2, [pc, #584]	@ (800264c <HAL_GPIO_Init+0x2b0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d046      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
 8002408:	4a90      	ldr	r2, [pc, #576]	@ (800264c <HAL_GPIO_Init+0x2b0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d85d      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 800240e:	2b12      	cmp	r3, #18
 8002410:	d82a      	bhi.n	8002468 <HAL_GPIO_Init+0xcc>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d859      	bhi.n	80024ca <HAL_GPIO_Init+0x12e>
 8002416:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <HAL_GPIO_Init+0x80>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002497 	.word	0x08002497
 8002420:	08002471 	.word	0x08002471
 8002424:	08002483 	.word	0x08002483
 8002428:	080024c5 	.word	0x080024c5
 800242c:	080024cb 	.word	0x080024cb
 8002430:	080024cb 	.word	0x080024cb
 8002434:	080024cb 	.word	0x080024cb
 8002438:	080024cb 	.word	0x080024cb
 800243c:	080024cb 	.word	0x080024cb
 8002440:	080024cb 	.word	0x080024cb
 8002444:	080024cb 	.word	0x080024cb
 8002448:	080024cb 	.word	0x080024cb
 800244c:	080024cb 	.word	0x080024cb
 8002450:	080024cb 	.word	0x080024cb
 8002454:	080024cb 	.word	0x080024cb
 8002458:	080024cb 	.word	0x080024cb
 800245c:	080024cb 	.word	0x080024cb
 8002460:	08002479 	.word	0x08002479
 8002464:	0800248d 	.word	0x0800248d
 8002468:	4a79      	ldr	r2, [pc, #484]	@ (8002650 <HAL_GPIO_Init+0x2b4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800246e:	e02c      	b.n	80024ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e029      	b.n	80024cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	623b      	str	r3, [r7, #32]
          break;
 8002480:	e024      	b.n	80024cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	3308      	adds	r3, #8
 8002488:	623b      	str	r3, [r7, #32]
          break;
 800248a:	e01f      	b.n	80024cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	330c      	adds	r3, #12
 8002492:	623b      	str	r3, [r7, #32]
          break;
 8002494:	e01a      	b.n	80024cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800249e:	2304      	movs	r3, #4
 80024a0:	623b      	str	r3, [r7, #32]
          break;
 80024a2:	e013      	b.n	80024cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ac:	2308      	movs	r3, #8
 80024ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	611a      	str	r2, [r3, #16]
          break;
 80024b6:	e009      	b.n	80024cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	615a      	str	r2, [r3, #20]
          break;
 80024c2:	e003      	b.n	80024cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
          break;
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x130>
          break;
 80024ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2bff      	cmp	r3, #255	@ 0xff
 80024d0:	d801      	bhi.n	80024d6 <HAL_GPIO_Init+0x13a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	e001      	b.n	80024da <HAL_GPIO_Init+0x13e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d802      	bhi.n	80024e8 <HAL_GPIO_Init+0x14c>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	e002      	b.n	80024ee <HAL_GPIO_Init+0x152>
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	3b08      	subs	r3, #8
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	210f      	movs	r1, #15
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	6a39      	ldr	r1, [r7, #32]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	431a      	orrs	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80b1 	beq.w	800267e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800251c:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a4c      	ldr	r2, [pc, #304]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002534:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_GPIO_Init+0x2bc>)
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a40      	ldr	r2, [pc, #256]	@ (800265c <HAL_GPIO_Init+0x2c0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_GPIO_Init+0x1ec>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a3f      	ldr	r2, [pc, #252]	@ (8002660 <HAL_GPIO_Init+0x2c4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00d      	beq.n	8002584 <HAL_GPIO_Init+0x1e8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3e      	ldr	r2, [pc, #248]	@ (8002664 <HAL_GPIO_Init+0x2c8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <HAL_GPIO_Init+0x2cc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_GPIO_Init+0x1e0>
 8002578:	2303      	movs	r3, #3
 800257a:	e006      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 800257c:	2304      	movs	r3, #4
 800257e:	e004      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002588:	2300      	movs	r3, #0
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259a:	492f      	ldr	r1, [pc, #188]	@ (8002658 <HAL_GPIO_Init+0x2bc>)
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	492c      	ldr	r1, [pc, #176]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	4928      	ldr	r1, [pc, #160]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025dc:	4b23      	ldr	r3, [pc, #140]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4922      	ldr	r1, [pc, #136]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	491e      	ldr	r1, [pc, #120]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4918      	ldr	r1, [pc, #96]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	43db      	mvns	r3, r3
 800261a:	4914      	ldr	r1, [pc, #80]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 800261c:	4013      	ands	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d021      	beq.n	8002670 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	490e      	ldr	r1, [pc, #56]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e021      	b.n	800267e <HAL_GPIO_Init+0x2e2>
 800263a:	bf00      	nop
 800263c:	10320000 	.word	0x10320000
 8002640:	10310000 	.word	0x10310000
 8002644:	10220000 	.word	0x10220000
 8002648:	10210000 	.word	0x10210000
 800264c:	10120000 	.word	0x10120000
 8002650:	10110000 	.word	0x10110000
 8002654:	40021000 	.word	0x40021000
 8002658:	40010000 	.word	0x40010000
 800265c:	40010800 	.word	0x40010800
 8002660:	40010c00 	.word	0x40010c00
 8002664:	40011000 	.word	0x40011000
 8002668:	40011400 	.word	0x40011400
 800266c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	43db      	mvns	r3, r3
 8002678:	4909      	ldr	r1, [pc, #36]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 800267a:	4013      	ands	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	3301      	adds	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	f47f ae8e 	bne.w	80023b0 <HAL_GPIO_Init+0x14>
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	372c      	adds	r7, #44	@ 0x2c
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40010400 	.word	0x40010400

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43d9      	mvns	r1, r3
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	400b      	ands	r3, r1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e12b      	b.n	8002972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fcee 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800276a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800276c:	f002 fa48 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a81      	ldr	r2, [pc, #516]	@ (800297c <HAL_I2C_Init+0x274>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d807      	bhi.n	800278c <HAL_I2C_Init+0x84>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a80      	ldr	r2, [pc, #512]	@ (8002980 <HAL_I2C_Init+0x278>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e006      	b.n	800279a <HAL_I2C_Init+0x92>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a7d      	ldr	r2, [pc, #500]	@ (8002984 <HAL_I2C_Init+0x27c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0e7      	b.n	8002972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a78      	ldr	r2, [pc, #480]	@ (8002988 <HAL_I2C_Init+0x280>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_I2C_Init+0x274>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d802      	bhi.n	80027dc <HAL_I2C_Init+0xd4>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	e009      	b.n	80027f0 <HAL_I2C_Init+0xe8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a69      	ldr	r2, [pc, #420]	@ (800298c <HAL_I2C_Init+0x284>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002802:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	495c      	ldr	r1, [pc, #368]	@ (800297c <HAL_I2C_Init+0x274>)
 800280c:	428b      	cmp	r3, r1
 800280e:	d819      	bhi.n	8002844 <HAL_I2C_Init+0x13c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e59      	subs	r1, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fbb1 f3f3 	udiv	r3, r1, r3
 800281e:	1c59      	adds	r1, r3, #1
 8002820:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002824:	400b      	ands	r3, r1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_I2C_Init+0x138>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e59      	subs	r1, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fbb1 f3f3 	udiv	r3, r1, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283e:	e051      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002840:	2304      	movs	r3, #4
 8002842:	e04f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_I2C_Init+0x168>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e012      	b.n	8002896 <HAL_I2C_Init+0x18e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x196>
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_Init+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002912:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6911      	ldr	r1, [r2, #16]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	000186a0 	.word	0x000186a0
 8002980:	001e847f 	.word	0x001e847f
 8002984:	003d08ff 	.word	0x003d08ff
 8002988:	431bde83 	.word	0x431bde83
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b08b      	sub	sp, #44	@ 0x2c
 8002994:	af06      	add	r7, sp, #24
 8002996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0f1      	b.n	8002b86 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f007 fcec 	bl	800a394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fbc1 	bl	8006150 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	687e      	ldr	r6, [r7, #4]
 80029d6:	466d      	mov	r5, sp
 80029d8:	f106 0410 	add.w	r4, r6, #16
 80029dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	1d33      	adds	r3, r6, #4
 80029e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e8:	6838      	ldr	r0, [r7, #0]
 80029ea:	f003 fb8b 	bl	8006104 <USB_CoreInit>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0c2      	b.n	8002b86 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fbbc 	bl	8006184 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e040      	b.n	8002a94 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	3301      	adds	r3, #1
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	3338      	adds	r3, #56	@ 0x38
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	333c      	adds	r3, #60	@ 0x3c
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3340      	adds	r3, #64	@ 0x40
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	3301      	adds	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3b9      	bcc.n	8002a12 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e044      	b.n	8002b2e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d3b5      	bcc.n	8002aa4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	687e      	ldr	r6, [r7, #4]
 8002b40:	466d      	mov	r5, sp
 8002b42:	f106 0410 	add.w	r4, r6, #16
 8002b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	1d33      	adds	r3, r6, #4
 8002b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f003 fb22 	bl	800619c <USB_DevInit>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00d      	b.n	8002b86 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 fda3 	bl	80086ca <USB_DevDisconnect>

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_PCD_Start+0x16>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e016      	b.n	8002bd2 <HAL_PCD_Start+0x44>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fab7 	bl	8006124 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f007 fe5e 	bl	800a87a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f005 fd77 	bl	80086b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b088      	sub	sp, #32
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f005 fd79 	bl	80086de <USB_ReadInterrupts>
 8002bec:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb1b 	bl	8003234 <PCD_EP_ISR_Handler>

    return;
 8002bfe:	e119      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d013      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f007 fc31 	bl	800a48a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f905 	bl	8002e3a <HAL_PCD_SetAddress>

    return;
 8002c30:	e100      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00c      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c54:	e0ee      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c72:	b292      	uxth	r2, r2
 8002c74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c78:	e0dc      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d027      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0208 	bic.w	r2, r2, #8
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f007 fc21 	bl	800a4fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cd2:	e0af      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8083 	beq.w	8002de6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e010      	b.n	8002d08 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	3320      	adds	r3, #32
 8002cfc:	443b      	add	r3, r7
 8002cfe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	3301      	adds	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	2b07      	cmp	r3, #7
 8002d0c:	d9eb      	bls.n	8002ce6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	b292      	uxth	r2, r2
 8002d22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d3e:	bf00      	nop
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f6      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d64:	b292      	uxth	r2, r2
 8002d66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e00f      	b.n	8002d90 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4611      	mov	r1, r2
 8002d78:	7ffa      	ldrb	r2, [r7, #31]
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	440a      	add	r2, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	3320      	adds	r3, #32
 8002d82:	443b      	add	r3, r7
 8002d84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d88:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	7ffb      	ldrb	r3, [r7, #31]
 8002d92:	2b07      	cmp	r3, #7
 8002d94:	d9ec      	bls.n	8002d70 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0208 	orr.w	r2, r2, #8
 8002da8:	b292      	uxth	r2, r2
 8002daa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0204 	orr.w	r2, r2, #4
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f007 fb72 	bl	800a4c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002de4:	e026      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00f      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e02:	b292      	uxth	r2, r2
 8002e04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f007 fb30 	bl	800a46e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e0e:	e011      	b.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e32:	bf00      	nop
  }
}
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_SetAddress+0x1a>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e013      	b.n	8002e7c <HAL_PCD_SetAddress+0x42>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 fc0f 	bl	8008690 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	70fb      	strb	r3, [r7, #3]
 8002e96:	460b      	mov	r3, r1
 8002e98:	803b      	strh	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0e      	bge.n	8002ec8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	705a      	strb	r2, [r3, #1]
 8002ec6:	e00e      	b.n	8002ee6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 0207 	and.w	r2, r3, #7
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef2:	883a      	ldrh	r2, [r7, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	78ba      	ldrb	r2, [r7, #2]
 8002efc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002efe:	78bb      	ldrb	r3, [r7, #2]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d102      	bne.n	8002f0a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_EP_Open+0x94>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e00e      	b.n	8002f36 <HAL_PCD_EP_Open+0xb2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68f9      	ldr	r1, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 f958 	bl	80061dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002f34:	7afb      	ldrb	r3, [r7, #11]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da0e      	bge.n	8002f70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	705a      	strb	r2, [r3, #1]
 8002f6e:	e00e      	b.n	8002f8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 0207 	and.w	r2, r3, #7
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_PCD_EP_Close+0x6a>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e00e      	b.n	8002fc6 <HAL_PCD_EP_Close+0x88>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fcd0 	bl	800695c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f003 0207 	and.w	r2, r3, #7
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	b2da      	uxtb	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fe87 	bl	8006d34 <USB_EPStartXfer>

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6979      	ldr	r1, [r7, #20]
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fe39 	bl	8006d34 <USB_EPStartXfer>

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d901      	bls.n	80030ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e04c      	b.n	8003184 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0e      	bge.n	8003110 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	705a      	strb	r2, [r3, #1]
 800310e:	e00c      	b.n	800312a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_EP_SetStall+0x7e>
 8003146:	2302      	movs	r3, #2
 8003148:	e01c      	b.n	8003184 <HAL_PCD_EP_SetStall+0xb8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f005 f99c 	bl	8008496 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f005 fac1 	bl	80086fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d901      	bls.n	80031aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e040      	b.n	800322c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0e      	bge.n	80031d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	705a      	strb	r2, [r3, #1]
 80031ce:	e00e      	b.n	80031ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 0207 	and.w	r2, r3, #7
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_PCD_EP_ClrStall+0x82>
 800320a:	2302      	movs	r3, #2
 800320c:	e00e      	b.n	800322c <HAL_PCD_EP_ClrStall+0xa0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	f005 f98a 	bl	8008536 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b096      	sub	sp, #88	@ 0x58
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800323c:	e3be      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003246:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800324a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003258:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8178 	bne.w	8003552 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003262:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	d151      	bne.n	8003312 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	81fb      	strh	r3, [r7, #14]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3328      	adds	r3, #40	@ 0x28
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	3302      	adds	r3, #2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	441a      	add	r2, r3
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032d2:	2100      	movs	r1, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f007 f8b0 	bl	800a43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 836a 	beq.w	80039bc <PCD_EP_ISR_Handler+0x788>
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 8365 	bne.w	80039bc <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003310:	e354      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003318:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003324:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d034      	beq.n	800339a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	3306      	adds	r3, #6
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003368:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800336a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800336e:	b29b      	uxth	r3, r3
 8003370:	f005 fa14 	bl	800879c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29a      	uxth	r2, r3
 800337c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003380:	4013      	ands	r3, r2
 8003382:	823b      	strh	r3, [r7, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	8a3a      	ldrh	r2, [r7, #16]
 800338a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800338e:	b292      	uxth	r2, r2
 8003390:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f007 f824 	bl	800a3e0 <HAL_PCD_SetupStageCallback>
 8003398:	e310      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800339a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f280 830c 	bge.w	80039bc <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033b0:	4013      	ands	r3, r2
 80033b2:	83fb      	strh	r3, [r7, #30]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	8bfa      	ldrh	r2, [r7, #30]
 80033ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033be:	b292      	uxth	r2, r2
 80033c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	3306      	adds	r3, #6
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d019      	beq.n	800342a <PCD_EP_ISR_Handler+0x1f6>
 80033f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800340e:	b29b      	uxth	r3, r3
 8003410:	f005 f9c4 	bl	800879c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	441a      	add	r2, r3
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003422:	2100      	movs	r1, #0
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f006 ffed 	bl	800a404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003434:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 82bd 	bne.w	80039bc <PCD_EP_ISR_Handler+0x788>
 8003442:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003446:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800344a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800344e:	f000 82b5 	beq.w	80039bc <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347c:	b29a      	uxth	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b3e      	cmp	r3, #62	@ 0x3e
 8003488:	d91d      	bls.n	80034c6 <PCD_EP_ISR_Handler+0x292>
 800348a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <PCD_EP_ISR_Handler+0x270>
 800349e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a0:	3b01      	subs	r3, #1
 80034a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4313      	orrs	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034be:	b29a      	uxth	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	e026      	b.n	8003514 <PCD_EP_ISR_Handler+0x2e0>
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <PCD_EP_ISR_Handler+0x2b0>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29a      	uxth	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	e017      	b.n	8003514 <PCD_EP_ISR_Handler+0x2e0>
 80034e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <PCD_EP_ISR_Handler+0x2ca>
 80034f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fa:	3301      	adds	r3, #1
 80034fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	b29b      	uxth	r3, r3
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	b29b      	uxth	r3, r3
 800350c:	4313      	orrs	r3, r2
 800350e:	b29a      	uxth	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003524:	827b      	strh	r3, [r7, #18]
 8003526:	8a7b      	ldrh	r3, [r7, #18]
 8003528:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800352c:	827b      	strh	r3, [r7, #18]
 800352e:	8a7b      	ldrh	r3, [r7, #18]
 8003530:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003534:	827b      	strh	r3, [r7, #18]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	8a7b      	ldrh	r3, [r7, #18]
 800353c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	8013      	strh	r3, [r2, #0]
 8003550:	e234      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003566:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800356a:	2b00      	cmp	r3, #0
 800356c:	f280 80fc 	bge.w	8003768 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29a      	uxth	r2, r3
 8003582:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003586:	4013      	ands	r3, r2
 8003588:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800359e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a2:	b292      	uxth	r2, r2
 80035a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035a6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	7b1b      	ldrb	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d125      	bne.n	8003610 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	3306      	adds	r3, #6
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80035f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8092 	beq.w	800371e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	6959      	ldr	r1, [r3, #20]
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	88da      	ldrh	r2, [r3, #6]
 8003606:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800360a:	f005 f8c7 	bl	800879c <USB_ReadPMA>
 800360e:	e086      	b.n	800371e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d10a      	bne.n	800362e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003618:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800361c:	461a      	mov	r2, r3
 800361e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9d9 	bl	80039d8 <HAL_PCD_EP_DB_Receive>
 8003626:	4603      	mov	r3, r0
 8003628:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800362c:	e077      	b.n	800371e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003648:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800365e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d024      	beq.n	80036d6 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	3302      	adds	r3, #2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80036b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d02e      	beq.n	800371e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c6:	6959      	ldr	r1, [r3, #20]
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	891a      	ldrh	r2, [r3, #8]
 80036cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036d0:	f005 f864 	bl	800879c <USB_ReadPMA>
 80036d4:	e023      	b.n	800371e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	3306      	adds	r3, #6
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	6959      	ldr	r1, [r3, #20]
 8003712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003714:	895a      	ldrh	r2, [r3, #10]
 8003716:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800371a:	f005 f83f 	bl	800879c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003726:	441a      	add	r2, r3
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003734:	441a      	add	r2, r3
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <PCD_EP_ISR_Handler+0x51a>
 8003742:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	d206      	bcs.n	800375c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f006 fe55 	bl	800a404 <HAL_PCD_DataOutStageCallback>
 800375a:	e005      	b.n	8003768 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fae6 	bl	8006d34 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800376c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8123 	beq.w	80039bc <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003776:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4413      	add	r3, r2
 8003788:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80037ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 80a2 	bne.w	8003914 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80037d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	7b1b      	ldrb	r3, [r3, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8093 	beq.w	8003906 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d046      	beq.n	800387a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d126      	bne.n	8003842 <PCD_EP_ISR_Handler+0x60e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	4413      	add	r3, r2
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	011a      	lsls	r2, r3, #4
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	4413      	add	r3, r2
 8003816:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	b29a      	uxth	r2, r3
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e061      	b.n	8003906 <PCD_EP_ISR_Handler+0x6d2>
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d15d      	bne.n	8003906 <PCD_EP_ISR_Handler+0x6d2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	4413      	add	r3, r2
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	4413      	add	r3, r2
 800386c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e045      	b.n	8003906 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d126      	bne.n	80038d6 <PCD_EP_ISR_Handler+0x6a2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389c:	4413      	add	r3, r2
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	011a      	lsls	r2, r3, #4
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	4413      	add	r3, r2
 80038aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	e017      	b.n	8003906 <PCD_EP_ISR_Handler+0x6d2>
 80038d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d113      	bne.n	8003906 <PCD_EP_ISR_Handler+0x6d2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ec:	4413      	add	r3, r2
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	011a      	lsls	r2, r3, #4
 80038f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	2200      	movs	r2, #0
 8003904:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f006 fd94 	bl	800a43a <HAL_PCD_DataInStageCallback>
 8003912:	e053      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d146      	bne.n	80039ae <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	3302      	adds	r3, #2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003948:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003954:	429a      	cmp	r2, r3
 8003956:	d907      	bls.n	8003968 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003960:	1ad2      	subs	r2, r2, r3
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e002      	b.n	800396e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f006 fd5c 	bl	800a43a <HAL_PCD_DataInStageCallback>
 8003982:	e01b      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800398c:	441a      	add	r2, r3
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800399a:	441a      	add	r2, r3
 800399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 f9c4 	bl	8006d34 <USB_EPStartXfer>
 80039ac:	e006      	b.n	80039bc <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039b2:	461a      	mov	r2, r3
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f91b 	bl	8003bf2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b21b      	sxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f6ff ac38 	blt.w	800323e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3758      	adds	r7, #88	@ 0x58
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d07e      	beq.n	8003aee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	3302      	adds	r3, #2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	8b7b      	ldrh	r3, [r7, #26]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d306      	bcc.n	8003a32 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	8b7b      	ldrh	r3, [r7, #26]
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	619a      	str	r2, [r3, #24]
 8003a30:	e002      	b.n	8003a38 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d123      	bne.n	8003a88 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	833b      	strh	r3, [r7, #24]
 8003a5c:	8b3b      	ldrh	r3, [r7, #24]
 8003a5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a62:	833b      	strh	r3, [r7, #24]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	8b3b      	ldrh	r3, [r7, #24]
 8003a74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01f      	beq.n	8003ad2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aac:	82fb      	strh	r3, [r7, #22]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8afb      	ldrh	r3, [r7, #22]
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8087 	beq.w	8003be8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	891a      	ldrh	r2, [r3, #8]
 8003ae6:	8b7b      	ldrh	r3, [r7, #26]
 8003ae8:	f004 fe58 	bl	800879c <USB_ReadPMA>
 8003aec:	e07c      	b.n	8003be8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	3306      	adds	r3, #6
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d306      	bcc.n	8003b30 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	8b7b      	ldrh	r3, [r7, #26]
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	619a      	str	r2, [r3, #24]
 8003b2e:	e002      	b.n	8003b36 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2200      	movs	r2, #0
 8003b34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d123      	bne.n	8003b86 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b58:	83fb      	strh	r3, [r7, #30]
 8003b5a:	8bfb      	ldrh	r3, [r7, #30]
 8003b5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b60:	83fb      	strh	r3, [r7, #30]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	8bfb      	ldrh	r3, [r7, #30]
 8003b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11f      	bne.n	8003bd0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	83bb      	strh	r3, [r7, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	8bbb      	ldrh	r3, [r7, #28]
 8003bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bd0:	8b7b      	ldrh	r3, [r7, #26]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6959      	ldr	r1, [r3, #20]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	895a      	ldrh	r2, [r3, #10]
 8003be2:	8b7b      	ldrh	r3, [r7, #26]
 8003be4:	f004 fdda 	bl	800879c <USB_ReadPMA>
    }
  }

  return count;
 8003be8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b0a4      	sub	sp, #144	@ 0x90
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 81dd 	beq.w	8003fc6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3302      	adds	r3, #2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c34:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d907      	bls.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c4c:	1ad2      	subs	r2, r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	e002      	b.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 80b9 	bne.w	8003dd6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d126      	bne.n	8003cba <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	4413      	add	r3, r2
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e01a      	b.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d116      	bne.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd6:	4413      	add	r3, r2
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	011a      	lsls	r2, r3, #4
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d126      	bne.n	8003d4c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011a      	lsls	r2, r3, #4
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e017      	b.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d113      	bne.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	4413      	add	r3, r2
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	011a      	lsls	r2, r3, #4
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4619      	mov	r1, r3
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f006 fb59 	bl	800a43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 82fc 	beq.w	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	82fb      	strh	r3, [r7, #22]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	8013      	strh	r3, [r2, #0]
 8003dd4:	e2da      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d021      	beq.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	f040 82ae 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e38:	441a      	add	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e46:	441a      	add	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d30b      	bcc.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	621a      	str	r2, [r3, #32]
 8003e6e:	e017      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e88:	e00a      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d165      	bne.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ebc:	4413      	add	r3, r2
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	4413      	add	r3, r2
 8003eca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ee6:	d91d      	bls.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x332>
 8003ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x310>
 8003efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efe:	3b01      	subs	r3, #1
 8003f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	e044      	b.n	8003fae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x350>
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	e035      	b.n	8003fae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f58:	3301      	adds	r3, #1
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e01c      	b.n	8003fae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f90:	4413      	add	r3, r2
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	011a      	lsls	r2, r3, #4
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6959      	ldr	r1, [r3, #20]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	891a      	ldrh	r2, [r3, #8]
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f004 fba7 	bl	8008712 <USB_WritePMA>
 8003fc4:	e1e2      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3306      	adds	r3, #6
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d307      	bcc.n	800400e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	619a      	str	r2, [r3, #24]
 800400c:	e002      	b.n	8004014 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 80c0 	bne.w	800419e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d126      	bne.n	8004074 <HAL_PCD_EP_DB_Transmit+0x482>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800403a:	4413      	add	r3, r2
 800403c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	011a      	lsls	r2, r3, #4
 8004044:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004046:	4413      	add	r3, r2
 8004048:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800404c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800404e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	b29a      	uxth	r2, r3
 800405a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406c:	b29a      	uxth	r2, r3
 800406e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	e01a      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d116      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	667b      	str	r3, [r7, #100]	@ 0x64
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004090:	4413      	add	r3, r2
 8004092:	667b      	str	r3, [r7, #100]	@ 0x64
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	011a      	lsls	r2, r3, #4
 800409a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800409c:	4413      	add	r3, r2
 800409e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a6:	2200      	movs	r2, #0
 80040a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d12b      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x51e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040cc:	4413      	add	r3, r2
 80040ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	011a      	lsls	r2, r3, #4
 80040d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d8:	4413      	add	r3, r2
 80040da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004106:	b29a      	uxth	r2, r3
 8004108:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	e017      	b.n	8004140 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d113      	bne.n	8004140 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004126:	4413      	add	r3, r2
 8004128:	677b      	str	r3, [r7, #116]	@ 0x74
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	011a      	lsls	r2, r3, #4
 8004130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004132:	4413      	add	r3, r2
 8004134:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004138:	673b      	str	r3, [r7, #112]	@ 0x70
 800413a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f006 f977 	bl	800a43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 811a 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
 800419c:	e0f6      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d121      	bne.n	80041ec <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 80ca 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004200:	441a      	add	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800420e:	441a      	add	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d30b      	bcc.n	8004238 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004230:	1ad2      	subs	r2, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	e017      	b.n	8004268 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d108      	bne.n	8004252 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004240:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004250:	e00a      	b.n	8004268 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	657b      	str	r3, [r7, #84]	@ 0x54
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d165      	bne.n	8004342 <HAL_PCD_EP_DB_Transmit+0x750>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428a:	4413      	add	r3, r2
 800428c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	011a      	lsls	r2, r3, #4
 8004294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004296:	4413      	add	r3, r2
 8004298:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800429c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800429e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042b4:	d91d      	bls.n	80042f2 <HAL_PCD_EP_DB_Transmit+0x700>
 80042b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80042ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042cc:	3b01      	subs	r3, #1
 80042ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042d8:	b29b      	uxth	r3, r3
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4313      	orrs	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	e041      	b.n	8004376 <HAL_PCD_EP_DB_Transmit+0x784>
 80042f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_PCD_EP_DB_Transmit+0x71e>
 80042fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004308:	b29a      	uxth	r2, r3
 800430a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e032      	b.n	8004376 <HAL_PCD_EP_DB_Transmit+0x784>
 8004310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_PCD_EP_DB_Transmit+0x738>
 8004324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004326:	3301      	adds	r3, #1
 8004328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800432a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29a      	uxth	r2, r3
 8004330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004332:	b29b      	uxth	r3, r3
 8004334:	029b      	lsls	r3, r3, #10
 8004336:	b29b      	uxth	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b29a      	uxth	r2, r3
 800433c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	e019      	b.n	8004376 <HAL_PCD_EP_DB_Transmit+0x784>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <HAL_PCD_EP_DB_Transmit+0x784>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	4413      	add	r3, r2
 800435a:	657b      	str	r3, [r7, #84]	@ 0x54
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	011a      	lsls	r2, r3, #4
 8004362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004364:	4413      	add	r3, r2
 8004366:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800436a:	653b      	str	r3, [r7, #80]	@ 0x50
 800436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004370:	b29a      	uxth	r2, r3
 8004372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004374:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6959      	ldr	r1, [r3, #20]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	895a      	ldrh	r2, [r3, #10]
 8004382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004386:	b29b      	uxth	r3, r3
 8004388:	f004 f9c3 	bl	8008712 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a6:	82bb      	strh	r3, [r7, #20]
 80043a8:	8abb      	ldrh	r3, [r7, #20]
 80043aa:	f083 0310 	eor.w	r3, r3, #16
 80043ae:	82bb      	strh	r3, [r7, #20]
 80043b0:	8abb      	ldrh	r3, [r7, #20]
 80043b2:	f083 0320 	eor.w	r3, r3, #32
 80043b6:	82bb      	strh	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	8abb      	ldrh	r3, [r7, #20]
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3790      	adds	r7, #144	@ 0x90
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	817b      	strh	r3, [r7, #10]
 80043f4:	4613      	mov	r3, r2
 80043f6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004404:	897b      	ldrh	r3, [r7, #10]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e009      	b.n	8004430 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800441c:	897a      	ldrh	r2, [r7, #10]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	b29a      	uxth	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	80da      	strh	r2, [r3, #6]
 8004444:	e00b      	b.n	800445e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2201      	movs	r2, #1
 800444a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	b29a      	uxth	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
	...

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e272      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b92      	ldr	r3, [pc, #584]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004498:	4b8f      	ldr	r3, [pc, #572]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d112      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
 80044a4:	4b8c      	ldr	r3, [pc, #560]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b89      	ldr	r3, [pc, #548]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06c      	beq.n	8004598 <HAL_RCC_OscConfig+0x12c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e24c      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x76>
 80044d4:	4b80      	ldr	r3, [pc, #512]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7f      	ldr	r2, [pc, #508]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e02e      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b7b      	ldr	r3, [pc, #492]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7a      	ldr	r2, [pc, #488]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a77      	ldr	r2, [pc, #476]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0xbc>
 800450e:	4b72      	ldr	r3, [pc, #456]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6f      	ldr	r3, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6e      	ldr	r2, [pc, #440]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004528:	4b6b      	ldr	r3, [pc, #428]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6a      	ldr	r2, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b68      	ldr	r3, [pc, #416]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a67      	ldr	r2, [pc, #412]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fc ff88 	bl	800145c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fc ff84 	bl	800145c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e200      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5d      	ldr	r3, [pc, #372]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xe4>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fc ff74 	bl	800145c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fc ff70 	bl	800145c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1ec      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x10c>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b4c      	ldr	r3, [pc, #304]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045b2:	4b49      	ldr	r3, [pc, #292]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
 80045be:	4b46      	ldr	r3, [pc, #280]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1c0      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4939      	ldr	r1, [pc, #228]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b36      	ldr	r3, [pc, #216]	@ (80046dc <HAL_RCC_OscConfig+0x270>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fc ff29 	bl	800145c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7fc ff25 	bl	800145c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1a1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2d      	ldr	r3, [pc, #180]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4927      	ldr	r1, [pc, #156]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b26      	ldr	r3, [pc, #152]	@ (80046dc <HAL_RCC_OscConfig+0x270>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fc ff08 	bl	800145c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fc ff04 	bl	800145c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e180      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b17      	ldr	r3, [pc, #92]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fc fee8 	bl	800145c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fc fee4 	bl	800145c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e160      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f000 face 	bl	8004c50 <RCC_Delay>
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fc fece 	bl	800145c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c2:	e00f      	b.n	80046e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fc feca 	bl	800145c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e146      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	42420000 	.word	0x42420000
 80046e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b92      	ldr	r3, [pc, #584]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e9      	bne.n	80046c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a6 	beq.w	800484a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b8b      	ldr	r3, [pc, #556]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4a87      	ldr	r2, [pc, #540]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004718:	61d3      	str	r3, [r2, #28]
 800471a:	4b85      	ldr	r3, [pc, #532]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b82      	ldr	r3, [pc, #520]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d118      	bne.n	8004768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b7f      	ldr	r3, [pc, #508]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7e      	ldr	r2, [pc, #504]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fc fe8b 	bl	800145c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fc fe87 	bl	800145c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	@ 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e103      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b75      	ldr	r3, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x312>
 8004770:	4b6f      	ldr	r3, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6213      	str	r3, [r2, #32]
 800477c:	e02d      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x334>
 8004786:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a69      	ldr	r2, [pc, #420]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b67      	ldr	r3, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a66      	ldr	r2, [pc, #408]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	e01c      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x356>
 80047a8:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a60      	ldr	r2, [pc, #384]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6213      	str	r3, [r2, #32]
 80047b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a5a      	ldr	r2, [pc, #360]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	4b58      	ldr	r3, [pc, #352]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a57      	ldr	r2, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e2:	f7fc fe3b 	bl	800145c <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fc fe37 	bl	800145c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0b1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b4b      	ldr	r3, [pc, #300]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCC_OscConfig+0x37e>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fc fe25 	bl	800145c <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fc fe21 	bl	800145c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e09b      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b3c      	ldr	r3, [pc, #240]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4a3b      	ldr	r2, [pc, #236]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8087 	beq.w	8004962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d061      	beq.n	8004924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d146      	bne.n	80048f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b33      	ldr	r3, [pc, #204]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fc fdf5 	bl	800145c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fc fdf1 	bl	800145c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e06d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4921      	ldr	r1, [pc, #132]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a19      	ldr	r1, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	430b      	orrs	r3, r1
 80048c2:	491b      	ldr	r1, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fc fdc5 	bl	800145c <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fc fdc1 	bl	800145c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x46a>
 80048f4:	e035      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fc fdae 	bl	800145c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fc fdaa 	bl	800145c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e026      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x498>
 8004922:	e01e      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e019      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_OscConfig+0x500>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0d0      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b67      	ldr	r3, [pc, #412]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4965      	ldr	r1, [pc, #404]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b63      	ldr	r3, [pc, #396]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b8      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049cc:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a58      	ldr	r2, [pc, #352]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e4:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a52      	ldr	r2, [pc, #328]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b50      	ldr	r3, [pc, #320]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	494d      	ldr	r1, [pc, #308]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d040      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b47      	ldr	r3, [pc, #284]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d115      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2e:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e073      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06b      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4936      	ldr	r1, [pc, #216]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fc fcfc 	bl	800145c <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fc fcf8 	bl	800145c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e053      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d210      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4922      	ldr	r1, [pc, #136]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e032      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4916      	ldr	r1, [pc, #88]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	490e      	ldr	r1, [pc, #56]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afe:	f000 f821 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	490a      	ldr	r1, [pc, #40]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	5ccb      	ldrb	r3, [r1, r3]
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1cc>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1d0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fc5a 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800a9a0 	.word	0x0800a9a0
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000004 	.word	0x20000004

08004b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x30>
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x36>
 8004b72:	e027      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	e027      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0c9b      	lsrs	r3, r3, #18
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b92:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0c5b      	lsrs	r3, r3, #17
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba6:	fb03 f202 	mul.w	r2, r3, r2
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e004      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	613b      	str	r3, [r7, #16]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc6:	613b      	str	r3, [r7, #16]
      break;
 8004bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bca:	693b      	ldr	r3, [r7, #16]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	0800a9b8 	.word	0x0800a9b8
 8004be4:	0800a9c8 	.word	0x0800a9c8
 8004be8:	003d0900 	.word	0x003d0900

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b02      	ldr	r3, [pc, #8]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	20000000 	.word	0x20000000

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c04:	f7ff fff2 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	0800a9b0 	.word	0x0800a9b0

08004c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c2c:	f7ff ffde 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	0adb      	lsrs	r3, r3, #11
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	@ (8004c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	0800a9b0 	.word	0x0800a9b0

08004c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <RCC_Delay+0x34>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <RCC_Delay+0x38>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c6c:	bf00      	nop
  }
  while (Delay --);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	60fa      	str	r2, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f9      	bne.n	8004c6c <RCC_Delay+0x1c>
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	20000000 	.word	0x20000000
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d07d      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cac:	4b4f      	ldr	r3, [pc, #316]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10d      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	61d3      	str	r3, [r2, #28]
 8004cc4:	4b49      	ldr	r3, [pc, #292]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	4b46      	ldr	r3, [pc, #280]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d118      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce0:	4b43      	ldr	r3, [pc, #268]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a42      	ldr	r2, [pc, #264]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cec:	f7fc fbb6 	bl	800145c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf4:	f7fc fbb2 	bl	800145c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e06d      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b3a      	ldr	r3, [pc, #232]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d12:	4b36      	ldr	r3, [pc, #216]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02e      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d027      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d30:	4b2e      	ldr	r3, [pc, #184]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d40:	4b2c      	ldr	r3, [pc, #176]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d46:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d56:	f7fc fb81 	bl	800145c <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fc fb7d 	bl	800145c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e036      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	4b1d      	ldr	r3, [pc, #116]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ee      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4917      	ldr	r1, [pc, #92]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	490b      	ldr	r1, [pc, #44]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4904      	ldr	r1, [pc, #16]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
 8004df4:	42420440 	.word	0x42420440

08004df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e041      	b.n	8004e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc f9b6 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 fa74 	bl	8005324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e03a      	b.n	8004f26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <HAL_TIM_Base_Start_IT+0x98>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x58>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eda:	d009      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x58>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x58>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xa0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d111      	bne.n	8004f14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d010      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	e007      	b.n	8004f24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800

08004f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0202 	mvn.w	r2, #2
 8004f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f9b4 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a7 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9b6 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0204 	mvn.w	r2, #4
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f98a 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f97d 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f98c 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0208 	mvn.w	r2, #8
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f960 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f953 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f962 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b10      	cmp	r3, #16
 800504c:	d122      	bne.n	8005094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d11b      	bne.n	8005094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0210 	mvn.w	r2, #16
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2208      	movs	r2, #8
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f936 	bl	80052ec <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f929 	bl	80052da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f938 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0201 	mvn.w	r2, #1
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb f874 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	2b80      	cmp	r3, #128	@ 0x80
 80050cc:	d10e      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d8:	2b80      	cmp	r3, #128	@ 0x80
 80050da:	d107      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa7b 	bl	80055e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8fc 	bl	8005310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b20      	cmp	r3, #32
 8005124:	d10e      	bne.n	8005144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d107      	bne.n	8005144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0220 	mvn.w	r2, #32
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa46 	bl	80055d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIM_ConfigClockSource+0x1c>
 8005164:	2302      	movs	r3, #2
 8005166:	e0b4      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x186>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a0:	d03e      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0xd4>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	f200 8087 	bhi.w	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ae:	f000 8086 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x172>
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b6:	d87f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b70      	cmp	r3, #112	@ 0x70
 80051ba:	d01a      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xa6>
 80051bc:	2b70      	cmp	r3, #112	@ 0x70
 80051be:	d87b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b60      	cmp	r3, #96	@ 0x60
 80051c2:	d050      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x11a>
 80051c4:	2b60      	cmp	r3, #96	@ 0x60
 80051c6:	d877      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b50      	cmp	r3, #80	@ 0x50
 80051ca:	d03c      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0xfa>
 80051cc:	2b50      	cmp	r3, #80	@ 0x50
 80051ce:	d873      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d058      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0x13a>
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d86f      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b30      	cmp	r3, #48	@ 0x30
 80051da:	d064      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051dc:	2b30      	cmp	r3, #48	@ 0x30
 80051de:	d86b      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d060      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d867      	bhi.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d05a      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	e062      	b.n	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	f000 f968 	bl	80054d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
      break;
 800521e:	e04f      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	f000 f951 	bl	80054d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005242:	609a      	str	r2, [r3, #8]
      break;
 8005244:	e03c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	461a      	mov	r2, r3
 8005254:	f000 f8c8 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2150      	movs	r1, #80	@ 0x50
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f91f 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8005264:	e02c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	461a      	mov	r2, r3
 8005274:	f000 f8e6 	bl	8005444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2160      	movs	r1, #96	@ 0x60
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f90f 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8005284:	e01c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 f8a8 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2140      	movs	r1, #64	@ 0x40
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f8ff 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 f8f6 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
	...

08005324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a29      	ldr	r2, [pc, #164]	@ (80053dc <TIM_Base_SetConfig+0xb8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a26      	ldr	r2, [pc, #152]	@ (80053e0 <TIM_Base_SetConfig+0xbc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a25      	ldr	r2, [pc, #148]	@ (80053e4 <TIM_Base_SetConfig+0xc0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <TIM_Base_SetConfig+0xb8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a19      	ldr	r2, [pc, #100]	@ (80053e0 <TIM_Base_SetConfig+0xbc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <TIM_Base_SetConfig+0xc0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a07      	ldr	r2, [pc, #28]	@ (80053dc <TIM_Base_SetConfig+0xb8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d103      	bne.n	80053cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800

080053e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 030a 	bic.w	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0210 	bic.w	r2, r3, #16
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	031b      	lsls	r3, r3, #12
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e046      	b.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a16      	ldr	r2, [pc, #88]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d009      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a10      	ldr	r2, [pc, #64]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10c      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800

080055d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e042      	b.n	800568c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb fdf2 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	@ 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fcd5 	bl	8005fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800564c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800565c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800566c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d112      	bne.n	80056d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_UART_Receive_IT+0x26>
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e00b      	b.n	80056d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fab7 	bl	8005c3e <UART_Start_Receive_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	e000      	b.n	80056d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b0ba      	sub	sp, #232	@ 0xe8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_UART_IRQHandler+0x66>
 8005732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb93 	bl	8005e6a <UART_Receive_IT>
      return;
 8005744:	e25b      	b.n	8005bfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80de 	beq.w	800590c <HAL_UART_IRQHandler+0x22c>
 8005750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005760:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80d1 	beq.w	800590c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_UART_IRQHandler+0xae>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_UART_IRQHandler+0xd2>
 800579a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f043 0202 	orr.w	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_UART_IRQHandler+0xf6>
 80057be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_UART_IRQHandler+0x126>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f043 0208 	orr.w	r2, r3, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 81f2 	beq.w	8005bf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_UART_IRQHandler+0x14e>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb1e 	bl	8005e6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <HAL_UART_IRQHandler+0x17a>
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04f      	beq.n	80058fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa28 	bl	8005cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d041      	beq.n	80058f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800588c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800589a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800589e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d9      	bne.n	800586e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ac0 <HAL_UART_IRQHandler+0x3e0>)
 80058c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fc fbb8 	bl	8002044 <HAL_DMA_Abort_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058e4:	4610      	mov	r0, r2
 80058e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00e      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f993 	bl	8005c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e00a      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f98f 	bl	8005c16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e006      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f98b 	bl	8005c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005906:	e175      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	bf00      	nop
    return;
 800590a:	e173      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	f040 814f 	bne.w	8005bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8148 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8141 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80b6 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8145 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005976:	429a      	cmp	r2, r3
 8005978:	f080 813e 	bcs.w	8005bf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005982:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b20      	cmp	r3, #32
 800598c:	f000 8088 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1d9      	bne.n	8005990 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3314      	adds	r3, #20
 80059e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e1      	bne.n	80059dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3314      	adds	r3, #20
 8005a38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e3      	bne.n	8005a18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a70:	f023 0310 	bic.w	r3, r3, #16
 8005a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e3      	bne.n	8005a5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fa96 	bl	8001fcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8b6 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005abc:	e09c      	b.n	8005bf8 <HAL_UART_IRQHandler+0x518>
 8005abe:	bf00      	nop
 8005ac0:	08005d75 	.word	0x08005d75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 808e 	beq.w	8005bfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8089 	beq.w	8005bfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e3      	bne.n	8005aea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	623b      	str	r3, [r7, #32]
   return(result);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e3      	bne.n	8005b22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b8c:	61fa      	str	r2, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f83b 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bb2:	e023      	b.n	8005bfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x4f4>
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8e5 	bl	8005d9c <UART_Transmit_IT>
    return;
 8005bd2:	e014      	b.n	8005bfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <HAL_UART_IRQHandler+0x51e>
 8005be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f924 	bl	8005e3a <UART_EndTransmit_IT>
    return;
 8005bf2:	e004      	b.n	8005bfe <HAL_UART_IRQHandler+0x51e>
    return;
 8005bf4:	bf00      	nop
 8005bf6:	e002      	b.n	8005bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8005bf8:	bf00      	nop
 8005bfa:	e000      	b.n	8005bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8005bfc:	bf00      	nop
  }
}
 8005bfe:	37e8      	adds	r7, #232	@ 0xe8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2222      	movs	r2, #34	@ 0x22
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0220 	orr.w	r2, r2, #32
 8005ca2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b095      	sub	sp, #84	@ 0x54
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d119      	bne.n	8005d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d48:	61ba      	str	r2, [r7, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	@ 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff ff41 	bl	8005c16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b21      	cmp	r3, #33	@ 0x21
 8005dae:	d13e      	bne.n	8005e2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db8:	d114      	bne.n	8005de4 <UART_Transmit_IT+0x48>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]
 8005de2:	e008      	b.n	8005df6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6211      	str	r1, [r2, #32]
 8005dee:	781a      	ldrb	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4619      	mov	r1, r3
 8005e04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fed2 	bl	8005c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08c      	sub	sp, #48	@ 0x30
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b22      	cmp	r3, #34	@ 0x22
 8005e7c:	f040 80ae 	bne.w	8005fdc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d117      	bne.n	8005eba <UART_Receive_IT+0x50>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d113      	bne.n	8005eba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eb8:	e026      	b.n	8005f08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ecc:	d007      	beq.n	8005ede <UART_Receive_IT+0x74>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <UART_Receive_IT+0x82>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e008      	b.n	8005efe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d15d      	bne.n	8005fd8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0220 	bic.w	r2, r2, #32
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d135      	bne.n	8005fce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	613b      	str	r3, [r7, #16]
   return(result);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f88:	623a      	str	r2, [r7, #32]
 8005f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69f9      	ldr	r1, [r7, #28]
 8005f8e:	6a3a      	ldr	r2, [r7, #32]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d10a      	bne.n	8005fc0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fe2e 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
 8005fcc:	e002      	b.n	8005fd4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa f924 	bl	800021c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e002      	b.n	8005fde <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3730      	adds	r7, #48	@ 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006022:	f023 030c 	bic.w	r3, r3, #12
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6812      	ldr	r2, [r2, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	430b      	orrs	r3, r1
 800602e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <UART_SetConfig+0x114>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006050:	f7fe fdea 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	e002      	b.n	800605e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006058:	f7fe fdd2 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 800605c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009a      	lsls	r2, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	4a22      	ldr	r2, [pc, #136]	@ (8006100 <UART_SetConfig+0x118>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	0119      	lsls	r1, r3, #4
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009a      	lsls	r2, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	fbb2 f2f3 	udiv	r2, r2, r3
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <UART_SetConfig+0x118>)
 8006096:	fba3 0302 	umull	r0, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2064      	movs	r0, #100	@ 0x64
 800609e:	fb00 f303 	mul.w	r3, r0, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	3332      	adds	r3, #50	@ 0x32
 80060a8:	4a15      	ldr	r2, [pc, #84]	@ (8006100 <UART_SetConfig+0x118>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b4:	4419      	add	r1, r3
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009a      	lsls	r2, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <UART_SetConfig+0x118>)
 80060ce:	fba3 0302 	umull	r0, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2064      	movs	r0, #100	@ 0x64
 80060d6:	fb00 f303 	mul.w	r3, r0, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	3332      	adds	r3, #50	@ 0x32
 80060e0:	4a07      	ldr	r2, [pc, #28]	@ (8006100 <UART_SetConfig+0x118>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	440a      	add	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40013800 	.word	0x40013800
 8006100:	51eb851f 	.word	0x51eb851f

08006104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006104:	b084      	sub	sp, #16
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	f107 0014 	add.w	r0, r7, #20
 8006112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	b004      	add	sp, #16
 8006122:	4770      	bx	lr

08006124 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006134:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006138:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006158:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800615c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	b29b      	uxth	r3, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	b29b      	uxth	r3, r3
 800616e:	4013      	ands	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800619c:	b084      	sub	sp, #16
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	f107 0014 	add.w	r0, r7, #20
 80061aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	b004      	add	sp, #16
 80061da:	4770      	bx	lr

080061dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b09d      	sub	sp, #116	@ 0x74
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80061fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006202:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	78db      	ldrb	r3, [r3, #3]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d81f      	bhi.n	800624e <USB_ActivateEndpoint+0x72>
 800620e:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <USB_ActivateEndpoint+0x38>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	08006241 	.word	0x08006241
 800621c:	08006257 	.word	0x08006257
 8006220:	08006233 	.word	0x08006233
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800622c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006230:	e012      	b.n	8006258 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006232:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006236:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800623a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800623e:	e00b      	b.n	8006258 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006240:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800624c:	e004      	b.n	8006258 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006254:	e000      	b.n	8006258 <USB_ActivateEndpoint+0x7c>
      break;
 8006256:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006290:	b29b      	uxth	r3, r3
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	7b1b      	ldrb	r3, [r3, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 8178 	bne.w	80065b8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8084 	beq.w	80063da <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062dc:	b29b      	uxth	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	4413      	add	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	827b      	strh	r3, [r7, #18]
 8006314:	8a7b      	ldrh	r3, [r7, #18]
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <USB_ActivateEndpoint+0x17a>
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006334:	823b      	strh	r3, [r7, #16]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	8a3b      	ldrh	r3, [r7, #16]
 8006342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d020      	beq.n	80063a0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	81bb      	strh	r3, [r7, #12]
 8006376:	89bb      	ldrh	r3, [r7, #12]
 8006378:	f083 0320 	eor.w	r3, r3, #32
 800637c:	81bb      	strh	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	89bb      	ldrh	r3, [r7, #12]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
 800639e:	e2d5      	b.n	800694c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b6:	81fb      	strh	r3, [r7, #14]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	89fb      	ldrh	r3, [r7, #14]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
 80063d8:	e2b8      	b.n	800694c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	4413      	add	r3, r2
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	011a      	lsls	r2, r3, #4
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	b29b      	uxth	r3, r3
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006418:	b29b      	uxth	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	4413      	add	r3, r2
 8006420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	011a      	lsls	r2, r3, #4
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	4413      	add	r3, r2
 800642c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800643c:	b29a      	uxth	r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b3e      	cmp	r3, #62	@ 0x3e
 8006448:	d91d      	bls.n	8006486 <USB_ActivateEndpoint+0x2aa>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <USB_ActivateEndpoint+0x288>
 800645e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006460:	3b01      	subs	r3, #1
 8006462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800646c:	b29b      	uxth	r3, r3
 800646e:	029b      	lsls	r3, r3, #10
 8006470:	b29b      	uxth	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b29b      	uxth	r3, r3
 8006476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647e:	b29a      	uxth	r2, r3
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e026      	b.n	80064d4 <USB_ActivateEndpoint+0x2f8>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <USB_ActivateEndpoint+0x2c8>
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e017      	b.n	80064d4 <USB_ActivateEndpoint+0x2f8>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <USB_ActivateEndpoint+0x2e2>
 80064b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ba:	3301      	adds	r3, #1
 80064bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	029b      	lsls	r3, r3, #10
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01b      	beq.n	8006524 <USB_ActivateEndpoint+0x348>
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	843b      	strh	r3, [r7, #32]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	8c3b      	ldrh	r3, [r7, #32]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800651c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d124      	bne.n	8006576 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	83bb      	strh	r3, [r7, #28]
 8006544:	8bbb      	ldrh	r3, [r7, #28]
 8006546:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800654a:	83bb      	strh	r3, [r7, #28]
 800654c:	8bbb      	ldrh	r3, [r7, #28]
 800654e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006552:	83bb      	strh	r3, [r7, #28]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	8bbb      	ldrh	r3, [r7, #28]
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
 8006574:	e1ea      	b.n	800694c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658c:	83fb      	strh	r3, [r7, #30]
 800658e:	8bfb      	ldrh	r3, [r7, #30]
 8006590:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006594:	83fb      	strh	r3, [r7, #30]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	8bfb      	ldrh	r3, [r7, #30]
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]
 80065b6:	e1c9      	b.n	800694c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	78db      	ldrb	r3, [r3, #3]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d11e      	bne.n	80065fe <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80065f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]
 80065fc:	e01d      	b.n	800663a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006614:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800664a:	4413      	add	r3, r2
 800664c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006656:	4413      	add	r3, r2
 8006658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	891b      	ldrh	r3, [r3, #8]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	657b      	str	r3, [r7, #84]	@ 0x54
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006678:	b29b      	uxth	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667e:	4413      	add	r3, r2
 8006680:	657b      	str	r3, [r7, #84]	@ 0x54
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668a:	4413      	add	r3, r2
 800668c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006690:	653b      	str	r3, [r7, #80]	@ 0x50
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	895b      	ldrh	r3, [r3, #10]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 8093 	bne.w	80067d2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80066bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <USB_ActivateEndpoint+0x524>
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800670e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01b      	beq.n	8006750 <USB_ActivateEndpoint+0x574>
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	441a      	add	r2, r3
 800673a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800673c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006748:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006766:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006768:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800676a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800676e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006770:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006772:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006776:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	441a      	add	r2, r3
 8006782:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800678c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006794:	b29b      	uxth	r3, r3
 8006796:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]
 80067d0:	e0bc      	b.n	800694c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01d      	beq.n	800682a <USB_ActivateEndpoint+0x64e>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006804:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800683a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800683e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01d      	beq.n	8006882 <USB_ActivateEndpoint+0x6a6>
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	78db      	ldrb	r3, [r3, #3]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d024      	beq.n	80068d4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068a8:	f083 0320 	eor.w	r3, r3, #32
 80068ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
 80068d2:	e01d      	b.n	8006910 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006948:	b29b      	uxth	r3, r3
 800694a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800694c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006950:	4618      	mov	r0, r3
 8006952:	3774      	adds	r7, #116	@ 0x74
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop

0800695c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b08d      	sub	sp, #52	@ 0x34
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	7b1b      	ldrb	r3, [r3, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 808e 	bne.w	8006a8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d044      	beq.n	8006a02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	81bb      	strh	r3, [r7, #12]
 8006986:	89bb      	ldrh	r3, [r7, #12]
 8006988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <USB_DeactivateEndpoint+0x6c>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a6:	817b      	strh	r3, [r7, #10]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069de:	813b      	strh	r3, [r7, #8]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	8013      	strh	r3, [r2, #0]
 8006a00:	e192      	b.n	8006d28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	827b      	strh	r3, [r7, #18]
 8006a10:	8a7b      	ldrh	r3, [r7, #18]
 8006a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01b      	beq.n	8006a52 <USB_DeactivateEndpoint+0xf6>
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	823b      	strh	r3, [r7, #16]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	8a3b      	ldrh	r3, [r7, #16]
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a68:	81fb      	strh	r3, [r7, #14]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	8013      	strh	r3, [r2, #0]
 8006a8a:	e14d      	b.n	8006d28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f040 80a5 	bne.w	8006be0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	843b      	strh	r3, [r7, #32]
 8006aa4:	8c3b      	ldrh	r3, [r7, #32]
 8006aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01b      	beq.n	8006ae6 <USB_DeactivateEndpoint+0x18a>
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	83fb      	strh	r3, [r7, #30]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	8bfb      	ldrh	r3, [r7, #30]
 8006ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	83bb      	strh	r3, [r7, #28]
 8006af4:	8bbb      	ldrh	r3, [r7, #28]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01b      	beq.n	8006b36 <USB_DeactivateEndpoint+0x1da>
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	837b      	strh	r3, [r7, #26]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8b7b      	ldrh	r3, [r7, #26]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4c:	833b      	strh	r3, [r7, #24]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	8b3b      	ldrh	r3, [r7, #24]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b84:	82fb      	strh	r3, [r7, #22]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	8afb      	ldrh	r3, [r7, #22]
 8006b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bbc:	82bb      	strh	r3, [r7, #20]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8abb      	ldrh	r3, [r7, #20]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]
 8006bde:	e0a3      	b.n	8006d28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006bee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <USB_DeactivateEndpoint+0x2d4>
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01b      	beq.n	8006c80 <USB_DeactivateEndpoint+0x324>
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	441a      	add	r2, r3
 8006cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d06:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3734      	adds	r7, #52	@ 0x34
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b0c2      	sub	sp, #264	@ 0x108
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d42:	6018      	str	r0, [r3, #0]
 8006d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d4c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	f040 86b7 	bne.w	8007ace <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d908      	bls.n	8006d8e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d8c:	e007      	b.n	8006d9e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d13a      	bne.n	8006e24 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6959      	ldr	r1, [r3, #20]
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	88da      	ldrh	r2, [r3, #6]
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006dd0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	f001 fc9c 	bl	8008712 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	011a      	lsls	r2, r3, #4
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	f000 be1f 	b.w	8007a62 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	f040 8462 	bne.w	80076fa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	f240 83df 	bls.w	8007612 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	1ad2      	subs	r2, r2, r3
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 81c7 	beq.w	8007284 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d177      	bne.n	8007002 <USB_EPStartXfer+0x2ce>
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f32:	4413      	add	r3, r2
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	011a      	lsls	r2, r3, #4
 8006f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f46:	4413      	add	r3, r2
 8006f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f64:	d921      	bls.n	8006faa <USB_EPStartXfer+0x276>
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <USB_EPStartXfer+0x252>
 8006f7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f80:	3b01      	subs	r3, #1
 8006f82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	029b      	lsls	r3, r3, #10
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e050      	b.n	800704c <USB_EPStartXfer+0x318>
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <USB_EPStartXfer+0x294>
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	e041      	b.n	800704c <USB_EPStartXfer+0x318>
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d004      	beq.n	8006fe8 <USB_EPStartXfer+0x2b4>
 8006fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	029b      	lsls	r3, r3, #10
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e024      	b.n	800704c <USB_EPStartXfer+0x318>
 8007002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d11c      	bne.n	800704c <USB_EPStartXfer+0x318>
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007020:	b29b      	uxth	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	4413      	add	r3, r2
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
 800702a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	011a      	lsls	r2, r3, #4
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	4413      	add	r3, r2
 800703c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007046:	b29a      	uxth	r2, r3
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	895b      	ldrh	r3, [r3, #10]
 8007058:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6959      	ldr	r1, [r3, #20]
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	b29b      	uxth	r3, r3
 800706e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007072:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007076:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	f001 fb49 	bl	8008712 <USB_WritePMA>
            ep->xfer_buff += len;
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	441a      	add	r2, r3
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d90f      	bls.n	80070da <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	1ad2      	subs	r2, r2, r3
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	621a      	str	r2, [r3, #32]
 80070d8:	e00e      	b.n	80070f8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d177      	bne.n	80071f8 <USB_EPStartXfer+0x4c4>
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007122:	b29b      	uxth	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	4413      	add	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	011a      	lsls	r2, r3, #4
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	4413      	add	r3, r2
 800713e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714e:	b29a      	uxth	r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	2b3e      	cmp	r3, #62	@ 0x3e
 800715a:	d921      	bls.n	80071a0 <USB_EPStartXfer+0x46c>
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <USB_EPStartXfer+0x448>
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007176:	3b01      	subs	r3, #1
 8007178:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29a      	uxth	r2, r3
 8007182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29b      	uxth	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007198:	b29a      	uxth	r2, r3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e056      	b.n	800724e <USB_EPStartXfer+0x51a>
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <USB_EPStartXfer+0x48a>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e047      	b.n	800724e <USB_EPStartXfer+0x51a>
 80071be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <USB_EPStartXfer+0x4aa>
 80071d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d8:	3301      	adds	r3, #1
 80071da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	029b      	lsls	r3, r3, #10
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e02a      	b.n	800724e <USB_EPStartXfer+0x51a>
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d122      	bne.n	800724e <USB_EPStartXfer+0x51a>
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	623b      	str	r3, [r7, #32]
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	4413      	add	r3, r2
 800722a:	623b      	str	r3, [r7, #32]
 800722c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	011a      	lsls	r2, r3, #4
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	4413      	add	r3, r2
 800723e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007248:	b29a      	uxth	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	891b      	ldrh	r3, [r3, #8]
 800725a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6959      	ldr	r1, [r3, #20]
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	b29b      	uxth	r3, r3
 8007270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007274:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007278:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800727c:	6800      	ldr	r0, [r0, #0]
 800727e:	f001 fa48 	bl	8008712 <USB_WritePMA>
 8007282:	e3ee      	b.n	8007a62 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d177      	bne.n	8007384 <USB_EPStartXfer+0x650>
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b4:	4413      	add	r3, r2
 80072b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	011a      	lsls	r2, r3, #4
 80072c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c8:	4413      	add	r3, r2
 80072ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072da:	b29a      	uxth	r2, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e6:	d921      	bls.n	800732c <USB_EPStartXfer+0x5f8>
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <USB_EPStartXfer+0x5d4>
 80072fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007302:	3b01      	subs	r3, #1
 8007304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29a      	uxth	r2, r3
 800730e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007312:	b29b      	uxth	r3, r3
 8007314:	029b      	lsls	r3, r3, #10
 8007316:	b29b      	uxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007324:	b29a      	uxth	r2, r3
 8007326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	e056      	b.n	80073da <USB_EPStartXfer+0x6a6>
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <USB_EPStartXfer+0x616>
 8007334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e047      	b.n	80073da <USB_EPStartXfer+0x6a6>
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <USB_EPStartXfer+0x636>
 8007360:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007364:	3301      	adds	r3, #1
 8007366:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800736a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29a      	uxth	r2, r3
 8007370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007374:	b29b      	uxth	r3, r3
 8007376:	029b      	lsls	r3, r3, #10
 8007378:	b29b      	uxth	r3, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e02a      	b.n	80073da <USB_EPStartXfer+0x6a6>
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d122      	bne.n	80073da <USB_EPStartXfer+0x6a6>
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073b4:	4413      	add	r3, r2
 80073b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	891b      	ldrh	r3, [r3, #8]
 80073e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6959      	ldr	r1, [r3, #20]
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007400:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007404:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007408:	6800      	ldr	r0, [r0, #0]
 800740a:	f001 f982 	bl	8008712 <USB_WritePMA>
            ep->xfer_buff += len;
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	441a      	add	r2, r3
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a1a      	ldr	r2, [r3, #32]
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d90f      	bls.n	8007468 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6a1a      	ldr	r2, [r3, #32]
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	621a      	str	r2, [r3, #32]
 8007466:	e00e      	b.n	8007486 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	643b      	str	r3, [r7, #64]	@ 0x40
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d177      	bne.n	8007592 <USB_EPStartXfer+0x85e>
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	4413      	add	r3, r2
 80074c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	011a      	lsls	r2, r3, #4
 80074d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f4:	d921      	bls.n	800753a <USB_EPStartXfer+0x806>
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <USB_EPStartXfer+0x7e2>
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	3b01      	subs	r3, #1
 8007512:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007520:	b29b      	uxth	r3, r3
 8007522:	029b      	lsls	r3, r3, #10
 8007524:	b29b      	uxth	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29a      	uxth	r2, r3
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e050      	b.n	80075dc <USB_EPStartXfer+0x8a8>
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <USB_EPStartXfer+0x824>
 8007542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	e041      	b.n	80075dc <USB_EPStartXfer+0x8a8>
 8007558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <USB_EPStartXfer+0x844>
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007572:	3301      	adds	r3, #1
 8007574:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29b      	uxth	r3, r3
 8007588:	4313      	orrs	r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e024      	b.n	80075dc <USB_EPStartXfer+0x8a8>
 8007592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d11c      	bne.n	80075dc <USB_EPStartXfer+0x8a8>
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b6:	4413      	add	r3, r2
 80075b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	011a      	lsls	r2, r3, #4
 80075c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	895b      	ldrh	r3, [r3, #10]
 80075e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6959      	ldr	r1, [r3, #20]
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007602:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007606:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	f001 f881 	bl	8008712 <USB_WritePMA>
 8007610:	e227      	b.n	8007a62 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007648:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800767e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800769e:	4413      	add	r3, r2
 80076a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	011a      	lsls	r2, r3, #4
 80076b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	891b      	ldrh	r3, [r3, #8]
 80076d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6959      	ldr	r1, [r3, #20]
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	f001 f80d 	bl	8008712 <USB_WritePMA>
 80076f8:	e1b3      	b.n	8007a62 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	1ad2      	subs	r2, r2, r3
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80c6 	beq.w	80078cc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	673b      	str	r3, [r7, #112]	@ 0x70
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d177      	bne.n	800784c <USB_EPStartXfer+0xb18>
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007776:	b29b      	uxth	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800777c:	4413      	add	r3, r2
 800777e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	011a      	lsls	r2, r3, #4
 800778e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007790:	4413      	add	r3, r2
 8007792:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007796:	667b      	str	r3, [r7, #100]	@ 0x64
 8007798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80077ae:	d921      	bls.n	80077f4 <USB_EPStartXfer+0xac0>
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <USB_EPStartXfer+0xa9c>
 80077c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077ca:	3b01      	subs	r3, #1
 80077cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077da:	b29b      	uxth	r3, r3
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e050      	b.n	8007896 <USB_EPStartXfer+0xb62>
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <USB_EPStartXfer+0xade>
 80077fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780a:	b29a      	uxth	r2, r3
 800780c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	e041      	b.n	8007896 <USB_EPStartXfer+0xb62>
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <USB_EPStartXfer+0xafe>
 8007828:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800782c:	3301      	adds	r3, #1
 800782e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800783c:	b29b      	uxth	r3, r3
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	b29b      	uxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b29a      	uxth	r2, r3
 8007846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	e024      	b.n	8007896 <USB_EPStartXfer+0xb62>
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d11c      	bne.n	8007896 <USB_EPStartXfer+0xb62>
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786a:	b29b      	uxth	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007870:	4413      	add	r3, r2
 8007872:	673b      	str	r3, [r7, #112]	@ 0x70
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	011a      	lsls	r2, r3, #4
 8007882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007884:	4413      	add	r3, r2
 8007886:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800788a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007890:	b29a      	uxth	r2, r3
 8007892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	895b      	ldrh	r3, [r3, #10]
 80078a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6959      	ldr	r1, [r3, #20]
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078c4:	6800      	ldr	r0, [r0, #0]
 80078c6:	f000 ff24 	bl	8008712 <USB_WritePMA>
 80078ca:	e0ca      	b.n	8007a62 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d177      	bne.n	80079cc <USB_EPStartXfer+0xc98>
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078fc:	4413      	add	r3, r2
 80078fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	011a      	lsls	r2, r3, #4
 800790e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007910:	4413      	add	r3, r2
 8007912:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007922:	b29a      	uxth	r2, r3
 8007924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	2b3e      	cmp	r3, #62	@ 0x3e
 800792e:	d921      	bls.n	8007974 <USB_EPStartXfer+0xc40>
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <USB_EPStartXfer+0xc1c>
 8007946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800794a:	3b01      	subs	r3, #1
 800794c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29a      	uxth	r2, r3
 8007956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800795a:	b29b      	uxth	r3, r3
 800795c:	029b      	lsls	r3, r3, #10
 800795e:	b29b      	uxth	r3, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796c:	b29a      	uxth	r2, r3
 800796e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e05c      	b.n	8007a2e <USB_EPStartXfer+0xcfa>
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <USB_EPStartXfer+0xc5e>
 800797c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798a:	b29a      	uxth	r2, r3
 800798c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	e04d      	b.n	8007a2e <USB_EPStartXfer+0xcfa>
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <USB_EPStartXfer+0xc7e>
 80079a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079bc:	b29b      	uxth	r3, r3
 80079be:	029b      	lsls	r3, r3, #10
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e030      	b.n	8007a2e <USB_EPStartXfer+0xcfa>
 80079cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d128      	bne.n	8007a2e <USB_EPStartXfer+0xcfa>
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a00:	4413      	add	r3, r2
 8007a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	011a      	lsls	r2, r3, #4
 8007a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a18:	4413      	add	r3, r2
 8007a1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	891b      	ldrh	r3, [r3, #8]
 8007a3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6959      	ldr	r1, [r3, #20]
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f000 fe58 	bl	8008712 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	897b      	ldrh	r3, [r7, #10]
 8007a8c:	f083 0310 	eor.w	r3, r3, #16
 8007a90:	817b      	strh	r3, [r7, #10]
 8007a92:	897b      	ldrh	r3, [r7, #10]
 8007a94:	f083 0320 	eor.w	r3, r3, #32
 8007a98:	817b      	strh	r3, [r7, #10]
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	441a      	add	r2, r3
 8007ab4:	897b      	ldrh	r3, [r7, #10]
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]
 8007aca:	f000 bcde 	b.w	800848a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	7b1b      	ldrb	r3, [r3, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 80bb 	bne.w	8007c56 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d917      	bls.n	8007b2c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	619a      	str	r2, [r3, #24]
 8007b2a:	e00e      	b.n	8007b4a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b6e:	4413      	add	r3, r2
 8007b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	011a      	lsls	r2, r3, #4
 8007b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b86:	4413      	add	r3, r2
 8007b88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007baa:	d924      	bls.n	8007bf6 <USB_EPStartXfer+0xec2>
 8007bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <USB_EPStartXfer+0xe98>
 8007bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	f000 bc10 	b.w	8008416 <USB_EPStartXfer+0x16e2>
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10c      	bne.n	8007c18 <USB_EPStartXfer+0xee4>
 8007bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	e3fe      	b.n	8008416 <USB_EPStartXfer+0x16e2>
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <USB_EPStartXfer+0xf04>
 8007c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c32:	3301      	adds	r3, #1
 8007c34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	029b      	lsls	r3, r3, #10
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e3df      	b.n	8008416 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	78db      	ldrb	r3, [r3, #3]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	f040 8218 	bne.w	8008098 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 809d 	bne.w	8007db4 <USB_EPStartXfer+0x1080>
 8007c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	011a      	lsls	r2, r3, #4
 8007cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce2:	d92b      	bls.n	8007d3c <USB_EPStartXfer+0x1008>
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <USB_EPStartXfer+0xfe0>
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	029b      	lsls	r3, r3, #10
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	e070      	b.n	8007e1e <USB_EPStartXfer+0x10ea>
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <USB_EPStartXfer+0x1032>
 8007d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e05b      	b.n	8007e1e <USB_EPStartXfer+0x10ea>
 8007d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USB_EPStartXfer+0x1062>
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	029b      	lsls	r3, r3, #10
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e034      	b.n	8007e1e <USB_EPStartXfer+0x10ea>
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d12c      	bne.n	8007e1e <USB_EPStartXfer+0x10ea>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007de8:	4413      	add	r3, r2
 8007dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	011a      	lsls	r2, r3, #4
 8007dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f040 809d 	bne.w	8007f78 <USB_EPStartXfer+0x1244>
 8007e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	011a      	lsls	r2, r3, #4
 8007e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ea6:	d92b      	bls.n	8007f00 <USB_EPStartXfer+0x11cc>
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <USB_EPStartXfer+0x11a4>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	029b      	lsls	r3, r3, #10
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	e069      	b.n	8007fd4 <USB_EPStartXfer+0x12a0>
 8007f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10c      	bne.n	8007f2a <USB_EPStartXfer+0x11f6>
 8007f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e054      	b.n	8007fd4 <USB_EPStartXfer+0x12a0>
 8007f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <USB_EPStartXfer+0x1226>
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f54:	3301      	adds	r3, #1
 8007f56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	e02d      	b.n	8007fd4 <USB_EPStartXfer+0x12a0>
 8007f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d125      	bne.n	8007fd4 <USB_EPStartXfer+0x12a0>
 8007f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	011a      	lsls	r2, r3, #4
 8007fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8218 	beq.w	8008416 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800800a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d005      	beq.n	800801e <USB_EPStartXfer+0x12ea>
 8008012:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800801e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 81f5 	bne.w	8008416 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800802c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 81ee 	bne.w	8008416 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800805c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008060:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800808a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800808e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008092:	b29b      	uxth	r3, r3
 8008094:	8013      	strh	r3, [r2, #0]
 8008096:	e1be      	b.n	8008416 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	78db      	ldrb	r3, [r3, #3]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	f040 81b4 	bne.w	8008412 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d917      	bls.n	80080f6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	619a      	str	r2, [r3, #24]
 80080f4:	e00e      	b.n	8008114 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80080f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2200      	movs	r2, #0
 8008112:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8085 	bne.w	8008230 <USB_EPStartXfer+0x14fc>
 8008126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008142:	b29b      	uxth	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	011a      	lsls	r2, r3, #4
 800815e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008162:	4413      	add	r3, r2
 8008164:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800816c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008178:	b29a      	uxth	r2, r3
 800817a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800817e:	801a      	strh	r2, [r3, #0]
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008184:	2b3e      	cmp	r3, #62	@ 0x3e
 8008186:	d923      	bls.n	80081d0 <USB_EPStartXfer+0x149c>
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <USB_EPStartXfer+0x1474>
 800819e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a2:	3b01      	subs	r3, #1
 80081a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	029b      	lsls	r3, r3, #10
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b29b      	uxth	r3, r3
 80081be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e060      	b.n	8008292 <USB_EPStartXfer+0x155e>
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10c      	bne.n	80081f2 <USB_EPStartXfer+0x14be>
 80081d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	e04f      	b.n	8008292 <USB_EPStartXfer+0x155e>
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <USB_EPStartXfer+0x14de>
 8008208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820c:	3301      	adds	r3, #1
 800820e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821e:	b29b      	uxth	r3, r3
 8008220:	029b      	lsls	r3, r3, #10
 8008222:	b29b      	uxth	r3, r3
 8008224:	4313      	orrs	r3, r2
 8008226:	b29a      	uxth	r2, r3
 8008228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	e030      	b.n	8008292 <USB_EPStartXfer+0x155e>
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d128      	bne.n	8008292 <USB_EPStartXfer+0x155e>
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800825c:	b29b      	uxth	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008264:	4413      	add	r3, r2
 8008266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800826a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	011a      	lsls	r2, r3, #4
 8008278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800827c:	4413      	add	r3, r2
 800827e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008282:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	785b      	ldrb	r3, [r3, #1]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 8085 	bne.w	80083bc <USB_EPStartXfer+0x1688>
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082d6:	4413      	add	r3, r2
 80082d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082ee:	4413      	add	r3, r2
 80082f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	2b3e      	cmp	r3, #62	@ 0x3e
 8008312:	d923      	bls.n	800835c <USB_EPStartXfer+0x1628>
 8008314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <USB_EPStartXfer+0x1600>
 800832a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800832e:	3b01      	subs	r3, #1
 8008330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29a      	uxth	r2, r3
 800833c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008340:	b29b      	uxth	r3, r3
 8008342:	029b      	lsls	r3, r3, #10
 8008344:	b29b      	uxth	r3, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800834e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008352:	b29a      	uxth	r2, r3
 8008354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	e05c      	b.n	8008416 <USB_EPStartXfer+0x16e2>
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10c      	bne.n	800837e <USB_EPStartXfer+0x164a>
 8008364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e04b      	b.n	8008416 <USB_EPStartXfer+0x16e2>
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <USB_EPStartXfer+0x166a>
 8008394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008398:	3301      	adds	r3, #1
 800839a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800839e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e02c      	b.n	8008416 <USB_EPStartXfer+0x16e2>
 80083bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d124      	bne.n	8008416 <USB_EPStartXfer+0x16e2>
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083da:	b29b      	uxth	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083e2:	4413      	add	r3, r2
 80083e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	011a      	lsls	r2, r3, #4
 80083f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083fa:	4413      	add	r3, r2
 80083fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800840e:	801a      	strh	r2, [r3, #0]
 8008410:	e001      	b.n	8008416 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e03a      	b.n	800848c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b29b      	uxth	r3, r3
 8008434:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008444:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008448:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800844c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008454:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	441a      	add	r2, r3
 8008472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800847e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	b29b      	uxth	r3, r3
 8008488:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d020      	beq.n	80084ea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084be:	81bb      	strh	r3, [r7, #12]
 80084c0:	89bb      	ldrh	r3, [r7, #12]
 80084c2:	f083 0310 	eor.w	r3, r3, #16
 80084c6:	81bb      	strh	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	89bb      	ldrh	r3, [r7, #12]
 80084d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	8013      	strh	r3, [r2, #0]
 80084e8:	e01f      	b.n	800852a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008500:	81fb      	strh	r3, [r7, #14]
 8008502:	89fb      	ldrh	r3, [r7, #14]
 8008504:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008508:	81fb      	strh	r3, [r7, #14]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	89fb      	ldrh	r3, [r7, #14]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr

08008536 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008536:	b480      	push	{r7}
 8008538:	b087      	sub	sp, #28
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	7b1b      	ldrb	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f040 809d 	bne.w	8008684 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d04c      	beq.n	80085ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	823b      	strh	r3, [r7, #16]
 8008560:	8a3b      	ldrh	r3, [r7, #16]
 8008562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01b      	beq.n	80085a2 <USB_EPClearStall+0x6c>
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800857c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008580:	81fb      	strh	r3, [r7, #14]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	78db      	ldrb	r3, [r3, #3]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d06c      	beq.n	8008684 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085c0:	81bb      	strh	r3, [r7, #12]
 80085c2:	89bb      	ldrh	r3, [r7, #12]
 80085c4:	f083 0320 	eor.w	r3, r3, #32
 80085c8:	81bb      	strh	r3, [r7, #12]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	89bb      	ldrh	r3, [r7, #12]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]
 80085ea:	e04b      	b.n	8008684 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	82fb      	strh	r3, [r7, #22]
 80085fa:	8afb      	ldrh	r3, [r7, #22]
 80085fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01b      	beq.n	800863c <USB_EPClearStall+0x106>
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861a:	82bb      	strh	r3, [r7, #20]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	8abb      	ldrh	r3, [r7, #20]
 8008628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800862c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008638:	b29b      	uxth	r3, r3
 800863a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800864e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008652:	827b      	strh	r3, [r7, #18]
 8008654:	8a7b      	ldrh	r3, [r7, #18]
 8008656:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800865a:	827b      	strh	r3, [r7, #18]
 800865c:	8a7b      	ldrh	r3, [r7, #18]
 800865e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008662:	827b      	strh	r3, [r7, #18]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	441a      	add	r2, r3
 800866e:	8a7b      	ldrh	r3, [r7, #18]
 8008670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800867c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008680:	b29b      	uxth	r3, r3
 8008682:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2280      	movs	r2, #128	@ 0x80
 80086a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr

080086b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008712:	b480      	push	{r7}
 8008714:	b08b      	sub	sp, #44	@ 0x2c
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	4611      	mov	r1, r2
 800871e:	461a      	mov	r2, r3
 8008720:	460b      	mov	r3, r1
 8008722:	80fb      	strh	r3, [r7, #6]
 8008724:	4613      	mov	r3, r2
 8008726:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008728:	88bb      	ldrh	r3, [r7, #4]
 800872a:	3301      	adds	r3, #1
 800872c:	085b      	lsrs	r3, r3, #1
 800872e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	005a      	lsls	r2, r3, #1
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008744:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24
 800874a:	e01e      	b.n	800878a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	3301      	adds	r3, #1
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b21a      	sxth	r2, r3
 800875c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008760:	4313      	orrs	r3, r2
 8008762:	b21b      	sxth	r3, r3
 8008764:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	8a7a      	ldrh	r2, [r7, #18]
 800876a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	3302      	adds	r3, #2
 8008770:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	3302      	adds	r3, #2
 8008776:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	3301      	adds	r3, #1
 800877c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3301      	adds	r3, #1
 8008782:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	3b01      	subs	r3, #1
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1dd      	bne.n	800874c <USB_WritePMA+0x3a>
  }
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	372c      	adds	r7, #44	@ 0x2c
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800879c:	b480      	push	{r7}
 800879e:	b08b      	sub	sp, #44	@ 0x2c
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4611      	mov	r1, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	460b      	mov	r3, r1
 80087ac:	80fb      	strh	r3, [r7, #6]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087b2:	88bb      	ldrh	r3, [r7, #4]
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087c2:	88fb      	ldrh	r3, [r7, #6]
 80087c4:	005a      	lsls	r2, r3, #1
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d4:	e01b      	b.n	800880e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	3302      	adds	r3, #2
 80087e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	3302      	adds	r3, #2
 8008806:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	3b01      	subs	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e0      	bne.n	80087d6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008814:	88bb      	ldrh	r3, [r7, #4]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	b29b      	uxth	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	701a      	strb	r2, [r3, #0]
  }
}
 8008830:	bf00      	nop
 8008832:	372c      	adds	r7, #44	@ 0x2c
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7c1b      	ldrb	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d115      	bne.n	800887e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008856:	2202      	movs	r2, #2
 8008858:	2181      	movs	r1, #129	@ 0x81
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fed1 	bl	800a602 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800886a:	2202      	movs	r2, #2
 800886c:	2101      	movs	r1, #1
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fec7 	bl	800a602 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800887c:	e012      	b.n	80088a4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800887e:	2340      	movs	r3, #64	@ 0x40
 8008880:	2202      	movs	r2, #2
 8008882:	2181      	movs	r1, #129	@ 0x81
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 febc 	bl	800a602 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008890:	2340      	movs	r3, #64	@ 0x40
 8008892:	2202      	movs	r2, #2
 8008894:	2101      	movs	r1, #1
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 feb3 	bl	800a602 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088a4:	2308      	movs	r3, #8
 80088a6:	2203      	movs	r2, #3
 80088a8:	2182      	movs	r1, #130	@ 0x82
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fea9 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088b6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80088ba:	f001 ffc9 	bl	800a850 <USBD_static_malloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	e026      	b.n	8008924 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088dc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7c1b      	ldrb	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800890a:	2101      	movs	r1, #1
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 ff69 	bl	800a7e4 <USBD_LL_PrepareReceive>
 8008912:	e007      	b.n	8008924 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800891a:	2340      	movs	r3, #64	@ 0x40
 800891c:	2101      	movs	r1, #1
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 ff60 	bl	800a7e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800893e:	2181      	movs	r1, #129	@ 0x81
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fe84 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fe7d 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800895c:	2182      	movs	r1, #130	@ 0x82
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fe75 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00e      	beq.n	8008992 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008984:	4618      	mov	r0, r3
 8008986:	f001 ff6f 	bl	800a868 <USBD_static_free>
    pdev->pClassData = NULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d039      	beq.n	8008a3a <USBD_CDC_Setup+0x9e>
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d17f      	bne.n	8008aca <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	88db      	ldrh	r3, [r3, #6]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d029      	beq.n	8008a26 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da11      	bge.n	8008a00 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80089e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	88d2      	ldrh	r2, [r2, #6]
 80089ee:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089f0:	6939      	ldr	r1, [r7, #16]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	88db      	ldrh	r3, [r3, #6]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 fa05 	bl	8009e08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80089fe:	e06b      	b.n	8008ad8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	785a      	ldrb	r2, [r3, #1]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	88db      	ldrh	r3, [r3, #6]
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 fa20 	bl	8009e64 <USBD_CtlPrepareRx>
      break;
 8008a24:	e058      	b.n	8008ad8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	7850      	ldrb	r0, [r2, #1]
 8008a32:	2200      	movs	r2, #0
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	4798      	blx	r3
      break;
 8008a38:	e04e      	b.n	8008ad8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b0b      	cmp	r3, #11
 8008a40:	d02e      	beq.n	8008aa0 <USBD_CDC_Setup+0x104>
 8008a42:	2b0b      	cmp	r3, #11
 8008a44:	dc38      	bgt.n	8008ab8 <USBD_CDC_Setup+0x11c>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <USBD_CDC_Setup+0xb4>
 8008a4a:	2b0a      	cmp	r3, #10
 8008a4c:	d014      	beq.n	8008a78 <USBD_CDC_Setup+0xdc>
 8008a4e:	e033      	b.n	8008ab8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d107      	bne.n	8008a6a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	2202      	movs	r2, #2
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 f9d0 	bl	8009e08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a68:	e02e      	b.n	8008ac8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f961 	bl	8009d34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	75fb      	strb	r3, [r7, #23]
          break;
 8008a76:	e027      	b.n	8008ac8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d107      	bne.n	8008a92 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a82:	f107 030f 	add.w	r3, r7, #15
 8008a86:	2201      	movs	r2, #1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 f9bc 	bl	8009e08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a90:	e01a      	b.n	8008ac8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f94d 	bl	8009d34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a9e:	e013      	b.n	8008ac8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d00d      	beq.n	8008ac6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 f941 	bl	8009d34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ab6:	e006      	b.n	8008ac6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 f93a 	bl	8009d34 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac4:	e000      	b.n	8008ac8 <USBD_CDC_Setup+0x12c>
          break;
 8008ac6:	bf00      	nop
      }
      break;
 8008ac8:	e006      	b.n	8008ad8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f931 	bl	8009d34 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad6:	bf00      	nop
  }

  return ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008afc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d03a      	beq.n	8008b7e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	331c      	adds	r3, #28
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d029      	beq.n	8008b72 <USBD_CDC_DataIn+0x90>
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	331c      	adds	r3, #28
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	78f9      	ldrb	r1, [r7, #3]
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	460b      	mov	r3, r1
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4403      	add	r3, r0
 8008b3e:	3338      	adds	r3, #56	@ 0x38
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d110      	bne.n	8008b72 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	331c      	adds	r3, #28
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b64:	78f9      	ldrb	r1, [r7, #3]
 8008b66:	2300      	movs	r3, #0
 8008b68:	2200      	movs	r2, #0
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 fe17 	bl	800a79e <USBD_LL_Transmit>
 8008b70:	e003      	b.n	8008b7a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e000      	b.n	8008b80 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b7e:	2302      	movs	r3, #2
  }
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fe42 	bl	800a82a <USBD_LL_GetRxDataSize>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00d      	beq.n	8008bd4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4798      	blx	r3

    return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e000      	b.n	8008bd6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008bd4:	2302      	movs	r3, #2
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d014      	beq.n	8008c22 <USBD_CDC_EP0_RxReady+0x44>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bfe:	2bff      	cmp	r3, #255	@ 0xff
 8008c00:	d00f      	beq.n	8008c22 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	22ff      	movs	r2, #255	@ 0xff
 8008c1e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2243      	movs	r2, #67	@ 0x43
 8008c38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c3a:	4b03      	ldr	r3, [pc, #12]	@ (8008c48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20000094 	.word	0x20000094

08008c4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2243      	movs	r2, #67	@ 0x43
 8008c58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c5a:	4b03      	ldr	r3, [pc, #12]	@ (8008c68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000050 	.word	0x20000050

08008c6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2243      	movs	r2, #67	@ 0x43
 8008c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	@ (8008c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	200000d8 	.word	0x200000d8

08008c8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	220a      	movs	r2, #10
 8008c98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	@ (8008ca8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bc80      	pop	{r7}
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	2000000c 	.word	0x2000000c

08008cac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cf6:	88fa      	ldrh	r2, [r7, #6]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr

08008d0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01c      	beq.n	8008d84 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d115      	bne.n	8008d80 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2181      	movs	r1, #129	@ 0x81
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 fd11 	bl	800a79e <USBD_LL_Transmit>

      return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e002      	b.n	8008d86 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d84:	2302      	movs	r3, #2
  }
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7c1b      	ldrb	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008db6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fd11 	bl	800a7e4 <USBD_LL_PrepareReceive>
 8008dc2:	e007      	b.n	8008dd4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dca:	2340      	movs	r3, #64	@ 0x40
 8008dcc:	2101      	movs	r1, #1
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fd08 	bl	800a7e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e000      	b.n	8008dda <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	4613      	mov	r3, r2
 8008dee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008df6:	2302      	movs	r3, #2
 8008df8:	e01a      	b.n	8008e30 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	79fa      	ldrb	r2, [r7, #7]
 8008e26:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f001 fb75 	bl	800a518 <USBD_LL_Init>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d006      	beq.n	8008e5a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e001      	b.n	8008e5e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr

08008e6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 fbaa 	bl	800a5cc <USBD_LL_Start>

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr

08008e96 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00c      	beq.n	8008eca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	4611      	mov	r1, r2
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4611      	mov	r1, r2
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fed8 	bl	8009cc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f20:	461a      	mov	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d016      	beq.n	8008f64 <USBD_LL_SetupStage+0x6a>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d81c      	bhi.n	8008f74 <USBD_LL_SetupStage+0x7a>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <USBD_LL_SetupStage+0x4a>
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d008      	beq.n	8008f54 <USBD_LL_SetupStage+0x5a>
 8008f42:	e017      	b.n	8008f74 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9cb 	bl	80092e8 <USBD_StdDevReq>
      break;
 8008f52:	e01a      	b.n	8008f8a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa2d 	bl	80093bc <USBD_StdItfReq>
      break;
 8008f62:	e012      	b.n	8008f8a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa6d 	bl	800944c <USBD_StdEPReq>
      break;
 8008f72:	e00a      	b.n	8008f8a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 fb82 	bl	800a68c <USBD_LL_StallEP>
      break;
 8008f88:	bf00      	nop
  }

  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d14b      	bne.n	8009040 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d134      	bne.n	8009024 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d919      	bls.n	8008ffa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	1ad2      	subs	r2, r2, r3
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d203      	bcs.n	8008fe8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	e002      	b.n	8008fee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 ff54 	bl	8009ea0 <USBD_CtlContinueRx>
 8008ff8:	e038      	b.n	800906c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800900c:	2b03      	cmp	r3, #3
 800900e:	d105      	bne.n	800901c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 ff51 	bl	8009ec4 <USBD_CtlSendStatus>
 8009022:	e023      	b.n	800906c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800902a:	2b05      	cmp	r3, #5
 800902c:	d11e      	bne.n	800906c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009036:	2100      	movs	r1, #0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f001 fb27 	bl	800a68c <USBD_LL_StallEP>
 800903e:	e015      	b.n	800906c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009052:	2b03      	cmp	r3, #3
 8009054:	d108      	bne.n	8009068 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	7afa      	ldrb	r2, [r7, #11]
 8009060:	4611      	mov	r1, r2
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
 8009066:	e001      	b.n	800906c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009068:	2302      	movs	r3, #2
 800906a:	e000      	b.n	800906e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b086      	sub	sp, #24
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	460b      	mov	r3, r1
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009084:	7afb      	ldrb	r3, [r7, #11]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d17f      	bne.n	800918a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3314      	adds	r3, #20
 800908e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009096:	2b02      	cmp	r3, #2
 8009098:	d15c      	bne.n	8009154 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d915      	bls.n	80090d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	461a      	mov	r2, r3
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 febe 	bl	8009e40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090c4:	2300      	movs	r3, #0
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f001 fb8a 	bl	800a7e4 <USBD_LL_PrepareReceive>
 80090d0:	e04e      	b.n	8009170 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	6912      	ldr	r2, [r2, #16]
 80090da:	fbb3 f1f2 	udiv	r1, r3, r2
 80090de:	fb01 f202 	mul.w	r2, r1, r2
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11c      	bne.n	8009122 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d316      	bcc.n	8009122 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d20f      	bcs.n	8009122 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009102:	2200      	movs	r2, #0
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fe9a 	bl	8009e40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f001 fb62 	bl	800a7e4 <USBD_LL_PrepareReceive>
 8009120:	e026      	b.n	8009170 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009134:	2b03      	cmp	r3, #3
 8009136:	d105      	bne.n	8009144 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009144:	2180      	movs	r1, #128	@ 0x80
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f001 faa0 	bl	800a68c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fecc 	bl	8009eea <USBD_CtlReceiveStatus>
 8009152:	e00d      	b.n	8009170 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800915a:	2b04      	cmp	r3, #4
 800915c:	d004      	beq.n	8009168 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009164:	2b00      	cmp	r3, #0
 8009166:	d103      	bne.n	8009170 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009168:	2180      	movs	r1, #128	@ 0x80
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f001 fa8e 	bl	800a68c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009176:	2b01      	cmp	r3, #1
 8009178:	d11d      	bne.n	80091b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fe81 	bl	8008e82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009188:	e015      	b.n	80091b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800919c:	2b03      	cmp	r3, #3
 800919e:	d108      	bne.n	80091b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	7afa      	ldrb	r2, [r7, #11]
 80091aa:	4611      	mov	r1, r2
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	4798      	blx	r3
 80091b0:	e001      	b.n	80091b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e000      	b.n	80091b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091c8:	2340      	movs	r3, #64	@ 0x40
 80091ca:	2200      	movs	r2, #0
 80091cc:	2100      	movs	r1, #0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fa17 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2240      	movs	r2, #64	@ 0x40
 80091e0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091e4:	2340      	movs	r3, #64	@ 0x40
 80091e6:	2200      	movs	r2, #0
 80091e8:	2180      	movs	r1, #128	@ 0x80
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fa09 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6852      	ldr	r2, [r2, #4]
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	4611      	mov	r1, r2
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
  }

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2204      	movs	r2, #4
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009296:	2b04      	cmp	r3, #4
 8009298:	d105      	bne.n	80092a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr

080092b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d10b      	bne.n	80092dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d005      	beq.n	800930e <USBD_StdDevReq+0x26>
 8009302:	2b40      	cmp	r3, #64	@ 0x40
 8009304:	d84f      	bhi.n	80093a6 <USBD_StdDevReq+0xbe>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <USBD_StdDevReq+0x36>
 800930a:	2b20      	cmp	r3, #32
 800930c:	d14b      	bne.n	80093a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
      break;
 800931c:	e048      	b.n	80093b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b09      	cmp	r3, #9
 8009324:	d839      	bhi.n	800939a <USBD_StdDevReq+0xb2>
 8009326:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <USBD_StdDevReq+0x44>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	0800937d 	.word	0x0800937d
 8009330:	08009391 	.word	0x08009391
 8009334:	0800939b 	.word	0x0800939b
 8009338:	08009387 	.word	0x08009387
 800933c:	0800939b 	.word	0x0800939b
 8009340:	0800935f 	.word	0x0800935f
 8009344:	08009355 	.word	0x08009355
 8009348:	0800939b 	.word	0x0800939b
 800934c:	08009373 	.word	0x08009373
 8009350:	08009369 	.word	0x08009369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9dc 	bl	8009714 <USBD_GetDescriptor>
          break;
 800935c:	e022      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fb3f 	bl	80099e4 <USBD_SetAddress>
          break;
 8009366:	e01d      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fb7e 	bl	8009a6c <USBD_SetConfig>
          break;
 8009370:	e018      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fc07 	bl	8009b88 <USBD_GetConfig>
          break;
 800937a:	e013      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc37 	bl	8009bf2 <USBD_GetStatus>
          break;
 8009384:	e00e      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc65 	bl	8009c58 <USBD_SetFeature>
          break;
 800938e:	e009      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fc74 	bl	8009c80 <USBD_ClrFeature>
          break;
 8009398:	e004      	b.n	80093a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fcc9 	bl	8009d34 <USBD_CtlError>
          break;
 80093a2:	bf00      	nop
      }
      break;
 80093a4:	e004      	b.n	80093b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fcc3 	bl	8009d34 <USBD_CtlError>
      break;
 80093ae:	bf00      	nop
  }

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop

080093bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d005      	beq.n	80093e2 <USBD_StdItfReq+0x26>
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d82e      	bhi.n	8009438 <USBD_StdItfReq+0x7c>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <USBD_StdItfReq+0x26>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d12a      	bne.n	8009438 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e8:	3b01      	subs	r3, #1
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d81d      	bhi.n	800942a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	889b      	ldrh	r3, [r3, #4]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d813      	bhi.n	8009420 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	4798      	blx	r3
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88db      	ldrh	r3, [r3, #6]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d110      	bne.n	8009434 <USBD_StdItfReq+0x78>
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10d      	bne.n	8009434 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fd53 	bl	8009ec4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800941e:	e009      	b.n	8009434 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fc86 	bl	8009d34 <USBD_CtlError>
          break;
 8009428:	e004      	b.n	8009434 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fc81 	bl	8009d34 <USBD_CtlError>
          break;
 8009432:	e000      	b.n	8009436 <USBD_StdItfReq+0x7a>
          break;
 8009434:	bf00      	nop
      }
      break;
 8009436:	e004      	b.n	8009442 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fc7a 	bl	8009d34 <USBD_CtlError>
      break;
 8009440:	bf00      	nop
  }

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	889b      	ldrh	r3, [r3, #4]
 800945e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009468:	2b40      	cmp	r3, #64	@ 0x40
 800946a:	d007      	beq.n	800947c <USBD_StdEPReq+0x30>
 800946c:	2b40      	cmp	r3, #64	@ 0x40
 800946e:	f200 8146 	bhi.w	80096fe <USBD_StdEPReq+0x2b2>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <USBD_StdEPReq+0x40>
 8009476:	2b20      	cmp	r3, #32
 8009478:	f040 8141 	bne.w	80096fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
      break;
 800948a:	e13d      	b.n	8009708 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009494:	2b20      	cmp	r3, #32
 8009496:	d10a      	bne.n	80094ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	4798      	blx	r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	e12d      	b.n	800970a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d007      	beq.n	80094c6 <USBD_StdEPReq+0x7a>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	f300 811b 	bgt.w	80096f2 <USBD_StdEPReq+0x2a6>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d072      	beq.n	80095a6 <USBD_StdEPReq+0x15a>
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d03a      	beq.n	800953a <USBD_StdEPReq+0xee>
 80094c4:	e115      	b.n	80096f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d002      	beq.n	80094d6 <USBD_StdEPReq+0x8a>
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d015      	beq.n	8009500 <USBD_StdEPReq+0xb4>
 80094d4:	e02b      	b.n	800952e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <USBD_StdEPReq+0xaa>
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b80      	cmp	r3, #128	@ 0x80
 80094e0:	d009      	beq.n	80094f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 f8d0 	bl	800a68c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	@ 0x80
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 f8cc 	bl	800a68c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f4:	e020      	b.n	8009538 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc1b 	bl	8009d34 <USBD_CtlError>
              break;
 80094fe:	e01b      	b.n	8009538 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	885b      	ldrh	r3, [r3, #2]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10e      	bne.n	8009526 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00b      	beq.n	8009526 <USBD_StdEPReq+0xda>
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b80      	cmp	r3, #128	@ 0x80
 8009512:	d008      	beq.n	8009526 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	88db      	ldrh	r3, [r3, #6]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d104      	bne.n	8009526 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f001 f8b3 	bl	800a68c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fccc 	bl	8009ec4 <USBD_CtlSendStatus>

              break;
 800952c:	e004      	b.n	8009538 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fbff 	bl	8009d34 <USBD_CtlError>
              break;
 8009536:	bf00      	nop
          }
          break;
 8009538:	e0e0      	b.n	80096fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	2b02      	cmp	r3, #2
 8009542:	d002      	beq.n	800954a <USBD_StdEPReq+0xfe>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d015      	beq.n	8009574 <USBD_StdEPReq+0x128>
 8009548:	e026      	b.n	8009598 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <USBD_StdEPReq+0x11e>
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b80      	cmp	r3, #128	@ 0x80
 8009554:	d009      	beq.n	800956a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 f896 	bl	800a68c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009560:	2180      	movs	r1, #128	@ 0x80
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f892 	bl	800a68c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009568:	e01c      	b.n	80095a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fbe1 	bl	8009d34 <USBD_CtlError>
              break;
 8009572:	e017      	b.n	80095a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d112      	bne.n	80095a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f89d 	bl	800a6ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fc97 	bl	8009ec4 <USBD_CtlSendStatus>
              }
              break;
 8009596:	e004      	b.n	80095a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fbca 	bl	8009d34 <USBD_CtlError>
              break;
 80095a0:	e000      	b.n	80095a4 <USBD_StdEPReq+0x158>
              break;
 80095a2:	bf00      	nop
          }
          break;
 80095a4:	e0aa      	b.n	80096fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d002      	beq.n	80095b6 <USBD_StdEPReq+0x16a>
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d032      	beq.n	800961a <USBD_StdEPReq+0x1ce>
 80095b4:	e097      	b.n	80096e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <USBD_StdEPReq+0x180>
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	d004      	beq.n	80095cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fbb5 	bl	8009d34 <USBD_CtlError>
                break;
 80095ca:	e091      	b.n	80096f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	da0b      	bge.n	80095ec <USBD_StdEPReq+0x1a0>
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	3310      	adds	r3, #16
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	4413      	add	r3, r2
 80095e8:	3304      	adds	r3, #4
 80095ea:	e00b      	b.n	8009604 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	4413      	add	r3, r2
 8009602:	3304      	adds	r3, #4
 8009604:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2202      	movs	r2, #2
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fbf8 	bl	8009e08 <USBD_CtlSendData>
              break;
 8009618:	e06a      	b.n	80096f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800961a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800961e:	2b00      	cmp	r3, #0
 8009620:	da11      	bge.n	8009646 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	f003 020f 	and.w	r2, r3, #15
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	3318      	adds	r3, #24
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d117      	bne.n	800966c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb78 	bl	8009d34 <USBD_CtlError>
                  break;
 8009644:	e054      	b.n	80096f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb65 	bl	8009d34 <USBD_CtlError>
                  break;
 800966a:	e041      	b.n	80096f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800966c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009670:	2b00      	cmp	r3, #0
 8009672:	da0b      	bge.n	800968c <USBD_StdEPReq+0x240>
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	3310      	adds	r3, #16
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	4413      	add	r3, r2
 8009688:	3304      	adds	r3, #4
 800968a:	e00b      	b.n	80096a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	3304      	adds	r3, #4
 80096a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <USBD_StdEPReq+0x266>
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	2b80      	cmp	r3, #128	@ 0x80
 80096b0:	d103      	bne.n	80096ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	e00e      	b.n	80096d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 f822 	bl	800a708 <USBD_LL_IsStallEP>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e002      	b.n	80096d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2202      	movs	r2, #2
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fb92 	bl	8009e08 <USBD_CtlSendData>
              break;
 80096e4:	e004      	b.n	80096f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fb23 	bl	8009d34 <USBD_CtlError>
              break;
 80096ee:	bf00      	nop
          }
          break;
 80096f0:	e004      	b.n	80096fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fb1d 	bl	8009d34 <USBD_CtlError>
          break;
 80096fa:	bf00      	nop
      }
      break;
 80096fc:	e004      	b.n	8009708 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fb17 	bl	8009d34 <USBD_CtlError>
      break;
 8009706:	bf00      	nop
  }

  return ret;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	885b      	ldrh	r3, [r3, #2]
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	2b06      	cmp	r3, #6
 8009736:	f200 8128 	bhi.w	800998a <USBD_GetDescriptor+0x276>
 800973a:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <USBD_GetDescriptor+0x2c>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	0800975d 	.word	0x0800975d
 8009744:	08009775 	.word	0x08009775
 8009748:	080097b5 	.word	0x080097b5
 800974c:	0800998b 	.word	0x0800998b
 8009750:	0800998b 	.word	0x0800998b
 8009754:	0800992b 	.word	0x0800992b
 8009758:	08009957 	.word	0x08009957
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
      break;
 8009772:	e112      	b.n	800999a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7c1b      	ldrb	r3, [r3, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10d      	bne.n	8009798 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	f107 0208 	add.w	r2, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	2202      	movs	r2, #2
 8009794:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009796:	e100      	b.n	800999a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a0:	f107 0208 	add.w	r2, r7, #8
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3301      	adds	r3, #1
 80097ae:	2202      	movs	r2, #2
 80097b0:	701a      	strb	r2, [r3, #0]
      break;
 80097b2:	e0f2      	b.n	800999a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	f200 80ac 	bhi.w	8009918 <USBD_GetDescriptor+0x204>
 80097c0:	a201      	add	r2, pc, #4	@ (adr r2, 80097c8 <USBD_GetDescriptor+0xb4>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097e1 	.word	0x080097e1
 80097cc:	08009815 	.word	0x08009815
 80097d0:	08009849 	.word	0x08009849
 80097d4:	0800987d 	.word	0x0800987d
 80097d8:	080098b1 	.word	0x080098b1
 80097dc:	080098e5 	.word	0x080098e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	7c12      	ldrb	r2, [r2, #16]
 80097f8:	f107 0108 	add.w	r1, r7, #8
 80097fc:	4610      	mov	r0, r2
 80097fe:	4798      	blx	r3
 8009800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009802:	e091      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fa94 	bl	8009d34 <USBD_CtlError>
            err++;
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	3301      	adds	r3, #1
 8009810:	72fb      	strb	r3, [r7, #11]
          break;
 8009812:	e089      	b.n	8009928 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	7c12      	ldrb	r2, [r2, #16]
 800982c:	f107 0108 	add.w	r1, r7, #8
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
 8009834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009836:	e077      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa7a 	bl	8009d34 <USBD_CtlError>
            err++;
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	3301      	adds	r3, #1
 8009844:	72fb      	strb	r3, [r7, #11]
          break;
 8009846:	e06f      	b.n	8009928 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7c12      	ldrb	r2, [r2, #16]
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
 8009868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986a:	e05d      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa60 	bl	8009d34 <USBD_CtlError>
            err++;
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3301      	adds	r3, #1
 8009878:	72fb      	strb	r3, [r7, #11]
          break;
 800987a:	e055      	b.n	8009928 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7c12      	ldrb	r2, [r2, #16]
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
 800989c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989e:	e043      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa46 	bl	8009d34 <USBD_CtlError>
            err++;
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	3301      	adds	r3, #1
 80098ac:	72fb      	strb	r3, [r7, #11]
          break;
 80098ae:	e03b      	b.n	8009928 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	7c12      	ldrb	r2, [r2, #16]
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d2:	e029      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa2c 	bl	8009d34 <USBD_CtlError>
            err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
          break;
 80098e2:	e021      	b.n	8009928 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	7c12      	ldrb	r2, [r2, #16]
 80098fc:	f107 0108 	add.w	r1, r7, #8
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
 8009904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009906:	e00f      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa12 	bl	8009d34 <USBD_CtlError>
            err++;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	3301      	adds	r3, #1
 8009914:	72fb      	strb	r3, [r7, #11]
          break;
 8009916:	e007      	b.n	8009928 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa0a 	bl	8009d34 <USBD_CtlError>
          err++;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	3301      	adds	r3, #1
 8009924:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009926:	e038      	b.n	800999a <USBD_GetDescriptor+0x286>
 8009928:	e037      	b.n	800999a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7c1b      	ldrb	r3, [r3, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d109      	bne.n	8009946 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993a:	f107 0208 	add.w	r2, r7, #8
 800993e:	4610      	mov	r0, r2
 8009940:	4798      	blx	r3
 8009942:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009944:	e029      	b.n	800999a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9f3 	bl	8009d34 <USBD_CtlError>
        err++;
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	3301      	adds	r3, #1
 8009952:	72fb      	strb	r3, [r7, #11]
      break;
 8009954:	e021      	b.n	800999a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7c1b      	ldrb	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10d      	bne.n	800997a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009966:	f107 0208 	add.w	r2, r7, #8
 800996a:	4610      	mov	r0, r2
 800996c:	4798      	blx	r3
 800996e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	2207      	movs	r2, #7
 8009976:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009978:	e00f      	b.n	800999a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f9d9 	bl	8009d34 <USBD_CtlError>
        err++;
 8009982:	7afb      	ldrb	r3, [r7, #11]
 8009984:	3301      	adds	r3, #1
 8009986:	72fb      	strb	r3, [r7, #11]
      break;
 8009988:	e007      	b.n	800999a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9d1 	bl	8009d34 <USBD_CtlError>
      err++;
 8009992:	7afb      	ldrb	r3, [r7, #11]
 8009994:	3301      	adds	r3, #1
 8009996:	72fb      	strb	r3, [r7, #11]
      break;
 8009998:	bf00      	nop
  }

  if (err != 0U)
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d11c      	bne.n	80099da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099a0:	893b      	ldrh	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d011      	beq.n	80099ca <USBD_GetDescriptor+0x2b6>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	88db      	ldrh	r3, [r3, #6]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00d      	beq.n	80099ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	88da      	ldrh	r2, [r3, #6]
 80099b2:	893b      	ldrh	r3, [r7, #8]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	bf28      	it	cs
 80099b8:	4613      	movcs	r3, r2
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099be:	893b      	ldrh	r3, [r7, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa1f 	bl	8009e08 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d104      	bne.n	80099dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa76 	bl	8009ec4 <USBD_CtlSendStatus>
 80099d8:	e000      	b.n	80099dc <USBD_GetDescriptor+0x2c8>
    return;
 80099da:	bf00      	nop
    }
  }
}
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop

080099e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	889b      	ldrh	r3, [r3, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d130      	bne.n	8009a58 <USBD_SetAddress+0x74>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d12c      	bne.n	8009a58 <USBD_SetAddress+0x74>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a04:	d828      	bhi.n	8009a58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d104      	bne.n	8009a26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f988 	bl	8009d34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a24:	e01d      	b.n	8009a62 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fe94 	bl	800a760 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa43 	bl	8009ec4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d004      	beq.n	8009a4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a4c:	e009      	b.n	8009a62 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a56:	e004      	b.n	8009a62 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f96a 	bl	8009d34 <USBD_CtlError>
  }
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	885b      	ldrh	r3, [r3, #2]
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	4b41      	ldr	r3, [pc, #260]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a80:	4b40      	ldr	r3, [pc, #256]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d904      	bls.n	8009a92 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f952 	bl	8009d34 <USBD_CtlError>
 8009a90:	e075      	b.n	8009b7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d002      	beq.n	8009aa2 <USBD_SetConfig+0x36>
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	d023      	beq.n	8009ae8 <USBD_SetConfig+0x7c>
 8009aa0:	e062      	b.n	8009b68 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aa2:	4b38      	ldr	r3, [pc, #224]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01a      	beq.n	8009ae0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009aaa:	4b36      	ldr	r3, [pc, #216]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009abc:	4b31      	ldr	r3, [pc, #196]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff f9e7 	bl	8008e96 <USBD_SetClassConfig>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d104      	bne.n	8009ad8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f92f 	bl	8009d34 <USBD_CtlError>
            return;
 8009ad6:	e052      	b.n	8009b7e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9f3 	bl	8009ec4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ade:	e04e      	b.n	8009b7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f9ef 	bl	8009ec4 <USBD_CtlSendStatus>
        break;
 8009ae6:	e04a      	b.n	8009b7e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009ae8:	4b26      	ldr	r3, [pc, #152]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d112      	bne.n	8009b16 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009af8:	4b22      	ldr	r3, [pc, #136]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b02:	4b20      	ldr	r3, [pc, #128]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff f9e3 	bl	8008ed4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f9d8 	bl	8009ec4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b14:	e033      	b.n	8009b7e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b16:	4b1b      	ldr	r3, [pc, #108]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d01d      	beq.n	8009b60 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff f9d1 	bl	8008ed4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b32:	4b14      	ldr	r3, [pc, #80]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b3c:	4b11      	ldr	r3, [pc, #68]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff f9a7 	bl	8008e96 <USBD_SetClassConfig>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d104      	bne.n	8009b58 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8ef 	bl	8009d34 <USBD_CtlError>
            return;
 8009b56:	e012      	b.n	8009b7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9b3 	bl	8009ec4 <USBD_CtlSendStatus>
        break;
 8009b5e:	e00e      	b.n	8009b7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f9af 	bl	8009ec4 <USBD_CtlSendStatus>
        break;
 8009b66:	e00a      	b.n	8009b7e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8e2 	bl	8009d34 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b70:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <USBD_SetConfig+0x118>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff f9ac 	bl	8008ed4 <USBD_ClrClassConfig>
        break;
 8009b7c:	bf00      	nop
    }
  }
}
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	2000057c 	.word	0x2000057c

08009b88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	88db      	ldrh	r3, [r3, #6]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d004      	beq.n	8009ba4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f8c9 	bl	8009d34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ba2:	e022      	b.n	8009bea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	dc02      	bgt.n	8009bb4 <USBD_GetConfig+0x2c>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dc03      	bgt.n	8009bba <USBD_GetConfig+0x32>
 8009bb2:	e015      	b.n	8009be0 <USBD_GetConfig+0x58>
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d00b      	beq.n	8009bd0 <USBD_GetConfig+0x48>
 8009bb8:	e012      	b.n	8009be0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f91d 	bl	8009e08 <USBD_CtlSendData>
        break;
 8009bce:	e00c      	b.n	8009bea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f915 	bl	8009e08 <USBD_CtlSendData>
        break;
 8009bde:	e004      	b.n	8009bea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f8a6 	bl	8009d34 <USBD_CtlError>
        break;
 8009be8:	bf00      	nop
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c02:	3b01      	subs	r3, #1
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d81e      	bhi.n	8009c46 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	88db      	ldrh	r3, [r3, #6]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d004      	beq.n	8009c1a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f88e 	bl	8009d34 <USBD_CtlError>
        break;
 8009c18:	e01a      	b.n	8009c50 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d005      	beq.n	8009c36 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f043 0202 	orr.w	r2, r3, #2
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f8e2 	bl	8009e08 <USBD_CtlSendData>
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f873 	bl	8009d34 <USBD_CtlError>
      break;
 8009c4e:	bf00      	nop
  }
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d106      	bne.n	8009c78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f926 	bl	8009ec4 <USBD_CtlSendStatus>
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c90:	3b01      	subs	r3, #1
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d80b      	bhi.n	8009cae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10c      	bne.n	8009cb8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f90c 	bl	8009ec4 <USBD_CtlSendStatus>
      }
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f83f 	bl	8009d34 <USBD_CtlError>
      break;
 8009cb6:	e000      	b.n	8009cba <USBD_ClrFeature+0x3a>
      break;
 8009cb8:	bf00      	nop
  }
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	785a      	ldrb	r2, [r3, #1]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	3302      	adds	r3, #2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	3303      	adds	r3, #3
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	3305      	adds	r3, #5
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	3306      	adds	r3, #6
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	3307      	adds	r3, #7
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	021b      	lsls	r3, r3, #8
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	80da      	strh	r2, [r3, #6]

}
 8009d2a:	bf00      	nop
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bc80      	pop	{r7}
 8009d32:	4770      	bx	lr

08009d34 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d3e:	2180      	movs	r1, #128	@ 0x80
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fca3 	bl	800a68c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d46:	2100      	movs	r1, #0
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fc9f 	bl	800a68c <USBD_LL_StallEP>
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b086      	sub	sp, #24
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d032      	beq.n	8009dd2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f834 	bl	8009dda <USBD_GetLen>
 8009d72:	4603      	mov	r3, r0
 8009d74:	3301      	adds	r3, #1
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	75fa      	strb	r2, [r7, #23]
 8009d86:	461a      	mov	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	75fa      	strb	r2, [r7, #23]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	2203      	movs	r2, #3
 8009da0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009da2:	e012      	b.n	8009dca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	60fa      	str	r2, [r7, #12]
 8009daa:	7dfa      	ldrb	r2, [r7, #23]
 8009dac:	1c51      	adds	r1, r2, #1
 8009dae:	75f9      	strb	r1, [r7, #23]
 8009db0:	4611      	mov	r1, r2
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	440a      	add	r2, r1
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	75fa      	strb	r2, [r7, #23]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e8      	bne.n	8009da4 <USBD_GetString+0x4e>
    }
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009de6:	e005      	b.n	8009df4 <USBD_GetLen+0x1a>
  {
    len++;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3301      	adds	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3301      	adds	r3, #1
 8009df2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f5      	bne.n	8009de8 <USBD_GetLen+0xe>
  }

  return len;
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	2100      	movs	r1, #0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 fcb4 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e4e:	88fb      	ldrh	r3, [r7, #6]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fca2 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2203      	movs	r2, #3
 8009e76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e82:	88fa      	ldrh	r2, [r7, #6]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fca7 	bl	800a7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fc95 	bl	800a7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2204      	movs	r2, #4
 8009ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fc5f 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2205      	movs	r2, #5
 8009ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009efa:	2300      	movs	r3, #0
 8009efc:	2200      	movs	r2, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fc6f 	bl	800a7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f14:	2200      	movs	r2, #0
 8009f16:	4912      	ldr	r1, [pc, #72]	@ (8009f60 <MX_USB_DEVICE_Init+0x50>)
 8009f18:	4812      	ldr	r0, [pc, #72]	@ (8009f64 <MX_USB_DEVICE_Init+0x54>)
 8009f1a:	f7fe ff62 	bl	8008de2 <USBD_Init>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f24:	f7f7 f854 	bl	8000fd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f28:	490f      	ldr	r1, [pc, #60]	@ (8009f68 <MX_USB_DEVICE_Init+0x58>)
 8009f2a:	480e      	ldr	r0, [pc, #56]	@ (8009f64 <MX_USB_DEVICE_Init+0x54>)
 8009f2c:	f7fe ff84 	bl	8008e38 <USBD_RegisterClass>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f36:	f7f7 f84b 	bl	8000fd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f3a:	490c      	ldr	r1, [pc, #48]	@ (8009f6c <MX_USB_DEVICE_Init+0x5c>)
 8009f3c:	4809      	ldr	r0, [pc, #36]	@ (8009f64 <MX_USB_DEVICE_Init+0x54>)
 8009f3e:	f7fe feb5 	bl	8008cac <USBD_CDC_RegisterInterface>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f48:	f7f7 f842 	bl	8000fd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f4c:	4805      	ldr	r0, [pc, #20]	@ (8009f64 <MX_USB_DEVICE_Init+0x54>)
 8009f4e:	f7fe ff8c 	bl	8008e6a <USBD_Start>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f58:	f7f7 f83a 	bl	8000fd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f5c:	bf00      	nop
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	2000012c 	.word	0x2000012c
 8009f64:	20000580 	.word	0x20000580
 8009f68:	20000018 	.word	0x20000018
 8009f6c:	2000011c 	.word	0x2000011c

08009f70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f74:	2200      	movs	r2, #0
 8009f76:	4905      	ldr	r1, [pc, #20]	@ (8009f8c <CDC_Init_FS+0x1c>)
 8009f78:	4805      	ldr	r0, [pc, #20]	@ (8009f90 <CDC_Init_FS+0x20>)
 8009f7a:	f7fe fead 	bl	8008cd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f7e:	4905      	ldr	r1, [pc, #20]	@ (8009f94 <CDC_Init_FS+0x24>)
 8009f80:	4803      	ldr	r0, [pc, #12]	@ (8009f90 <CDC_Init_FS+0x20>)
 8009f82:	f7fe fec2 	bl	8008d0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000944 	.word	0x20000944
 8009f90:	20000580 	.word	0x20000580
 8009f94:	20000844 	.word	0x20000844

08009f98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr
	...

08009fa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2b23      	cmp	r3, #35	@ 0x23
 8009fbc:	f200 808c 	bhi.w	800a0d8 <CDC_Control_FS+0x130>
 8009fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <CDC_Control_FS+0x20>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	0800a0d9 	.word	0x0800a0d9
 8009fcc:	0800a0d9 	.word	0x0800a0d9
 8009fd0:	0800a0d9 	.word	0x0800a0d9
 8009fd4:	0800a0d9 	.word	0x0800a0d9
 8009fd8:	0800a0d9 	.word	0x0800a0d9
 8009fdc:	0800a0d9 	.word	0x0800a0d9
 8009fe0:	0800a0d9 	.word	0x0800a0d9
 8009fe4:	0800a0d9 	.word	0x0800a0d9
 8009fe8:	0800a0d9 	.word	0x0800a0d9
 8009fec:	0800a0d9 	.word	0x0800a0d9
 8009ff0:	0800a0d9 	.word	0x0800a0d9
 8009ff4:	0800a0d9 	.word	0x0800a0d9
 8009ff8:	0800a0d9 	.word	0x0800a0d9
 8009ffc:	0800a0d9 	.word	0x0800a0d9
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	0800a0d9 	.word	0x0800a0d9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0d9 	.word	0x0800a0d9
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0d9 	.word	0x0800a0d9
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a093 	.word	0x0800a093
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	4b22      	ldr	r3, [pc, #136]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a05e:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785a      	ldrb	r2, [r3, #1]
 800a064:	4b20      	ldr	r3, [pc, #128]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a066:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	789a      	ldrb	r2, [r3, #2]
 800a06c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a06e:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	78da      	ldrb	r2, [r3, #3]
 800a074:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a076:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	791a      	ldrb	r2, [r3, #4]
 800a07c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a07e:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	795a      	ldrb	r2, [r3, #5]
 800a084:	4b18      	ldr	r3, [pc, #96]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a086:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	799a      	ldrb	r2, [r3, #6]
 800a08c:	4b16      	ldr	r3, [pc, #88]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a08e:	719a      	strb	r2, [r3, #6]

    break;
 800a090:	e023      	b.n	800a0da <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a092:	4b15      	ldr	r3, [pc, #84]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	4a12      	ldr	r2, [pc, #72]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0a0:	7852      	ldrb	r2, [r2, #1]
 800a0a2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0aa:	7892      	ldrb	r2, [r2, #2]
 800a0ac:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	3303      	adds	r3, #3
 800a0b2:	4a0d      	ldr	r2, [pc, #52]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0b4:	78d2      	ldrb	r2, [r2, #3]
 800a0b6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0be:	7912      	ldrb	r2, [r2, #4]
 800a0c0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3305      	adds	r3, #5
 800a0c6:	4a08      	ldr	r2, [pc, #32]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0c8:	7952      	ldrb	r2, [r2, #5]
 800a0ca:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	3306      	adds	r3, #6
 800a0d0:	4a05      	ldr	r2, [pc, #20]	@ (800a0e8 <CDC_Control_FS+0x140>)
 800a0d2:	7992      	ldrb	r2, [r2, #6]
 800a0d4:	701a      	strb	r2, [r3, #0]
    break;
 800a0d6:	e000      	b.n	800a0da <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0d8:	bf00      	nop
  }

  return (USBD_OK);
 800a0da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bc80      	pop	{r7}
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	20000a44 	.word	0x20000a44

0800a0ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a128 <CDC_Receive_FS+0x3c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <CDC_Receive_FS+0x3c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	6812      	ldr	r2, [r2, #0]
 800a106:	b292      	uxth	r2, r2
 800a108:	4611      	mov	r1, r2
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4806      	ldr	r0, [pc, #24]	@ (800a12c <CDC_Receive_FS+0x40>)
 800a112:	f7fe fdfa 	bl	8008d0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a116:	4805      	ldr	r0, [pc, #20]	@ (800a12c <CDC_Receive_FS+0x40>)
 800a118:	f7fe fe39 	bl	8008d8e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a11c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000a4c 	.word	0x20000a4c
 800a12c:	20000580 	.word	0x20000580

0800a130 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a140:	4b0d      	ldr	r3, [pc, #52]	@ (800a178 <CDC_Transmit_FS+0x48>)
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a146:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a152:	2301      	movs	r3, #1
 800a154:	e00b      	b.n	800a16e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a156:	887b      	ldrh	r3, [r7, #2]
 800a158:	461a      	mov	r2, r3
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4806      	ldr	r0, [pc, #24]	@ (800a178 <CDC_Transmit_FS+0x48>)
 800a15e:	f7fe fdbb 	bl	8008cd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a162:	4805      	ldr	r0, [pc, #20]	@ (800a178 <CDC_Transmit_FS+0x48>)
 800a164:	f7fe fde4 	bl	8008d30 <USBD_CDC_TransmitPacket>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000580 	.word	0x20000580

0800a17c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a184:	4a03      	ldr	r2, [pc, #12]	@ (800a194 <CDC_AttachRxData+0x18>)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6013      	str	r3, [r2, #0]
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr
 800a194:	20000a4c 	.word	0x20000a4c

0800a198 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2212      	movs	r2, #18
 800a1a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1aa:	4b03      	ldr	r3, [pc, #12]	@ (800a1b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20000148 	.word	0x20000148

0800a1bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1ce:	4b03      	ldr	r3, [pc, #12]	@ (800a1dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bc80      	pop	{r7}
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	2000015c 	.word	0x2000015c

0800a1e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4907      	ldr	r1, [pc, #28]	@ (800a214 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1f6:	4808      	ldr	r0, [pc, #32]	@ (800a218 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1f8:	f7ff fdad 	bl	8009d56 <USBD_GetString>
 800a1fc:	e004      	b.n	800a208 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4904      	ldr	r1, [pc, #16]	@ (800a214 <USBD_FS_ProductStrDescriptor+0x34>)
 800a202:	4805      	ldr	r0, [pc, #20]	@ (800a218 <USBD_FS_ProductStrDescriptor+0x38>)
 800a204:	f7ff fda7 	bl	8009d56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a208:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000a50 	.word	0x20000a50
 800a218:	0800a958 	.word	0x0800a958

0800a21c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	4904      	ldr	r1, [pc, #16]	@ (800a23c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a22c:	4804      	ldr	r0, [pc, #16]	@ (800a240 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a22e:	f7ff fd92 	bl	8009d56 <USBD_GetString>
  return USBD_StrDesc;
 800a232:	4b02      	ldr	r3, [pc, #8]	@ (800a23c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000a50 	.word	0x20000a50
 800a240:	0800a970 	.word	0x0800a970

0800a244 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	6039      	str	r1, [r7, #0]
 800a24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	221a      	movs	r2, #26
 800a254:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a256:	f000 f843 	bl	800a2e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a25a:	4b02      	ldr	r3, [pc, #8]	@ (800a264 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20000160 	.word	0x20000160

0800a268 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4907      	ldr	r1, [pc, #28]	@ (800a29c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a27e:	4808      	ldr	r0, [pc, #32]	@ (800a2a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a280:	f7ff fd69 	bl	8009d56 <USBD_GetString>
 800a284:	e004      	b.n	800a290 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	4904      	ldr	r1, [pc, #16]	@ (800a29c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a28a:	4805      	ldr	r0, [pc, #20]	@ (800a2a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a28c:	f7ff fd63 	bl	8009d56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a290:	4b02      	ldr	r3, [pc, #8]	@ (800a29c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000a50 	.word	0x20000a50
 800a2a0:	0800a984 	.word	0x0800a984

0800a2a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d105      	bne.n	800a2c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4907      	ldr	r1, [pc, #28]	@ (800a2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ba:	4808      	ldr	r0, [pc, #32]	@ (800a2dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2bc:	f7ff fd4b 	bl	8009d56 <USBD_GetString>
 800a2c0:	e004      	b.n	800a2cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	4904      	ldr	r1, [pc, #16]	@ (800a2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2c6:	4805      	ldr	r0, [pc, #20]	@ (800a2dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2c8:	f7ff fd45 	bl	8009d56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2cc:	4b02      	ldr	r3, [pc, #8]	@ (800a2d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000a50 	.word	0x20000a50
 800a2dc:	0800a990 	.word	0x0800a990

0800a2e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d009      	beq.n	800a308 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2f4:	2208      	movs	r2, #8
 800a2f6:	4906      	ldr	r1, [pc, #24]	@ (800a310 <Get_SerialNum+0x30>)
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 f80d 	bl	800a318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2fe:	2204      	movs	r2, #4
 800a300:	4904      	ldr	r1, [pc, #16]	@ (800a314 <Get_SerialNum+0x34>)
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f808 	bl	800a318 <IntToUnicode>
  }
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000162 	.word	0x20000162
 800a314:	20000172 	.word	0x20000172

0800a318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
 800a32e:	e027      	b.n	800a380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	2b09      	cmp	r3, #9
 800a336:	d80b      	bhi.n	800a350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	0f1b      	lsrs	r3, r3, #28
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4619      	mov	r1, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	440b      	add	r3, r1
 800a348:	3230      	adds	r2, #48	@ 0x30
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	e00a      	b.n	800a366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	0f1b      	lsrs	r3, r3, #28
 800a354:	b2da      	uxtb	r2, r3
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	4619      	mov	r1, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	440b      	add	r3, r1
 800a360:	3237      	adds	r2, #55	@ 0x37
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	3301      	adds	r3, #1
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	4413      	add	r3, r2
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	3301      	adds	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]
 800a380:	7dfa      	ldrb	r2, [r7, #23]
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	429a      	cmp	r2, r3
 800a386:	d3d3      	bcc.n	800a330 <IntToUnicode+0x18>
  }
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d8 <HAL_PCD_MspInit+0x44>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d113      	bne.n	800a3ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <HAL_PCD_MspInit+0x48>)
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a3dc <HAL_PCD_MspInit+0x48>)
 800a3ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3b0:	61d3      	str	r3, [r2, #28]
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <HAL_PCD_MspInit+0x48>)
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	2014      	movs	r0, #20
 800a3c4:	f7f7 fd11 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3c8:	2014      	movs	r0, #20
 800a3ca:	f7f7 fd2a 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	40005c00 	.word	0x40005c00
 800a3dc:	40021000 	.word	0x40021000

0800a3e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fe fd7f 	bl	8008efa <USBD_LL_SetupStage>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	6879      	ldr	r1, [r7, #4]
 800a41a:	4613      	mov	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	440b      	add	r3, r1
 800a424:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	78fb      	ldrb	r3, [r7, #3]
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7fe fdb1 	bl	8008f94 <USBD_LL_DataOutStage>
}
 800a432:	bf00      	nop
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a44c:	78fa      	ldrb	r2, [r7, #3]
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	440b      	add	r3, r1
 800a45a:	333c      	adds	r3, #60	@ 0x3c
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	4619      	mov	r1, r3
 800a462:	f7fe fe08 	bl	8009076 <USBD_LL_DataInStage>
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe ff18 	bl	80092b2 <USBD_LL_SOF>
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a492:	2301      	movs	r3, #1
 800a494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d001      	beq.n	800a4a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a49e:	f7f6 fd97 	bl	8000fd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4a8:	7bfa      	ldrb	r2, [r7, #15]
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe fec8 	bl	8009242 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fe81 	bl	80091c0 <USBD_LL_Reset>
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe fec2 	bl	8009260 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4e4:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <HAL_PCD_SuspendCallback+0x30>)
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	4a03      	ldr	r2, [pc, #12]	@ (800a4f8 <HAL_PCD_SuspendCallback+0x30>)
 800a4ea:	f043 0306 	orr.w	r3, r3, #6
 800a4ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed00 	.word	0xe000ed00

0800a4fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe febc 	bl	8009288 <USBD_LL_Resume>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a520:	4a28      	ldr	r2, [pc, #160]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a26      	ldr	r2, [pc, #152]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a52c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a530:	4b24      	ldr	r3, [pc, #144]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a532:	4a25      	ldr	r2, [pc, #148]	@ (800a5c8 <USBD_LL_Init+0xb0>)
 800a534:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a536:	4b23      	ldr	r3, [pc, #140]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a538:	2208      	movs	r2, #8
 800a53a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a53c:	4b21      	ldr	r3, [pc, #132]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a53e:	2202      	movs	r2, #2
 800a540:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a542:	4b20      	ldr	r3, [pc, #128]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a544:	2200      	movs	r2, #0
 800a546:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a548:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a54e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a550:	2200      	movs	r2, #0
 800a552:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a554:	481b      	ldr	r0, [pc, #108]	@ (800a5c4 <USBD_LL_Init+0xac>)
 800a556:	f7f8 fa1b 	bl	8002990 <HAL_PCD_Init>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a560:	f7f6 fd36 	bl	8000fd0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a56a:	2318      	movs	r3, #24
 800a56c:	2200      	movs	r2, #0
 800a56e:	2100      	movs	r1, #0
 800a570:	f7f9 ff39 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a57a:	2358      	movs	r3, #88	@ 0x58
 800a57c:	2200      	movs	r2, #0
 800a57e:	2180      	movs	r1, #128	@ 0x80
 800a580:	f7f9 ff31 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58a:	23c0      	movs	r3, #192	@ 0xc0
 800a58c:	2200      	movs	r2, #0
 800a58e:	2181      	movs	r1, #129	@ 0x81
 800a590:	f7f9 ff29 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a59a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a59e:	2200      	movs	r2, #0
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	f7f9 ff20 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2182      	movs	r1, #130	@ 0x82
 800a5b4:	f7f9 ff17 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000c50 	.word	0x20000c50
 800a5c8:	40005c00 	.word	0x40005c00

0800a5cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f8 fad3 	bl	8002b8e <HAL_PCD_Start>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f94e 	bl	800a890 <USBD_Get_USB_Status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	4608      	mov	r0, r1
 800a60c:	4611      	mov	r1, r2
 800a60e:	461a      	mov	r2, r3
 800a610:	4603      	mov	r3, r0
 800a612:	70fb      	strb	r3, [r7, #3]
 800a614:	460b      	mov	r3, r1
 800a616:	70bb      	strb	r3, [r7, #2]
 800a618:	4613      	mov	r3, r2
 800a61a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a62a:	78bb      	ldrb	r3, [r7, #2]
 800a62c:	883a      	ldrh	r2, [r7, #0]
 800a62e:	78f9      	ldrb	r1, [r7, #3]
 800a630:	f7f8 fc28 	bl	8002e84 <HAL_PCD_EP_Open>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f928 	bl	800a890 <USBD_Get_USB_Status>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a644:	7bbb      	ldrb	r3, [r7, #14]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f8 fc66 	bl	8002f3e <HAL_PCD_EP_Close>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f909 	bl	800a890 <USBD_Get_USB_Status>
 800a67e:	4603      	mov	r3, r0
 800a680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a682:	7bbb      	ldrb	r3, [r7, #14]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f8 fd0e 	bl	80030cc <HAL_PCD_EP_SetStall>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 f8ea 	bl	800a890 <USBD_Get_USB_Status>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f8 fd4f 	bl	800318c <HAL_PCD_EP_ClrStall>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f8cb 	bl	800a890 <USBD_Get_USB_Status>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a71a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	da0c      	bge.n	800a73e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72a:	68f9      	ldr	r1, [r7, #12]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	440b      	add	r3, r1
 800a738:	3302      	adds	r3, #2
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	e00b      	b.n	800a756 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a744:	68f9      	ldr	r1, [r7, #12]
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a754:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bc80      	pop	{r7}
 800a75e:	4770      	bx	lr

0800a760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f8 fb5b 	bl	8002e3a <HAL_PCD_SetAddress>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f880 	bl	800a890 <USBD_Get_USB_Status>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	72fb      	strb	r3, [r7, #11]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7c0:	893b      	ldrh	r3, [r7, #8]
 800a7c2:	7af9      	ldrb	r1, [r7, #11]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	f7f8 fc4a 	bl	800305e <HAL_PCD_EP_Transmit>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 f85d 	bl	800a890 <USBD_Get_USB_Status>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	72fb      	strb	r3, [r7, #11]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a806:	893b      	ldrh	r3, [r7, #8]
 800a808:	7af9      	ldrb	r1, [r7, #11]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	f7f8 fbdf 	bl	8002fce <HAL_PCD_EP_Receive>
 800a810:	4603      	mov	r3, r0
 800a812:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f83a 	bl	800a890 <USBD_Get_USB_Status>
 800a81c:	4603      	mov	r3, r0
 800a81e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a820:	7dbb      	ldrb	r3, [r7, #22]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	4611      	mov	r1, r2
 800a840:	4618      	mov	r0, r3
 800a842:	f7f8 fbf5 	bl	8003030 <HAL_PCD_EP_GetRxCount>
 800a846:	4603      	mov	r3, r0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a858:	4b02      	ldr	r3, [pc, #8]	@ (800a864 <USBD_static_malloc+0x14>)
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr
 800a864:	20000f40 	.word	0x20000f40

0800a868 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bc80      	pop	{r7}
 800a88e:	4770      	bx	lr

0800a890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	4603      	mov	r3, r0
 800a898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d817      	bhi.n	800a8d4 <USBD_Get_USB_Status+0x44>
 800a8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <USBD_Get_USB_Status+0x1c>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8bd 	.word	0x0800a8bd
 800a8b0:	0800a8c3 	.word	0x0800a8c3
 800a8b4:	0800a8c9 	.word	0x0800a8c9
 800a8b8:	0800a8cf 	.word	0x0800a8cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c0:	e00b      	b.n	800a8da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c6:	e008      	b.n	800a8da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a8cc:	e005      	b.n	800a8da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d2:	e002      	b.n	800a8da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d8:	bf00      	nop
  }
  return usb_status;
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop

0800a8e8 <memset>:
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	4402      	add	r2, r0
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d100      	bne.n	800a8f2 <memset+0xa>
 800a8f0:	4770      	bx	lr
 800a8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f6:	e7f9      	b.n	800a8ec <memset+0x4>

0800a8f8 <__libc_init_array>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	2600      	movs	r6, #0
 800a8fc:	4d0c      	ldr	r5, [pc, #48]	@ (800a930 <__libc_init_array+0x38>)
 800a8fe:	4c0d      	ldr	r4, [pc, #52]	@ (800a934 <__libc_init_array+0x3c>)
 800a900:	1b64      	subs	r4, r4, r5
 800a902:	10a4      	asrs	r4, r4, #2
 800a904:	42a6      	cmp	r6, r4
 800a906:	d109      	bne.n	800a91c <__libc_init_array+0x24>
 800a908:	f000 f81a 	bl	800a940 <_init>
 800a90c:	2600      	movs	r6, #0
 800a90e:	4d0a      	ldr	r5, [pc, #40]	@ (800a938 <__libc_init_array+0x40>)
 800a910:	4c0a      	ldr	r4, [pc, #40]	@ (800a93c <__libc_init_array+0x44>)
 800a912:	1b64      	subs	r4, r4, r5
 800a914:	10a4      	asrs	r4, r4, #2
 800a916:	42a6      	cmp	r6, r4
 800a918:	d105      	bne.n	800a926 <__libc_init_array+0x2e>
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a920:	4798      	blx	r3
 800a922:	3601      	adds	r6, #1
 800a924:	e7ee      	b.n	800a904 <__libc_init_array+0xc>
 800a926:	f855 3b04 	ldr.w	r3, [r5], #4
 800a92a:	4798      	blx	r3
 800a92c:	3601      	adds	r6, #1
 800a92e:	e7f2      	b.n	800a916 <__libc_init_array+0x1e>
 800a930:	0800a9cc 	.word	0x0800a9cc
 800a934:	0800a9cc 	.word	0x0800a9cc
 800a938:	0800a9cc 	.word	0x0800a9cc
 800a93c:	0800a9d0 	.word	0x0800a9d0

0800a940 <_init>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr

0800a94c <_fini>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr
