
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a91c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800aa28  0800aa28  0000ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  0000c180  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa9c  0800aa9c  0000c180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa9c  0800aa9c  0000c180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa0  0800aaa0  0000baa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aaa4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  20000180  0800ac24  0000c180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800ac24  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193a5  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  0002554e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00029100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  0002a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5c2  00000000  00000000  0002b921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2d3  00000000  00000000  00046ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096937  00000000  00000000  000641b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faaed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  000fab30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00100a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aa10 	.word	0x0800aa10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800aa10 	.word	0x0800aa10

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0 = bufADC[0];
 8000154:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000156:	881a      	ldrh	r2, [r3, #0]
 8000158:	4b12      	ldr	r3, [pc, #72]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800015a:	801a      	strh	r2, [r3, #0]
	ir.sensor1 = bufADC[1];
 800015c:	4b10      	ldr	r3, [pc, #64]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800015e:	885a      	ldrh	r2, [r3, #2]
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000162:	805a      	strh	r2, [r3, #2]
	ir.sensor2 = bufADC[2];
 8000164:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000166:	889a      	ldrh	r2, [r3, #4]
 8000168:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800016a:	809a      	strh	r2, [r3, #4]
	ir.sensor3 = bufADC[3];
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800016e:	88da      	ldrh	r2, [r3, #6]
 8000170:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000172:	80da      	strh	r2, [r3, #6]
	ir.sensor4 = bufADC[4];
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000176:	891a      	ldrh	r2, [r3, #8]
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800017a:	811a      	strh	r2, [r3, #8]
	ir.sensor5 = bufADC[5];
 800017c:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800017e:	895a      	ldrh	r2, [r3, #10]
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000182:	815a      	strh	r2, [r3, #10]
	ir.sensor6 = bufADC[6];
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000186:	899a      	ldrh	r2, [r3, #12]
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800018a:	819a      	strh	r2, [r3, #12]
	ir.sensor7 = bufADC[7];
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000192:	81da      	strh	r2, [r3, #14]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000564 	.word	0x20000564
 80001a4:	200003ac 	.word	0x200003ac

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {	//Entra cada 250us, 1ms= x4, 10ms= x40, 100ms= x400
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000260 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d14c      	bne.n	8000254 <HAL_TIM_PeriodElapsedCallback+0xac>
		flags1.F250US = 1;
 80001ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001bc:	7813      	ldrb	r3, [r2, #0]
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	7013      	strb	r3, [r2, #0]

		t10ms--;
 80001c4:	4b28      	ldr	r3, [pc, #160]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	3b01      	subs	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	4b26      	ldr	r3, [pc, #152]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001ce:	701a      	strb	r2, [r3, #0]

		if(t10ms == 0){
 80001d0:	4b25      	ldr	r3, [pc, #148]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d119      	bne.n	800020c <HAL_TIM_PeriodElapsedCallback+0x64>
			flags1.F10MS = 1;
 80001d8:	4a22      	ldr	r2, [pc, #136]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80001da:	7813      	ldrb	r3, [r2, #0]
 80001dc:	f043 0302 	orr.w	r3, r3, #2
 80001e0:	7013      	strb	r3, [r2, #0]
			t10ms = TIME10ms;
 80001e2:	4b21      	ldr	r3, [pc, #132]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001e4:	2228      	movs	r2, #40	@ 0x28
 80001e6:	701a      	strb	r2, [r3, #0]

			t100ms--;
 80001e8:	4b20      	ldr	r3, [pc, #128]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3b01      	subs	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b1e      	ldr	r3, [pc, #120]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001f2:	701a      	strb	r2, [r3, #0]
			t500ms--;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80001fe:	701a      	strb	r2, [r3, #0]
			t1seg--;
 8000200:	4b1c      	ldr	r3, [pc, #112]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800020a:	701a      	strb	r2, [r3, #0]
		}

		if(t100ms == 0){
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d107      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x7c>
			flags1.F100MS = 1;
 8000214:	4a13      	ldr	r2, [pc, #76]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000216:	7813      	ldrb	r3, [r2, #0]
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	7013      	strb	r3, [r2, #0]
			t100ms = TIME100ms;
 800021e:	4b13      	ldr	r3, [pc, #76]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000220:	220a      	movs	r2, #10
 8000222:	701a      	strb	r2, [r3, #0]
		}

		if(t500ms == 0){
 8000224:	4b12      	ldr	r3, [pc, #72]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d107      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x94>
			flags1.F500MS = 1;
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800022e:	7813      	ldrb	r3, [r2, #0]
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	7013      	strb	r3, [r2, #0]
			t500ms = TIME500ms;
 8000236:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000238:	2232      	movs	r2, #50	@ 0x32
 800023a:	701a      	strb	r2, [r3, #0]
		}

		if (t1seg == 0) {
 800023c:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d107      	bne.n	8000254 <HAL_TIM_PeriodElapsedCallback+0xac>
			flags1.F1SEG = 1;
 8000244:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000246:	7813      	ldrb	r3, [r2, #0]
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	7013      	strb	r3, [r2, #0]
			t1seg = 100;
 800024e:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000250:	2264      	movs	r2, #100	@ 0x64
 8000252:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40012c00 	.word	0x40012c00
 8000264:	200003a8 	.word	0x200003a8
 8000268:	20000000 	.word	0x20000000
 800026c:	20000001 	.word	0x20000001
 8000270:	20000002 	.word	0x20000002
 8000274:	20000003 	.word	0x20000003

08000278 <HAL_UART_RxCpltCallback>:

/*=============>Recepción de datos desde USART<=============
 * Interrupción que es llamada cuando se produce una recepción de datos.
 * Cargo los datos recibidos al Buffer de Recepción
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <HAL_UART_RxCpltCallback+0x38>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d10d      	bne.n	80002a6 <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 800028a:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <HAL_UART_RxCpltCallback+0x3c>)
 800028c:	791b      	ldrb	r3, [r3, #4]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	b2d1      	uxtb	r1, r2
 8000292:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <HAL_UART_RxCpltCallback+0x3c>)
 8000294:	7111      	strb	r1, [r2, #4]
 8000296:	3308      	adds	r3, #8
 8000298:	4a06      	ldr	r2, [pc, #24]	@ (80002b4 <HAL_UART_RxCpltCallback+0x3c>)
 800029a:	4413      	add	r3, r2
 800029c:	2201      	movs	r2, #1
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <HAL_UART_RxCpltCallback+0x40>)
 80002a2:	f005 fa4f 	bl	8005744 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40013800 	.word	0x40013800
 80002b4:	200001a0 	.word	0x200001a0
 80002b8:	2000051c 	.word	0x2000051c

080002bc <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e00c      	b.n	80002e8 <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	4a09      	ldr	r2, [pc, #36]	@ (80002fc <USBReceive+0x40>)
 80002d6:	7912      	ldrb	r2, [r2, #4]
 80002d8:	4611      	mov	r1, r2
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <USBReceive+0x40>)
 80002de:	440b      	add	r3, r1
 80002e0:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbee      	blt.n	80002ce <USBReceive+0x12>
	}


}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	200001a0 	.word	0x200001a0

08000300 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000308:	e0e3      	b.n	80004d2 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 800030a:	4b78      	ldr	r3, [pc, #480]	@ (80004ec <decodeProtocol+0x1ec>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b06      	cmp	r3, #6
 8000310:	f200 80d8 	bhi.w	80004c4 <decodeProtocol+0x1c4>
 8000314:	a201      	add	r2, pc, #4	@ (adr r2, 800031c <decodeProtocol+0x1c>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	08000339 	.word	0x08000339
 8000320:	08000361 	.word	0x08000361
 8000324:	08000395 	.word	0x08000395
 8000328:	080003c9 	.word	0x080003c9
 800032c:	080003fd 	.word	0x080003fd
 8000330:	08000425 	.word	0x08000425
 8000334:	08000467 	.word	0x08000467
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	2b55      	cmp	r3, #85	@ 0x55
 800034e:	f040 80bd 	bne.w	80004cc <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 8000352:	4b66      	ldr	r3, [pc, #408]	@ (80004ec <decodeProtocol+0x1ec>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	709a      	strb	r2, [r3, #2]
			}
			break;
 800035e:	e0b5      	b.n	80004cc <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	b2d1      	uxtb	r1, r2
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	7151      	strb	r1, [r2, #5]
 800036c:	461a      	mov	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	7a1b      	ldrb	r3, [r3, #8]
 8000374:	2b4e      	cmp	r3, #78	@ 0x4e
 8000376:	d103      	bne.n	8000380 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 8000378:	4b5c      	ldr	r3, [pc, #368]	@ (80004ec <decodeProtocol+0x1ec>)
 800037a:	2202      	movs	r2, #2
 800037c:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 800037e:	e0a8      	b.n	80004d2 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	3b01      	subs	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 800038c:	4b57      	ldr	r3, [pc, #348]	@ (80004ec <decodeProtocol+0x1ec>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
			break;
 8000392:	e09e      	b.n	80004d2 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	795b      	ldrb	r3, [r3, #5]
 8000398:	1c5a      	adds	r2, r3, #1
 800039a:	b2d1      	uxtb	r1, r2
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	7151      	strb	r1, [r2, #5]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	7a1b      	ldrb	r3, [r3, #8]
 80003a8:	2b45      	cmp	r3, #69	@ 0x45
 80003aa:	d103      	bne.n	80003b4 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 80003ac:	4b4f      	ldr	r3, [pc, #316]	@ (80004ec <decodeProtocol+0x1ec>)
 80003ae:	2203      	movs	r2, #3
 80003b0:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 80003b2:	e08e      	b.n	80004d2 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	795b      	ldrb	r3, [r3, #5]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 80003c0:	4b4a      	ldr	r3, [pc, #296]	@ (80004ec <decodeProtocol+0x1ec>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
			break;
 80003c6:	e084      	b.n	80004d2 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	b2d1      	uxtb	r1, r2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7151      	strb	r1, [r2, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	2b52      	cmp	r3, #82	@ 0x52
 80003de:	d103      	bne.n	80003e8 <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 80003e0:	4b42      	ldr	r3, [pc, #264]	@ (80004ec <decodeProtocol+0x1ec>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 80003e6:	e074      	b.n	80004d2 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 80003f4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ec <decodeProtocol+0x1ec>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
			break;
 80003fa:	e06a      	b.n	80004d2 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795a      	ldrb	r2, [r3, #5]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	795b      	ldrb	r3, [r3, #5]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	b2d1      	uxtb	r1, r2
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	7151      	strb	r1, [r2, #5]
 8000410:	461a      	mov	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	7a1a      	ldrb	r2, [r3, #8]
 8000418:	4b35      	ldr	r3, [pc, #212]	@ (80004f0 <decodeProtocol+0x1f0>)
 800041a:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 800041c:	4b33      	ldr	r3, [pc, #204]	@ (80004ec <decodeProtocol+0x1ec>)
 800041e:	2205      	movs	r2, #5
 8000420:	701a      	strb	r2, [r3, #0]
			break;
 8000422:	e056      	b.n	80004d2 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	b2d1      	uxtb	r1, r2
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7151      	strb	r1, [r2, #5]
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	7a1b      	ldrb	r3, [r3, #8]
 8000438:	2b3a      	cmp	r3, #58	@ 0x3a
 800043a:	d10a      	bne.n	8000452 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 800043c:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <decodeProtocol+0x1ec>)
 800043e:	2206      	movs	r2, #6
 8000440:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000442:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <decodeProtocol+0x1f0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800044a:	b2da      	uxtb	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000450:	e03f      	b.n	80004d2 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	3b01      	subs	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <decodeProtocol+0x1ec>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
			break;
 8000464:	e035      	b.n	80004d2 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <decodeProtocol+0x1f0>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d90f      	bls.n	800048e <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	b2d1      	uxtb	r1, r2
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7151      	strb	r1, [r2, #5]
 800047a:	461a      	mov	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4413      	add	r3, r2
 8000480:	7a1a      	ldrb	r2, [r3, #8]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	789b      	ldrb	r3, [r3, #2]
 8000486:	4053      	eors	r3, r2
 8000488:	b2da      	uxtb	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 800048e:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <decodeProtocol+0x1f0>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <decodeProtocol+0x1f0>)
 8000498:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <decodeProtocol+0x1f0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d116      	bne.n	80004d0 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <decodeProtocol+0x1ec>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	789a      	ldrb	r2, [r3, #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	4619      	mov	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	440b      	add	r3, r1
 80004b6:	7a1b      	ldrb	r3, [r3, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d109      	bne.n	80004d0 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 f819 	bl	80004f4 <decodeData>
				}
			}
			break;
 80004c2:	e005      	b.n	80004d0 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <decodeProtocol+0x1ec>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
			break;
 80004ca:	e002      	b.n	80004d2 <decodeProtocol+0x1d2>
			break;
 80004cc:	bf00      	nop
 80004ce:	e000      	b.n	80004d2 <decodeProtocol+0x1d2>
			break;
 80004d0:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795a      	ldrb	r2, [r3, #5]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	f47f af15 	bne.w	800030a <decodeProtocol+0xa>
		}
	}

}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000019c 	.word	0x2000019c
 80004f0:	20000574 	.word	0x20000574

080004f4 <decodeData>:

void decodeData(_sDato *datosCom){
 80004f4:	b480      	push	{r7}
 80004f6:	b091      	sub	sp, #68	@ 0x44
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 8000502:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800050c:	3340      	adds	r3, #64	@ 0x40
 800050e:	443b      	add	r3, r7
 8000510:	2255      	movs	r2, #85	@ 0x55
 8000512:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000516:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000520:	3340      	adds	r3, #64	@ 0x40
 8000522:	443b      	add	r3, r7
 8000524:	224e      	movs	r2, #78	@ 0x4e
 8000526:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 800052a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000534:	3340      	adds	r3, #64	@ 0x40
 8000536:	443b      	add	r3, r7
 8000538:	2245      	movs	r2, #69	@ 0x45
 800053a:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 800053e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000548:	3340      	adds	r3, #64	@ 0x40
 800054a:	443b      	add	r3, r7
 800054c:	2252      	movs	r2, #82	@ 0x52
 800054e:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 8000552:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800055c:	3340      	adds	r3, #64	@ 0x40
 800055e:	443b      	add	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000566:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000570:	3340      	adds	r3, #64	@ 0x40
 8000572:	443b      	add	r3, r7
 8000574:	223a      	movs	r2, #58	@ 0x3a
 8000576:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	785b      	ldrb	r3, [r3, #1]
 800057e:	3302      	adds	r3, #2
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	2bf0      	cmp	r3, #240	@ 0xf0
 8000588:	d116      	bne.n	80005b8 <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 800058a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000594:	3340      	adds	r3, #64	@ 0x40
 8000596:	443b      	add	r3, r7
 8000598:	22f0      	movs	r2, #240	@ 0xf0
 800059a:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 800059e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005a8:	3340      	adds	r3, #64	@ 0x40
 80005aa:	443b      	add	r3, r7
 80005ac:	220d      	movs	r2, #13
 80005ae:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 80005b2:	2303      	movs	r3, #3
 80005b4:	733b      	strb	r3, [r7, #12]
			break;
 80005b6:	e00c      	b.n	80005d2 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 80005b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005c2:	3340      	adds	r3, #64	@ 0x40
 80005c4:	443b      	add	r3, r7
 80005c6:	22dd      	movs	r2, #221	@ 0xdd
 80005c8:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 80005cc:	2302      	movs	r3, #2
 80005ce:	733b      	strb	r3, [r7, #12]
			break;
 80005d0:	bf00      	nop
	}

	cheksum=0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005de:	e021      	b.n	8000624 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 80005e0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005e4:	3340      	adds	r3, #64	@ 0x40
 80005e6:	443b      	add	r3, r7
 80005e8:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80005f0:	4053      	eors	r3, r2
 80005f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80005f6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <decodeData+0x160>)
 80005fc:	799b      	ldrb	r3, [r3, #6]
 80005fe:	1c59      	adds	r1, r3, #1
 8000600:	b2c8      	uxtb	r0, r1
 8000602:	4914      	ldr	r1, [pc, #80]	@ (8000654 <decodeData+0x160>)
 8000604:	7188      	strb	r0, [r1, #6]
 8000606:	4619      	mov	r1, r3
 8000608:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800060c:	443b      	add	r3, r7
 800060e:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	440b      	add	r3, r1
 8000616:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800061a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800061e:	3301      	adds	r3, #1
 8000620:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000624:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800062c:	429a      	cmp	r2, r3
 800062e:	d3d7      	bcc.n	80005e0 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <decodeData+0x160>)
 8000632:	799b      	ldrb	r3, [r3, #6]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	b2d1      	uxtb	r1, r2
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <decodeData+0x160>)
 800063a:	7191      	strb	r1, [r2, #6]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000646:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 800064a:	bf00      	nop
 800064c:	3744      	adds	r7, #68	@ 0x44
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	200001a0 	.word	0x200001a0

08000658 <encodeData>:

void encodeData(uint8_t id){
 8000658:	b480      	push	{r7}
 800065a:	b091      	sub	sp, #68	@ 0x44
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000662:	2300      	movs	r3, #0
 8000664:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 8000668:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000672:	3340      	adds	r3, #64	@ 0x40
 8000674:	443b      	add	r3, r7
 8000676:	2255      	movs	r2, #85	@ 0x55
 8000678:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 800067c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000686:	3340      	adds	r3, #64	@ 0x40
 8000688:	443b      	add	r3, r7
 800068a:	224e      	movs	r2, #78	@ 0x4e
 800068c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000690:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800069a:	3340      	adds	r3, #64	@ 0x40
 800069c:	443b      	add	r3, r7
 800069e:	2245      	movs	r2, #69	@ 0x45
 80006a0:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80006a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006ae:	3340      	adds	r3, #64	@ 0x40
 80006b0:	443b      	add	r3, r7
 80006b2:	2252      	movs	r2, #82	@ 0x52
 80006b4:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 80006b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006c2:	3340      	adds	r3, #64	@ 0x40
 80006c4:	443b      	add	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 80006cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006d6:	3340      	adds	r3, #64	@ 0x40
 80006d8:	443b      	add	r3, r7
 80006da:	223a      	movs	r2, #58	@ 0x3a
 80006dc:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80006e4:	f040 80fd 	bne.w	80008e2 <encodeData+0x28a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006f2:	3340      	adds	r3, #64	@ 0x40
 80006f4:	443b      	add	r3, r7
 80006f6:	22a0      	movs	r2, #160	@ 0xa0
 80006f8:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 80006fc:	2312      	movs	r3, #18
 80006fe:	733b      	strb	r3, [r7, #12]

		myWord.ui16[0] = ir.sensor0;
 8000700:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <encodeData+0x328>)
 8000702:	881a      	ldrh	r2, [r3, #0]
 8000704:	4b9f      	ldr	r3, [pc, #636]	@ (8000984 <encodeData+0x32c>)
 8000706:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor0;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000708:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000712:	4619      	mov	r1, r3
 8000714:	4b9b      	ldr	r3, [pc, #620]	@ (8000984 <encodeData+0x32c>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800071c:	443b      	add	r3, r7
 800071e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000722:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800072c:	4619      	mov	r1, r3
 800072e:	4b95      	ldr	r3, [pc, #596]	@ (8000984 <encodeData+0x32c>)
 8000730:	785a      	ldrb	r2, [r3, #1]
 8000732:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000736:	443b      	add	r3, r7
 8000738:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor1;
 800073c:	4b90      	ldr	r3, [pc, #576]	@ (8000980 <encodeData+0x328>)
 800073e:	885a      	ldrh	r2, [r3, #2]
 8000740:	4b90      	ldr	r3, [pc, #576]	@ (8000984 <encodeData+0x32c>)
 8000742:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor1;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000744:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800074e:	4619      	mov	r1, r3
 8000750:	4b8c      	ldr	r3, [pc, #560]	@ (8000984 <encodeData+0x32c>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000758:	443b      	add	r3, r7
 800075a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800075e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000768:	4619      	mov	r1, r3
 800076a:	4b86      	ldr	r3, [pc, #536]	@ (8000984 <encodeData+0x32c>)
 800076c:	785a      	ldrb	r2, [r3, #1]
 800076e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000772:	443b      	add	r3, r7
 8000774:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor2;
 8000778:	4b81      	ldr	r3, [pc, #516]	@ (8000980 <encodeData+0x328>)
 800077a:	889a      	ldrh	r2, [r3, #4]
 800077c:	4b81      	ldr	r3, [pc, #516]	@ (8000984 <encodeData+0x32c>)
 800077e:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor2;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800078a:	4619      	mov	r1, r3
 800078c:	4b7d      	ldr	r3, [pc, #500]	@ (8000984 <encodeData+0x32c>)
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000794:	443b      	add	r3, r7
 8000796:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800079a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007a4:	4619      	mov	r1, r3
 80007a6:	4b77      	ldr	r3, [pc, #476]	@ (8000984 <encodeData+0x32c>)
 80007a8:	785a      	ldrb	r2, [r3, #1]
 80007aa:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ae:	443b      	add	r3, r7
 80007b0:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor3;
 80007b4:	4b72      	ldr	r3, [pc, #456]	@ (8000980 <encodeData+0x328>)
 80007b6:	88da      	ldrh	r2, [r3, #6]
 80007b8:	4b72      	ldr	r3, [pc, #456]	@ (8000984 <encodeData+0x32c>)
 80007ba:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor3;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c6:	4619      	mov	r1, r3
 80007c8:	4b6e      	ldr	r3, [pc, #440]	@ (8000984 <encodeData+0x32c>)
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007d0:	443b      	add	r3, r7
 80007d2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e0:	4619      	mov	r1, r3
 80007e2:	4b68      	ldr	r3, [pc, #416]	@ (8000984 <encodeData+0x32c>)
 80007e4:	785a      	ldrb	r2, [r3, #1]
 80007e6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ea:	443b      	add	r3, r7
 80007ec:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor4;
 80007f0:	4b63      	ldr	r3, [pc, #396]	@ (8000980 <encodeData+0x328>)
 80007f2:	891a      	ldrh	r2, [r3, #8]
 80007f4:	4b63      	ldr	r3, [pc, #396]	@ (8000984 <encodeData+0x32c>)
 80007f6:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor4;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000802:	4619      	mov	r1, r3
 8000804:	4b5f      	ldr	r3, [pc, #380]	@ (8000984 <encodeData+0x32c>)
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800080c:	443b      	add	r3, r7
 800080e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000812:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800081c:	4619      	mov	r1, r3
 800081e:	4b59      	ldr	r3, [pc, #356]	@ (8000984 <encodeData+0x32c>)
 8000820:	785a      	ldrb	r2, [r3, #1]
 8000822:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000826:	443b      	add	r3, r7
 8000828:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor5;
 800082c:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <encodeData+0x328>)
 800082e:	895a      	ldrh	r2, [r3, #10]
 8000830:	4b54      	ldr	r3, [pc, #336]	@ (8000984 <encodeData+0x32c>)
 8000832:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor5;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000834:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800083e:	4619      	mov	r1, r3
 8000840:	4b50      	ldr	r3, [pc, #320]	@ (8000984 <encodeData+0x32c>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000848:	443b      	add	r3, r7
 800084a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800084e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000858:	4619      	mov	r1, r3
 800085a:	4b4a      	ldr	r3, [pc, #296]	@ (8000984 <encodeData+0x32c>)
 800085c:	785a      	ldrb	r2, [r3, #1]
 800085e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000862:	443b      	add	r3, r7
 8000864:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor6;
 8000868:	4b45      	ldr	r3, [pc, #276]	@ (8000980 <encodeData+0x328>)
 800086a:	899a      	ldrh	r2, [r3, #12]
 800086c:	4b45      	ldr	r3, [pc, #276]	@ (8000984 <encodeData+0x32c>)
 800086e:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor6;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000870:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800087a:	4619      	mov	r1, r3
 800087c:	4b41      	ldr	r3, [pc, #260]	@ (8000984 <encodeData+0x32c>)
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000884:	443b      	add	r3, r7
 8000886:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800088a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000894:	4619      	mov	r1, r3
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <encodeData+0x32c>)
 8000898:	785a      	ldrb	r2, [r3, #1]
 800089a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800089e:	443b      	add	r3, r7
 80008a0:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor7;
 80008a4:	4b36      	ldr	r3, [pc, #216]	@ (8000980 <encodeData+0x328>)
 80008a6:	89da      	ldrh	r2, [r3, #14]
 80008a8:	4b36      	ldr	r3, [pc, #216]	@ (8000984 <encodeData+0x32c>)
 80008aa:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor7;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80008ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008b6:	4619      	mov	r1, r3
 80008b8:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <encodeData+0x32c>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008c0:	443b      	add	r3, r7
 80008c2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80008c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008d0:	4619      	mov	r1, r3
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <encodeData+0x32c>)
 80008d4:	785a      	ldrb	r2, [r3, #1]
 80008d6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008da:	443b      	add	r3, r7
 80008dc:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 80008e0:	e00c      	b.n	80008fc <encodeData+0x2a4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 80008e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008ec:	3340      	adds	r3, #64	@ 0x40
 80008ee:	443b      	add	r3, r7
 80008f0:	22dd      	movs	r2, #221	@ 0xdd
 80008f2:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 80008f6:	2302      	movs	r3, #2
 80008f8:	733b      	strb	r3, [r7, #12]
			break;
 80008fa:	bf00      	nop
	}
	cheksum=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 8000902:	2300      	movs	r3, #0
 8000904:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000908:	e021      	b.n	800094e <encodeData+0x2f6>
	{
		cheksum ^= auxBuffTx[a];
 800090a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800090e:	3340      	adds	r3, #64	@ 0x40
 8000910:	443b      	add	r3, r7
 8000912:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000916:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800091a:	4053      	eors	r3, r2
 800091c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 8000920:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <encodeData+0x330>)
 8000926:	799b      	ldrb	r3, [r3, #6]
 8000928:	1c59      	adds	r1, r3, #1
 800092a:	b2c8      	uxtb	r0, r1
 800092c:	4916      	ldr	r1, [pc, #88]	@ (8000988 <encodeData+0x330>)
 800092e:	7188      	strb	r0, [r1, #6]
 8000930:	4619      	mov	r1, r3
 8000932:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8000936:	443b      	add	r3, r7
 8000938:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <encodeData+0x330>)
 800093e:	440b      	add	r3, r1
 8000940:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 8000944:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000948:	3301      	adds	r3, #1
 800094a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800094e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000956:	429a      	cmp	r2, r3
 8000958:	d3d7      	bcc.n	800090a <encodeData+0x2b2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <encodeData+0x330>)
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	b2d1      	uxtb	r1, r2
 8000962:	4a09      	ldr	r2, [pc, #36]	@ (8000988 <encodeData+0x330>)
 8000964:	7191      	strb	r1, [r2, #6]
 8000966:	461a      	mov	r2, r3
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <encodeData+0x330>)
 800096a:	4413      	add	r3, r2
 800096c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000970:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000974:	bf00      	nop
 8000976:	3744      	adds	r7, #68	@ 0x44
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200003ac 	.word	0x200003ac
 8000984:	200003c0 	.word	0x200003c0
 8000988:	200001a0 	.word	0x200001a0

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fd63 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f8e1 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 faf3 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 800099e:	f000 fad3 	bl	8000f48 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009a2:	f000 faa7 	bl	8000ef4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009a6:	f009 fb0b 	bl	8009fc0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009aa:	f000 f935 	bl	8000c18 <MX_ADC1_Init>
  MX_I2C2_Init();
 80009ae:	f000 f9d5 	bl	8000d5c <MX_I2C2_Init>
  MX_TIM4_Init();
 80009b2:	f000 fa51 	bl	8000e58 <MX_TIM4_Init>
  MX_TIM1_Init();
 80009b6:	f000 f9ff 	bl	8000db8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80009ba:	4860      	ldr	r0, [pc, #384]	@ (8000b3c <main+0x1b0>)
 80009bc:	f004 fac4 	bl	8004f48 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 80009c0:	485f      	ldr	r0, [pc, #380]	@ (8000b40 <main+0x1b4>)
 80009c2:	f009 fc33 	bl	800a22c <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepión del Buffer de Recepción
 80009c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b44 <main+0x1b8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepción
 80009cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000b44 <main+0x1b8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 80009d2:	4b5c      	ldr	r3, [pc, #368]	@ (8000b44 <main+0x1b8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 80009d8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b44 <main+0x1b8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 80009de:	4b59      	ldr	r3, [pc, #356]	@ (8000b44 <main+0x1b8>)
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	3308      	adds	r3, #8
 80009e4:	4a57      	ldr	r2, [pc, #348]	@ (8000b44 <main+0x1b8>)
 80009e6:	4413      	add	r3, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	4856      	ldr	r0, [pc, #344]	@ (8000b48 <main+0x1bc>)
 80009ee:	f004 fea9 	bl	8005744 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 80009f2:	2208      	movs	r2, #8
 80009f4:	4955      	ldr	r1, [pc, #340]	@ (8000b4c <main+0x1c0>)
 80009f6:	4856      	ldr	r0, [pc, #344]	@ (8000b50 <main+0x1c4>)
 80009f8:	f000 fe8e 	bl	8001718 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	4854      	ldr	r0, [pc, #336]	@ (8000b54 <main+0x1c8>)
 8000a04:	f001 fea6 	bl	8002754 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a08:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a0c:	f000 fd88 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a16:	484f      	ldr	r0, [pc, #316]	@ (8000b54 <main+0x1c8>)
 8000a18:	f001 fe9c 	bl	8002754 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a20:	f000 fd7e 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	484a      	ldr	r0, [pc, #296]	@ (8000b54 <main+0x1c8>)
 8000a2c:	f001 fe92 	bl	8002754 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a34:	f000 fd74 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3e:	4845      	ldr	r0, [pc, #276]	@ (8000b54 <main+0x1c8>)
 8000a40:	f001 fe88 	bl	8002754 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a48:	f000 fd6a 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a52:	4840      	ldr	r0, [pc, #256]	@ (8000b54 <main+0x1c8>)
 8000a54:	f001 fe7e 	bl	8002754 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a58:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a5c:	f000 fd60 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	483b      	ldr	r0, [pc, #236]	@ (8000b54 <main+0x1c8>)
 8000a68:	f001 fe74 	bl	8002754 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flags1.F250US == 1){
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b58 <main+0x1cc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d009      	beq.n	8000a8e <main+0x102>
		  flags1.F250US = 0;
 8000a7a:	4a37      	ldr	r2, [pc, #220]	@ (8000b58 <main+0x1cc>)
 8000a7c:	7813      	ldrb	r3, [r2, #0]
 8000a7e:	f36f 0300 	bfc	r3, #0, #1
 8000a82:	7013      	strb	r3, [r2, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000a84:	2208      	movs	r2, #8
 8000a86:	4931      	ldr	r1, [pc, #196]	@ (8000b4c <main+0x1c0>)
 8000a88:	4831      	ldr	r0, [pc, #196]	@ (8000b50 <main+0x1c4>)
 8000a8a:	f000 fe45 	bl	8001718 <HAL_ADC_Start_DMA>
	  }

	  if(flags1.F100MS==1){
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <main+0x1cc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <main+0x11a>
		  flags1.F100MS = 0;
 8000a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <main+0x1cc>)
 8000a9e:	7813      	ldrb	r3, [r2, #0]
 8000aa0:	f36f 0382 	bfc	r3, #2, #1
 8000aa4:	7013      	strb	r3, [r2, #0]
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS == 1) {
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <main+0x1cc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <main+0x13c>
		  flags1.F500MS = 0;
 8000ab4:	4a28      	ldr	r2, [pc, #160]	@ (8000b58 <main+0x1cc>)
 8000ab6:	7813      	ldrb	r3, [r2, #0]
 8000ab8:	f36f 03c3 	bfc	r3, #3, #1
 8000abc:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac2:	4824      	ldr	r0, [pc, #144]	@ (8000b54 <main+0x1c8>)
 8000ac4:	f001 fe5e 	bl	8002784 <HAL_GPIO_TogglePin>
	  }

	  if (flags1.F1SEG == 1) {
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <main+0x1cc>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <main+0x15a>
		  flags1.F1SEG = 0;
 8000ad6:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <main+0x1cc>)
 8000ad8:	7813      	ldrb	r3, [r2, #0]
 8000ada:	f36f 1304 	bfc	r3, #4, #1
 8000ade:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000ae0:	20a0      	movs	r0, #160	@ 0xa0
 8000ae2:	f7ff fdb9 	bl	8000658 <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <main+0x1b8>)
 8000ae8:	795a      	ldrb	r2, [r3, #5]
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <main+0x1b8>)
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d002      	beq.n	8000af8 <main+0x16c>
		  decodeProtocol(&datosComProtocol);
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <main+0x1b8>)
 8000af4:	f7ff fc04 	bl	8000300 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <main+0x1b8>)
 8000afa:	79da      	ldrb	r2, [r3, #7]
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <main+0x1b8>)
 8000afe:	799b      	ldrb	r3, [r3, #6]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d0b3      	beq.n	8000a6c <main+0xe0>
		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <main+0x1b8>)
 8000b06:	799a      	ldrb	r2, [r3, #6]
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <main+0x1b8>)
 8000b0a:	79db      	ldrb	r3, [r3, #7]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	71fb      	strb	r3, [r7, #7]
		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK))
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <main+0x1b8>)
 8000b12:	79db      	ldrb	r3, [r3, #7]
 8000b14:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000b18:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <main+0x1b8>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	b292      	uxth	r2, r2
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f009 fb5c 	bl	800a1e0 <CDC_Transmit_FS>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19e      	bne.n	8000a6c <main+0xe0>
			  datosComProtocol.indexReadTx++;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <main+0x1b8>)
 8000b30:	79db      	ldrb	r3, [r3, #7]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <main+0x1b8>)
 8000b38:	71da      	strb	r2, [r3, #7]
	  if (flags1.F250US == 1){
 8000b3a:	e797      	b.n	8000a6c <main+0xe0>
 8000b3c:	2000048c 	.word	0x2000048c
 8000b40:	080002bd 	.word	0x080002bd
 8000b44:	200001a0 	.word	0x200001a0
 8000b48:	2000051c 	.word	0x2000051c
 8000b4c:	20000564 	.word	0x20000564
 8000b50:	200003c4 	.word	0x200003c4
 8000b54:	40011000 	.word	0x40011000
 8000b58:	200003a8 	.word	0x200003a8

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b66:	2228      	movs	r2, #40	@ 0x28
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f009 ff24 	bl	800a9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fcb2 	bl	800451c <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bbe:	f000 fa5f 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 ff1e 	bl	8004a20 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bea:	f000 fa49 	bl	8001080 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 f89c 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c0a:	f000 fa39 	bl	8001080 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	@ 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c28:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d58 <MX_ADC1_Init+0x140>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c2e:	4b49      	ldr	r3, [pc, #292]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3c:	4b45      	ldr	r3, [pc, #276]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c44:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c4a:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000c50:	4b40      	ldr	r3, [pc, #256]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c56:	483f      	ldr	r0, [pc, #252]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c58:	f000 fc86 	bl	8001568 <HAL_ADC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c62:	f000 fa0d 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4837      	ldr	r0, [pc, #220]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c78:	f000 fe3e 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f000 f9fd 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4830      	ldr	r0, [pc, #192]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000c94:	f000 fe30 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c9e:	f000 f9ef 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4829      	ldr	r0, [pc, #164]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000cb0:	f000 fe22 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cba:	f000 f9e1 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4822      	ldr	r0, [pc, #136]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000ccc:	f000 fe14 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000cd6:	f000 f9d3 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481b      	ldr	r0, [pc, #108]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000ce8:	f000 fe06 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cf2:	f000 f9c5 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000d04:	f000 fdf8 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000d0e:	f000 f9b7 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d12:	2306      	movs	r3, #6
 8000d14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000d20:	f000 fdea 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d2a:	f000 f9a9 	bl	8001080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_ADC1_Init+0x13c>)
 8000d3c:	f000 fddc 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000d46:	f000 f99b 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200003c4 	.word	0x200003c4
 8000d58:	40012400 	.word	0x40012400

08000d5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d62:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <MX_I2C2_Init+0x54>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <MX_I2C2_Init+0x58>)
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_I2C2_Init+0x50>)
 8000d9a:	f001 fd0d 	bl	80027b8 <HAL_I2C_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000da4:	f000 f96c 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000438 	.word	0x20000438
 8000db0:	40005800 	.word	0x40005800
 8000db4:	000186a0 	.word	0x000186a0

08000db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e54 <MX_TIM1_Init+0x9c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000ddc:	2247      	movs	r2, #71	@ 0x47
 8000dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000de8:	22f9      	movs	r2, #249	@ 0xf9
 8000dea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dfe:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000e00:	f004 f852 	bl	8004ea8 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 f939 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000e1c:	f004 f9ee 	bl	80051fc <HAL_TIM_ConfigClockSource>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e26:	f000 f92b 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_TIM1_Init+0x98>)
 8000e38:	f004 fbc4 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f000 f91d 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000048c 	.word	0x2000048c
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <MX_TIM4_Init+0x98>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e9a:	4814      	ldr	r0, [pc, #80]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000e9c:	f004 f804 	bl	8004ea8 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f8eb 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000eb8:	f004 f9a0 	bl	80051fc <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 f8dd 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <MX_TIM4_Init+0x94>)
 8000ed4:	f004 fb76 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ede:	f000 f8cf 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200004d4 	.word	0x200004d4
 8000ef0:	40000800 	.word	0x40000800

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <MX_USART1_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f004 fbba 	bl	80056a4 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f8a3 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000051c 	.word	0x2000051c
 8000f44:	40013800 	.word	0x40013800

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f000 ff95 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f000 ffae 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a34      	ldr	r2, [pc, #208]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a28      	ldr	r2, [pc, #160]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a22      	ldr	r2, [pc, #136]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_GPIO_Init+0xec>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffe:	481d      	ldr	r0, [pc, #116]	@ (8001074 <MX_GPIO_Init+0xf0>)
 8001000:	f001 fba8 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100a:	481b      	ldr	r0, [pc, #108]	@ (8001078 <MX_GPIO_Init+0xf4>)
 800100c:	f001 fba2 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	4812      	ldr	r0, [pc, #72]	@ (8001074 <MX_GPIO_Init+0xf0>)
 800102a:	f001 fa0f 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800102e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <MX_GPIO_Init+0xf8>)
 8001044:	f001 fa02 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_GPIO_Init+0xf4>)
 8001062:	f001 f9f3 	bl	800244c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	40011000 	.word	0x40011000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x8>

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_MspInit+0x5c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_MspInit+0x60>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_MspInit+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <HAL_ADC_MspInit+0xbc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d149      	bne.n	80011a4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a20      	ldr	r2, [pc, #128]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <HAL_ADC_MspInit+0xc0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001140:	23ff      	movs	r3, #255	@ 0xff
 8001142:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001144:	2303      	movs	r3, #3
 8001146:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4819      	ldr	r0, [pc, #100]	@ (80011b4 <HAL_ADC_MspInit+0xc4>)
 8001150:	f001 f97c 	bl	800244c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 8001156:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <HAL_ADC_MspInit+0xcc>)
 8001158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 800116e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 8001176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 800118a:	f000 febd 	bl	8001f08 <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001194:	f7ff ff74 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 800119c:	621a      	str	r2, [r3, #32]
 800119e:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <HAL_ADC_MspInit+0xc8>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40012400 	.word	0x40012400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	200003f4 	.word	0x200003f4
 80011bc:	40020008 	.word	0x40020008

080011c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_I2C_MspInit+0x74>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d124      	bne.n	800122a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <HAL_I2C_MspInit+0x7c>)
 800120e:	f001 f91d 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_I2C_MspInit+0x78>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005800 	.word	0x40005800
 8001238:	40021000 	.word	0x40021000
 800123c:	40010c00 	.word	0x40010c00

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d114      	bne.n	800127c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a15      	ldr	r2, [pc, #84]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001258:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2019      	movs	r0, #25
 8001270:	f000 fe13 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001274:	2019      	movs	r0, #25
 8001276:	f000 fe2c 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800127a:	e010      	b.n	800129e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_TIM_Base_MspInit+0x70>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10b      	bne.n	800129e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40000800 	.word	0x40000800

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a20      	ldr	r2, [pc, #128]	@ (8001350 <HAL_UART_MspInit+0x9c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d139      	bne.n	8001348 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <HAL_UART_MspInit+0xa0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001304:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	480f      	ldr	r0, [pc, #60]	@ (8001358 <HAL_UART_MspInit+0xa4>)
 800131a:	f001 f897 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4809      	ldr	r0, [pc, #36]	@ (8001358 <HAL_UART_MspInit+0xa4>)
 8001334:	f001 f88a 	bl	800244c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2025      	movs	r0, #37	@ 0x25
 800133e:	f000 fdac 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001342:	2025      	movs	r0, #37	@ 0x25
 8001344:	f000 fdc5 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f89c 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Channel1_IRQHandler+0x10>)
 80013ba:	f000 ff13 	bl	80021e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200003f4 	.word	0x200003f4

080013c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013ce:	f001 fc5c 	bl	8002c8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000c50 	.word	0x20000c50

080013dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <TIM1_UP_IRQHandler+0x10>)
 80013e2:	f003 fe03 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000048c 	.word	0x2000048c

080013f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <USART1_IRQHandler+0x10>)
 80013f6:	f004 f9cb 	bl	8005790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000051c 	.word	0x2000051c

08001404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff fff8 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	@ (8001444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001416:	490c      	ldr	r1, [pc, #48]	@ (8001448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001418:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <LoopFillZerobss+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800142c:	4c09      	ldr	r4, [pc, #36]	@ (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f009 fac5 	bl	800a9c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff faa5 	bl	800098c <main>
  bx lr
 8001442:	4770      	bx	lr
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800144c:	0800aaa4 	.word	0x0800aaa4
  ldr r2, =_sbss
 8001450:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001454:	20001160 	.word	0x20001160

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x28>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 fd09 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fe08 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fd21 	bl	8001eee <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 fce9 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_IncTick+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_IncTick+0x20>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a03      	ldr	r2, [pc, #12]	@ (8001508 <HAL_IncTick+0x20>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000578 	.word	0x20000578

0800150c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	@ (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000578 	.word	0x20000578

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fff0 	bl	800150c <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffe0 	bl	800150c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000000c 	.word	0x2000000c

08001568 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0be      	b.n	8001708 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fda2 	bl	80010f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 faf5 	bl	8001b9c <ADC_ConversionStop_Disable>
 80015b2:	4603      	mov	r3, r0
 80015b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8099 	bne.w	80016f6 <HAL_ADC_Init+0x18e>
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 8095 	bne.w	80016f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015d4:	f023 0302 	bic.w	r3, r3, #2
 80015d8:	f043 0202 	orr.w	r2, r3, #2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7b1b      	ldrb	r3, [r3, #12]
 80015ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001600:	d003      	beq.n	800160a <HAL_ADC_Init+0xa2>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_ADC_Init+0xa8>
 800160a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160e:	e000      	b.n	8001612 <HAL_ADC_Init+0xaa>
 8001610:	2300      	movs	r3, #0
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7d1b      	ldrb	r3, [r3, #20]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d119      	bne.n	8001654 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	3b01      	subs	r3, #1
 800162e:	035a      	lsls	r2, r3, #13
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	e00b      	b.n	8001654 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f043 0220 	orr.w	r2, r3, #32
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	f043 0201 	orr.w	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <HAL_ADC_Init+0x1a8>)
 8001670:	4013      	ands	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	430b      	orrs	r3, r1
 800167a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001684:	d003      	beq.n	800168e <HAL_ADC_Init+0x126>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d104      	bne.n	8001698 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	3b01      	subs	r3, #1
 8001694:	051b      	lsls	r3, r3, #20
 8001696:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_ADC_Init+0x1ac>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10b      	bne.n	80016d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d2:	e018      	b.n	8001706 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f023 0312 	bic.w	r3, r3, #18
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f4:	e007      	b.n	8001706 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	f043 0210 	orr.w	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001706:	7dfb      	ldrb	r3, [r7, #23]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	ffe1f7fd 	.word	0xffe1f7fd
 8001714:	ff1f0efe 	.word	0xff1f0efe

08001718 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a64      	ldr	r2, [pc, #400]	@ (80018c0 <HAL_ADC_Start_DMA+0x1a8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d004      	beq.n	800173c <HAL_ADC_Start_DMA+0x24>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a63      	ldr	r2, [pc, #396]	@ (80018c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d106      	bne.n	800174a <HAL_ADC_Start_DMA+0x32>
 800173c:	4b60      	ldr	r3, [pc, #384]	@ (80018c0 <HAL_ADC_Start_DMA+0x1a8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 80b3 	bne.w	80018b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_ADC_Start_DMA+0x40>
 8001754:	2302      	movs	r3, #2
 8001756:	e0ae      	b.n	80018b6 <HAL_ADC_Start_DMA+0x19e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9c1 	bl	8001ae8 <ADC_Enable>
 8001766:	4603      	mov	r3, r0
 8001768:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 809a 	bne.w	80018a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <HAL_ADC_Start_DMA+0x1ac>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d105      	bne.n	800179c <HAL_ADC_Start_DMA+0x84>
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d115      	bne.n	80017c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d026      	beq.n	8001804 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c6:	e01d      	b.n	8001804 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a39      	ldr	r2, [pc, #228]	@ (80018c0 <HAL_ADC_Start_DMA+0x1a8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_ADC_Start_DMA+0xd0>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a38      	ldr	r2, [pc, #224]	@ (80018c4 <HAL_ADC_Start_DMA+0x1ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10d      	bne.n	8001804 <HAL_ADC_Start_DMA+0xec>
 80017e8:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <HAL_ADC_Start_DMA+0x1a8>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	f023 0206 	bic.w	r2, r3, #6
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800181c:	e002      	b.n	8001824 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a25      	ldr	r2, [pc, #148]	@ (80018c8 <HAL_ADC_Start_DMA+0x1b0>)
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a24      	ldr	r2, [pc, #144]	@ (80018cc <HAL_ADC_Start_DMA+0x1b4>)
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a23      	ldr	r2, [pc, #140]	@ (80018d0 <HAL_ADC_Start_DMA+0x1b8>)
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0202 	mvn.w	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800185c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a18      	ldr	r0, [r3, #32]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	334c      	adds	r3, #76	@ 0x4c
 8001868:	4619      	mov	r1, r3
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f000 fba5 	bl	8001fbc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800187c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001880:	d108      	bne.n	8001894 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001890:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001892:	e00f      	b.n	80018b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80018a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018a4:	e006      	b.n	80018b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80018ae:	e001      	b.n	80018b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40012400 	.word	0x40012400
 80018c4:	40012800 	.word	0x40012800
 80018c8:	08001c1f 	.word	0x08001c1f
 80018cc:	08001c9b 	.word	0x08001c9b
 80018d0:	08001cb7 	.word	0x08001cb7

080018d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x20>
 8001914:	2302      	movs	r3, #2
 8001916:	e0dc      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x1da>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b06      	cmp	r3, #6
 8001926:	d81c      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	3b05      	subs	r3, #5
 800193a:	221f      	movs	r2, #31
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b05      	subs	r3, #5
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001960:	e03c      	b.n	80019dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d81c      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	@ 0x23
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	4019      	ands	r1, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b23      	subs	r3, #35	@ 0x23
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a2:	e01b      	b.n	80019dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	@ 0x41
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b41      	subs	r3, #65	@ 0x41
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	d91c      	bls.n	8001a1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	3b1e      	subs	r3, #30
 80019f6:	2207      	movs	r2, #7
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4019      	ands	r1, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6898      	ldr	r0, [r3, #8]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b1e      	subs	r3, #30
 8001a10:	fa00 f203 	lsl.w	r2, r0, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	e019      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6919      	ldr	r1, [r3, #16]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2207      	movs	r2, #7
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4019      	ands	r1, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6898      	ldr	r0, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d132      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d125      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d126      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d11a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9a      	lsrs	r2, r3, #18
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x1b2>
 8001ab6:	e007      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d040      	beq.n	8001b88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b16:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <ADC_Enable+0xac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <ADC_Enable+0xb0>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b24:	e002      	b.n	8001b2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b32:	f7ff fceb 	bl	800150c <HAL_GetTick>
 8001b36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b38:	e01f      	b.n	8001b7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b3a:	f7ff fce7 	bl	800150c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d918      	bls.n	8001b7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d011      	beq.n	8001b7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	f043 0210 	orr.w	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e007      	b.n	8001b8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d1d8      	bne.n	8001b3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000004 	.word	0x20000004
 8001b98:	431bde83 	.word	0x431bde83

08001b9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d12e      	bne.n	8001c14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc6:	f7ff fca1 	bl	800150c <HAL_GetTick>
 8001bca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bcc:	e01b      	b.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bce:	f7ff fc9d 	bl	800150c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d914      	bls.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e007      	b.n	8001c16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d0dc      	beq.n	8001bce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d127      	bne.n	8001c88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c52:	d115      	bne.n	8001c80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe fa63 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c86:	e004      	b.n	8001c92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fe13 	bl	80018d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	f043 0204 	orr.w	r2, r3, #4
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff fe02 	bl	80018e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4906      	ldr	r1, [pc, #24]	@ (8001d84 <__NVIC_EnableIRQ+0x34>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff90 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff2d 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff42 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff35 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e043      	b.n	8001fa6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <HAL_DMA_Init+0xa8>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_DMA_Init+0xac>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <HAL_DMA_Init+0xb0>)
 8001f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	bffdfff8 	.word	0xbffdfff8
 8001fb4:	cccccccd 	.word	0xcccccccd
 8001fb8:	40020000 	.word	0x40020000

08001fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_DMA_Start_IT+0x20>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e04b      	b.n	8002074 <HAL_DMA_Start_IT+0xb8>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d13a      	bne.n	8002066 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f9eb 	bl	80023f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 020e 	orr.w	r2, r2, #14
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e00f      	b.n	8002054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0204 	bic.w	r2, r2, #4
 8002042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 020a 	orr.w	r2, r2, #10
 8002052:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e005      	b.n	8002072 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d008      	beq.n	80020a6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2204      	movs	r2, #4
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e020      	b.n	80020e8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 020e 	bic.w	r2, r2, #14
 80020b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d005      	beq.n	8002118 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e051      	b.n	80021bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 020e 	bic.w	r2, r2, #14
 8002126:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <HAL_DMA_Abort_IT+0xd4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d029      	beq.n	8002196 <HAL_DMA_Abort_IT+0xa2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a21      	ldr	r2, [pc, #132]	@ (80021cc <HAL_DMA_Abort_IT+0xd8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_DMA_Abort_IT+0x9e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_DMA_Abort_IT+0xdc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01a      	beq.n	800218c <HAL_DMA_Abort_IT+0x98>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <HAL_DMA_Abort_IT+0xe0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d012      	beq.n	8002186 <HAL_DMA_Abort_IT+0x92>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <HAL_DMA_Abort_IT+0xe4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00a      	beq.n	8002180 <HAL_DMA_Abort_IT+0x8c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_DMA_Abort_IT+0xe8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d102      	bne.n	800217a <HAL_DMA_Abort_IT+0x86>
 8002174:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002178:	e00e      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 800217a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800217e:	e00b      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 8002180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002184:	e008      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 8002186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218a:	e005      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 800218c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002190:	e002      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 8002192:	2310      	movs	r3, #16
 8002194:	e000      	b.n	8002198 <HAL_DMA_Abort_IT+0xa4>
 8002196:	2301      	movs	r3, #1
 8002198:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <HAL_DMA_Abort_IT+0xec>)
 800219a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
    } 
  }
  return status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020008 	.word	0x40020008
 80021cc:	4002001c 	.word	0x4002001c
 80021d0:	40020030 	.word	0x40020030
 80021d4:	40020044 	.word	0x40020044
 80021d8:	40020058 	.word	0x40020058
 80021dc:	4002006c 	.word	0x4002006c
 80021e0:	40020000 	.word	0x40020000

080021e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d04f      	beq.n	80022ac <HAL_DMA_IRQHandler+0xc8>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d04a      	beq.n	80022ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a66      	ldr	r2, [pc, #408]	@ (80023d4 <HAL_DMA_IRQHandler+0x1f0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d029      	beq.n	8002292 <HAL_DMA_IRQHandler+0xae>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a65      	ldr	r2, [pc, #404]	@ (80023d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d022      	beq.n	800228e <HAL_DMA_IRQHandler+0xaa>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a63      	ldr	r2, [pc, #396]	@ (80023dc <HAL_DMA_IRQHandler+0x1f8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01a      	beq.n	8002288 <HAL_DMA_IRQHandler+0xa4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a62      	ldr	r2, [pc, #392]	@ (80023e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d012      	beq.n	8002282 <HAL_DMA_IRQHandler+0x9e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a60      	ldr	r2, [pc, #384]	@ (80023e4 <HAL_DMA_IRQHandler+0x200>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00a      	beq.n	800227c <HAL_DMA_IRQHandler+0x98>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5f      	ldr	r2, [pc, #380]	@ (80023e8 <HAL_DMA_IRQHandler+0x204>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_DMA_IRQHandler+0x92>
 8002270:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002274:	e00e      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 8002276:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800227a:	e00b      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 800227c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002280:	e008      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 8002282:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002286:	e005      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 8002288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228c:	e002      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 800228e:	2340      	movs	r3, #64	@ 0x40
 8002290:	e000      	b.n	8002294 <HAL_DMA_IRQHandler+0xb0>
 8002292:	2304      	movs	r3, #4
 8002294:	4a55      	ldr	r2, [pc, #340]	@ (80023ec <HAL_DMA_IRQHandler+0x208>)
 8002296:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8094 	beq.w	80023ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022aa:	e08e      	b.n	80023ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	2202      	movs	r2, #2
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d056      	beq.n	800236a <HAL_DMA_IRQHandler+0x186>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d051      	beq.n	800236a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020a 	bic.w	r2, r2, #10
 80022e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a38      	ldr	r2, [pc, #224]	@ (80023d4 <HAL_DMA_IRQHandler+0x1f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d029      	beq.n	800234a <HAL_DMA_IRQHandler+0x166>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a37      	ldr	r2, [pc, #220]	@ (80023d8 <HAL_DMA_IRQHandler+0x1f4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_IRQHandler+0x162>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a35      	ldr	r2, [pc, #212]	@ (80023dc <HAL_DMA_IRQHandler+0x1f8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x15c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a34      	ldr	r2, [pc, #208]	@ (80023e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d012      	beq.n	800233a <HAL_DMA_IRQHandler+0x156>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_DMA_IRQHandler+0x200>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00a      	beq.n	8002334 <HAL_DMA_IRQHandler+0x150>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <HAL_DMA_IRQHandler+0x204>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <HAL_DMA_IRQHandler+0x14a>
 8002328:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800232c:	e00e      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 800232e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002332:	e00b      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 8002334:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002338:	e008      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 800233a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800233e:	e005      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 8002340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002344:	e002      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 8002346:	2320      	movs	r3, #32
 8002348:	e000      	b.n	800234c <HAL_DMA_IRQHandler+0x168>
 800234a:	2302      	movs	r3, #2
 800234c:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_IRQHandler+0x208>)
 800234e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d034      	beq.n	80023ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002368:	e02f      	b.n	80023ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2208      	movs	r2, #8
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_DMA_IRQHandler+0x1e8>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d023      	beq.n	80023cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 020e 	bic.w	r2, r2, #14
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
    }
  }
  return;
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
}
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40020008 	.word	0x40020008
 80023d8:	4002001c 	.word	0x4002001c
 80023dc:	40020030 	.word	0x40020030
 80023e0:	40020044 	.word	0x40020044
 80023e4:	40020058 	.word	0x40020058
 80023e8:	4002006c 	.word	0x4002006c
 80023ec:	40020000 	.word	0x40020000

080023f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b08b      	sub	sp, #44	@ 0x2c
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245e:	e169      	b.n	8002734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002460:	2201      	movs	r2, #1
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 8158 	bne.w	800272e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a9a      	ldr	r2, [pc, #616]	@ (80026ec <HAL_GPIO_Init+0x2a0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d05e      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
 8002488:	4a98      	ldr	r2, [pc, #608]	@ (80026ec <HAL_GPIO_Init+0x2a0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d875      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 800248e:	4a98      	ldr	r2, [pc, #608]	@ (80026f0 <HAL_GPIO_Init+0x2a4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d058      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
 8002494:	4a96      	ldr	r2, [pc, #600]	@ (80026f0 <HAL_GPIO_Init+0x2a4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d86f      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 800249a:	4a96      	ldr	r2, [pc, #600]	@ (80026f4 <HAL_GPIO_Init+0x2a8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d052      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
 80024a0:	4a94      	ldr	r2, [pc, #592]	@ (80026f4 <HAL_GPIO_Init+0x2a8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d869      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 80024a6:	4a94      	ldr	r2, [pc, #592]	@ (80026f8 <HAL_GPIO_Init+0x2ac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d04c      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
 80024ac:	4a92      	ldr	r2, [pc, #584]	@ (80026f8 <HAL_GPIO_Init+0x2ac>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d863      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 80024b2:	4a92      	ldr	r2, [pc, #584]	@ (80026fc <HAL_GPIO_Init+0x2b0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d046      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
 80024b8:	4a90      	ldr	r2, [pc, #576]	@ (80026fc <HAL_GPIO_Init+0x2b0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d85d      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 80024be:	2b12      	cmp	r3, #18
 80024c0:	d82a      	bhi.n	8002518 <HAL_GPIO_Init+0xcc>
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d859      	bhi.n	800257a <HAL_GPIO_Init+0x12e>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <HAL_GPIO_Init+0x80>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002547 	.word	0x08002547
 80024d0:	08002521 	.word	0x08002521
 80024d4:	08002533 	.word	0x08002533
 80024d8:	08002575 	.word	0x08002575
 80024dc:	0800257b 	.word	0x0800257b
 80024e0:	0800257b 	.word	0x0800257b
 80024e4:	0800257b 	.word	0x0800257b
 80024e8:	0800257b 	.word	0x0800257b
 80024ec:	0800257b 	.word	0x0800257b
 80024f0:	0800257b 	.word	0x0800257b
 80024f4:	0800257b 	.word	0x0800257b
 80024f8:	0800257b 	.word	0x0800257b
 80024fc:	0800257b 	.word	0x0800257b
 8002500:	0800257b 	.word	0x0800257b
 8002504:	0800257b 	.word	0x0800257b
 8002508:	0800257b 	.word	0x0800257b
 800250c:	0800257b 	.word	0x0800257b
 8002510:	08002529 	.word	0x08002529
 8002514:	0800253d 	.word	0x0800253d
 8002518:	4a79      	ldr	r2, [pc, #484]	@ (8002700 <HAL_GPIO_Init+0x2b4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800251e:	e02c      	b.n	800257a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	623b      	str	r3, [r7, #32]
          break;
 8002526:	e029      	b.n	800257c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	3304      	adds	r3, #4
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e024      	b.n	800257c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	3308      	adds	r3, #8
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e01f      	b.n	800257c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	330c      	adds	r3, #12
 8002542:	623b      	str	r3, [r7, #32]
          break;
 8002544:	e01a      	b.n	800257c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254e:	2304      	movs	r3, #4
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e013      	b.n	800257c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800255c:	2308      	movs	r3, #8
 800255e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	611a      	str	r2, [r3, #16]
          break;
 8002566:	e009      	b.n	800257c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002568:	2308      	movs	r3, #8
 800256a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	615a      	str	r2, [r3, #20]
          break;
 8002572:	e003      	b.n	800257c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x130>
          break;
 800257a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2bff      	cmp	r3, #255	@ 0xff
 8002580:	d801      	bhi.n	8002586 <HAL_GPIO_Init+0x13a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	e001      	b.n	800258a <HAL_GPIO_Init+0x13e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d802      	bhi.n	8002598 <HAL_GPIO_Init+0x14c>
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	e002      	b.n	800259e <HAL_GPIO_Init+0x152>
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	3b08      	subs	r3, #8
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	210f      	movs	r1, #15
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	6a39      	ldr	r1, [r7, #32]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	431a      	orrs	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80b1 	beq.w	800272e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002704 <HAL_GPIO_Init+0x2b8>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <HAL_GPIO_Init+0x2b8>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002704 <HAL_GPIO_Init+0x2b8>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2bc>)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a40      	ldr	r2, [pc, #256]	@ (800270c <HAL_GPIO_Init+0x2c0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_GPIO_Init+0x1ec>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a3f      	ldr	r2, [pc, #252]	@ (8002710 <HAL_GPIO_Init+0x2c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00d      	beq.n	8002634 <HAL_GPIO_Init+0x1e8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3e      	ldr	r2, [pc, #248]	@ (8002714 <HAL_GPIO_Init+0x2c8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0x1e4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3d      	ldr	r2, [pc, #244]	@ (8002718 <HAL_GPIO_Init+0x2cc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_GPIO_Init+0x1e0>
 8002628:	2303      	movs	r3, #3
 800262a:	e006      	b.n	800263a <HAL_GPIO_Init+0x1ee>
 800262c:	2304      	movs	r3, #4
 800262e:	e004      	b.n	800263a <HAL_GPIO_Init+0x1ee>
 8002630:	2302      	movs	r3, #2
 8002632:	e002      	b.n	800263a <HAL_GPIO_Init+0x1ee>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_GPIO_Init+0x1ee>
 8002638:	2300      	movs	r3, #0
 800263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263c:	f002 0203 	and.w	r2, r2, #3
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	4093      	lsls	r3, r2
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800264a:	492f      	ldr	r1, [pc, #188]	@ (8002708 <HAL_GPIO_Init+0x2bc>)
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	492c      	ldr	r1, [pc, #176]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	43db      	mvns	r3, r3
 800267a:	4928      	ldr	r1, [pc, #160]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 800267c:	4013      	ands	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800268c:	4b23      	ldr	r3, [pc, #140]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4922      	ldr	r1, [pc, #136]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	60cb      	str	r3, [r1, #12]
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	491e      	ldr	r1, [pc, #120]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4918      	ldr	r1, [pc, #96]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4914      	ldr	r1, [pc, #80]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d021      	beq.n	8002720 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <HAL_GPIO_Init+0x2d0>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e021      	b.n	800272e <HAL_GPIO_Init+0x2e2>
 80026ea:	bf00      	nop
 80026ec:	10320000 	.word	0x10320000
 80026f0:	10310000 	.word	0x10310000
 80026f4:	10220000 	.word	0x10220000
 80026f8:	10210000 	.word	0x10210000
 80026fc:	10120000 	.word	0x10120000
 8002700:	10110000 	.word	0x10110000
 8002704:	40021000 	.word	0x40021000
 8002708:	40010000 	.word	0x40010000
 800270c:	40010800 	.word	0x40010800
 8002710:	40010c00 	.word	0x40010c00
 8002714:	40011000 	.word	0x40011000
 8002718:	40011400 	.word	0x40011400
 800271c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_GPIO_Init+0x304>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	43db      	mvns	r3, r3
 8002728:	4909      	ldr	r1, [pc, #36]	@ (8002750 <HAL_GPIO_Init+0x304>)
 800272a:	4013      	ands	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	f47f ae8e 	bne.w	8002460 <HAL_GPIO_Init+0x14>
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	372c      	adds	r7, #44	@ 0x2c
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43d9      	mvns	r1, r3
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	400b      	ands	r3, r1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e12b      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fcee 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	@ 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f002 fa48 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a81      	ldr	r2, [pc, #516]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a80      	ldr	r2, [pc, #512]	@ (8002a30 <HAL_I2C_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a34 <HAL_I2C_Init+0x27c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0e7      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <HAL_I2C_Init+0x280>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a6a      	ldr	r2, [pc, #424]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a69      	ldr	r2, [pc, #420]	@ (8002a3c <HAL_I2C_Init+0x284>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	495c      	ldr	r1, [pc, #368]	@ (8002a2c <HAL_I2C_Init+0x274>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d819      	bhi.n	80028f4 <HAL_I2C_Init+0x13c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_I2C_Init+0x138>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	e051      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x168>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x18e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x196>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b08b      	sub	sp, #44	@ 0x2c
 8002a44:	af06      	add	r7, sp, #24
 8002a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0f1      	b.n	8002c36 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f007 fcfc 	bl	800a464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fbc1 	bl	8006200 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	687e      	ldr	r6, [r7, #4]
 8002a86:	466d      	mov	r5, sp
 8002a88:	f106 0410 	add.w	r4, r6, #16
 8002a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	1d33      	adds	r3, r6, #4
 8002a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f003 fb8b 	bl	80061b4 <USB_CoreInit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0c2      	b.n	8002c36 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fbbc 	bl	8006234 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e040      	b.n	8002b44 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3303      	adds	r3, #3
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	3338      	adds	r3, #56	@ 0x38
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	333c      	adds	r3, #60	@ 0x3c
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	3340      	adds	r3, #64	@ 0x40
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3301      	adds	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3b9      	bcc.n	8002ac2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e044      	b.n	8002bde <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3b5      	bcc.n	8002b54 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	687e      	ldr	r6, [r7, #4]
 8002bf0:	466d      	mov	r5, sp
 8002bf2:	f106 0410 	add.w	r4, r6, #16
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	602b      	str	r3, [r5, #0]
 8002bfe:	1d33      	adds	r3, r6, #4
 8002c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f003 fb22 	bl	800624c <USB_DevInit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00d      	b.n	8002c36 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f005 fda3 	bl	800877a <USB_DevDisconnect>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_Start+0x16>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e016      	b.n	8002c82 <HAL_PCD_Start+0x44>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fab7 	bl	80061d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c66:	2101      	movs	r1, #1
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f007 fe6e 	bl	800a94a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 fd77 	bl	8008766 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fd79 	bl	800878e <USB_ReadInterrupts>
 8002c9c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fb1b 	bl	80032e4 <PCD_EP_ISR_Handler>

    return;
 8002cae:	e119      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f007 fc41 	bl	800a55a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f905 	bl	8002eea <HAL_PCD_SetAddress>

    return;
 8002ce0:	e100      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d04:	e0ee      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d22:	b292      	uxth	r2, r2
 8002d24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d28:	e0dc      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d027      	beq.n	8002d84 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0208 	bic.w	r2, r2, #8
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f007 fc31 	bl	800a5cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d82:	e0af      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8083 	beq.w	8002e96 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e010      	b.n	8002db8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	b292      	uxth	r2, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	3320      	adds	r3, #32
 8002dac:	443b      	add	r3, r7
 8002dae:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	3301      	adds	r3, #1
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
 8002dba:	2b07      	cmp	r3, #7
 8002dbc:	d9eb      	bls.n	8002d96 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	b292      	uxth	r2, r2
 8002dea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002dee:	bf00      	nop
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f6      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e14:	b292      	uxth	r2, r2
 8002e16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e00f      	b.n	8002e40 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4611      	mov	r1, r2
 8002e28:	7ffa      	ldrb	r2, [r7, #31]
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	440a      	add	r2, r1
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	3320      	adds	r3, #32
 8002e32:	443b      	add	r3, r7
 8002e34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e38:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	7ffb      	ldrb	r3, [r7, #31]
 8002e42:	2b07      	cmp	r3, #7
 8002e44:	d9ec      	bls.n	8002e20 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0208 	orr.w	r2, r2, #8
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e70:	b292      	uxth	r2, r2
 8002e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0204 	orr.w	r2, r2, #4
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f007 fb82 	bl	800a598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e94:	e026      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f007 fb40 	bl	800a53e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ebe:	e011      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002edc:	b292      	uxth	r2, r2
 8002ede:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ee2:	bf00      	nop
  }
}
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_SetAddress+0x1a>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e013      	b.n	8002f2c <HAL_PCD_SetAddress+0x42>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fc0f 	bl	8008740 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	70fb      	strb	r3, [r7, #3]
 8002f46:	460b      	mov	r3, r1
 8002f48:	803b      	strh	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0e      	bge.n	8002f78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	705a      	strb	r2, [r3, #1]
 8002f76:	e00e      	b.n	8002f96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 0207 	and.w	r2, r3, #7
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fa2:	883a      	ldrh	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	78ba      	ldrb	r2, [r7, #2]
 8002fac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_PCD_EP_Open+0x94>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e00e      	b.n	8002fe6 <HAL_PCD_EP_Open+0xb2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 f958 	bl	800628c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da0e      	bge.n	8003020 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	705a      	strb	r2, [r3, #1]
 800301e:	e00e      	b.n	800303e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 0207 	and.w	r2, r3, #7
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_PCD_EP_Close+0x6a>
 8003054:	2302      	movs	r3, #2
 8003056:	e00e      	b.n	8003076 <HAL_PCD_EP_Close+0x88>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fcd0 	bl	8006a0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	460b      	mov	r3, r1
 800308c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308e:	7afb      	ldrb	r3, [r7, #11]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030be:	7afb      	ldrb	r3, [r7, #11]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fe87 	bl	8006de4 <USB_EPStartXfer>

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	460b      	mov	r3, r1
 800311c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	b2da      	uxtb	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6979      	ldr	r1, [r7, #20]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fe39 	bl	8006de4 <USB_EPStartXfer>

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 0207 	and.w	r2, r3, #7
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d901      	bls.n	800319a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04c      	b.n	8003234 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800319a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da0e      	bge.n	80031c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	705a      	strb	r2, [r3, #1]
 80031be:	e00c      	b.n	80031da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_SetStall+0x7e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e01c      	b.n	8003234 <HAL_PCD_EP_SetStall+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f005 f99c 	bl	8008546 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f005 fac1 	bl	80087ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d901      	bls.n	800325a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e040      	b.n	80032dc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800325a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da0e      	bge.n	8003280 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	705a      	strb	r2, [r3, #1]
 800327e:	e00e      	b.n	800329e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_PCD_EP_ClrStall+0x82>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_ClrStall+0xa0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f005 f98a 	bl	80085e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b096      	sub	sp, #88	@ 0x58
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032ec:	e3be      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003308:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8178 	bne.w	8003602 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d151      	bne.n	80033c2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800332a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332e:	81fb      	strh	r3, [r7, #14]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	89fb      	ldrh	r3, [r7, #14]
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3328      	adds	r3, #40	@ 0x28
 8003346:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	3302      	adds	r3, #2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003372:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	441a      	add	r2, r3
 800337e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003380:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003382:	2100      	movs	r1, #0
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f007 f8c0 	bl	800a50a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 836a 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x788>
 8003398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f040 8365 	bne.w	8003a6c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033c0:	e354      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80033c8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d034      	beq.n	800344a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	3306      	adds	r3, #6
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800341e:	b29b      	uxth	r3, r3
 8003420:	f005 fa14 	bl	800884c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29a      	uxth	r2, r3
 800342c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003430:	4013      	ands	r3, r2
 8003432:	823b      	strh	r3, [r7, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	8a3a      	ldrh	r2, [r7, #16]
 800343a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800343e:	b292      	uxth	r2, r2
 8003440:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f007 f834 	bl	800a4b0 <HAL_PCD_SetupStageCallback>
 8003448:	e310      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800344a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800344e:	2b00      	cmp	r3, #0
 8003450:	f280 830c 	bge.w	8003a6c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29a      	uxth	r2, r3
 800345c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003460:	4013      	ands	r3, r2
 8003462:	83fb      	strh	r3, [r7, #30]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	8bfa      	ldrh	r2, [r7, #30]
 800346a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800346e:	b292      	uxth	r2, r2
 8003470:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	3306      	adds	r3, #6
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d019      	beq.n	80034da <PCD_EP_ISR_Handler+0x1f6>
 80034a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d015      	beq.n	80034da <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	6959      	ldr	r1, [r3, #20]
 80034b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f005 f9c4 	bl	800884c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	441a      	add	r2, r3
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034d2:	2100      	movs	r1, #0
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f006 fffd 	bl	800a4d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f040 82bd 	bne.w	8003a6c <PCD_EP_ISR_Handler+0x788>
 80034f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034fe:	f000 82b5 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003510:	b29b      	uxth	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4413      	add	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352c:	b29a      	uxth	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b3e      	cmp	r3, #62	@ 0x3e
 8003538:	d91d      	bls.n	8003576 <PCD_EP_ISR_Handler+0x292>
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	647b      	str	r3, [r7, #68]	@ 0x44
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <PCD_EP_ISR_Handler+0x270>
 800354e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003550:	3b01      	subs	r3, #1
 8003552:	647b      	str	r3, [r7, #68]	@ 0x44
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29a      	uxth	r2, r3
 800355a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355c:	b29b      	uxth	r3, r3
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	b29b      	uxth	r3, r3
 8003562:	4313      	orrs	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356e:	b29a      	uxth	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	e026      	b.n	80035c4 <PCD_EP_ISR_Handler+0x2e0>
 8003576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <PCD_EP_ISR_Handler+0x2b0>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358c:	b29a      	uxth	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e017      	b.n	80035c4 <PCD_EP_ISR_Handler+0x2e0>
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	647b      	str	r3, [r7, #68]	@ 0x44
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <PCD_EP_ISR_Handler+0x2ca>
 80035a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035aa:	3301      	adds	r3, #1
 80035ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4313      	orrs	r3, r2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d4:	827b      	strh	r3, [r7, #18]
 80035d6:	8a7b      	ldrh	r3, [r7, #18]
 80035d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80035dc:	827b      	strh	r3, [r7, #18]
 80035de:	8a7b      	ldrh	r3, [r7, #18]
 80035e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035e4:	827b      	strh	r3, [r7, #18]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	8a7b      	ldrh	r3, [r7, #18]
 80035ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8013      	strh	r3, [r2, #0]
 8003600:	e234      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003616:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800361a:	2b00      	cmp	r3, #0
 800361c:	f280 80fc 	bge.w	8003818 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29a      	uxth	r2, r3
 8003632:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003636:	4013      	ands	r3, r2
 8003638:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800364e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003652:	b292      	uxth	r2, r2
 8003654:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003656:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	7b1b      	ldrb	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d125      	bne.n	80036c0 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367c:	b29b      	uxth	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	3306      	adds	r3, #6
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80036a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8092 	beq.w	80037ce <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b0:	6959      	ldr	r1, [r3, #20]
 80036b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b4:	88da      	ldrh	r2, [r3, #6]
 80036b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036ba:	f005 f8c7 	bl	800884c <USB_ReadPMA>
 80036be:	e086      	b.n	80037ce <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d10a      	bne.n	80036de <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036cc:	461a      	mov	r2, r3
 80036ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f9d9 	bl	8003a88 <HAL_PCD_EP_DB_Receive>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80036dc:	e077      	b.n	80037ce <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800370e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800371a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800371e:	b29b      	uxth	r3, r3
 8003720:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d024      	beq.n	8003786 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	3302      	adds	r3, #2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003764:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003768:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02e      	beq.n	80037ce <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	6959      	ldr	r1, [r3, #20]
 8003778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377a:	891a      	ldrh	r2, [r3, #8]
 800377c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003780:	f005 f864 	bl	800884c <USB_ReadPMA>
 8003784:	e023      	b.n	80037ce <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	3306      	adds	r3, #6
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80037b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	6959      	ldr	r1, [r3, #20]
 80037c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c4:	895a      	ldrh	r2, [r3, #10]
 80037c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037ca:	f005 f83f 	bl	800884c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037d6:	441a      	add	r2, r3
 80037d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037e4:	441a      	add	r2, r3
 80037e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <PCD_EP_ISR_Handler+0x51a>
 80037f2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d206      	bcs.n	800380c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f006 fe65 	bl	800a4d4 <HAL_PCD_DataOutStageCallback>
 800380a:	e005      	b.n	8003818 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003812:	4618      	mov	r0, r3
 8003814:	f003 fae6 	bl	8006de4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003818:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8123 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003826:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003854:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800386a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003872:	b29b      	uxth	r3, r3
 8003874:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	78db      	ldrb	r3, [r3, #3]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 80a2 	bne.w	80039c4 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	7b1b      	ldrb	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8093 	beq.w	80039b6 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003890:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d046      	beq.n	800392a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d126      	bne.n	80038f2 <PCD_EP_ISR_Handler+0x60e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	4413      	add	r3, r2
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80038bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	011a      	lsls	r2, r3, #4
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	4413      	add	r3, r2
 80038c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	e061      	b.n	80039b6 <PCD_EP_ISR_Handler+0x6d2>
 80038f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d15d      	bne.n	80039b6 <PCD_EP_ISR_Handler+0x6d2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	4413      	add	r3, r2
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	011a      	lsls	r2, r3, #4
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	4413      	add	r3, r2
 800391c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	2200      	movs	r2, #0
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	e045      	b.n	80039b6 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d126      	bne.n	8003986 <PCD_EP_ISR_Handler+0x6a2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394c:	4413      	add	r3, r2
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	4413      	add	r3, r2
 800395a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	b29a      	uxth	r2, r3
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29a      	uxth	r2, r3
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e017      	b.n	80039b6 <PCD_EP_ISR_Handler+0x6d2>
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d113      	bne.n	80039b6 <PCD_EP_ISR_Handler+0x6d2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	4413      	add	r3, r2
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	011a      	lsls	r2, r3, #4
 80039a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	2200      	movs	r2, #0
 80039b4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f006 fda4 	bl	800a50a <HAL_PCD_DataInStageCallback>
 80039c2:	e053      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80039c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d146      	bne.n	8003a5e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	3302      	adds	r3, #2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d907      	bls.n	8003a18 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a14:	619a      	str	r2, [r3, #24]
 8003a16:	e002      	b.n	8003a1e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f006 fd6c 	bl	800a50a <HAL_PCD_DataInStageCallback>
 8003a32:	e01b      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a3c:	441a      	add	r2, r3
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a40:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a4a:	441a      	add	r2, r3
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 f9c4 	bl	8006de4 <USB_EPStartXfer>
 8003a5c:	e006      	b.n	8003a6c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a62:	461a      	mov	r2, r3
 8003a64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f91b 	bl	8003ca2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f6ff ac38 	blt.w	80032ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3758      	adds	r7, #88	@ 0x58
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07e      	beq.n	8003b9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d306      	bcc.n	8003ae2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	8b7b      	ldrh	r3, [r7, #26]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	e002      	b.n	8003ae8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d123      	bne.n	8003b38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0a:	833b      	strh	r3, [r7, #24]
 8003b0c:	8b3b      	ldrh	r3, [r7, #24]
 8003b0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b12:	833b      	strh	r3, [r7, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	8b3b      	ldrh	r3, [r7, #24]
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01f      	beq.n	8003b82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5c:	82fb      	strh	r3, [r7, #22]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	8afb      	ldrh	r3, [r7, #22]
 8003b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b82:	8b7b      	ldrh	r3, [r7, #26]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8087 	beq.w	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6959      	ldr	r1, [r3, #20]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	891a      	ldrh	r2, [r3, #8]
 8003b96:	8b7b      	ldrh	r3, [r7, #26]
 8003b98:	f004 fe58 	bl	800884c <USB_ReadPMA>
 8003b9c:	e07c      	b.n	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3306      	adds	r3, #6
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d306      	bcc.n	8003be0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	e002      	b.n	8003be6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d123      	bne.n	8003c36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c08:	83fb      	strh	r3, [r7, #30]
 8003c0a:	8bfb      	ldrh	r3, [r7, #30]
 8003c0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c10:	83fb      	strh	r3, [r7, #30]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8bfb      	ldrh	r3, [r7, #30]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11f      	bne.n	8003c80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	83bb      	strh	r3, [r7, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8bbb      	ldrh	r3, [r7, #28]
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6959      	ldr	r1, [r3, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	895a      	ldrh	r2, [r3, #10]
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	f004 fdda 	bl	800884c <USB_ReadPMA>
    }
  }

  return count;
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b0a4      	sub	sp, #144	@ 0x90
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 81dd 	beq.w	8004076 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d907      	bls.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	619a      	str	r2, [r3, #24]
 8003d02:	e002      	b.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 80b9 	bne.w	8003e86 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d126      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	4413      	add	r3, r2
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e01a      	b.n	8003da0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d116      	bne.n	8003da0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	4413      	add	r3, r2
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	011a      	lsls	r2, r3, #4
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	4413      	add	r3, r2
 8003d94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x15a>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e017      	b.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d113      	bne.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	4413      	add	r3, r2
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	011a      	lsls	r2, r3, #4
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f006 fb69 	bl	800a50a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 82fc 	beq.w	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	82fb      	strh	r3, [r7, #22]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
 8003e84:	e2da      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d021      	beq.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eaa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	f040 82ae 	bne.w	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ee8:	441a      	add	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d30b      	bcc.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f18:	1ad2      	subs	r2, r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	621a      	str	r2, [r3, #32]
 8003f1e:	e017      	b.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f38:	e00a      	b.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d165      	bne.n	8004024 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6c:	4413      	add	r3, r2
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f78:	4413      	add	r3, r2
 8003f7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f94:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f96:	d91d      	bls.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x332>
 8003f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x310>
 8003fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e044      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_PCD_EP_DB_Transmit+0x350>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e035      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004008:	3301      	adds	r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800400c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29a      	uxth	r2, r3
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004014:	b29b      	uxth	r3, r3
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	b29b      	uxth	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b29a      	uxth	r2, r3
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	e01c      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d118      	bne.n	800405e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	647b      	str	r3, [r7, #68]	@ 0x44
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004040:	4413      	add	r3, r2
 8004042:	647b      	str	r3, [r7, #68]	@ 0x44
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404c:	4413      	add	r3, r2
 800404e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004052:	643b      	str	r3, [r7, #64]	@ 0x40
 8004054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004058:	b29a      	uxth	r2, r3
 800405a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800405c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6959      	ldr	r1, [r3, #20]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	891a      	ldrh	r2, [r3, #8]
 800406a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406e:	b29b      	uxth	r3, r3
 8004070:	f004 fba7 	bl	80087c2 <USB_WritePMA>
 8004074:	e1e2      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	3306      	adds	r3, #6
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d307      	bcc.n	80040be <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040b6:	1ad2      	subs	r2, r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	619a      	str	r2, [r3, #24]
 80040bc:	e002      	b.n	80040c4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 80c0 	bne.w	800424e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d126      	bne.n	8004124 <HAL_PCD_EP_DB_Transmit+0x482>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040ea:	4413      	add	r3, r2
 80040ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	011a      	lsls	r2, r3, #4
 80040f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040f6:	4413      	add	r3, r2
 80040f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004108:	b29a      	uxth	r2, r3
 800410a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411c:	b29a      	uxth	r2, r3
 800411e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	e01a      	b.n	800415a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d116      	bne.n	800415a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	667b      	str	r3, [r7, #100]	@ 0x64
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004140:	4413      	add	r3, r2
 8004142:	667b      	str	r3, [r7, #100]	@ 0x64
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800414c:	4413      	add	r3, r2
 800414e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004152:	663b      	str	r3, [r7, #96]	@ 0x60
 8004154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004156:	2200      	movs	r2, #0
 8004158:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d12b      	bne.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417c:	4413      	add	r3, r2
 800417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	011a      	lsls	r2, r3, #4
 8004186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004188:	4413      	add	r3, r2
 800418a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800418e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004192:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419e:	b29a      	uxth	r2, r3
 80041a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e017      	b.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d113      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x54e>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d6:	4413      	add	r3, r2
 80041d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	011a      	lsls	r2, r3, #4
 80041e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e2:	4413      	add	r3, r2
 80041e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ec:	2200      	movs	r2, #0
 80041ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f006 f987 	bl	800a50a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 811a 	bne.w	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004222:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]
 800424c:	e0f6      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d121      	bne.n	800429c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004272:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800428c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004290:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004298:	b29b      	uxth	r3, r3
 800429a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 80ca 	bne.w	800443c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042b0:	441a      	add	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042be:	441a      	add	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d30b      	bcc.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042e0:	1ad2      	subs	r2, r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	621a      	str	r2, [r3, #32]
 80042e6:	e017      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d108      	bne.n	8004302 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004300:	e00a      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	657b      	str	r3, [r7, #84]	@ 0x54
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d165      	bne.n	80043f2 <HAL_PCD_EP_DB_Transmit+0x750>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800433a:	4413      	add	r3, r2
 800433c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	011a      	lsls	r2, r3, #4
 8004344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004346:	4413      	add	r3, r2
 8004348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800434c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800434e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004358:	b29a      	uxth	r2, r3
 800435a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004362:	2b3e      	cmp	r3, #62	@ 0x3e
 8004364:	d91d      	bls.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x700>
 8004366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800436e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_PCD_EP_DB_Transmit+0x6de>
 800437a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437c:	3b01      	subs	r3, #1
 800437e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29a      	uxth	r2, r3
 8004386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004388:	b29b      	uxth	r3, r3
 800438a:	029b      	lsls	r3, r3, #10
 800438c:	b29b      	uxth	r3, r3
 800438e:	4313      	orrs	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439a:	b29a      	uxth	r2, r3
 800439c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e041      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x784>
 80043a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80043aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	e032      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x784>
 80043c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_PCD_EP_DB_Transmit+0x738>
 80043d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043d6:	3301      	adds	r3, #1
 80043d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e019      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x784>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d115      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x784>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	4413      	add	r3, r2
 800440a:	657b      	str	r3, [r7, #84]	@ 0x54
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	011a      	lsls	r2, r3, #4
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	4413      	add	r3, r2
 8004416:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800441a:	653b      	str	r3, [r7, #80]	@ 0x50
 800441c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004420:	b29a      	uxth	r2, r3
 8004422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004424:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6959      	ldr	r1, [r3, #20]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	895a      	ldrh	r2, [r3, #10]
 8004432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004436:	b29b      	uxth	r3, r3
 8004438:	f004 f9c3 	bl	80087c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004456:	82bb      	strh	r3, [r7, #20]
 8004458:	8abb      	ldrh	r3, [r7, #20]
 800445a:	f083 0310 	eor.w	r3, r3, #16
 800445e:	82bb      	strh	r3, [r7, #20]
 8004460:	8abb      	ldrh	r3, [r7, #20]
 8004462:	f083 0320 	eor.w	r3, r3, #32
 8004466:	82bb      	strh	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	8abb      	ldrh	r3, [r7, #20]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3790      	adds	r7, #144	@ 0x90
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	817b      	strh	r3, [r7, #10]
 80044a4:	4613      	mov	r3, r2
 80044a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044a8:	897b      	ldrh	r3, [r7, #10]
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	897b      	ldrh	r3, [r7, #10]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e009      	b.n	80044e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044cc:	897a      	ldrh	r2, [r7, #10]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	80da      	strh	r2, [r3, #6]
 80044f4:	e00b      	b.n	800450e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2201      	movs	r2, #1
 80044fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	b29a      	uxth	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
	...

0800451c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e272      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8087 	beq.w	800464a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800453c:	4b92      	ldr	r3, [pc, #584]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b04      	cmp	r3, #4
 8004546:	d00c      	beq.n	8004562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004548:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 030c 	and.w	r3, r3, #12
 8004550:	2b08      	cmp	r3, #8
 8004552:	d112      	bne.n	800457a <HAL_RCC_OscConfig+0x5e>
 8004554:	4b8c      	ldr	r3, [pc, #560]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004560:	d10b      	bne.n	800457a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004562:	4b89      	ldr	r3, [pc, #548]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d06c      	beq.n	8004648 <HAL_RCC_OscConfig+0x12c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d168      	bne.n	8004648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e24c      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x76>
 8004584:	4b80      	ldr	r3, [pc, #512]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7f      	ldr	r2, [pc, #508]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e02e      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x98>
 800459a:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7a      	ldr	r2, [pc, #488]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b78      	ldr	r3, [pc, #480]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a77      	ldr	r2, [pc, #476]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e01d      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0xbc>
 80045be:	4b72      	ldr	r3, [pc, #456]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a71      	ldr	r2, [pc, #452]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0xd4>
 80045d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b68      	ldr	r3, [pc, #416]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d013      	beq.n	8004620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fc ff88 	bl	800150c <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fc ff84 	bl	800150c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e200      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b5d      	ldr	r3, [pc, #372]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0xe4>
 800461e:	e014      	b.n	800464a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fc ff74 	bl	800150c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004628:	f7fc ff70 	bl	800150c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1ec      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x10c>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004656:	4b4c      	ldr	r3, [pc, #304]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004662:	4b49      	ldr	r3, [pc, #292]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b08      	cmp	r3, #8
 800466c:	d11c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x18c>
 800466e:	4b46      	ldr	r3, [pc, #280]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d116      	bne.n	80046a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	4b43      	ldr	r3, [pc, #268]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_RCC_OscConfig+0x176>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e1c0      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4939      	ldr	r1, [pc, #228]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	e03a      	b.n	800471e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b0:	4b36      	ldr	r3, [pc, #216]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc ff29 	bl	800150c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046be:	f7fc ff25 	bl	800150c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1a1      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4927      	ldr	r1, [pc, #156]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]
 80046f0:	e015      	b.n	800471e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc ff08 	bl	800150c <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fc ff04 	bl	800150c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e180      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03a      	beq.n	80047a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d019      	beq.n	8004766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004732:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_RCC_OscConfig+0x274>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fc fee8 	bl	800150c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fc fee4 	bl	800150c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e160      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <HAL_RCC_OscConfig+0x26c>)
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800475e:	2001      	movs	r0, #1
 8004760:	f000 face 	bl	8004d00 <RCC_Delay>
 8004764:	e01c      	b.n	80047a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_OscConfig+0x274>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fc fece 	bl	800150c <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004772:	e00f      	b.n	8004794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fc feca 	bl	800150c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d908      	bls.n	8004794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e146      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	42420000 	.word	0x42420000
 8004790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004794:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e9      	bne.n	8004774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a6 	beq.w	80048fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b2:	4b8b      	ldr	r3, [pc, #556]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047be:	4b88      	ldr	r3, [pc, #544]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4a87      	ldr	r2, [pc, #540]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	61d3      	str	r3, [r2, #28]
 80047ca:	4b85      	ldr	r3, [pc, #532]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b82      	ldr	r3, [pc, #520]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b7f      	ldr	r3, [pc, #508]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7e      	ldr	r2, [pc, #504]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fc fe8b 	bl	800150c <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fc fe87 	bl	800150c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	@ 0x64
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e103      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b75      	ldr	r3, [pc, #468]	@ (80049e4 <HAL_RCC_OscConfig+0x4c8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x312>
 8004820:	4b6f      	ldr	r3, [pc, #444]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6213      	str	r3, [r2, #32]
 800482c:	e02d      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x334>
 8004836:	4b6a      	ldr	r3, [pc, #424]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a69      	ldr	r2, [pc, #420]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	6213      	str	r3, [r2, #32]
 8004842:	4b67      	ldr	r3, [pc, #412]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4a66      	ldr	r2, [pc, #408]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6213      	str	r3, [r2, #32]
 800484e:	e01c      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d10c      	bne.n	8004872 <HAL_RCC_OscConfig+0x356>
 8004858:	4b61      	ldr	r3, [pc, #388]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4a60      	ldr	r2, [pc, #384]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	f043 0304 	orr.w	r3, r3, #4
 8004862:	6213      	str	r3, [r2, #32]
 8004864:	4b5e      	ldr	r3, [pc, #376]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4a5d      	ldr	r2, [pc, #372]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6213      	str	r3, [r2, #32]
 8004870:	e00b      	b.n	800488a <HAL_RCC_OscConfig+0x36e>
 8004872:	4b5b      	ldr	r3, [pc, #364]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4a5a      	ldr	r2, [pc, #360]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6213      	str	r3, [r2, #32]
 800487e:	4b58      	ldr	r3, [pc, #352]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4a57      	ldr	r2, [pc, #348]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d015      	beq.n	80048be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fc fe3b 	bl	800150c <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fc fe37 	bl	800150c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0b1      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b0:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ee      	beq.n	800489a <HAL_RCC_OscConfig+0x37e>
 80048bc:	e014      	b.n	80048e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fc fe25 	bl	800150c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fc fe21 	bl	800150c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e09b      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048dc:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ee      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ee:	4b3c      	ldr	r3, [pc, #240]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4a3b      	ldr	r2, [pc, #236]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8087 	beq.w	8004a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004904:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d061      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d146      	bne.n	80049a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004918:	4b33      	ldr	r3, [pc, #204]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fc fdf5 	bl	800150c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fc fdf1 	bl	800150c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e06d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004938:	4b29      	ldr	r3, [pc, #164]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d108      	bne.n	8004960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800494e:	4b24      	ldr	r3, [pc, #144]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4921      	ldr	r1, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a19      	ldr	r1, [r3, #32]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	430b      	orrs	r3, r1
 8004972:	491b      	ldr	r1, [pc, #108]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fc fdc5 	bl	800150c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004986:	f7fc fdc1 	bl	800150c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x46a>
 80049a4:	e035      	b.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_RCC_OscConfig+0x4cc>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fc fdae 	bl	800150c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fc fdaa 	bl	800150c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e026      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x498>
 80049d2:	e01e      	b.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e019      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_OscConfig+0x500>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0d0      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b6a      	ldr	r3, [pc, #424]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b67      	ldr	r3, [pc, #412]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4965      	ldr	r1, [pc, #404]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a58      	ldr	r2, [pc, #352]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a52      	ldr	r2, [pc, #328]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d040      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d115      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ade:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e073      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aee:	4b3d      	ldr	r3, [pc, #244]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e06b      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4936      	ldr	r1, [pc, #216]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b10:	f7fc fcfc 	bl	800150c <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	f7fc fcf8 	bl	800150c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e053      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 020c 	and.w	r2, r3, #12
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1eb      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d210      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0207 	bic.w	r2, r3, #7
 8004b56:	4922      	ldr	r1, [pc, #136]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490a      	ldr	r1, [pc, #40]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	@ (8004bec <HAL_RCC_ClockConfig+0x1cc>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fc5a 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800aa70 	.word	0x0800aa70
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	20000008 	.word	0x20000008

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d002      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x30>
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d003      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x36>
 8004c22:	e027      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c26:	613b      	str	r3, [r7, #16]
      break;
 8004c28:	e027      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0c9b      	lsrs	r3, r3, #18
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0c5b      	lsrs	r3, r3, #17
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	4a11      	ldr	r2, [pc, #68]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c56:	fb03 f202 	mul.w	r2, r3, r2
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e004      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	613b      	str	r3, [r7, #16]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c76:	613b      	str	r3, [r7, #16]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	693b      	ldr	r3, [r7, #16]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	0800aa88 	.word	0x0800aa88
 8004c94:	0800aa98 	.word	0x0800aa98
 8004c98:	003d0900 	.word	0x003d0900

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b02      	ldr	r3, [pc, #8]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	20000004 	.word	0x20000004

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb4:	f7ff fff2 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800aa80 	.word	0x0800aa80

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cdc:	f7ff ffde 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0adb      	lsrs	r3, r3, #11
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4903      	ldr	r1, [pc, #12]	@ (8004cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	0800aa80 	.word	0x0800aa80

08004d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <RCC_Delay+0x34>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <RCC_Delay+0x38>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0a5b      	lsrs	r3, r3, #9
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d1c:	bf00      	nop
  }
  while (Delay --);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	60fa      	str	r2, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f9      	bne.n	8004d1c <RCC_Delay+0x1c>
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000004 	.word	0x20000004
 8004d38:	10624dd3 	.word	0x10624dd3

08004d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	61d3      	str	r3, [r2, #28]
 8004d74:	4b49      	ldr	r3, [pc, #292]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b46      	ldr	r3, [pc, #280]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d118      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d90:	4b43      	ldr	r3, [pc, #268]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a42      	ldr	r2, [pc, #264]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9c:	f7fc fbb6 	bl	800150c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fc fbb2 	bl	800150c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e06d      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02e      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d027      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004df6:	4a29      	ldr	r2, [pc, #164]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fc fb81 	bl	800150c <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fc fb7d 	bl	800150c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e036      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4917      	ldr	r1, [pc, #92]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	490b      	ldr	r1, [pc, #44]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	42420440 	.word	0x42420440

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e041      	b.n	8004f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc f9b6 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fa74 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d001      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e03a      	b.n	8004fd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0x98>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x58>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x58>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x58>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d111      	bne.n	8004fc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d010      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e007      	b.n	8004fd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0202 	mvn.w	r2, #2
 8005018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9b4 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f9a7 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9b6 	bl	80053ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f98a 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f97d 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f98c 	bl	80053ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f960 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f953 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f962 	bl	80053ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0210 	mvn.w	r2, #16
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2208      	movs	r2, #8
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f936 	bl	800539c <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f929 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f938 	bl	80053ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0201 	mvn.w	r2, #1
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fb f81c 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b80      	cmp	r3, #128	@ 0x80
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005188:	2b80      	cmp	r3, #128	@ 0x80
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa7b 	bl	8005692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a6:	2b40      	cmp	r3, #64	@ 0x40
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8fc 	bl	80053c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0220 	mvn.w	r2, #32
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa46 	bl	8005680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIM_ConfigClockSource+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e0b4      	b.n	8005382 <HAL_TIM_ConfigClockSource+0x186>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800523e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005250:	d03e      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005256:	f200 8087 	bhi.w	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	f000 8086 	beq.w	800536e <HAL_TIM_ConfigClockSource+0x172>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005266:	d87f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b70      	cmp	r3, #112	@ 0x70
 800526a:	d01a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xa6>
 800526c:	2b70      	cmp	r3, #112	@ 0x70
 800526e:	d87b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b60      	cmp	r3, #96	@ 0x60
 8005272:	d050      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x11a>
 8005274:	2b60      	cmp	r3, #96	@ 0x60
 8005276:	d877      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b50      	cmp	r3, #80	@ 0x50
 800527a:	d03c      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0xfa>
 800527c:	2b50      	cmp	r3, #80	@ 0x50
 800527e:	d873      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	d058      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x13a>
 8005284:	2b40      	cmp	r3, #64	@ 0x40
 8005286:	d86f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b30      	cmp	r3, #48	@ 0x30
 800528a:	d064      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b30      	cmp	r3, #48	@ 0x30
 800528e:	d86b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d060      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d867      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05c      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800529c:	2b10      	cmp	r3, #16
 800529e:	d05a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	e062      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b2:	f000 f968 	bl	8005586 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e04f      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e0:	f000 f951 	bl	8005586 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f2:	609a      	str	r2, [r3, #8]
      break;
 80052f4:	e03c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 f8c8 	bl	8005498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2150      	movs	r1, #80	@ 0x50
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f91f 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8005314:	e02c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f8e6 	bl	80054f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2160      	movs	r1, #96	@ 0x60
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f90f 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8005334:	e01c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f8a8 	bl	8005498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f8ff 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8005354:	e00c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 f8f6 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8005366:	e003      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e000      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800536e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
	...

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a29      	ldr	r2, [pc, #164]	@ (800548c <TIM_Base_SetConfig+0xb8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a26      	ldr	r2, [pc, #152]	@ (8005490 <TIM_Base_SetConfig+0xbc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x30>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a25      	ldr	r2, [pc, #148]	@ (8005494 <TIM_Base_SetConfig+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <TIM_Base_SetConfig+0xb8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a19      	ldr	r2, [pc, #100]	@ (8005490 <TIM_Base_SetConfig+0xbc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0x62>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a18      	ldr	r2, [pc, #96]	@ (8005494 <TIM_Base_SetConfig+0xc0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <TIM_Base_SetConfig+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d103      	bne.n	800547c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	615a      	str	r2, [r3, #20]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800

08005498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0210 	bic.w	r2, r3, #16
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800551e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	031b      	lsls	r3, r3, #12
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	f043 0307 	orr.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	021a      	lsls	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d8:	2302      	movs	r3, #2
 80055da:	e046      	b.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d009      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a10      	ldr	r2, [pc, #64]	@ (800567c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10c      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4313      	orrs	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800

08005680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e042      	b.n	800573c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fb fdf2 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	@ 0x24
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fcd5 	bl	8006098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800570c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800571c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	d112      	bne.n	8005784 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Receive_IT+0x26>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e00b      	b.n	8005786 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	461a      	mov	r2, r3
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fab7 	bl	8005cee <UART_Start_Receive_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	e000      	b.n	8005786 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b0ba      	sub	sp, #232	@ 0xe8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_UART_IRQHandler+0x66>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fb93 	bl	8005f1a <UART_Receive_IT>
      return;
 80057f4:	e25b      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80de 	beq.w	80059bc <HAL_UART_IRQHandler+0x22c>
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005810:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80d1 	beq.w	80059bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_UART_IRQHandler+0xd2>
 800584a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_UART_IRQHandler+0xf6>
 800586e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d011      	beq.n	80058b6 <HAL_UART_IRQHandler+0x126>
 8005892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d105      	bne.n	80058aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800589e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	f043 0208 	orr.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 81f2 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_UART_IRQHandler+0x14e>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb1e 	bl	8005f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_UART_IRQHandler+0x17a>
 8005902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04f      	beq.n	80059aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa28 	bl	8005d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d041      	beq.n	80059a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800594a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800594e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1d9      	bne.n	800591e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d013      	beq.n	800599a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <HAL_UART_IRQHandler+0x3e0>)
 8005978:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	4618      	mov	r0, r3
 8005980:	f7fc fbb8 	bl	80020f4 <HAL_DMA_Abort_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d016      	beq.n	80059b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e00e      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f993 	bl	8005cc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	e00a      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f98f 	bl	8005cc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	e006      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f98b 	bl	8005cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059b6:	e175      	b.n	8005ca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	bf00      	nop
    return;
 80059ba:	e173      	b.n	8005ca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f040 814f 	bne.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8148 	beq.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8141 	beq.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80b6 	beq.w	8005b74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8145 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f080 813e 	bcs.w	8005ca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	f000 8088 	beq.w	8005b50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1d9      	bne.n	8005a40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ab0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e1      	bne.n	8005a8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005aee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005af2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e3      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e3      	bne.n	8005b0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fc fa96 	bl	800207c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8b6 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b6c:	e09c      	b.n	8005ca8 <HAL_UART_IRQHandler+0x518>
 8005b6e:	bf00      	nop
 8005b70:	08005e25 	.word	0x08005e25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 808e 	beq.w	8005cac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8089 	beq.w	8005cac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e3      	bne.n	8005b9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	623b      	str	r3, [r7, #32]
   return(result);
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e3      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c3c:	61fa      	str	r2, [r7, #28]
 8005c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e3      	bne.n	8005c18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f83b 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c62:	e023      	b.n	8005cac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_UART_IRQHandler+0x4f4>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f8e5 	bl	8005e4c <UART_Transmit_IT>
    return;
 8005c82:	e014      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_UART_IRQHandler+0x51e>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f924 	bl	8005eea <UART_EndTransmit_IT>
    return;
 8005ca2:	e004      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
    return;
 8005ca4:	bf00      	nop
 8005ca6:	e002      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
      return;
 8005cac:	bf00      	nop
  }
}
 8005cae:	37e8      	adds	r7, #232	@ 0xe8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2222      	movs	r2, #34	@ 0x22
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0220 	orr.w	r2, r2, #32
 8005d52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b095      	sub	sp, #84	@ 0x54
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d119      	bne.n	8005e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df8:	61ba      	str	r2, [r7, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	613b      	str	r3, [r7, #16]
   return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e1a:	bf00      	nop
 8005e1c:	3754      	adds	r7, #84	@ 0x54
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff ff41 	bl	8005cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b21      	cmp	r3, #33	@ 0x21
 8005e5e:	d13e      	bne.n	8005ede <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e68:	d114      	bne.n	8005e94 <UART_Transmit_IT+0x48>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d110      	bne.n	8005e94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]
 8005e92:	e008      	b.n	8005ea6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6211      	str	r1, [r2, #32]
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10f      	bne.n	8005eda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ede:	2302      	movs	r3, #2
  }
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fed2 	bl	8005cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b08c      	sub	sp, #48	@ 0x30
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b22      	cmp	r3, #34	@ 0x22
 8005f2c:	f040 80ae 	bne.w	800608c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d117      	bne.n	8005f6a <UART_Receive_IT+0x50>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d113      	bne.n	8005f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f68:	e026      	b.n	8005fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7c:	d007      	beq.n	8005f8e <UART_Receive_IT+0x74>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <UART_Receive_IT+0x82>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e008      	b.n	8005fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d15d      	bne.n	8006088 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0220 	bic.w	r2, r2, #32
 8005fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600e:	2b01      	cmp	r3, #1
 8006010:	d135      	bne.n	800607e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	613b      	str	r3, [r7, #16]
   return(result);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 0310 	bic.w	r3, r3, #16
 800602e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006038:	623a      	str	r2, [r7, #32]
 800603a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	61bb      	str	r3, [r7, #24]
   return(result);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d10a      	bne.n	8006070 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fe2e 	bl	8005cd8 <HAL_UARTEx_RxEventCallback>
 800607c:	e002      	b.n	8006084 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fa f8fa 	bl	8000278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e002      	b.n	800608e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3730      	adds	r7, #48	@ 0x30
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060d2:	f023 030c 	bic.w	r3, r3, #12
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	430b      	orrs	r3, r1
 80060de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	@ (80061ac <UART_SetConfig+0x114>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d103      	bne.n	8006108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7fe fdea 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	e002      	b.n	800610e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fe fdd2 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 800610c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009a      	lsls	r2, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	4a22      	ldr	r2, [pc, #136]	@ (80061b0 <UART_SetConfig+0x118>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	0119      	lsls	r1, r3, #4
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	fbb2 f2f3 	udiv	r2, r2, r3
 8006144:	4b1a      	ldr	r3, [pc, #104]	@ (80061b0 <UART_SetConfig+0x118>)
 8006146:	fba3 0302 	umull	r0, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2064      	movs	r0, #100	@ 0x64
 800614e:	fb00 f303 	mul.w	r3, r0, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	@ 0x32
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <UART_SetConfig+0x118>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006164:	4419      	add	r1, r3
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009a      	lsls	r2, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	fbb2 f2f3 	udiv	r2, r2, r3
 800617c:	4b0c      	ldr	r3, [pc, #48]	@ (80061b0 <UART_SetConfig+0x118>)
 800617e:	fba3 0302 	umull	r0, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2064      	movs	r0, #100	@ 0x64
 8006186:	fb00 f303 	mul.w	r3, r0, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	@ 0x32
 8006190:	4a07      	ldr	r2, [pc, #28]	@ (80061b0 <UART_SetConfig+0x118>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	440a      	add	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40013800 	.word	0x40013800
 80061b0:	51eb851f 	.word	0x51eb851f

080061b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061b4:	b084      	sub	sp, #16
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	f107 0014 	add.w	r0, r7, #20
 80061c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr

080061d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061e4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006208:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800620c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	b29b      	uxth	r3, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	b29b      	uxth	r3, r3
 800621e:	4013      	ands	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800624c:	b084      	sub	sp, #16
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	f107 0014 	add.w	r0, r7, #20
 800625a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	b004      	add	sp, #16
 800628a:	4770      	bx	lr

0800628c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800628c:	b480      	push	{r7}
 800628e:	b09d      	sub	sp, #116	@ 0x74
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d81f      	bhi.n	80062fe <USB_ActivateEndpoint+0x72>
 80062be:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <USB_ActivateEndpoint+0x38>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	08006307 	.word	0x08006307
 80062d0:	080062e3 	.word	0x080062e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062e0:	e012      	b.n	8006308 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062e6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80062ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062ee:	e00b      	b.n	8006308 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062fc:	e004      	b.n	8006308 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006304:	e000      	b.n	8006308 <USB_ActivateEndpoint+0x7c>
      break;
 8006306:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006340:	b29b      	uxth	r3, r3
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	441a      	add	r2, r3
 8006356:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800635a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800635e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636a:	b29b      	uxth	r3, r3
 800636c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	7b1b      	ldrb	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 8178 	bne.w	8006668 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8084 	beq.w	800648a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	4413      	add	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	011a      	lsls	r2, r3, #4
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	88db      	ldrh	r3, [r3, #6]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	827b      	strh	r3, [r7, #18]
 80063c4:	8a7b      	ldrh	r3, [r7, #18]
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01b      	beq.n	8006406 <USB_ActivateEndpoint+0x17a>
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e4:	823b      	strh	r3, [r7, #16]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	8a3b      	ldrh	r3, [r7, #16]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d020      	beq.n	8006450 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006424:	81bb      	strh	r3, [r7, #12]
 8006426:	89bb      	ldrh	r3, [r7, #12]
 8006428:	f083 0320 	eor.w	r3, r3, #32
 800642c:	81bb      	strh	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	89bb      	ldrh	r3, [r7, #12]
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
 800644e:	e2d5      	b.n	80069fc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006466:	81fb      	strh	r3, [r7, #14]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	89fb      	ldrh	r3, [r7, #14]
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
 8006488:	e2b8      	b.n	80069fc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	4413      	add	r3, r2
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064bc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	4413      	add	r3, r2
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	011a      	lsls	r2, r3, #4
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	4413      	add	r3, r2
 80064dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064f8:	d91d      	bls.n	8006536 <USB_ActivateEndpoint+0x2aa>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <USB_ActivateEndpoint+0x288>
 800650e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006510:	3b01      	subs	r3, #1
 8006512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29a      	uxth	r2, r3
 800651a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652e:	b29a      	uxth	r2, r3
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e026      	b.n	8006584 <USB_ActivateEndpoint+0x2f8>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USB_ActivateEndpoint+0x2c8>
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e017      	b.n	8006584 <USB_ActivateEndpoint+0x2f8>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <USB_ActivateEndpoint+0x2e2>
 8006568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800656a:	3301      	adds	r3, #1
 800656c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29a      	uxth	r2, r3
 8006574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29b      	uxth	r3, r3
 800657c:	4313      	orrs	r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006592:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <USB_ActivateEndpoint+0x348>
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b2:	843b      	strh	r3, [r7, #32]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8c3b      	ldrh	r3, [r7, #32]
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d124      	bne.n	8006626 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f2:	83bb      	strh	r3, [r7, #28]
 80065f4:	8bbb      	ldrh	r3, [r7, #28]
 80065f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065fa:	83bb      	strh	r3, [r7, #28]
 80065fc:	8bbb      	ldrh	r3, [r7, #28]
 80065fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006602:	83bb      	strh	r3, [r7, #28]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	8bbb      	ldrh	r3, [r7, #28]
 8006610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006620:	b29b      	uxth	r3, r3
 8006622:	8013      	strh	r3, [r2, #0]
 8006624:	e1ea      	b.n	80069fc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663c:	83fb      	strh	r3, [r7, #30]
 800663e:	8bfb      	ldrh	r3, [r7, #30]
 8006640:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006644:	83fb      	strh	r3, [r7, #30]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	8bfb      	ldrh	r3, [r7, #30]
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
 8006666:	e1c9      	b.n	80069fc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11e      	bne.n	80066ae <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80066a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]
 80066ac:	e01d      	b.n	80066ea <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80066c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066fa:	4413      	add	r3, r2
 80066fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	011a      	lsls	r2, r3, #4
 8006704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006706:	4413      	add	r3, r2
 8006708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800670c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	891b      	ldrh	r3, [r3, #8]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	657b      	str	r3, [r7, #84]	@ 0x54
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672e:	4413      	add	r3, r2
 8006730:	657b      	str	r3, [r7, #84]	@ 0x54
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	011a      	lsls	r2, r3, #4
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	4413      	add	r3, r2
 800673c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006740:	653b      	str	r3, [r7, #80]	@ 0x50
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	895b      	ldrh	r3, [r3, #10]
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006750:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 8093 	bne.w	8006882 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800676c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <USB_ActivateEndpoint+0x524>
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80067be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <USB_ActivateEndpoint+0x574>
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006818:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800681a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800681e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006820:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006822:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006826:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800683c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800685e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
 8006880:	e0bc      	b.n	80069fc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01d      	beq.n	80068da <USB_ActivateEndpoint+0x64e>
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	441a      	add	r2, r3
 80068c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80068ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01d      	beq.n	8006932 <USB_ActivateEndpoint+0x6a6>
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800692a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	78db      	ldrb	r3, [r3, #3]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d024      	beq.n	8006984 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006950:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006954:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006958:	f083 0320 	eor.w	r3, r3, #32
 800695c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]
 8006982:	e01d      	b.n	80069c0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800699a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3774      	adds	r7, #116	@ 0x74
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b08d      	sub	sp, #52	@ 0x34
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7b1b      	ldrb	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 808e 	bne.w	8006b3c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d044      	beq.n	8006ab2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	81bb      	strh	r3, [r7, #12]
 8006a36:	89bb      	ldrh	r3, [r7, #12]
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <USB_DeactivateEndpoint+0x6c>
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a56:	817b      	strh	r3, [r7, #10]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	897b      	ldrh	r3, [r7, #10]
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a8e:	813b      	strh	r3, [r7, #8]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	441a      	add	r2, r3
 8006a9a:	893b      	ldrh	r3, [r7, #8]
 8006a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8013      	strh	r3, [r2, #0]
 8006ab0:	e192      	b.n	8006dd8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	827b      	strh	r3, [r7, #18]
 8006ac0:	8a7b      	ldrh	r3, [r7, #18]
 8006ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01b      	beq.n	8006b02 <USB_DeactivateEndpoint+0xf6>
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae0:	823b      	strh	r3, [r7, #16]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	441a      	add	r2, r3
 8006aec:	8a3b      	ldrh	r3, [r7, #16]
 8006aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	81fb      	strh	r3, [r7, #14]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	89fb      	ldrh	r3, [r7, #14]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]
 8006b3a:	e14d      	b.n	8006dd8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f040 80a5 	bne.w	8006c90 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	843b      	strh	r3, [r7, #32]
 8006b54:	8c3b      	ldrh	r3, [r7, #32]
 8006b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01b      	beq.n	8006b96 <USB_DeactivateEndpoint+0x18a>
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b74:	83fb      	strh	r3, [r7, #30]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	8bfb      	ldrh	r3, [r7, #30]
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	83bb      	strh	r3, [r7, #28]
 8006ba4:	8bbb      	ldrh	r3, [r7, #28]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01b      	beq.n	8006be6 <USB_DeactivateEndpoint+0x1da>
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc4:	837b      	strh	r3, [r7, #26]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	8b7b      	ldrh	r3, [r7, #26]
 8006bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfc:	833b      	strh	r3, [r7, #24]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	441a      	add	r2, r3
 8006c08:	8b3b      	ldrh	r3, [r7, #24]
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c34:	82fb      	strh	r3, [r7, #22]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	441a      	add	r2, r3
 8006c40:	8afb      	ldrh	r3, [r7, #22]
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6c:	82bb      	strh	r3, [r7, #20]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	8abb      	ldrh	r3, [r7, #20]
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
 8006c8e:	e0a3      	b.n	8006dd8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01b      	beq.n	8006ce0 <USB_DeactivateEndpoint+0x2d4>
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006cee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01b      	beq.n	8006d30 <USB_DeactivateEndpoint+0x324>
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	441a      	add	r2, r3
 8006d1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3734      	adds	r7, #52	@ 0x34
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b0c2      	sub	sp, #264	@ 0x108
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df2:	6018      	str	r0, [r3, #0]
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	f040 86b7 	bne.w	8007b7e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d908      	bls.n	8006e3e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e3c:	e007      	b.n	8006e4e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	7b1b      	ldrb	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d13a      	bne.n	8006ed4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6959      	ldr	r1, [r3, #20]
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	88da      	ldrh	r2, [r3, #6]
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e84:	6800      	ldr	r0, [r0, #0]
 8006e86:	f001 fc9c 	bl	80087c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4413      	add	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	011a      	lsls	r2, r3, #4
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	f000 be1f 	b.w	8007b12 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	78db      	ldrb	r3, [r3, #3]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f040 8462 	bne.w	80077aa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	f240 83df 	bls.w	80076c2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f54:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 81c7 	beq.w	8007334 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d177      	bne.n	80070b2 <USB_EPStartXfer+0x2ce>
 8006fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	4413      	add	r3, r2
 8006fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	011a      	lsls	r2, r3, #4
 8006ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007008:	b29a      	uxth	r2, r3
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	2b3e      	cmp	r3, #62	@ 0x3e
 8007014:	d921      	bls.n	800705a <USB_EPStartXfer+0x276>
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <USB_EPStartXfer+0x252>
 800702c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007030:	3b01      	subs	r3, #1
 8007032:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29a      	uxth	r2, r3
 800703c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007040:	b29b      	uxth	r3, r3
 8007042:	029b      	lsls	r3, r3, #10
 8007044:	b29b      	uxth	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007052:	b29a      	uxth	r2, r3
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e050      	b.n	80070fc <USB_EPStartXfer+0x318>
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <USB_EPStartXfer+0x294>
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29a      	uxth	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e041      	b.n	80070fc <USB_EPStartXfer+0x318>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <USB_EPStartXfer+0x2b4>
 800708e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e024      	b.n	80070fc <USB_EPStartXfer+0x318>
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d11c      	bne.n	80070fc <USB_EPStartXfer+0x318>
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	4413      	add	r3, r2
 80070d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	011a      	lsls	r2, r3, #4
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	4413      	add	r3, r2
 80070ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	895b      	ldrh	r3, [r3, #10]
 8007108:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6959      	ldr	r1, [r3, #20]
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	b29b      	uxth	r3, r3
 800711e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007122:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007126:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	f001 fb49 	bl	80087c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	441a      	add	r2, r3
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	429a      	cmp	r2, r3
 8007168:	d90f      	bls.n	800718a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800716a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a1a      	ldr	r2, [r3, #32]
 8007176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	621a      	str	r2, [r3, #32]
 8007188:	e00e      	b.n	80071a8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800719a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2200      	movs	r2, #0
 80071a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d177      	bne.n	80072a8 <USB_EPStartXfer+0x4c4>
 80071b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	011a      	lsls	r2, r3, #4
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	4413      	add	r3, r2
 80071ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fe:	b29a      	uxth	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007208:	2b3e      	cmp	r3, #62	@ 0x3e
 800720a:	d921      	bls.n	8007250 <USB_EPStartXfer+0x46c>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <USB_EPStartXfer+0x448>
 8007222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007226:	3b01      	subs	r3, #1
 8007228:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29a      	uxth	r2, r3
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007236:	b29b      	uxth	r3, r3
 8007238:	029b      	lsls	r3, r3, #10
 800723a:	b29b      	uxth	r3, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007248:	b29a      	uxth	r2, r3
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	e056      	b.n	80072fe <USB_EPStartXfer+0x51a>
 8007250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <USB_EPStartXfer+0x48a>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007266:	b29a      	uxth	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	e047      	b.n	80072fe <USB_EPStartXfer+0x51a>
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <USB_EPStartXfer+0x4aa>
 8007284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007288:	3301      	adds	r3, #1
 800728a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29a      	uxth	r2, r3
 8007294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29b      	uxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	e02a      	b.n	80072fe <USB_EPStartXfer+0x51a>
 80072a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d122      	bne.n	80072fe <USB_EPStartXfer+0x51a>
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	4413      	add	r3, r2
 80072da:	623b      	str	r3, [r7, #32]
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	011a      	lsls	r2, r3, #4
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	891b      	ldrh	r3, [r3, #8]
 800730a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6959      	ldr	r1, [r3, #20]
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731e:	b29b      	uxth	r3, r3
 8007320:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007324:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007328:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800732c:	6800      	ldr	r0, [r0, #0]
 800732e:	f001 fa48 	bl	80087c2 <USB_WritePMA>
 8007332:	e3ee      	b.n	8007b12 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d177      	bne.n	8007434 <USB_EPStartXfer+0x650>
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007364:	4413      	add	r3, r2
 8007366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	011a      	lsls	r2, r3, #4
 8007376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007378:	4413      	add	r3, r2
 800737a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800737e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738a:	b29a      	uxth	r2, r3
 800738c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	2b3e      	cmp	r3, #62	@ 0x3e
 8007396:	d921      	bls.n	80073dc <USB_EPStartXfer+0x5f8>
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <USB_EPStartXfer+0x5d4>
 80073ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073b2:	3b01      	subs	r3, #1
 80073b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	029b      	lsls	r3, r3, #10
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e056      	b.n	800748a <USB_EPStartXfer+0x6a6>
 80073dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <USB_EPStartXfer+0x616>
 80073e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e047      	b.n	800748a <USB_EPStartXfer+0x6a6>
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x636>
 8007410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800741a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	e02a      	b.n	800748a <USB_EPStartXfer+0x6a6>
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d122      	bne.n	800748a <USB_EPStartXfer+0x6a6>
 8007444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800745e:	b29b      	uxth	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007464:	4413      	add	r3, r2
 8007466:	653b      	str	r3, [r7, #80]	@ 0x50
 8007468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	011a      	lsls	r2, r3, #4
 8007476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007478:	4413      	add	r3, r2
 800747a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800747e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	b29a      	uxth	r2, r3
 8007486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	891b      	ldrh	r3, [r3, #8]
 8007496:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6959      	ldr	r1, [r3, #20]
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074b8:	6800      	ldr	r0, [r0, #0]
 80074ba:	f001 f982 	bl	80087c2 <USB_WritePMA>
            ep->xfer_buff += len;
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	441a      	add	r2, r3
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a1a      	ldr	r2, [r3, #32]
 80074e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d90f      	bls.n	8007518 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007508:	1ad2      	subs	r2, r2, r3
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	621a      	str	r2, [r3, #32]
 8007516:	e00e      	b.n	8007536 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	643b      	str	r3, [r7, #64]	@ 0x40
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d177      	bne.n	8007642 <USB_EPStartXfer+0x85e>
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007572:	4413      	add	r3, r2
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	011a      	lsls	r2, r3, #4
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	4413      	add	r3, r2
 8007588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34
 800758e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007598:	b29a      	uxth	r2, r3
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075a4:	d921      	bls.n	80075ea <USB_EPStartXfer+0x806>
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <USB_EPStartXfer+0x7e2>
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c0:	3b01      	subs	r3, #1
 80075c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	029b      	lsls	r3, r3, #10
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	e050      	b.n	800768c <USB_EPStartXfer+0x8a8>
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <USB_EPStartXfer+0x824>
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007600:	b29a      	uxth	r2, r3
 8007602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e041      	b.n	800768c <USB_EPStartXfer+0x8a8>
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <USB_EPStartXfer+0x844>
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007622:	3301      	adds	r3, #1
 8007624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007632:	b29b      	uxth	r3, r3
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	b29b      	uxth	r3, r3
 8007638:	4313      	orrs	r3, r2
 800763a:	b29a      	uxth	r2, r3
 800763c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e024      	b.n	800768c <USB_EPStartXfer+0x8a8>
 8007642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d11c      	bne.n	800768c <USB_EPStartXfer+0x8a8>
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007666:	4413      	add	r3, r2
 8007668:	643b      	str	r3, [r7, #64]	@ 0x40
 800766a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	011a      	lsls	r2, r3, #4
 8007678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800767a:	4413      	add	r3, r2
 800767c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	b29a      	uxth	r2, r3
 8007688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	895b      	ldrh	r3, [r3, #10]
 8007698:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6959      	ldr	r1, [r3, #20]
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	f001 f881 	bl	80087c2 <USB_WritePMA>
 80076c0:	e227      	b.n	8007b12 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800773a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800774e:	4413      	add	r3, r2
 8007750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	011a      	lsls	r2, r3, #4
 8007760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007762:	4413      	add	r3, r2
 8007764:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007768:	65bb      	str	r3, [r7, #88]	@ 0x58
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	b29a      	uxth	r2, r3
 8007770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007772:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	891b      	ldrh	r3, [r3, #8]
 8007780:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800779e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	f001 f80d 	bl	80087c2 <USB_WritePMA>
 80077a8:	e1b3      	b.n	8007b12 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6a1a      	ldr	r2, [r3, #32]
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80c6 	beq.w	800797c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d177      	bne.n	80078fc <USB_EPStartXfer+0xb18>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800782c:	4413      	add	r3, r2
 800782e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	011a      	lsls	r2, r3, #4
 800783e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007840:	4413      	add	r3, r2
 8007842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007846:	667b      	str	r3, [r7, #100]	@ 0x64
 8007848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007852:	b29a      	uxth	r2, r3
 8007854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	2b3e      	cmp	r3, #62	@ 0x3e
 800785e:	d921      	bls.n	80078a4 <USB_EPStartXfer+0xac0>
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	095b      	lsrs	r3, r3, #5
 8007866:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <USB_EPStartXfer+0xa9c>
 8007876:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800787a:	3b01      	subs	r3, #1
 800787c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800788a:	b29b      	uxth	r3, r3
 800788c:	029b      	lsls	r3, r3, #10
 800788e:	b29b      	uxth	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	e050      	b.n	8007946 <USB_EPStartXfer+0xb62>
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <USB_EPStartXfer+0xade>
 80078ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e041      	b.n	8007946 <USB_EPStartXfer+0xb62>
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <USB_EPStartXfer+0xafe>
 80078d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	029b      	lsls	r3, r3, #10
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f8:	801a      	strh	r2, [r3, #0]
 80078fa:	e024      	b.n	8007946 <USB_EPStartXfer+0xb62>
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d11c      	bne.n	8007946 <USB_EPStartXfer+0xb62>
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007920:	4413      	add	r3, r2
 8007922:	673b      	str	r3, [r7, #112]	@ 0x70
 8007924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007934:	4413      	add	r3, r2
 8007936:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800793a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	b29a      	uxth	r2, r3
 8007942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007944:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	895b      	ldrh	r3, [r3, #10]
 8007952:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6959      	ldr	r1, [r3, #20]
 8007962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007966:	b29b      	uxth	r3, r3
 8007968:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800796c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007970:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007974:	6800      	ldr	r0, [r0, #0]
 8007976:	f000 ff24 	bl	80087c2 <USB_WritePMA>
 800797a:	e0ca      	b.n	8007b12 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800797c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d177      	bne.n	8007a7c <USB_EPStartXfer+0xc98>
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079ac:	4413      	add	r3, r2
 80079ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	011a      	lsls	r2, r3, #4
 80079be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079c0:	4413      	add	r3, r2
 80079c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80079de:	d921      	bls.n	8007a24 <USB_EPStartXfer+0xc40>
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <USB_EPStartXfer+0xc1c>
 80079f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079fa:	3b01      	subs	r3, #1
 80079fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	e05c      	b.n	8007ade <USB_EPStartXfer+0xcfa>
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <USB_EPStartXfer+0xc5e>
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e04d      	b.n	8007ade <USB_EPStartXfer+0xcfa>
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USB_EPStartXfer+0xc7e>
 8007a58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	029b      	lsls	r3, r3, #10
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e030      	b.n	8007ade <USB_EPStartXfer+0xcfa>
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d128      	bne.n	8007ade <USB_EPStartXfer+0xcfa>
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	011a      	lsls	r2, r3, #4
 8007ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ac8:	4413      	add	r3, r2
 8007aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007adc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	891b      	ldrh	r3, [r3, #8]
 8007aea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6959      	ldr	r1, [r3, #20]
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f000 fe58 	bl	80087c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b38:	817b      	strh	r3, [r7, #10]
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	f083 0310 	eor.w	r3, r3, #16
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	897b      	ldrh	r3, [r7, #10]
 8007b44:	f083 0320 	eor.w	r3, r3, #32
 8007b48:	817b      	strh	r3, [r7, #10]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	897b      	ldrh	r3, [r7, #10]
 8007b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8013      	strh	r3, [r2, #0]
 8007b7a:	f000 bcde 	b.w	800853a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	7b1b      	ldrb	r3, [r3, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80bb 	bne.w	8007d06 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d917      	bls.n	8007bdc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bcc:	1ad2      	subs	r2, r2, r3
 8007bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	619a      	str	r2, [r3, #24]
 8007bda:	e00e      	b.n	8007bfa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c1e:	4413      	add	r3, r2
 8007c20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c36:	4413      	add	r3, r2
 8007c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c5a:	d924      	bls.n	8007ca6 <USB_EPStartXfer+0xec2>
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <USB_EPStartXfer+0xe98>
 8007c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	f000 bc10 	b.w	80084c6 <USB_EPStartXfer+0x16e2>
 8007ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10c      	bne.n	8007cc8 <USB_EPStartXfer+0xee4>
 8007cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	e3fe      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <USB_EPStartXfer+0xf04>
 8007cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	029b      	lsls	r3, r3, #10
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e3df      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	78db      	ldrb	r3, [r3, #3]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	f040 8218 	bne.w	8008148 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 809d 	bne.w	8007e64 <USB_EPStartXfer+0x1080>
 8007d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d4e:	4413      	add	r3, r2
 8007d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	011a      	lsls	r2, r3, #4
 8007d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d66:	4413      	add	r3, r2
 8007d68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d92:	d92b      	bls.n	8007dec <USB_EPStartXfer+0x1008>
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <USB_EPStartXfer+0xfe0>
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	029b      	lsls	r3, r3, #10
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e070      	b.n	8007ece <USB_EPStartXfer+0x10ea>
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <USB_EPStartXfer+0x1032>
 8007dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e05b      	b.n	8007ece <USB_EPStartXfer+0x10ea>
 8007e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <USB_EPStartXfer+0x1062>
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e40:	3301      	adds	r3, #1
 8007e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	029b      	lsls	r3, r3, #10
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	e034      	b.n	8007ece <USB_EPStartXfer+0x10ea>
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d12c      	bne.n	8007ece <USB_EPStartXfer+0x10ea>
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e98:	4413      	add	r3, r2
 8007e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	011a      	lsls	r2, r3, #4
 8007eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 809d 	bne.w	8008028 <USB_EPStartXfer+0x1244>
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f12:	4413      	add	r3, r2
 8007f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	011a      	lsls	r2, r3, #4
 8007f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f56:	d92b      	bls.n	8007fb0 <USB_EPStartXfer+0x11cc>
 8007f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <USB_EPStartXfer+0x11a4>
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f82:	3b01      	subs	r3, #1
 8007f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	029b      	lsls	r3, r3, #10
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e069      	b.n	8008084 <USB_EPStartXfer+0x12a0>
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <USB_EPStartXfer+0x11f6>
 8007fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	e054      	b.n	8008084 <USB_EPStartXfer+0x12a0>
 8007fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	085b      	lsrs	r3, r3, #1
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <USB_EPStartXfer+0x1226>
 8008000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008004:	3301      	adds	r3, #1
 8008006:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800800a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29b      	uxth	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	b29a      	uxth	r2, r3
 8008020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e02d      	b.n	8008084 <USB_EPStartXfer+0x12a0>
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d125      	bne.n	8008084 <USB_EPStartXfer+0x12a0>
 8008038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800804e:	4413      	add	r3, r2
 8008050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	011a      	lsls	r2, r3, #4
 8008062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008066:	4413      	add	r3, r2
 8008068:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800806c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008082:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8218 	beq.w	80084c6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <USB_EPStartXfer+0x12ea>
 80080c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10d      	bne.n	80080ea <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 81f5 	bne.w	80084c6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 81ee 	bne.w	80084c6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800813a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008142:	b29b      	uxth	r3, r3
 8008144:	8013      	strh	r3, [r2, #0]
 8008146:	e1be      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	78db      	ldrb	r3, [r3, #3]
 8008154:	2b01      	cmp	r3, #1
 8008156:	f040 81b4 	bne.w	80084c2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800815a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	429a      	cmp	r2, r3
 8008174:	d917      	bls.n	80081a6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008196:	1ad2      	subs	r2, r2, r3
 8008198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	619a      	str	r2, [r3, #24]
 80081a4:	e00e      	b.n	80081c4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80081a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80081b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2200      	movs	r2, #0
 80081c2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f040 8085 	bne.w	80082e0 <USB_EPStartXfer+0x14fc>
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081fa:	4413      	add	r3, r2
 80081fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008212:	4413      	add	r3, r2
 8008214:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800821c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	2b3e      	cmp	r3, #62	@ 0x3e
 8008236:	d923      	bls.n	8008280 <USB_EPStartXfer+0x149c>
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2b00      	cmp	r3, #0
 800824c:	d104      	bne.n	8008258 <USB_EPStartXfer+0x1474>
 800824e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008252:	3b01      	subs	r3, #1
 8008254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29a      	uxth	r2, r3
 8008260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008264:	b29b      	uxth	r3, r3
 8008266:	029b      	lsls	r3, r3, #10
 8008268:	b29b      	uxth	r3, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	e060      	b.n	8008342 <USB_EPStartXfer+0x155e>
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <USB_EPStartXfer+0x14be>
 8008288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	e04f      	b.n	8008342 <USB_EPStartXfer+0x155e>
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <USB_EPStartXfer+0x14de>
 80082b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082bc:	3301      	adds	r3, #1
 80082be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	029b      	lsls	r3, r3, #10
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	e030      	b.n	8008342 <USB_EPStartXfer+0x155e>
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d128      	bne.n	8008342 <USB_EPStartXfer+0x155e>
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800830c:	b29b      	uxth	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008314:	4413      	add	r3, r2
 8008316:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	011a      	lsls	r2, r3, #4
 8008328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800832c:	4413      	add	r3, r2
 800832e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008332:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	b29a      	uxth	r2, r3
 800833c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008340:	801a      	strh	r2, [r3, #0]
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8085 	bne.w	800846c <USB_EPStartXfer+0x1688>
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008386:	4413      	add	r3, r2
 8008388:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800838c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	011a      	lsls	r2, r3, #4
 800839a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800839e:	4413      	add	r3, r2
 80083a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80083c2:	d923      	bls.n	800840c <USB_EPStartXfer+0x1628>
 80083c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <USB_EPStartXfer+0x1600>
 80083da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083de:	3b01      	subs	r3, #1
 80083e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	029b      	lsls	r3, r3, #10
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e05c      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10c      	bne.n	800842e <USB_EPStartXfer+0x164a>
 8008414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e04b      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
 800842e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <USB_EPStartXfer+0x166a>
 8008444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008448:	3301      	adds	r3, #1
 800844a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800844e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29a      	uxth	r2, r3
 8008456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800845a:	b29b      	uxth	r3, r3
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	b29b      	uxth	r3, r3
 8008460:	4313      	orrs	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e02c      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d124      	bne.n	80084c6 <USB_EPStartXfer+0x16e2>
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800848a:	b29b      	uxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008492:	4413      	add	r3, r2
 8008494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	011a      	lsls	r2, r3, #4
 80084a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e001      	b.n	80084c6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e03a      	b.n	800853c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008500:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008504:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	441a      	add	r2, r3
 8008522:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d020      	beq.n	800859a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856e:	81bb      	strh	r3, [r7, #12]
 8008570:	89bb      	ldrh	r3, [r7, #12]
 8008572:	f083 0310 	eor.w	r3, r3, #16
 8008576:	81bb      	strh	r3, [r7, #12]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	89bb      	ldrh	r3, [r7, #12]
 8008584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800858c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008594:	b29b      	uxth	r3, r3
 8008596:	8013      	strh	r3, [r2, #0]
 8008598:	e01f      	b.n	80085da <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b0:	81fb      	strh	r3, [r7, #14]
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085b8:	81fb      	strh	r3, [r7, #14]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b087      	sub	sp, #28
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	7b1b      	ldrb	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 809d 	bne.w	8008734 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d04c      	beq.n	800869c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	823b      	strh	r3, [r7, #16]
 8008610:	8a3b      	ldrh	r3, [r7, #16]
 8008612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01b      	beq.n	8008652 <USB_EPClearStall+0x6c>
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800862c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008630:	81fb      	strh	r3, [r7, #14]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	441a      	add	r2, r3
 800863c:	89fb      	ldrh	r3, [r7, #14]
 800863e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800864e:	b29b      	uxth	r3, r3
 8008650:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	78db      	ldrb	r3, [r3, #3]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d06c      	beq.n	8008734 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800866c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008670:	81bb      	strh	r3, [r7, #12]
 8008672:	89bb      	ldrh	r3, [r7, #12]
 8008674:	f083 0320 	eor.w	r3, r3, #32
 8008678:	81bb      	strh	r3, [r7, #12]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	441a      	add	r2, r3
 8008684:	89bb      	ldrh	r3, [r7, #12]
 8008686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800868a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008696:	b29b      	uxth	r3, r3
 8008698:	8013      	strh	r3, [r2, #0]
 800869a:	e04b      	b.n	8008734 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	82fb      	strh	r3, [r7, #22]
 80086aa:	8afb      	ldrh	r3, [r7, #22]
 80086ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01b      	beq.n	80086ec <USB_EPClearStall+0x106>
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ca:	82bb      	strh	r3, [r7, #20]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	8abb      	ldrh	r3, [r7, #20]
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008702:	827b      	strh	r3, [r7, #18]
 8008704:	8a7b      	ldrh	r3, [r7, #18]
 8008706:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800870a:	827b      	strh	r3, [r7, #18]
 800870c:	8a7b      	ldrh	r3, [r7, #18]
 800870e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008712:	827b      	strh	r3, [r7, #18]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	441a      	add	r2, r3
 800871e:	8a7b      	ldrh	r3, [r7, #18]
 8008720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800872c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008730:	b29b      	uxth	r3, r3
 8008732:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2280      	movs	r2, #128	@ 0x80
 8008756:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800879c:	b29b      	uxth	r3, r3
 800879e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b08b      	sub	sp, #44	@ 0x2c
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	4611      	mov	r1, r2
 80087ce:	461a      	mov	r2, r3
 80087d0:	460b      	mov	r3, r1
 80087d2:	80fb      	strh	r3, [r7, #6]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087d8:	88bb      	ldrh	r3, [r7, #4]
 80087da:	3301      	adds	r3, #1
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	005a      	lsls	r2, r3, #1
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fa:	e01e      	b.n	800883a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	b21a      	sxth	r2, r3
 800880c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008810:	4313      	orrs	r3, r2
 8008812:	b21b      	sxth	r3, r3
 8008814:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	8a7a      	ldrh	r2, [r7, #18]
 800881a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	3302      	adds	r3, #2
 8008820:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	3302      	adds	r3, #2
 8008826:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	3301      	adds	r3, #1
 8008832:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	3b01      	subs	r3, #1
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1dd      	bne.n	80087fc <USB_WritePMA+0x3a>
  }
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	372c      	adds	r7, #44	@ 0x2c
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800884c:	b480      	push	{r7}
 800884e:	b08b      	sub	sp, #44	@ 0x2c
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4611      	mov	r1, r2
 8008858:	461a      	mov	r2, r3
 800885a:	460b      	mov	r3, r1
 800885c:	80fb      	strh	r3, [r7, #6]
 800885e:	4613      	mov	r3, r2
 8008860:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008862:	88bb      	ldrh	r3, [r7, #4]
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	b29b      	uxth	r3, r3
 8008868:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	005a      	lsls	r2, r3, #1
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800887e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
 8008884:	e01b      	b.n	80088be <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	b29b      	uxth	r3, r3
 800888c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3302      	adds	r3, #2
 8008892:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	b2da      	uxtb	r2, r3
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3301      	adds	r3, #1
 80088a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	3301      	adds	r3, #1
 80088b0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	3302      	adds	r3, #2
 80088b6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	3b01      	subs	r3, #1
 80088bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e0      	bne.n	8008886 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80088c4:	88bb      	ldrh	r3, [r7, #4]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	701a      	strb	r2, [r3, #0]
  }
}
 80088e0:	bf00      	nop
 80088e2:	372c      	adds	r7, #44	@ 0x2c
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr

080088ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7c1b      	ldrb	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d115      	bne.n	800892e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008906:	2202      	movs	r2, #2
 8008908:	2181      	movs	r1, #129	@ 0x81
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 fee1 	bl	800a6d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800891a:	2202      	movs	r2, #2
 800891c:	2101      	movs	r1, #1
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fed7 	bl	800a6d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800892c:	e012      	b.n	8008954 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800892e:	2340      	movs	r3, #64	@ 0x40
 8008930:	2202      	movs	r2, #2
 8008932:	2181      	movs	r1, #129	@ 0x81
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 fecc 	bl	800a6d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008940:	2340      	movs	r3, #64	@ 0x40
 8008942:	2202      	movs	r2, #2
 8008944:	2101      	movs	r1, #1
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 fec3 	bl	800a6d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008954:	2308      	movs	r3, #8
 8008956:	2203      	movs	r2, #3
 8008958:	2182      	movs	r1, #130	@ 0x82
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 feb9 	bl	800a6d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008966:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800896a:	f001 ffd9 	bl	800a920 <USBD_static_malloc>
 800896e:	4602      	mov	r2, r0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e026      	b.n	80089d4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7c1b      	ldrb	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d109      	bne.n	80089c4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089ba:	2101      	movs	r1, #1
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 ff79 	bl	800a8b4 <USBD_LL_PrepareReceive>
 80089c2:	e007      	b.n	80089d4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089ca:	2340      	movs	r3, #64	@ 0x40
 80089cc:	2101      	movs	r1, #1
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 ff70 	bl	800a8b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089ee:	2181      	movs	r1, #129	@ 0x81
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 fe94 	bl	800a71e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089fc:	2101      	movs	r1, #1
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f001 fe8d 	bl	800a71e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a0c:	2182      	movs	r1, #130	@ 0x82
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fe85 	bl	800a71e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00e      	beq.n	8008a42 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 ff7f 	bl	800a938 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d039      	beq.n	8008aea <USBD_CDC_Setup+0x9e>
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d17f      	bne.n	8008b7a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	88db      	ldrh	r3, [r3, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d029      	beq.n	8008ad6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da11      	bge.n	8008ab0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	88d2      	ldrh	r2, [r2, #6]
 8008a9e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008aa0:	6939      	ldr	r1, [r7, #16]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 fa05 	bl	8009eb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008aae:	e06b      	b.n	8008b88 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785a      	ldrb	r2, [r3, #1]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	88db      	ldrh	r3, [r3, #6]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ac6:	6939      	ldr	r1, [r7, #16]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	88db      	ldrh	r3, [r3, #6]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fa20 	bl	8009f14 <USBD_CtlPrepareRx>
      break;
 8008ad4:	e058      	b.n	8008b88 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	7850      	ldrb	r0, [r2, #1]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	4798      	blx	r3
      break;
 8008ae8:	e04e      	b.n	8008b88 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b0b      	cmp	r3, #11
 8008af0:	d02e      	beq.n	8008b50 <USBD_CDC_Setup+0x104>
 8008af2:	2b0b      	cmp	r3, #11
 8008af4:	dc38      	bgt.n	8008b68 <USBD_CDC_Setup+0x11c>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <USBD_CDC_Setup+0xb4>
 8008afa:	2b0a      	cmp	r3, #10
 8008afc:	d014      	beq.n	8008b28 <USBD_CDC_Setup+0xdc>
 8008afe:	e033      	b.n	8008b68 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d107      	bne.n	8008b1a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b0a:	f107 030c 	add.w	r3, r7, #12
 8008b0e:	2202      	movs	r2, #2
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 f9d0 	bl	8009eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b18:	e02e      	b.n	8008b78 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f961 	bl	8009de4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b22:	2302      	movs	r3, #2
 8008b24:	75fb      	strb	r3, [r7, #23]
          break;
 8008b26:	e027      	b.n	8008b78 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d107      	bne.n	8008b42 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b32:	f107 030f 	add.w	r3, r7, #15
 8008b36:	2201      	movs	r2, #1
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f9bc 	bl	8009eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b40:	e01a      	b.n	8008b78 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f94d 	bl	8009de4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4e:	e013      	b.n	8008b78 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d00d      	beq.n	8008b76 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f941 	bl	8009de4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b66:	e006      	b.n	8008b76 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 f93a 	bl	8009de4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b70:	2302      	movs	r3, #2
 8008b72:	75fb      	strb	r3, [r7, #23]
          break;
 8008b74:	e000      	b.n	8008b78 <USBD_CDC_Setup+0x12c>
          break;
 8008b76:	bf00      	nop
      }
      break;
 8008b78:	e006      	b.n	8008b88 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f931 	bl	8009de4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b82:	2302      	movs	r3, #2
 8008b84:	75fb      	strb	r3, [r7, #23]
      break;
 8008b86:	bf00      	nop
  }

  return ret;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d03a      	beq.n	8008c2e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	331c      	adds	r3, #28
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d029      	beq.n	8008c22 <USBD_CDC_DataIn+0x90>
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	331c      	adds	r3, #28
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	78f9      	ldrb	r1, [r7, #3]
 8008be2:	68b8      	ldr	r0, [r7, #8]
 8008be4:	460b      	mov	r3, r1
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	4403      	add	r3, r0
 8008bee:	3338      	adds	r3, #56	@ 0x38
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d110      	bne.n	8008c22 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c00:	78fa      	ldrb	r2, [r7, #3]
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	331c      	adds	r3, #28
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c14:	78f9      	ldrb	r1, [r7, #3]
 8008c16:	2300      	movs	r3, #0
 8008c18:	2200      	movs	r2, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fe27 	bl	800a86e <USBD_LL_Transmit>
 8008c20:	e003      	b.n	8008c2a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fe52 	bl	800a8fa <USBD_LL_GetRxDataSize>
 8008c56:	4602      	mov	r2, r0
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00d      	beq.n	8008c84 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4798      	blx	r3

    return USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	e000      	b.n	8008c86 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c84:	2302      	movs	r3, #2
  }
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d014      	beq.n	8008cd2 <USBD_CDC_EP0_RxReady+0x44>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008cae:	2bff      	cmp	r3, #255	@ 0xff
 8008cb0:	d00f      	beq.n	8008cd2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008cc0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	22ff      	movs	r2, #255	@ 0xff
 8008cce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2243      	movs	r2, #67	@ 0x43
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	@ (8008cf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000098 	.word	0x20000098

08008cfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2243      	movs	r2, #67	@ 0x43
 8008d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d0a:	4b03      	ldr	r3, [pc, #12]	@ (8008d18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000054 	.word	0x20000054

08008d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2243      	movs	r2, #67	@ 0x43
 8008d28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d2a:	4b03      	ldr	r3, [pc, #12]	@ (8008d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200000dc 	.word	0x200000dc

08008d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	220a      	movs	r2, #10
 8008d48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d4a:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20000010 	.word	0x20000010

08008d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d66:	2302      	movs	r3, #2
 8008d68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d005      	beq.n	8008d7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008da6:	88fa      	ldrh	r2, [r7, #6]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr

08008dba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d01c      	beq.n	8008e34 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d115      	bne.n	8008e30 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2181      	movs	r1, #129	@ 0x81
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fd21 	bl	800a86e <USBD_LL_Transmit>

      return USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e002      	b.n	8008e36 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008e34:	2302      	movs	r3, #2
  }
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7c1b      	ldrb	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 fd21 	bl	800a8b4 <USBD_LL_PrepareReceive>
 8008e72:	e007      	b.n	8008e84 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e7a:	2340      	movs	r3, #64	@ 0x40
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fd18 	bl	800a8b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	e000      	b.n	8008e8a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e88:	2302      	movs	r3, #2
  }
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e01a      	b.n	8008ee0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	79fa      	ldrb	r2, [r7, #7]
 8008ed6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 fb85 	bl	800a5e8 <USBD_LL_Init>

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
 8008f08:	e001      	b.n	8008f0e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr

08008f1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fbba 	bl	800a69c <USBD_LL_Start>

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr

08008f46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f52:	2302      	movs	r3, #2
 8008f54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00c      	beq.n	8008f7a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	4798      	blx	r3

  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fed8 	bl	8009d72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d016      	beq.n	8009014 <USBD_LL_SetupStage+0x6a>
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d81c      	bhi.n	8009024 <USBD_LL_SetupStage+0x7a>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <USBD_LL_SetupStage+0x4a>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d008      	beq.n	8009004 <USBD_LL_SetupStage+0x5a>
 8008ff2:	e017      	b.n	8009024 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9cb 	bl	8009398 <USBD_StdDevReq>
      break;
 8009002:	e01a      	b.n	800903a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fa2d 	bl	800946c <USBD_StdItfReq>
      break;
 8009012:	e012      	b.n	800903a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa6d 	bl	80094fc <USBD_StdEPReq>
      break;
 8009022:	e00a      	b.n	800903a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800902a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800902e:	b2db      	uxtb	r3, r3
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fb92 	bl	800a75c <USBD_LL_StallEP>
      break;
 8009038:	bf00      	nop
  }

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	460b      	mov	r3, r1
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d14b      	bne.n	80090f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800905e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009066:	2b03      	cmp	r3, #3
 8009068:	d134      	bne.n	80090d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	429a      	cmp	r2, r3
 8009074:	d919      	bls.n	80090aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800908c:	429a      	cmp	r2, r3
 800908e:	d203      	bcs.n	8009098 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009094:	b29b      	uxth	r3, r3
 8009096:	e002      	b.n	800909e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800909c:	b29b      	uxth	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 ff54 	bl	8009f50 <USBD_CtlContinueRx>
 80090a8:	e038      	b.n	800911c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d105      	bne.n	80090cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 ff51 	bl	8009f74 <USBD_CtlSendStatus>
 80090d2:	e023      	b.n	800911c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090da:	2b05      	cmp	r3, #5
 80090dc:	d11e      	bne.n	800911c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80090e6:	2100      	movs	r1, #0
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f001 fb37 	bl	800a75c <USBD_LL_StallEP>
 80090ee:	e015      	b.n	800911c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00d      	beq.n	8009118 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009102:	2b03      	cmp	r3, #3
 8009104:	d108      	bne.n	8009118 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	7afa      	ldrb	r2, [r7, #11]
 8009110:	4611      	mov	r1, r2
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	4798      	blx	r3
 8009116:	e001      	b.n	800911c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009118:	2302      	movs	r3, #2
 800911a:	e000      	b.n	800911e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	460b      	mov	r3, r1
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d17f      	bne.n	800923a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3314      	adds	r3, #20
 800913e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009146:	2b02      	cmp	r3, #2
 8009148:	d15c      	bne.n	8009204 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	429a      	cmp	r2, r3
 8009154:	d915      	bls.n	8009182 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	b29b      	uxth	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 febe 	bl	8009ef0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009174:	2300      	movs	r3, #0
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f001 fb9a 	bl	800a8b4 <USBD_LL_PrepareReceive>
 8009180:	e04e      	b.n	8009220 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	6912      	ldr	r2, [r2, #16]
 800918a:	fbb3 f1f2 	udiv	r1, r3, r2
 800918e:	fb01 f202 	mul.w	r2, r1, r2
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11c      	bne.n	80091d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d316      	bcc.n	80091d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d20f      	bcs.n	80091d2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091b2:	2200      	movs	r2, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fe9a 	bl	8009ef0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f001 fb72 	bl	800a8b4 <USBD_LL_PrepareReceive>
 80091d0:	e026      	b.n	8009220 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d105      	bne.n	80091f4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091f4:	2180      	movs	r1, #128	@ 0x80
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f001 fab0 	bl	800a75c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 fecc 	bl	8009f9a <USBD_CtlReceiveStatus>
 8009202:	e00d      	b.n	8009220 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800920a:	2b04      	cmp	r3, #4
 800920c:	d004      	beq.n	8009218 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009218:	2180      	movs	r1, #128	@ 0x80
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f001 fa9e 	bl	800a75c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009226:	2b01      	cmp	r3, #1
 8009228:	d11d      	bne.n	8009266 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff fe81 	bl	8008f32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009238:	e015      	b.n	8009266 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800924c:	2b03      	cmp	r3, #3
 800924e:	d108      	bne.n	8009262 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	7afa      	ldrb	r2, [r7, #11]
 800925a:	4611      	mov	r1, r2
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	4798      	blx	r3
 8009260:	e001      	b.n	8009266 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009262:	2302      	movs	r3, #2
 8009264:	e000      	b.n	8009268 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009278:	2340      	movs	r3, #64	@ 0x40
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fa27 	bl	800a6d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2240      	movs	r2, #64	@ 0x40
 8009290:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009294:	2340      	movs	r3, #64	@ 0x40
 8009296:	2200      	movs	r2, #0
 8009298:	2180      	movs	r1, #128	@ 0x80
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 fa19 	bl	800a6d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2240      	movs	r2, #64	@ 0x40
 80092aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6852      	ldr	r2, [r2, #4]
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	4611      	mov	r1, r2
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	4798      	blx	r3
  }

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr

08009310 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2204      	movs	r2, #4
 8009328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr

08009338 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009346:	2b04      	cmp	r3, #4
 8009348:	d105      	bne.n	8009356 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	2b03      	cmp	r3, #3
 8009372:	d10b      	bne.n	800938c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093ae:	2b40      	cmp	r3, #64	@ 0x40
 80093b0:	d005      	beq.n	80093be <USBD_StdDevReq+0x26>
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d84f      	bhi.n	8009456 <USBD_StdDevReq+0xbe>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <USBD_StdDevReq+0x36>
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d14b      	bne.n	8009456 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
      break;
 80093cc:	e048      	b.n	8009460 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	785b      	ldrb	r3, [r3, #1]
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d839      	bhi.n	800944a <USBD_StdDevReq+0xb2>
 80093d6:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <USBD_StdDevReq+0x44>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800942d 	.word	0x0800942d
 80093e0:	08009441 	.word	0x08009441
 80093e4:	0800944b 	.word	0x0800944b
 80093e8:	08009437 	.word	0x08009437
 80093ec:	0800944b 	.word	0x0800944b
 80093f0:	0800940f 	.word	0x0800940f
 80093f4:	08009405 	.word	0x08009405
 80093f8:	0800944b 	.word	0x0800944b
 80093fc:	08009423 	.word	0x08009423
 8009400:	08009419 	.word	0x08009419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f9dc 	bl	80097c4 <USBD_GetDescriptor>
          break;
 800940c:	e022      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fb3f 	bl	8009a94 <USBD_SetAddress>
          break;
 8009416:	e01d      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fb7e 	bl	8009b1c <USBD_SetConfig>
          break;
 8009420:	e018      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc07 	bl	8009c38 <USBD_GetConfig>
          break;
 800942a:	e013      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fc37 	bl	8009ca2 <USBD_GetStatus>
          break;
 8009434:	e00e      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc65 	bl	8009d08 <USBD_SetFeature>
          break;
 800943e:	e009      	b.n	8009454 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fc74 	bl	8009d30 <USBD_ClrFeature>
          break;
 8009448:	e004      	b.n	8009454 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fcc9 	bl	8009de4 <USBD_CtlError>
          break;
 8009452:	bf00      	nop
      }
      break;
 8009454:	e004      	b.n	8009460 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fcc3 	bl	8009de4 <USBD_CtlError>
      break;
 800945e:	bf00      	nop
  }

  return ret;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop

0800946c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009482:	2b40      	cmp	r3, #64	@ 0x40
 8009484:	d005      	beq.n	8009492 <USBD_StdItfReq+0x26>
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d82e      	bhi.n	80094e8 <USBD_StdItfReq+0x7c>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <USBD_StdItfReq+0x26>
 800948e:	2b20      	cmp	r3, #32
 8009490:	d12a      	bne.n	80094e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	3b01      	subs	r3, #1
 800949a:	2b02      	cmp	r3, #2
 800949c:	d81d      	bhi.n	80094da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	889b      	ldrh	r3, [r3, #4]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d813      	bhi.n	80094d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d110      	bne.n	80094e4 <USBD_StdItfReq+0x78>
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10d      	bne.n	80094e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fd53 	bl	8009f74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094ce:	e009      	b.n	80094e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fc86 	bl	8009de4 <USBD_CtlError>
          break;
 80094d8:	e004      	b.n	80094e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fc81 	bl	8009de4 <USBD_CtlError>
          break;
 80094e2:	e000      	b.n	80094e6 <USBD_StdItfReq+0x7a>
          break;
 80094e4:	bf00      	nop
      }
      break;
 80094e6:	e004      	b.n	80094f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fc7a 	bl	8009de4 <USBD_CtlError>
      break;
 80094f0:	bf00      	nop
  }

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	889b      	ldrh	r3, [r3, #4]
 800950e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009518:	2b40      	cmp	r3, #64	@ 0x40
 800951a:	d007      	beq.n	800952c <USBD_StdEPReq+0x30>
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	f200 8146 	bhi.w	80097ae <USBD_StdEPReq+0x2b2>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <USBD_StdEPReq+0x40>
 8009526:	2b20      	cmp	r3, #32
 8009528:	f040 8141 	bne.w	80097ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
      break;
 800953a:	e13d      	b.n	80097b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009544:	2b20      	cmp	r3, #32
 8009546:	d10a      	bne.n	800955e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	4798      	blx	r3
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]

        return ret;
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	e12d      	b.n	80097ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	2b03      	cmp	r3, #3
 8009564:	d007      	beq.n	8009576 <USBD_StdEPReq+0x7a>
 8009566:	2b03      	cmp	r3, #3
 8009568:	f300 811b 	bgt.w	80097a2 <USBD_StdEPReq+0x2a6>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d072      	beq.n	8009656 <USBD_StdEPReq+0x15a>
 8009570:	2b01      	cmp	r3, #1
 8009572:	d03a      	beq.n	80095ea <USBD_StdEPReq+0xee>
 8009574:	e115      	b.n	80097a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957c:	2b02      	cmp	r3, #2
 800957e:	d002      	beq.n	8009586 <USBD_StdEPReq+0x8a>
 8009580:	2b03      	cmp	r3, #3
 8009582:	d015      	beq.n	80095b0 <USBD_StdEPReq+0xb4>
 8009584:	e02b      	b.n	80095de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <USBD_StdEPReq+0xaa>
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2b80      	cmp	r3, #128	@ 0x80
 8009590:	d009      	beq.n	80095a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f8e0 	bl	800a75c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800959c:	2180      	movs	r1, #128	@ 0x80
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 f8dc 	bl	800a75c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095a4:	e020      	b.n	80095e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fc1b 	bl	8009de4 <USBD_CtlError>
              break;
 80095ae:	e01b      	b.n	80095e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	885b      	ldrh	r3, [r3, #2]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10e      	bne.n	80095d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00b      	beq.n	80095d6 <USBD_StdEPReq+0xda>
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	2b80      	cmp	r3, #128	@ 0x80
 80095c2:	d008      	beq.n	80095d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	88db      	ldrh	r3, [r3, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f001 f8c3 	bl	800a75c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fccc 	bl	8009f74 <USBD_CtlSendStatus>

              break;
 80095dc:	e004      	b.n	80095e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbff 	bl	8009de4 <USBD_CtlError>
              break;
 80095e6:	bf00      	nop
          }
          break;
 80095e8:	e0e0      	b.n	80097ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d002      	beq.n	80095fa <USBD_StdEPReq+0xfe>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d015      	beq.n	8009624 <USBD_StdEPReq+0x128>
 80095f8:	e026      	b.n	8009648 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00c      	beq.n	800961a <USBD_StdEPReq+0x11e>
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b80      	cmp	r3, #128	@ 0x80
 8009604:	d009      	beq.n	800961a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 f8a6 	bl	800a75c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f8a2 	bl	800a75c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009618:	e01c      	b.n	8009654 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fbe1 	bl	8009de4 <USBD_CtlError>
              break;
 8009622:	e017      	b.n	8009654 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d112      	bne.n	8009652 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 f8ad 	bl	800a79a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc97 	bl	8009f74 <USBD_CtlSendStatus>
              }
              break;
 8009646:	e004      	b.n	8009652 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fbca 	bl	8009de4 <USBD_CtlError>
              break;
 8009650:	e000      	b.n	8009654 <USBD_StdEPReq+0x158>
              break;
 8009652:	bf00      	nop
          }
          break;
 8009654:	e0aa      	b.n	80097ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	2b02      	cmp	r3, #2
 800965e:	d002      	beq.n	8009666 <USBD_StdEPReq+0x16a>
 8009660:	2b03      	cmp	r3, #3
 8009662:	d032      	beq.n	80096ca <USBD_StdEPReq+0x1ce>
 8009664:	e097      	b.n	8009796 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <USBD_StdEPReq+0x180>
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b80      	cmp	r3, #128	@ 0x80
 8009670:	d004      	beq.n	800967c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fbb5 	bl	8009de4 <USBD_CtlError>
                break;
 800967a:	e091      	b.n	80097a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800967c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da0b      	bge.n	800969c <USBD_StdEPReq+0x1a0>
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	3310      	adds	r3, #16
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	4413      	add	r3, r2
 8009698:	3304      	adds	r3, #4
 800969a:	e00b      	b.n	80096b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	3304      	adds	r3, #4
 80096b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2202      	movs	r2, #2
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fbf8 	bl	8009eb8 <USBD_CtlSendData>
              break;
 80096c8:	e06a      	b.n	80097a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	da11      	bge.n	80096f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	3318      	adds	r3, #24
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d117      	bne.n	800971c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fb78 	bl	8009de4 <USBD_CtlError>
                  break;
 80096f4:	e054      	b.n	80097a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fb65 	bl	8009de4 <USBD_CtlError>
                  break;
 800971a:	e041      	b.n	80097a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800971c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009720:	2b00      	cmp	r3, #0
 8009722:	da0b      	bge.n	800973c <USBD_StdEPReq+0x240>
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	3310      	adds	r3, #16
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	4413      	add	r3, r2
 8009738:	3304      	adds	r3, #4
 800973a:	e00b      	b.n	8009754 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	4413      	add	r3, r2
 8009752:	3304      	adds	r3, #4
 8009754:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <USBD_StdEPReq+0x266>
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	2b80      	cmp	r3, #128	@ 0x80
 8009760:	d103      	bne.n	800976a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e00e      	b.n	8009788 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 f832 	bl	800a7d8 <USBD_LL_IsStallEP>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2201      	movs	r2, #1
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e002      	b.n	8009788 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2202      	movs	r2, #2
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fb92 	bl	8009eb8 <USBD_CtlSendData>
              break;
 8009794:	e004      	b.n	80097a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fb23 	bl	8009de4 <USBD_CtlError>
              break;
 800979e:	bf00      	nop
          }
          break;
 80097a0:	e004      	b.n	80097ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fb1d 	bl	8009de4 <USBD_CtlError>
          break;
 80097aa:	bf00      	nop
      }
      break;
 80097ac:	e004      	b.n	80097b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fb17 	bl	8009de4 <USBD_CtlError>
      break;
 80097b6:	bf00      	nop
  }

  return ret;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	885b      	ldrh	r3, [r3, #2]
 80097de:	0a1b      	lsrs	r3, r3, #8
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	f200 8128 	bhi.w	8009a3a <USBD_GetDescriptor+0x276>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <USBD_GetDescriptor+0x2c>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	0800980d 	.word	0x0800980d
 80097f4:	08009825 	.word	0x08009825
 80097f8:	08009865 	.word	0x08009865
 80097fc:	08009a3b 	.word	0x08009a3b
 8009800:	08009a3b 	.word	0x08009a3b
 8009804:	080099db 	.word	0x080099db
 8009808:	08009a07 	.word	0x08009a07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7c12      	ldrb	r2, [r2, #16]
 8009818:	f107 0108 	add.w	r1, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
      break;
 8009822:	e112      	b.n	8009a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7c1b      	ldrb	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10d      	bne.n	8009848 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009834:	f107 0208 	add.w	r2, r7, #8
 8009838:	4610      	mov	r0, r2
 800983a:	4798      	blx	r3
 800983c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	2202      	movs	r2, #2
 8009844:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009846:	e100      	b.n	8009a4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800984e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009850:	f107 0208 	add.w	r2, r7, #8
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	2202      	movs	r2, #2
 8009860:	701a      	strb	r2, [r3, #0]
      break;
 8009862:	e0f2      	b.n	8009a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	885b      	ldrh	r3, [r3, #2]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b05      	cmp	r3, #5
 800986c:	f200 80ac 	bhi.w	80099c8 <USBD_GetDescriptor+0x204>
 8009870:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <USBD_GetDescriptor+0xb4>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	08009891 	.word	0x08009891
 800987c:	080098c5 	.word	0x080098c5
 8009880:	080098f9 	.word	0x080098f9
 8009884:	0800992d 	.word	0x0800992d
 8009888:	08009961 	.word	0x08009961
 800988c:	08009995 	.word	0x08009995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	7c12      	ldrb	r2, [r2, #16]
 80098a8:	f107 0108 	add.w	r1, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b2:	e091      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa94 	bl	8009de4 <USBD_CtlError>
            err++;
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	3301      	adds	r3, #1
 80098c0:	72fb      	strb	r3, [r7, #11]
          break;
 80098c2:	e089      	b.n	80099d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7c12      	ldrb	r2, [r2, #16]
 80098dc:	f107 0108 	add.w	r1, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e6:	e077      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa7a 	bl	8009de4 <USBD_CtlError>
            err++;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	3301      	adds	r3, #1
 80098f4:	72fb      	strb	r3, [r7, #11]
          break;
 80098f6:	e06f      	b.n	80099d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7c12      	ldrb	r2, [r2, #16]
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
 8009918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991a:	e05d      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa60 	bl	8009de4 <USBD_CtlError>
            err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
          break;
 800992a:	e055      	b.n	80099d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c12      	ldrb	r2, [r2, #16]
 8009944:	f107 0108 	add.w	r1, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994e:	e043      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa46 	bl	8009de4 <USBD_CtlError>
            err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
          break;
 800995e:	e03b      	b.n	80099d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	7c12      	ldrb	r2, [r2, #16]
 8009978:	f107 0108 	add.w	r1, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009982:	e029      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa2c 	bl	8009de4 <USBD_CtlError>
            err++;
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	3301      	adds	r3, #1
 8009990:	72fb      	strb	r3, [r7, #11]
          break;
 8009992:	e021      	b.n	80099d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7c12      	ldrb	r2, [r2, #16]
 80099ac:	f107 0108 	add.w	r1, r7, #8
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b6:	e00f      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa12 	bl	8009de4 <USBD_CtlError>
            err++;
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	3301      	adds	r3, #1
 80099c4:	72fb      	strb	r3, [r7, #11]
          break;
 80099c6:	e007      	b.n	80099d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa0a 	bl	8009de4 <USBD_CtlError>
          err++;
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	3301      	adds	r3, #1
 80099d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80099d6:	e038      	b.n	8009a4a <USBD_GetDescriptor+0x286>
 80099d8:	e037      	b.n	8009a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	7c1b      	ldrb	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ea:	f107 0208 	add.w	r2, r7, #8
 80099ee:	4610      	mov	r0, r2
 80099f0:	4798      	blx	r3
 80099f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f4:	e029      	b.n	8009a4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f9f3 	bl	8009de4 <USBD_CtlError>
        err++;
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	3301      	adds	r3, #1
 8009a02:	72fb      	strb	r3, [r7, #11]
      break;
 8009a04:	e021      	b.n	8009a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	7c1b      	ldrb	r3, [r3, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10d      	bne.n	8009a2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a16:	f107 0208 	add.w	r2, r7, #8
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4798      	blx	r3
 8009a1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	2207      	movs	r2, #7
 8009a26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a28:	e00f      	b.n	8009a4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f9d9 	bl	8009de4 <USBD_CtlError>
        err++;
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	3301      	adds	r3, #1
 8009a36:	72fb      	strb	r3, [r7, #11]
      break;
 8009a38:	e007      	b.n	8009a4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f9d1 	bl	8009de4 <USBD_CtlError>
      err++;
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	3301      	adds	r3, #1
 8009a46:	72fb      	strb	r3, [r7, #11]
      break;
 8009a48:	bf00      	nop
  }

  if (err != 0U)
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11c      	bne.n	8009a8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a50:	893b      	ldrh	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d011      	beq.n	8009a7a <USBD_GetDescriptor+0x2b6>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	88db      	ldrh	r3, [r3, #6]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00d      	beq.n	8009a7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88da      	ldrh	r2, [r3, #6]
 8009a62:	893b      	ldrh	r3, [r7, #8]
 8009a64:	4293      	cmp	r3, r2
 8009a66:	bf28      	it	cs
 8009a68:	4613      	movcs	r3, r2
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a6e:	893b      	ldrh	r3, [r7, #8]
 8009a70:	461a      	mov	r2, r3
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fa1f 	bl	8009eb8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	88db      	ldrh	r3, [r3, #6]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d104      	bne.n	8009a8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa76 	bl	8009f74 <USBD_CtlSendStatus>
 8009a88:	e000      	b.n	8009a8c <USBD_GetDescriptor+0x2c8>
    return;
 8009a8a:	bf00      	nop
    }
  }
}
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop

08009a94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	889b      	ldrh	r3, [r3, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d130      	bne.n	8009b08 <USBD_SetAddress+0x74>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	88db      	ldrh	r3, [r3, #6]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d12c      	bne.n	8009b08 <USBD_SetAddress+0x74>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ab4:	d828      	bhi.n	8009b08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ac0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d104      	bne.n	8009ad6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f988 	bl	8009de4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad4:	e01d      	b.n	8009b12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fea4 	bl	800a830 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa43 	bl	8009f74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d004      	beq.n	8009afe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afc:	e009      	b.n	8009b12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b06:	e004      	b.n	8009b12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f96a 	bl	8009de4 <USBD_CtlError>
  }
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	885b      	ldrh	r3, [r3, #2]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	4b41      	ldr	r3, [pc, #260]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b30:	4b40      	ldr	r3, [pc, #256]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d904      	bls.n	8009b42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f952 	bl	8009de4 <USBD_CtlError>
 8009b40:	e075      	b.n	8009c2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d002      	beq.n	8009b52 <USBD_SetConfig+0x36>
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d023      	beq.n	8009b98 <USBD_SetConfig+0x7c>
 8009b50:	e062      	b.n	8009c18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b52:	4b38      	ldr	r3, [pc, #224]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01a      	beq.n	8009b90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b5a:	4b36      	ldr	r3, [pc, #216]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2203      	movs	r2, #3
 8009b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b6c:	4b31      	ldr	r3, [pc, #196]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff f9e7 	bl	8008f46 <USBD_SetClassConfig>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d104      	bne.n	8009b88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f92f 	bl	8009de4 <USBD_CtlError>
            return;
 8009b86:	e052      	b.n	8009c2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f9f3 	bl	8009f74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b8e:	e04e      	b.n	8009c2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f9ef 	bl	8009f74 <USBD_CtlSendStatus>
        break;
 8009b96:	e04a      	b.n	8009c2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b98:	4b26      	ldr	r3, [pc, #152]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d112      	bne.n	8009bc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009ba8:	4b22      	ldr	r3, [pc, #136]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009bb2:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff f9e3 	bl	8008f84 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9d8 	bl	8009f74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bc4:	e033      	b.n	8009c2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d01d      	beq.n	8009c10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff f9d1 	bl	8008f84 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009be2:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bec:	4b11      	ldr	r3, [pc, #68]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff f9a7 	bl	8008f46 <USBD_SetClassConfig>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d104      	bne.n	8009c08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8ef 	bl	8009de4 <USBD_CtlError>
            return;
 8009c06:	e012      	b.n	8009c2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f9b3 	bl	8009f74 <USBD_CtlSendStatus>
        break;
 8009c0e:	e00e      	b.n	8009c2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f9af 	bl	8009f74 <USBD_CtlSendStatus>
        break;
 8009c16:	e00a      	b.n	8009c2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f8e2 	bl	8009de4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <USBD_SetConfig+0x118>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff f9ac 	bl	8008f84 <USBD_ClrClassConfig>
        break;
 8009c2c:	bf00      	nop
    }
  }
}
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	2000057c 	.word	0x2000057c

08009c38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	88db      	ldrh	r3, [r3, #6]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d004      	beq.n	8009c54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f8c9 	bl	8009de4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c52:	e022      	b.n	8009c9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	dc02      	bgt.n	8009c64 <USBD_GetConfig+0x2c>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dc03      	bgt.n	8009c6a <USBD_GetConfig+0x32>
 8009c62:	e015      	b.n	8009c90 <USBD_GetConfig+0x58>
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d00b      	beq.n	8009c80 <USBD_GetConfig+0x48>
 8009c68:	e012      	b.n	8009c90 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3308      	adds	r3, #8
 8009c74:	2201      	movs	r2, #1
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f91d 	bl	8009eb8 <USBD_CtlSendData>
        break;
 8009c7e:	e00c      	b.n	8009c9a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3304      	adds	r3, #4
 8009c84:	2201      	movs	r2, #1
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f915 	bl	8009eb8 <USBD_CtlSendData>
        break;
 8009c8e:	e004      	b.n	8009c9a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8a6 	bl	8009de4 <USBD_CtlError>
        break;
 8009c98:	bf00      	nop
}
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d81e      	bhi.n	8009cf6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d004      	beq.n	8009cca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f88e 	bl	8009de4 <USBD_CtlError>
        break;
 8009cc8:	e01a      	b.n	8009d00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f043 0202 	orr.w	r2, r3, #2
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	2202      	movs	r2, #2
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8e2 	bl	8009eb8 <USBD_CtlSendData>
      break;
 8009cf4:	e004      	b.n	8009d00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f873 	bl	8009de4 <USBD_CtlError>
      break;
 8009cfe:	bf00      	nop
  }
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d106      	bne.n	8009d28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f926 	bl	8009f74 <USBD_CtlSendStatus>
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d40:	3b01      	subs	r3, #1
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d80b      	bhi.n	8009d5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	885b      	ldrh	r3, [r3, #2]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d10c      	bne.n	8009d68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f90c 	bl	8009f74 <USBD_CtlSendStatus>
      }
      break;
 8009d5c:	e004      	b.n	8009d68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f83f 	bl	8009de4 <USBD_CtlError>
      break;
 8009d66:	e000      	b.n	8009d6a <USBD_ClrFeature+0x3a>
      break;
 8009d68:	bf00      	nop
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	785a      	ldrb	r2, [r3, #1]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	3302      	adds	r3, #2
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	3303      	adds	r3, #3
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4413      	add	r3, r2
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	3304      	adds	r3, #4
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	3305      	adds	r3, #5
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	3306      	adds	r3, #6
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	3307      	adds	r3, #7
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	021b      	lsls	r3, r3, #8
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	80da      	strh	r2, [r3, #6]

}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr

08009de4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009dee:	2180      	movs	r1, #128	@ 0x80
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fcb3 	bl	800a75c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009df6:	2100      	movs	r1, #0
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fcaf 	bl	800a75c <USBD_LL_StallEP>
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d032      	beq.n	8009e82 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f834 	bl	8009e8a <USBD_GetLen>
 8009e22:	4603      	mov	r3, r0
 8009e24:	3301      	adds	r3, #1
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	75fa      	strb	r2, [r7, #23]
 8009e36:	461a      	mov	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	75fa      	strb	r2, [r7, #23]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2203      	movs	r2, #3
 8009e50:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e52:	e012      	b.n	8009e7a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	60fa      	str	r2, [r7, #12]
 8009e5a:	7dfa      	ldrb	r2, [r7, #23]
 8009e5c:	1c51      	adds	r1, r2, #1
 8009e5e:	75f9      	strb	r1, [r7, #23]
 8009e60:	4611      	mov	r1, r2
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	440a      	add	r2, r1
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	75fa      	strb	r2, [r7, #23]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4413      	add	r3, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e8      	bne.n	8009e54 <USBD_GetString+0x4e>
    }
  }
}
 8009e82:	bf00      	nop
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e96:	e005      	b.n	8009ea4 <USBD_GetLen+0x1a>
  {
    len++;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f5      	bne.n	8009e98 <USBD_GetLen+0xe>
  }

  return len;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ece:	88fa      	ldrh	r2, [r7, #6]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ed4:	88fa      	ldrh	r2, [r7, #6]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fcc4 	bl	800a86e <USBD_LL_Transmit>

  return USBD_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fcb2 	bl	800a86e <USBD_LL_Transmit>

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2203      	movs	r2, #3
 8009f26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f2a:	88fa      	ldrh	r2, [r7, #6]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f32:	88fa      	ldrh	r2, [r7, #6]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3a:	88fb      	ldrh	r3, [r7, #6]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	2100      	movs	r1, #0
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fcb7 	bl	800a8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	2100      	movs	r1, #0
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 fca5 	bl	800a8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2204      	movs	r2, #4
 8009f80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fc6f 	bl	800a86e <USBD_LL_Transmit>

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009faa:	2300      	movs	r3, #0
 8009fac:	2200      	movs	r2, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fc7f 	bl	800a8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4912      	ldr	r1, [pc, #72]	@ (800a010 <MX_USB_DEVICE_Init+0x50>)
 8009fc8:	4812      	ldr	r0, [pc, #72]	@ (800a014 <MX_USB_DEVICE_Init+0x54>)
 8009fca:	f7fe ff62 	bl	8008e92 <USBD_Init>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fd4:	f7f7 f854 	bl	8001080 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fd8:	490f      	ldr	r1, [pc, #60]	@ (800a018 <MX_USB_DEVICE_Init+0x58>)
 8009fda:	480e      	ldr	r0, [pc, #56]	@ (800a014 <MX_USB_DEVICE_Init+0x54>)
 8009fdc:	f7fe ff84 	bl	8008ee8 <USBD_RegisterClass>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fe6:	f7f7 f84b 	bl	8001080 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fea:	490c      	ldr	r1, [pc, #48]	@ (800a01c <MX_USB_DEVICE_Init+0x5c>)
 8009fec:	4809      	ldr	r0, [pc, #36]	@ (800a014 <MX_USB_DEVICE_Init+0x54>)
 8009fee:	f7fe feb5 	bl	8008d5c <USBD_CDC_RegisterInterface>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ff8:	f7f7 f842 	bl	8001080 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ffc:	4805      	ldr	r0, [pc, #20]	@ (800a014 <MX_USB_DEVICE_Init+0x54>)
 8009ffe:	f7fe ff8c 	bl	8008f1a <USBD_Start>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a008:	f7f7 f83a 	bl	8001080 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a00c:	bf00      	nop
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20000130 	.word	0x20000130
 800a014:	20000580 	.word	0x20000580
 800a018:	2000001c 	.word	0x2000001c
 800a01c:	20000120 	.word	0x20000120

0800a020 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a024:	2200      	movs	r2, #0
 800a026:	4905      	ldr	r1, [pc, #20]	@ (800a03c <CDC_Init_FS+0x1c>)
 800a028:	4805      	ldr	r0, [pc, #20]	@ (800a040 <CDC_Init_FS+0x20>)
 800a02a:	f7fe fead 	bl	8008d88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a02e:	4905      	ldr	r1, [pc, #20]	@ (800a044 <CDC_Init_FS+0x24>)
 800a030:	4803      	ldr	r0, [pc, #12]	@ (800a040 <CDC_Init_FS+0x20>)
 800a032:	f7fe fec2 	bl	8008dba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a036:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a038:	4618      	mov	r0, r3
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000944 	.word	0x20000944
 800a040:	20000580 	.word	0x20000580
 800a044:	20000844 	.word	0x20000844

0800a048 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a04c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr
	...

0800a058 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	6039      	str	r1, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
 800a064:	4613      	mov	r3, r2
 800a066:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	2b23      	cmp	r3, #35	@ 0x23
 800a06c:	f200 808c 	bhi.w	800a188 <CDC_Control_FS+0x130>
 800a070:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <CDC_Control_FS+0x20>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a189 	.word	0x0800a189
 800a07c:	0800a189 	.word	0x0800a189
 800a080:	0800a189 	.word	0x0800a189
 800a084:	0800a189 	.word	0x0800a189
 800a088:	0800a189 	.word	0x0800a189
 800a08c:	0800a189 	.word	0x0800a189
 800a090:	0800a189 	.word	0x0800a189
 800a094:	0800a189 	.word	0x0800a189
 800a098:	0800a189 	.word	0x0800a189
 800a09c:	0800a189 	.word	0x0800a189
 800a0a0:	0800a189 	.word	0x0800a189
 800a0a4:	0800a189 	.word	0x0800a189
 800a0a8:	0800a189 	.word	0x0800a189
 800a0ac:	0800a189 	.word	0x0800a189
 800a0b0:	0800a189 	.word	0x0800a189
 800a0b4:	0800a189 	.word	0x0800a189
 800a0b8:	0800a189 	.word	0x0800a189
 800a0bc:	0800a189 	.word	0x0800a189
 800a0c0:	0800a189 	.word	0x0800a189
 800a0c4:	0800a189 	.word	0x0800a189
 800a0c8:	0800a189 	.word	0x0800a189
 800a0cc:	0800a189 	.word	0x0800a189
 800a0d0:	0800a189 	.word	0x0800a189
 800a0d4:	0800a189 	.word	0x0800a189
 800a0d8:	0800a189 	.word	0x0800a189
 800a0dc:	0800a189 	.word	0x0800a189
 800a0e0:	0800a189 	.word	0x0800a189
 800a0e4:	0800a189 	.word	0x0800a189
 800a0e8:	0800a189 	.word	0x0800a189
 800a0ec:	0800a189 	.word	0x0800a189
 800a0f0:	0800a189 	.word	0x0800a189
 800a0f4:	0800a189 	.word	0x0800a189
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a143 	.word	0x0800a143
 800a100:	0800a189 	.word	0x0800a189
 800a104:	0800a189 	.word	0x0800a189
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	4b22      	ldr	r3, [pc, #136]	@ (800a198 <CDC_Control_FS+0x140>)
 800a10e:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	785a      	ldrb	r2, [r3, #1]
 800a114:	4b20      	ldr	r3, [pc, #128]	@ (800a198 <CDC_Control_FS+0x140>)
 800a116:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	789a      	ldrb	r2, [r3, #2]
 800a11c:	4b1e      	ldr	r3, [pc, #120]	@ (800a198 <CDC_Control_FS+0x140>)
 800a11e:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	78da      	ldrb	r2, [r3, #3]
 800a124:	4b1c      	ldr	r3, [pc, #112]	@ (800a198 <CDC_Control_FS+0x140>)
 800a126:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	791a      	ldrb	r2, [r3, #4]
 800a12c:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <CDC_Control_FS+0x140>)
 800a12e:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	795a      	ldrb	r2, [r3, #5]
 800a134:	4b18      	ldr	r3, [pc, #96]	@ (800a198 <CDC_Control_FS+0x140>)
 800a136:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	799a      	ldrb	r2, [r3, #6]
 800a13c:	4b16      	ldr	r3, [pc, #88]	@ (800a198 <CDC_Control_FS+0x140>)
 800a13e:	719a      	strb	r2, [r3, #6]

    break;
 800a140:	e023      	b.n	800a18a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a142:	4b15      	ldr	r3, [pc, #84]	@ (800a198 <CDC_Control_FS+0x140>)
 800a144:	781a      	ldrb	r2, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	3301      	adds	r3, #1
 800a14e:	4a12      	ldr	r2, [pc, #72]	@ (800a198 <CDC_Control_FS+0x140>)
 800a150:	7852      	ldrb	r2, [r2, #1]
 800a152:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	3302      	adds	r3, #2
 800a158:	4a0f      	ldr	r2, [pc, #60]	@ (800a198 <CDC_Control_FS+0x140>)
 800a15a:	7892      	ldrb	r2, [r2, #2]
 800a15c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	3303      	adds	r3, #3
 800a162:	4a0d      	ldr	r2, [pc, #52]	@ (800a198 <CDC_Control_FS+0x140>)
 800a164:	78d2      	ldrb	r2, [r2, #3]
 800a166:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4a0a      	ldr	r2, [pc, #40]	@ (800a198 <CDC_Control_FS+0x140>)
 800a16e:	7912      	ldrb	r2, [r2, #4]
 800a170:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	3305      	adds	r3, #5
 800a176:	4a08      	ldr	r2, [pc, #32]	@ (800a198 <CDC_Control_FS+0x140>)
 800a178:	7952      	ldrb	r2, [r2, #5]
 800a17a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	3306      	adds	r3, #6
 800a180:	4a05      	ldr	r2, [pc, #20]	@ (800a198 <CDC_Control_FS+0x140>)
 800a182:	7992      	ldrb	r2, [r2, #6]
 800a184:	701a      	strb	r2, [r3, #0]
    break;
 800a186:	e000      	b.n	800a18a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a188:	bf00      	nop
  }

  return (USBD_OK);
 800a18a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20000a44 	.word	0x20000a44

0800a19c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <CDC_Receive_FS+0x3c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <CDC_Receive_FS+0x3c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4806      	ldr	r0, [pc, #24]	@ (800a1dc <CDC_Receive_FS+0x40>)
 800a1c2:	f7fe fdfa 	bl	8008dba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1c6:	4805      	ldr	r0, [pc, #20]	@ (800a1dc <CDC_Receive_FS+0x40>)
 800a1c8:	f7fe fe39 	bl	8008e3e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000a4c 	.word	0x20000a4c
 800a1dc:	20000580 	.word	0x20000580

0800a1e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <CDC_Transmit_FS+0x48>)
 800a1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a202:	2301      	movs	r3, #1
 800a204:	e00b      	b.n	800a21e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a206:	887b      	ldrh	r3, [r7, #2]
 800a208:	461a      	mov	r2, r3
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	4806      	ldr	r0, [pc, #24]	@ (800a228 <CDC_Transmit_FS+0x48>)
 800a20e:	f7fe fdbb 	bl	8008d88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a212:	4805      	ldr	r0, [pc, #20]	@ (800a228 <CDC_Transmit_FS+0x48>)
 800a214:	f7fe fde4 	bl	8008de0 <USBD_CDC_TransmitPacket>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000580 	.word	0x20000580

0800a22c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a234:	4a03      	ldr	r2, [pc, #12]	@ (800a244 <CDC_AttachRxData+0x18>)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6013      	str	r3, [r2, #0]
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr
 800a244:	20000a4c 	.word	0x20000a4c

0800a248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2212      	movs	r2, #18
 800a258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a25a:	4b03      	ldr	r3, [pc, #12]	@ (800a268 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	2000014c 	.word	0x2000014c

0800a26c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	6039      	str	r1, [r7, #0]
 800a276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2204      	movs	r2, #4
 800a27c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a27e:	4b03      	ldr	r3, [pc, #12]	@ (800a28c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000160 	.word	0x20000160

0800a290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	6039      	str	r1, [r7, #0]
 800a29a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d105      	bne.n	800a2ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4907      	ldr	r1, [pc, #28]	@ (800a2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2a6:	4808      	ldr	r0, [pc, #32]	@ (800a2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2a8:	f7ff fdad 	bl	8009e06 <USBD_GetString>
 800a2ac:	e004      	b.n	800a2b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	4904      	ldr	r1, [pc, #16]	@ (800a2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2b2:	4805      	ldr	r0, [pc, #20]	@ (800a2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2b4:	f7ff fda7 	bl	8009e06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2b8:	4b02      	ldr	r3, [pc, #8]	@ (800a2c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000a50 	.word	0x20000a50
 800a2c8:	0800aa28 	.word	0x0800aa28

0800a2cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	4904      	ldr	r1, [pc, #16]	@ (800a2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2dc:	4804      	ldr	r0, [pc, #16]	@ (800a2f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2de:	f7ff fd92 	bl	8009e06 <USBD_GetString>
  return USBD_StrDesc;
 800a2e2:	4b02      	ldr	r3, [pc, #8]	@ (800a2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20000a50 	.word	0x20000a50
 800a2f0:	0800aa40 	.word	0x0800aa40

0800a2f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	221a      	movs	r2, #26
 800a304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a306:	f000 f843 	bl	800a390 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a30a:	4b02      	ldr	r3, [pc, #8]	@ (800a314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20000164 	.word	0x20000164

0800a318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	6039      	str	r1, [r7, #0]
 800a322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d105      	bne.n	800a336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4907      	ldr	r1, [pc, #28]	@ (800a34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a32e:	4808      	ldr	r0, [pc, #32]	@ (800a350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a330:	f7ff fd69 	bl	8009e06 <USBD_GetString>
 800a334:	e004      	b.n	800a340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	4904      	ldr	r1, [pc, #16]	@ (800a34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a33a:	4805      	ldr	r0, [pc, #20]	@ (800a350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a33c:	f7ff fd63 	bl	8009e06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a340:	4b02      	ldr	r3, [pc, #8]	@ (800a34c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000a50 	.word	0x20000a50
 800a350:	0800aa54 	.word	0x0800aa54

0800a354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d105      	bne.n	800a372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4907      	ldr	r1, [pc, #28]	@ (800a388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a36a:	4808      	ldr	r0, [pc, #32]	@ (800a38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a36c:	f7ff fd4b 	bl	8009e06 <USBD_GetString>
 800a370:	e004      	b.n	800a37c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4904      	ldr	r1, [pc, #16]	@ (800a388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a376:	4805      	ldr	r0, [pc, #20]	@ (800a38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a378:	f7ff fd45 	bl	8009e06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	@ (800a388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000a50 	.word	0x20000a50
 800a38c:	0800aa60 	.word	0x0800aa60

0800a390 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a396:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d4 <Get_SerialNum+0x44>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a39c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d8 <Get_SerialNum+0x48>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3dc <Get_SerialNum+0x4c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d009      	beq.n	800a3ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	4909      	ldr	r1, [pc, #36]	@ (800a3e0 <Get_SerialNum+0x50>)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 f814 	bl	800a3e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	4908      	ldr	r1, [pc, #32]	@ (800a3e4 <Get_SerialNum+0x54>)
 800a3c4:	68b8      	ldr	r0, [r7, #8]
 800a3c6:	f000 f80f 	bl	800a3e8 <IntToUnicode>
  }
}
 800a3ca:	bf00      	nop
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	1ffff7e8 	.word	0x1ffff7e8
 800a3d8:	1ffff7ec 	.word	0x1ffff7ec
 800a3dc:	1ffff7f0 	.word	0x1ffff7f0
 800a3e0:	20000166 	.word	0x20000166
 800a3e4:	20000176 	.word	0x20000176

0800a3e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	75fb      	strb	r3, [r7, #23]
 800a3fe:	e027      	b.n	800a450 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	2b09      	cmp	r3, #9
 800a406:	d80b      	bhi.n	800a420 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	0f1b      	lsrs	r3, r3, #28
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	4619      	mov	r1, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	440b      	add	r3, r1
 800a418:	3230      	adds	r2, #48	@ 0x30
 800a41a:	b2d2      	uxtb	r2, r2
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e00a      	b.n	800a436 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	0f1b      	lsrs	r3, r3, #28
 800a424:	b2da      	uxtb	r2, r3
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	4619      	mov	r1, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	440b      	add	r3, r1
 800a430:	3237      	adds	r2, #55	@ 0x37
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	3301      	adds	r3, #1
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
 800a450:	7dfa      	ldrb	r2, [r7, #23]
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	429a      	cmp	r2, r3
 800a456:	d3d3      	bcc.n	800a400 <IntToUnicode+0x18>
  }
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	bc80      	pop	{r7}
 800a462:	4770      	bx	lr

0800a464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a0d      	ldr	r2, [pc, #52]	@ (800a4a8 <HAL_PCD_MspInit+0x44>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d113      	bne.n	800a49e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a476:	4b0d      	ldr	r3, [pc, #52]	@ (800a4ac <HAL_PCD_MspInit+0x48>)
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ac <HAL_PCD_MspInit+0x48>)
 800a47c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a480:	61d3      	str	r3, [r2, #28]
 800a482:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <HAL_PCD_MspInit+0x48>)
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a48e:	2200      	movs	r2, #0
 800a490:	2100      	movs	r1, #0
 800a492:	2014      	movs	r0, #20
 800a494:	f7f7 fd01 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a498:	2014      	movs	r0, #20
 800a49a:	f7f7 fd1a 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	40005c00 	.word	0x40005c00
 800a4ac:	40021000 	.word	0x40021000

0800a4b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe fd6f 	bl	8008faa <USBD_LL_SetupStage>
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a4e6:	78fa      	ldrb	r2, [r7, #3]
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	440b      	add	r3, r1
 800a4f4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f7fe fda1 	bl	8009044 <USBD_LL_DataOutStage>
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	4613      	mov	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	440b      	add	r3, r1
 800a52a:	333c      	adds	r3, #60	@ 0x3c
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	4619      	mov	r1, r3
 800a532:	f7fe fdf8 	bl	8009126 <USBD_LL_DataInStage>
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe ff08 	bl	8009362 <USBD_LL_SOF>
}
 800a552:	bf00      	nop
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a562:	2301      	movs	r3, #1
 800a564:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d001      	beq.n	800a572 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a56e:	f7f6 fd87 	bl	8001080 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a578:	7bfa      	ldrb	r2, [r7, #15]
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe feb8 	bl	80092f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fe71 	bl	8009270 <USBD_LL_Reset>
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe feb2 	bl	8009310 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5b4:	4b04      	ldr	r3, [pc, #16]	@ (800a5c8 <HAL_PCD_SuspendCallback+0x30>)
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	4a03      	ldr	r2, [pc, #12]	@ (800a5c8 <HAL_PCD_SuspendCallback+0x30>)
 800a5ba:	f043 0306 	orr.w	r3, r3, #6
 800a5be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	e000ed00 	.word	0xe000ed00

0800a5cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe feac 	bl	8009338 <USBD_LL_Resume>
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5f0:	4a28      	ldr	r2, [pc, #160]	@ (800a694 <USBD_LL_Init+0xac>)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a26      	ldr	r2, [pc, #152]	@ (800a694 <USBD_LL_Init+0xac>)
 800a5fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a600:	4b24      	ldr	r3, [pc, #144]	@ (800a694 <USBD_LL_Init+0xac>)
 800a602:	4a25      	ldr	r2, [pc, #148]	@ (800a698 <USBD_LL_Init+0xb0>)
 800a604:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a606:	4b23      	ldr	r3, [pc, #140]	@ (800a694 <USBD_LL_Init+0xac>)
 800a608:	2208      	movs	r2, #8
 800a60a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a60c:	4b21      	ldr	r3, [pc, #132]	@ (800a694 <USBD_LL_Init+0xac>)
 800a60e:	2202      	movs	r2, #2
 800a610:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a612:	4b20      	ldr	r3, [pc, #128]	@ (800a694 <USBD_LL_Init+0xac>)
 800a614:	2200      	movs	r2, #0
 800a616:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a618:	4b1e      	ldr	r3, [pc, #120]	@ (800a694 <USBD_LL_Init+0xac>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a61e:	4b1d      	ldr	r3, [pc, #116]	@ (800a694 <USBD_LL_Init+0xac>)
 800a620:	2200      	movs	r2, #0
 800a622:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a624:	481b      	ldr	r0, [pc, #108]	@ (800a694 <USBD_LL_Init+0xac>)
 800a626:	f7f8 fa0b 	bl	8002a40 <HAL_PCD_Init>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a630:	f7f6 fd26 	bl	8001080 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a63a:	2318      	movs	r3, #24
 800a63c:	2200      	movs	r2, #0
 800a63e:	2100      	movs	r1, #0
 800a640:	f7f9 ff29 	bl	8004496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a64a:	2358      	movs	r3, #88	@ 0x58
 800a64c:	2200      	movs	r2, #0
 800a64e:	2180      	movs	r1, #128	@ 0x80
 800a650:	f7f9 ff21 	bl	8004496 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a65a:	23c0      	movs	r3, #192	@ 0xc0
 800a65c:	2200      	movs	r2, #0
 800a65e:	2181      	movs	r1, #129	@ 0x81
 800a660:	f7f9 ff19 	bl	8004496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a66a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a66e:	2200      	movs	r2, #0
 800a670:	2101      	movs	r1, #1
 800a672:	f7f9 ff10 	bl	8004496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a67c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a680:	2200      	movs	r2, #0
 800a682:	2182      	movs	r1, #130	@ 0x82
 800a684:	f7f9 ff07 	bl	8004496 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000c50 	.word	0x20000c50
 800a698:	40005c00 	.word	0x40005c00

0800a69c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7f8 fac3 	bl	8002c3e <HAL_PCD_Start>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 f94e 	bl	800a960 <USBD_Get_USB_Status>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	4608      	mov	r0, r1
 800a6dc:	4611      	mov	r1, r2
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	70fb      	strb	r3, [r7, #3]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70bb      	strb	r3, [r7, #2]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6fa:	78bb      	ldrb	r3, [r7, #2]
 800a6fc:	883a      	ldrh	r2, [r7, #0]
 800a6fe:	78f9      	ldrb	r1, [r7, #3]
 800a700:	f7f8 fc18 	bl	8002f34 <HAL_PCD_EP_Open>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f928 	bl	800a960 <USBD_Get_USB_Status>
 800a710:	4603      	mov	r3, r0
 800a712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a714:	7bbb      	ldrb	r3, [r7, #14]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a738:	78fa      	ldrb	r2, [r7, #3]
 800a73a:	4611      	mov	r1, r2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f8 fc56 	bl	8002fee <HAL_PCD_EP_Close>
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f909 	bl	800a960 <USBD_Get_USB_Status>
 800a74e:	4603      	mov	r3, r0
 800a750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a752:	7bbb      	ldrb	r3, [r7, #14]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f8 fcfe 	bl	800317c <HAL_PCD_EP_SetStall>
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f8ea 	bl	800a960 <USBD_Get_USB_Status>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a790:	7bbb      	ldrb	r3, [r7, #14]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f8 fd3f 	bl	800323c <HAL_PCD_EP_ClrStall>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f8cb 	bl	800a960 <USBD_Get_USB_Status>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da0c      	bge.n	800a80e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	440b      	add	r3, r1
 800a808:	3302      	adds	r3, #2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	e00b      	b.n	800a826 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a814:	68f9      	ldr	r1, [r7, #12]
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	440b      	add	r3, r1
 800a820:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a824:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a826:	4618      	mov	r0, r3
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bc80      	pop	{r7}
 800a82e:	4770      	bx	lr

0800a830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f8 fb4b 	bl	8002eea <HAL_PCD_SetAddress>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f880 	bl	800a960 <USBD_Get_USB_Status>
 800a860:	4603      	mov	r3, r0
 800a862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a864:	7bbb      	ldrb	r3, [r7, #14]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b086      	sub	sp, #24
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	461a      	mov	r2, r3
 800a87a:	460b      	mov	r3, r1
 800a87c:	72fb      	strb	r3, [r7, #11]
 800a87e:	4613      	mov	r3, r2
 800a880:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a890:	893b      	ldrh	r3, [r7, #8]
 800a892:	7af9      	ldrb	r1, [r7, #11]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	f7f8 fc3a 	bl	800310e <HAL_PCD_EP_Transmit>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 f85d 	bl	800a960 <USBD_Get_USB_Status>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	72fb      	strb	r3, [r7, #11]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8d6:	893b      	ldrh	r3, [r7, #8]
 800a8d8:	7af9      	ldrb	r1, [r7, #11]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	f7f8 fbcf 	bl	800307e <HAL_PCD_EP_Receive>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e4:	7dfb      	ldrb	r3, [r7, #23]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 f83a 	bl	800a960 <USBD_Get_USB_Status>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a90c:	78fa      	ldrb	r2, [r7, #3]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7f8 fbe5 	bl	80030e0 <HAL_PCD_EP_GetRxCount>
 800a916:	4603      	mov	r3, r0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a928:	4b02      	ldr	r3, [pc, #8]	@ (800a934 <USBD_static_malloc+0x14>)
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr
 800a934:	20000f40 	.word	0x20000f40

0800a938 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	bc80      	pop	{r7}
 800a948:	4770      	bx	lr

0800a94a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	460b      	mov	r3, r1
 800a954:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bc80      	pop	{r7}
 800a95e:	4770      	bx	lr

0800a960 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	2b03      	cmp	r3, #3
 800a972:	d817      	bhi.n	800a9a4 <USBD_Get_USB_Status+0x44>
 800a974:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <USBD_Get_USB_Status+0x1c>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800a98d 	.word	0x0800a98d
 800a980:	0800a993 	.word	0x0800a993
 800a984:	0800a999 	.word	0x0800a999
 800a988:	0800a99f 	.word	0x0800a99f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
    break;
 800a990:	e00b      	b.n	800a9aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a992:	2302      	movs	r3, #2
 800a994:	73fb      	strb	r3, [r7, #15]
    break;
 800a996:	e008      	b.n	800a9aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a998:	2301      	movs	r3, #1
 800a99a:	73fb      	strb	r3, [r7, #15]
    break;
 800a99c:	e005      	b.n	800a9aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a99e:	2302      	movs	r3, #2
 800a9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a2:	e002      	b.n	800a9aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a8:	bf00      	nop
  }
  return usb_status;
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bc80      	pop	{r7}
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop

0800a9b8 <memset>:
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	4402      	add	r2, r0
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d100      	bne.n	800a9c2 <memset+0xa>
 800a9c0:	4770      	bx	lr
 800a9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c6:	e7f9      	b.n	800a9bc <memset+0x4>

0800a9c8 <__libc_init_array>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	4d0c      	ldr	r5, [pc, #48]	@ (800aa00 <__libc_init_array+0x38>)
 800a9ce:	4c0d      	ldr	r4, [pc, #52]	@ (800aa04 <__libc_init_array+0x3c>)
 800a9d0:	1b64      	subs	r4, r4, r5
 800a9d2:	10a4      	asrs	r4, r4, #2
 800a9d4:	42a6      	cmp	r6, r4
 800a9d6:	d109      	bne.n	800a9ec <__libc_init_array+0x24>
 800a9d8:	f000 f81a 	bl	800aa10 <_init>
 800a9dc:	2600      	movs	r6, #0
 800a9de:	4d0a      	ldr	r5, [pc, #40]	@ (800aa08 <__libc_init_array+0x40>)
 800a9e0:	4c0a      	ldr	r4, [pc, #40]	@ (800aa0c <__libc_init_array+0x44>)
 800a9e2:	1b64      	subs	r4, r4, r5
 800a9e4:	10a4      	asrs	r4, r4, #2
 800a9e6:	42a6      	cmp	r6, r4
 800a9e8:	d105      	bne.n	800a9f6 <__libc_init_array+0x2e>
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f0:	4798      	blx	r3
 800a9f2:	3601      	adds	r6, #1
 800a9f4:	e7ee      	b.n	800a9d4 <__libc_init_array+0xc>
 800a9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9fa:	4798      	blx	r3
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	e7f2      	b.n	800a9e6 <__libc_init_array+0x1e>
 800aa00:	0800aa9c 	.word	0x0800aa9c
 800aa04:	0800aa9c 	.word	0x0800aa9c
 800aa08:	0800aa9c 	.word	0x0800aa9c
 800aa0c:	0800aaa0 	.word	0x0800aaa0

0800aa10 <_init>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	bf00      	nop
 800aa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa16:	bc08      	pop	{r3}
 800aa18:	469e      	mov	lr, r3
 800aa1a:	4770      	bx	lr

0800aa1c <_fini>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	bf00      	nop
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr
