
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a85c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9dc  0800a9dc  0000c17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9dc  0800a9dc  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0000b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0000b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a9e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  2000017c  0800ab60  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800ab60  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001937a  00000000  00000000  0000c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc0  00000000  00000000  0002551f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000290e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  0002a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b0  00000000  00000000  0002b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d28f  00000000  00000000  00046eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096904  00000000  00000000  0006413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faa43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  000faa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001009b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a950 	.word	0x0800a950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800a950 	.word	0x0800a950

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0 = bufADC[0];
 8000154:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000156:	881a      	ldrh	r2, [r3, #0]
 8000158:	4b12      	ldr	r3, [pc, #72]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800015a:	801a      	strh	r2, [r3, #0]
	ir.sensor1 = bufADC[1];
 800015c:	4b10      	ldr	r3, [pc, #64]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800015e:	885a      	ldrh	r2, [r3, #2]
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000162:	805a      	strh	r2, [r3, #2]
	ir.sensor2 = bufADC[2];
 8000164:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000166:	889a      	ldrh	r2, [r3, #4]
 8000168:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800016a:	809a      	strh	r2, [r3, #4]
	ir.sensor3 = bufADC[3];
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800016e:	88da      	ldrh	r2, [r3, #6]
 8000170:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000172:	80da      	strh	r2, [r3, #6]
	ir.sensor4 = bufADC[4];
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000176:	891a      	ldrh	r2, [r3, #8]
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800017a:	811a      	strh	r2, [r3, #8]
	ir.sensor5 = bufADC[5];
 800017c:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800017e:	895a      	ldrh	r2, [r3, #10]
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000182:	815a      	strh	r2, [r3, #10]
	ir.sensor6 = bufADC[6];
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000186:	899a      	ldrh	r2, [r3, #12]
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800018a:	819a      	strh	r2, [r3, #12]
	ir.sensor7 = bufADC[7];
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000192:	81da      	strh	r2, [r3, #14]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000564 	.word	0x20000564
 80001a4:	200003a8 	.word	0x200003a8

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a15      	ldr	r2, [pc, #84]	@ (800020c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d10b      	bne.n	80001d2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		t100ms--;
 80001ba:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	3b01      	subs	r3, #1
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001c4:	701a      	strb	r2, [r3, #0]
		t500ms--;
 80001c6:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001d0:	701a      	strb	r2, [r3, #0]
	}
	if(t100ms==0){
 80001d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d107      	bne.n	80001ea <HAL_TIM_PeriodElapsedCallback+0x42>
		flags1.F100MS = 1;
 80001da:	4a0f      	ldr	r2, [pc, #60]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001dc:	7813      	ldrb	r3, [r2, #0]
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	7013      	strb	r3, [r2, #0]
		t100ms=10;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001e6:	220a      	movs	r2, #10
 80001e8:	701a      	strb	r2, [r3, #0]
	}
	if(t500ms==0){
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d107      	bne.n	8000202 <HAL_TIM_PeriodElapsedCallback+0x5a>
		flags1.F500MS = 1;
 80001f2:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001f4:	7813      	ldrb	r3, [r2, #0]
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	7013      	strb	r3, [r2, #0]
		t500ms=50;
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001fe:	2232      	movs	r2, #50	@ 0x32
 8000200:	701a      	strb	r2, [r3, #0]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40012c00 	.word	0x40012c00
 8000210:	20000560 	.word	0x20000560
 8000214:	20000561 	.word	0x20000561
 8000218:	200003a4 	.word	0x200003a4

0800021c <HAL_UART_RxCpltCallback>:

/*=============>Recepci贸n de datos desde USART<=============
 * Interrupci贸n que es llamada cuando se produce una recepci贸n de datos.
 * Cargo los datos recibidos al Buffer de Recepci贸n
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <HAL_UART_RxCpltCallback+0x38>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d10d      	bne.n	800024a <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	b2d1      	uxtb	r1, r2
 8000236:	4a08      	ldr	r2, [pc, #32]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000238:	7111      	strb	r1, [r2, #4]
 800023a:	3308      	adds	r3, #8
 800023c:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 800023e:	4413      	add	r3, r2
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	4805      	ldr	r0, [pc, #20]	@ (800025c <HAL_UART_RxCpltCallback+0x40>)
 8000246:	f005 fa2d 	bl	80056a4 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40013800 	.word	0x40013800
 8000258:	2000019c 	.word	0x2000019c
 800025c:	20000518 	.word	0x20000518

08000260 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e00c      	b.n	800028c <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <USBReceive+0x40>)
 800027a:	7912      	ldrb	r2, [r2, #4]
 800027c:	4611      	mov	r1, r2
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <USBReceive+0x40>)
 8000282:	440b      	add	r3, r1
 8000284:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	429a      	cmp	r2, r3
 8000292:	dbee      	blt.n	8000272 <USBReceive+0x12>
	}


}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	2000019c 	.word	0x2000019c

080002a4 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80002ac:	e0e3      	b.n	8000476 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 80002ae:	4b78      	ldr	r3, [pc, #480]	@ (8000490 <decodeProtocol+0x1ec>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	f200 80d8 	bhi.w	8000468 <decodeProtocol+0x1c4>
 80002b8:	a201      	add	r2, pc, #4	@ (adr r2, 80002c0 <decodeProtocol+0x1c>)
 80002ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002be:	bf00      	nop
 80002c0:	080002dd 	.word	0x080002dd
 80002c4:	08000305 	.word	0x08000305
 80002c8:	08000339 	.word	0x08000339
 80002cc:	0800036d 	.word	0x0800036d
 80002d0:	080003a1 	.word	0x080003a1
 80002d4:	080003c9 	.word	0x080003c9
 80002d8:	0800040b 	.word	0x0800040b
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	b2d1      	uxtb	r1, r2
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7151      	strb	r1, [r2, #5]
 80002e8:	461a      	mov	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	7a1b      	ldrb	r3, [r3, #8]
 80002f0:	2b55      	cmp	r3, #85	@ 0x55
 80002f2:	f040 80bd 	bne.w	8000470 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 80002f6:	4b66      	ldr	r3, [pc, #408]	@ (8000490 <decodeProtocol+0x1ec>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000302:	e0b5      	b.n	8000470 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	795b      	ldrb	r3, [r3, #5]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	b2d1      	uxtb	r1, r2
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	7151      	strb	r1, [r2, #5]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2b4e      	cmp	r3, #78	@ 0x4e
 800031a:	d103      	bne.n	8000324 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 800031c:	4b5c      	ldr	r3, [pc, #368]	@ (8000490 <decodeProtocol+0x1ec>)
 800031e:	2202      	movs	r2, #2
 8000320:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000322:	e0a8      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000330:	4b57      	ldr	r3, [pc, #348]	@ (8000490 <decodeProtocol+0x1ec>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
			break;
 8000336:	e09e      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	2b45      	cmp	r3, #69	@ 0x45
 800034e:	d103      	bne.n	8000358 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000350:	4b4f      	ldr	r3, [pc, #316]	@ (8000490 <decodeProtocol+0x1ec>)
 8000352:	2203      	movs	r2, #3
 8000354:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 8000356:	e08e      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	3b01      	subs	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000364:	4b4a      	ldr	r3, [pc, #296]	@ (8000490 <decodeProtocol+0x1ec>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
			break;
 800036a:	e084      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	b2d1      	uxtb	r1, r2
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7151      	strb	r1, [r2, #5]
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	7a1b      	ldrb	r3, [r3, #8]
 8000380:	2b52      	cmp	r3, #82	@ 0x52
 8000382:	d103      	bne.n	800038c <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000384:	4b42      	ldr	r3, [pc, #264]	@ (8000490 <decodeProtocol+0x1ec>)
 8000386:	2204      	movs	r2, #4
 8000388:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800038a:	e074      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	3b01      	subs	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000398:	4b3d      	ldr	r3, [pc, #244]	@ (8000490 <decodeProtocol+0x1ec>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			break;
 800039e:	e06a      	b.n	8000476 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795a      	ldrb	r2, [r3, #5]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	b2d1      	uxtb	r1, r2
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7151      	strb	r1, [r2, #5]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	7a1a      	ldrb	r2, [r3, #8]
 80003bc:	4b35      	ldr	r3, [pc, #212]	@ (8000494 <decodeProtocol+0x1f0>)
 80003be:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 80003c0:	4b33      	ldr	r3, [pc, #204]	@ (8000490 <decodeProtocol+0x1ec>)
 80003c2:	2205      	movs	r2, #5
 80003c4:	701a      	strb	r2, [r3, #0]
			break;
 80003c6:	e056      	b.n	8000476 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	b2d1      	uxtb	r1, r2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7151      	strb	r1, [r2, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80003de:	d10a      	bne.n	80003f6 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <decodeProtocol+0x1ec>)
 80003e2:	2206      	movs	r2, #6
 80003e4:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <decodeProtocol+0x1f0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80003f4:	e03f      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000402:	4b23      	ldr	r3, [pc, #140]	@ (8000490 <decodeProtocol+0x1ec>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
			break;
 8000408:	e035      	b.n	8000476 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <decodeProtocol+0x1f0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d90f      	bls.n	8000432 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b2d1      	uxtb	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7151      	strb	r1, [r2, #5]
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	7a1a      	ldrb	r2, [r3, #8]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	4053      	eors	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 8000432:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <decodeProtocol+0x1f0>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <decodeProtocol+0x1f0>)
 800043c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <decodeProtocol+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d116      	bne.n	8000474 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <decodeProtocol+0x1ec>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	789a      	ldrb	r2, [r3, #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	4619      	mov	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	440b      	add	r3, r1
 800045a:	7a1b      	ldrb	r3, [r3, #8]
 800045c:	429a      	cmp	r2, r3
 800045e:	d109      	bne.n	8000474 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 f819 	bl	8000498 <decodeData>
				}
			}
			break;
 8000466:	e005      	b.n	8000474 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <decodeProtocol+0x1ec>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
			break;
 800046e:	e002      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000470:	bf00      	nop
 8000472:	e000      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000474:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795a      	ldrb	r2, [r3, #5]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	f47f af15 	bne.w	80002ae <decodeProtocol+0xa>
		}
	}

}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000198 	.word	0x20000198
 8000494:	20000574 	.word	0x20000574

08000498 <decodeData>:

void decodeData(_sDato *datosCom){
 8000498:	b480      	push	{r7}
 800049a:	b091      	sub	sp, #68	@ 0x44
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80004a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004b0:	3340      	adds	r3, #64	@ 0x40
 80004b2:	443b      	add	r3, r7
 80004b4:	2255      	movs	r2, #85	@ 0x55
 80004b6:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80004ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004c4:	3340      	adds	r3, #64	@ 0x40
 80004c6:	443b      	add	r3, r7
 80004c8:	224e      	movs	r2, #78	@ 0x4e
 80004ca:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80004ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004d8:	3340      	adds	r3, #64	@ 0x40
 80004da:	443b      	add	r3, r7
 80004dc:	2245      	movs	r2, #69	@ 0x45
 80004de:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80004e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004ec:	3340      	adds	r3, #64	@ 0x40
 80004ee:	443b      	add	r3, r7
 80004f0:	2252      	movs	r2, #82	@ 0x52
 80004f2:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 80004f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000500:	3340      	adds	r3, #64	@ 0x40
 8000502:	443b      	add	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 800050a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000514:	3340      	adds	r3, #64	@ 0x40
 8000516:	443b      	add	r3, r7
 8000518:	223a      	movs	r2, #58	@ 0x3a
 800051a:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	3302      	adds	r3, #2
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	7a1b      	ldrb	r3, [r3, #8]
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d116      	bne.n	800055c <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 800052e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000538:	3340      	adds	r3, #64	@ 0x40
 800053a:	443b      	add	r3, r7
 800053c:	22f0      	movs	r2, #240	@ 0xf0
 800053e:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 8000542:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800054c:	3340      	adds	r3, #64	@ 0x40
 800054e:	443b      	add	r3, r7
 8000550:	220d      	movs	r2, #13
 8000552:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 8000556:	2303      	movs	r3, #3
 8000558:	733b      	strb	r3, [r7, #12]
			break;
 800055a:	e00c      	b.n	8000576 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800055c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000566:	3340      	adds	r3, #64	@ 0x40
 8000568:	443b      	add	r3, r7
 800056a:	22dd      	movs	r2, #221	@ 0xdd
 800056c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000570:	2302      	movs	r3, #2
 8000572:	733b      	strb	r3, [r7, #12]
			break;
 8000574:	bf00      	nop
	}

	cheksum=0;
 8000576:	2300      	movs	r3, #0
 8000578:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800057c:	2300      	movs	r3, #0
 800057e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000582:	e021      	b.n	80005c8 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000584:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000588:	3340      	adds	r3, #64	@ 0x40
 800058a:	443b      	add	r3, r7
 800058c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000590:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000594:	4053      	eors	r3, r2
 8000596:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800059a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <decodeData+0x160>)
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	b2c8      	uxtb	r0, r1
 80005a6:	4914      	ldr	r1, [pc, #80]	@ (80005f8 <decodeData+0x160>)
 80005a8:	7188      	strb	r0, [r1, #6]
 80005aa:	4619      	mov	r1, r3
 80005ac:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80005b0:	443b      	add	r3, r7
 80005b2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	440b      	add	r3, r1
 80005ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005c2:	3301      	adds	r3, #1
 80005c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005c8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80005cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3d7      	bcc.n	8000584 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <decodeData+0x160>)
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	b2d1      	uxtb	r1, r2
 80005dc:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <decodeData+0x160>)
 80005de:	7191      	strb	r1, [r2, #6]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80005ea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 80005ee:	bf00      	nop
 80005f0:	3744      	adds	r7, #68	@ 0x44
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	2000019c 	.word	0x2000019c

080005fc <encodeData>:

void encodeData(uint8_t id){
 80005fc:	b480      	push	{r7}
 80005fe:	b091      	sub	sp, #68	@ 0x44
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 800060c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000616:	3340      	adds	r3, #64	@ 0x40
 8000618:	443b      	add	r3, r7
 800061a:	2255      	movs	r2, #85	@ 0x55
 800061c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000620:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800062a:	3340      	adds	r3, #64	@ 0x40
 800062c:	443b      	add	r3, r7
 800062e:	224e      	movs	r2, #78	@ 0x4e
 8000630:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000634:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800063e:	3340      	adds	r3, #64	@ 0x40
 8000640:	443b      	add	r3, r7
 8000642:	2245      	movs	r2, #69	@ 0x45
 8000644:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000648:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000652:	3340      	adds	r3, #64	@ 0x40
 8000654:	443b      	add	r3, r7
 8000656:	2252      	movs	r2, #82	@ 0x52
 8000658:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 800065c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000666:	3340      	adds	r3, #64	@ 0x40
 8000668:	443b      	add	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800067a:	3340      	adds	r3, #64	@ 0x40
 800067c:	443b      	add	r3, r7
 800067e:	223a      	movs	r2, #58	@ 0x3a
 8000680:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2ba0      	cmp	r3, #160	@ 0xa0
 8000688:	f040 80fd 	bne.w	8000886 <encodeData+0x28a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 800068c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000696:	3340      	adds	r3, #64	@ 0x40
 8000698:	443b      	add	r3, r7
 800069a:	22a0      	movs	r2, #160	@ 0xa0
 800069c:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 80006a0:	2312      	movs	r3, #18
 80006a2:	733b      	strb	r3, [r7, #12]

		myWord.ui16[0] = ir.sensor0;
 80006a4:	4b9f      	ldr	r3, [pc, #636]	@ (8000924 <encodeData+0x328>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b9f      	ldr	r3, [pc, #636]	@ (8000928 <encodeData+0x32c>)
 80006aa:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b9b      	ldr	r3, [pc, #620]	@ (8000928 <encodeData+0x32c>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80006c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b95      	ldr	r3, [pc, #596]	@ (8000928 <encodeData+0x32c>)
 80006d4:	785a      	ldrb	r2, [r3, #1]
 80006d6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006da:	443b      	add	r3, r7
 80006dc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor1;
 80006e0:	4b90      	ldr	r3, [pc, #576]	@ (8000924 <encodeData+0x328>)
 80006e2:	885a      	ldrh	r2, [r3, #2]
 80006e4:	4b90      	ldr	r3, [pc, #576]	@ (8000928 <encodeData+0x32c>)
 80006e6:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006f2:	4619      	mov	r1, r3
 80006f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000928 <encodeData+0x32c>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000702:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800070c:	4619      	mov	r1, r3
 800070e:	4b86      	ldr	r3, [pc, #536]	@ (8000928 <encodeData+0x32c>)
 8000710:	785a      	ldrb	r2, [r3, #1]
 8000712:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000716:	443b      	add	r3, r7
 8000718:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor2;
 800071c:	4b81      	ldr	r3, [pc, #516]	@ (8000924 <encodeData+0x328>)
 800071e:	889a      	ldrh	r2, [r3, #4]
 8000720:	4b81      	ldr	r3, [pc, #516]	@ (8000928 <encodeData+0x32c>)
 8000722:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000724:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800072e:	4619      	mov	r1, r3
 8000730:	4b7d      	ldr	r3, [pc, #500]	@ (8000928 <encodeData+0x32c>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000738:	443b      	add	r3, r7
 800073a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800073e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000748:	4619      	mov	r1, r3
 800074a:	4b77      	ldr	r3, [pc, #476]	@ (8000928 <encodeData+0x32c>)
 800074c:	785a      	ldrb	r2, [r3, #1]
 800074e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000752:	443b      	add	r3, r7
 8000754:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor3;
 8000758:	4b72      	ldr	r3, [pc, #456]	@ (8000924 <encodeData+0x328>)
 800075a:	88da      	ldrh	r2, [r3, #6]
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <encodeData+0x32c>)
 800075e:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000760:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800076a:	4619      	mov	r1, r3
 800076c:	4b6e      	ldr	r3, [pc, #440]	@ (8000928 <encodeData+0x32c>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000774:	443b      	add	r3, r7
 8000776:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800077a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000784:	4619      	mov	r1, r3
 8000786:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <encodeData+0x32c>)
 8000788:	785a      	ldrb	r2, [r3, #1]
 800078a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800078e:	443b      	add	r3, r7
 8000790:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor4;
 8000794:	4b63      	ldr	r3, [pc, #396]	@ (8000924 <encodeData+0x328>)
 8000796:	891a      	ldrh	r2, [r3, #8]
 8000798:	4b63      	ldr	r3, [pc, #396]	@ (8000928 <encodeData+0x32c>)
 800079a:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800079c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <encodeData+0x32c>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007b0:	443b      	add	r3, r7
 80007b2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c0:	4619      	mov	r1, r3
 80007c2:	4b59      	ldr	r3, [pc, #356]	@ (8000928 <encodeData+0x32c>)
 80007c4:	785a      	ldrb	r2, [r3, #1]
 80007c6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ca:	443b      	add	r3, r7
 80007cc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor5;
 80007d0:	4b54      	ldr	r3, [pc, #336]	@ (8000924 <encodeData+0x328>)
 80007d2:	895a      	ldrh	r2, [r3, #10]
 80007d4:	4b54      	ldr	r3, [pc, #336]	@ (8000928 <encodeData+0x32c>)
 80007d6:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e2:	4619      	mov	r1, r3
 80007e4:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <encodeData+0x32c>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ec:	443b      	add	r3, r7
 80007ee:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007fc:	4619      	mov	r1, r3
 80007fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <encodeData+0x32c>)
 8000800:	785a      	ldrb	r2, [r3, #1]
 8000802:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000806:	443b      	add	r3, r7
 8000808:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor6;
 800080c:	4b45      	ldr	r3, [pc, #276]	@ (8000924 <encodeData+0x328>)
 800080e:	899a      	ldrh	r2, [r3, #12]
 8000810:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <encodeData+0x32c>)
 8000812:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000814:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800081e:	4619      	mov	r1, r3
 8000820:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <encodeData+0x32c>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000828:	443b      	add	r3, r7
 800082a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800082e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000838:	4619      	mov	r1, r3
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <encodeData+0x32c>)
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000842:	443b      	add	r3, r7
 8000844:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor7;
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <encodeData+0x328>)
 800084a:	89da      	ldrh	r2, [r3, #14]
 800084c:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <encodeData+0x32c>)
 800084e:	801a      	strh	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800085a:	4619      	mov	r1, r3
 800085c:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <encodeData+0x32c>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000864:	443b      	add	r3, r7
 8000866:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000874:	4619      	mov	r1, r3
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <encodeData+0x32c>)
 8000878:	785a      	ldrb	r2, [r3, #1]
 800087a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800087e:	443b      	add	r3, r7
 8000880:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 8000884:	e00c      	b.n	80008a0 <encodeData+0x2a4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000890:	3340      	adds	r3, #64	@ 0x40
 8000892:	443b      	add	r3, r7
 8000894:	22dd      	movs	r2, #221	@ 0xdd
 8000896:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 800089a:	2302      	movs	r3, #2
 800089c:	733b      	strb	r3, [r7, #12]
			break;
 800089e:	bf00      	nop
	}
	cheksum=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008ac:	e021      	b.n	80008f2 <encodeData+0x2f6>
	{
		cheksum ^= auxBuffTx[a];
 80008ae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008b2:	3340      	adds	r3, #64	@ 0x40
 80008b4:	443b      	add	r3, r7
 80008b6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80008be:	4053      	eors	r3, r2
 80008c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80008c4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <encodeData+0x330>)
 80008ca:	799b      	ldrb	r3, [r3, #6]
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	b2c8      	uxtb	r0, r1
 80008d0:	4916      	ldr	r1, [pc, #88]	@ (800092c <encodeData+0x330>)
 80008d2:	7188      	strb	r0, [r1, #6]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80008da:	443b      	add	r3, r7
 80008dc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <encodeData+0x330>)
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008e8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008f2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3d7      	bcc.n	80008ae <encodeData+0x2b2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <encodeData+0x330>)
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	b2d1      	uxtb	r1, r2
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <encodeData+0x330>)
 8000908:	7191      	strb	r1, [r2, #6]
 800090a:	461a      	mov	r2, r3
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <encodeData+0x330>)
 800090e:	4413      	add	r3, r2
 8000910:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000914:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000918:	bf00      	nop
 800091a:	3744      	adds	r7, #68	@ 0x44
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200003a8 	.word	0x200003a8
 8000928:	200003bc 	.word	0x200003bc
 800092c:	2000019c 	.word	0x2000019c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fd41 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f8bf 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 fad1 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000942:	f000 fab1 	bl	8000ea8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000946:	f000 fa85 	bl	8000e54 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800094a:	f000 f9e5 	bl	8000d18 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800094e:	f009 fae7 	bl	8009f20 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000952:	f000 f911 	bl	8000b78 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000956:	f000 f9b1 	bl	8000cbc <MX_I2C2_Init>
  MX_TIM4_Init();
 800095a:	f000 fa2d 	bl	8000db8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800095e:	484f      	ldr	r0, [pc, #316]	@ (8000a9c <main+0x16c>)
 8000960:	f004 faa2 	bl	8004ea8 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000964:	484e      	ldr	r0, [pc, #312]	@ (8000aa0 <main+0x170>)
 8000966:	f009 fc11 	bl	800a18c <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepi贸n del Buffer de Recepci贸n
 800096a:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <main+0x174>)
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepci贸n
 8000970:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <main+0x174>)
 8000972:	2200      	movs	r2, #0
 8000974:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <main+0x174>)
 8000978:	2200      	movs	r2, #0
 800097a:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 800097c:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <main+0x174>)
 800097e:	2200      	movs	r2, #0
 8000980:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 8000982:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <main+0x174>)
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	3308      	adds	r3, #8
 8000988:	4a46      	ldr	r2, [pc, #280]	@ (8000aa4 <main+0x174>)
 800098a:	4413      	add	r3, r2
 800098c:	2201      	movs	r2, #1
 800098e:	4619      	mov	r1, r3
 8000990:	4845      	ldr	r0, [pc, #276]	@ (8000aa8 <main+0x178>)
 8000992:	f004 fe87 	bl	80056a4 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000996:	2208      	movs	r2, #8
 8000998:	4944      	ldr	r1, [pc, #272]	@ (8000aac <main+0x17c>)
 800099a:	4845      	ldr	r0, [pc, #276]	@ (8000ab0 <main+0x180>)
 800099c:	f000 fe6c 	bl	8001678 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	4843      	ldr	r0, [pc, #268]	@ (8000ab4 <main+0x184>)
 80009a8:	f001 fe84 	bl	80026b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	@ 0x64
 80009ae:	f000 fd67 	bl	8001480 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b8:	483e      	ldr	r0, [pc, #248]	@ (8000ab4 <main+0x184>)
 80009ba:	f001 fe7b 	bl	80026b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	@ 0x64
 80009c0:	f000 fd5e 	bl	8001480 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ca:	483a      	ldr	r0, [pc, #232]	@ (8000ab4 <main+0x184>)
 80009cc:	f001 fe72 	bl	80026b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009d0:	2064      	movs	r0, #100	@ 0x64
 80009d2:	f000 fd55 	bl	8001480 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009dc:	4835      	ldr	r0, [pc, #212]	@ (8000ab4 <main+0x184>)
 80009de:	f001 fe69 	bl	80026b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	@ 0x64
 80009e4:	f000 fd4c 	bl	8001480 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4831      	ldr	r0, [pc, #196]	@ (8000ab4 <main+0x184>)
 80009f0:	f001 fe60 	bl	80026b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f000 fd43 	bl	8001480 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a00:	482c      	ldr	r0, [pc, #176]	@ (8000ab4 <main+0x184>)
 8000a02:	f001 fe57 	bl	80026b4 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  if (flags1.F250US==1) {
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
//	}

	  if(flags1.F100MS==1){
 8000a06:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <main+0x188>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <main+0xf8>
		  flags1.F100MS = 0;
 8000a14:	4a28      	ldr	r2, [pc, #160]	@ (8000ab8 <main+0x188>)
 8000a16:	7813      	ldrb	r3, [r2, #0]
 8000a18:	f36f 0341 	bfc	r3, #1, #1
 8000a1c:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000a1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a22:	4824      	ldr	r0, [pc, #144]	@ (8000ab4 <main+0x184>)
 8000a24:	f001 fe5e 	bl	80026e4 <HAL_GPIO_TogglePin>
		  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS==1) {
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <main+0x188>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <main+0x116>
		  flags1.F500MS = 0;
 8000a36:	4a20      	ldr	r2, [pc, #128]	@ (8000ab8 <main+0x188>)
 8000a38:	7813      	ldrb	r3, [r2, #0]
 8000a3a:	f36f 0382 	bfc	r3, #2, #1
 8000a3e:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000a40:	20a0      	movs	r0, #160	@ 0xa0
 8000a42:	f7ff fddb 	bl	80005fc <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <main+0x174>)
 8000a48:	795a      	ldrb	r2, [r3, #5]
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <main+0x174>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d002      	beq.n	8000a58 <main+0x128>
		  decodeProtocol(&datosComProtocol);
 8000a52:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <main+0x174>)
 8000a54:	f7ff fc26 	bl	80002a4 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <main+0x174>)
 8000a5a:	79da      	ldrb	r2, [r3, #7]
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <main+0x174>)
 8000a5e:	799b      	ldrb	r3, [r3, #6]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d0d0      	beq.n	8000a06 <main+0xd6>
		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <main+0x174>)
 8000a66:	799a      	ldrb	r2, [r3, #6]
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <main+0x174>)
 8000a6a:	79db      	ldrb	r3, [r3, #7]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	71fb      	strb	r3, [r7, #7]
		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK)){
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <main+0x174>)
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <main+0x174>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fb5c 	bl	800a140 <CDC_Transmit_FS>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1bb      	bne.n	8000a06 <main+0xd6>
			  datosComProtocol.indexReadTx++;
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <main+0x174>)
 8000a90:	79db      	ldrb	r3, [r3, #7]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <main+0x174>)
 8000a98:	71da      	strb	r2, [r3, #7]
	  if(flags1.F100MS==1){
 8000a9a:	e7b4      	b.n	8000a06 <main+0xd6>
 8000a9c:	20000488 	.word	0x20000488
 8000aa0:	08000261 	.word	0x08000261
 8000aa4:	2000019c 	.word	0x2000019c
 8000aa8:	20000518 	.word	0x20000518
 8000aac:	20000564 	.word	0x20000564
 8000ab0:	200003c0 	.word	0x200003c0
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	200003a4 	.word	0x200003a4

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	@ 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac6:	2228      	movs	r2, #40	@ 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f009 ff14 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b08:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fcb2 	bl	800447c <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b1e:	f000 fa5f 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 ff1e 	bl	8004980 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b4a:	f000 fa49 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b56:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 f89c 	bl	8004c9c <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b6a:	f000 fa39 	bl	8000fe0 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	@ 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b88:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000b8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000cb8 <MX_ADC1_Init+0x140>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b8e:	4b49      	ldr	r3, [pc, #292]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000b90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b96:	4b47      	ldr	r3, [pc, #284]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9c:	4b45      	ldr	r3, [pc, #276]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba2:	4b44      	ldr	r3, [pc, #272]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000ba4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ba8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000baa:	4b42      	ldr	r3, [pc, #264]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000bb0:	4b40      	ldr	r3, [pc, #256]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb6:	483f      	ldr	r0, [pc, #252]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000bb8:	f000 fc86 	bl	80014c8 <HAL_ADC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bc2:	f000 fa0d 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4837      	ldr	r0, [pc, #220]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000bd8:	f000 fe3e 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f9fd 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4830      	ldr	r0, [pc, #192]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000bf4:	f000 fe30 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bfe:	f000 f9ef 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c06:	2303      	movs	r3, #3
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4829      	ldr	r0, [pc, #164]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c10:	f000 fe22 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c1a:	f000 f9e1 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c2c:	f000 fe14 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c36:	f000 f9d3 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c48:	f000 fe06 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c52:	f000 f9c5 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c56:	2305      	movs	r3, #5
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c64:	f000 fdf8 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c6e:	f000 f9b7 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c72:	2306      	movs	r3, #6
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c80:	f000 fdea 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c8a:	f000 f9a9 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c92:	2308      	movs	r3, #8
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <MX_ADC1_Init+0x13c>)
 8000c9c:	f000 fddc 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000ca6:	f000 f99b 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200003c0 	.word	0x200003c0
 8000cb8:	40012400 	.word	0x40012400

08000cbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <MX_I2C2_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_I2C2_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <MX_I2C2_Init+0x50>)
 8000cfa:	f001 fd0d 	bl	8002718 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f96c 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000434 	.word	0x20000434
 8000d10:	40005800 	.word	0x40005800
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d36:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <MX_TIM1_Init+0x9c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d3c:	2247      	movs	r2, #71	@ 0x47
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d60:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d62:	f004 f851 	bl	8004e08 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 f938 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d7e:	f004 f9ed 	bl	800515c <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d88:	f000 f92a 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d9a:	f004 fbc3 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da4:	f000 f91c 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000488 	.word	0x20000488
 8000db4:	40012c00 	.word	0x40012c00

08000db8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e50 <MX_TIM4_Init+0x98>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000dfc:	f004 f804 	bl	8004e08 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e06:	f000 f8eb 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000e18:	f004 f9a0 	bl	800515c <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 f8dd 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_TIM4_Init+0x94>)
 8000e34:	f004 fb76 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e3e:	f000 f8cf 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200004d0 	.word	0x200004d0
 8000e50:	40000800 	.word	0x40000800

08000e54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_USART1_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e8c:	f004 fbba 	bl	8005604 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 f8a3 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000518 	.word	0x20000518
 8000ea4:	40013800 	.word	0x40013800

08000ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	200b      	movs	r0, #11
 8000ecc:	f000 ff95 	bl	8001dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ed0:	200b      	movs	r0, #11
 8000ed2:	f000 ffae 	bl	8001e32 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a22      	ldr	r2, [pc, #136]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_GPIO_Init+0xec>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5e:	481d      	ldr	r0, [pc, #116]	@ (8000fd4 <MX_GPIO_Init+0xf0>)
 8000f60:	f001 fba8 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <MX_GPIO_Init+0xf4>)
 8000f6c:	f001 fba2 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8000f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <MX_GPIO_Init+0xf0>)
 8000f8a:	f001 fa0f 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000fa4:	f001 fa02 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_GPIO_Init+0xf4>)
 8000fc2:	f001 f9f3 	bl	80023ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <HAL_MspInit+0x5c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a0e      	ldr	r2, [pc, #56]	@ (8001048 <HAL_MspInit+0x5c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_MspInit+0x60>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_MspInit+0x60>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a28      	ldr	r2, [pc, #160]	@ (800110c <HAL_ADC_MspInit+0xbc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d149      	bne.n	8001104 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a26      	ldr	r2, [pc, #152]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <HAL_ADC_MspInit+0xc0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010a0:	23ff      	movs	r3, #255	@ 0xff
 80010a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4819      	ldr	r0, [pc, #100]	@ (8001114 <HAL_ADC_MspInit+0xc4>)
 80010b0:	f001 f97c 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_ADC_MspInit+0xcc>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010c8:	2280      	movs	r2, #128	@ 0x80
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010e8:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010ea:	f000 febd 	bl	8001e68 <HAL_DMA_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010f4:	f7ff ff74 	bl	8000fe0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 80010fc:	621a      	str	r2, [r3, #32]
 80010fe:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_ADC_MspInit+0xc8>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40012400 	.word	0x40012400
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800
 8001118:	200003f0 	.word	0x200003f0
 800111c:	40020008 	.word	0x40020008

08001120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <HAL_I2C_MspInit+0x74>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d124      	bne.n	800118a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001158:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <HAL_I2C_MspInit+0x7c>)
 800116e:	f001 f91d 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0x78>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005800 	.word	0x40005800
 8001198:	40021000 	.word	0x40021000
 800119c:	40010c00 	.word	0x40010c00

080011a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a16      	ldr	r2, [pc, #88]	@ (8001208 <HAL_TIM_Base_MspInit+0x68>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d114      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a15      	ldr	r2, [pc, #84]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2019      	movs	r0, #25
 80011d0:	f000 fe13 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011d4:	2019      	movs	r0, #25
 80011d6:	f000 fe2c 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011da:	e010      	b.n	80011fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <HAL_TIM_Base_MspInit+0x70>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10b      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_TIM_Base_MspInit+0x6c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40000800 	.word	0x40000800

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <HAL_UART_MspInit+0x9c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d139      	bne.n	80012a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_UART_MspInit+0xa0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <HAL_UART_MspInit+0xa4>)
 800127a:	f001 f897 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <HAL_UART_MspInit+0xa4>)
 8001294:	f001 f88a 	bl	80023ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2025      	movs	r0, #37	@ 0x25
 800129e:	f000 fdac 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012a2:	2025      	movs	r0, #37	@ 0x25
 80012a4:	f000 fdc5 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f89c 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DMA1_Channel1_IRQHandler+0x10>)
 800131a:	f000 ff13 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200003f0 	.word	0x200003f0

08001328 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800132e:	f001 fc5c 	bl	8002bea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000c50 	.word	0x20000c50

0800133c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <TIM1_UP_IRQHandler+0x10>)
 8001342:	f003 fe03 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000488 	.word	0x20000488

08001350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <USART1_IRQHandler+0x10>)
 8001356:	f004 f9cb 	bl	80056f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000518 	.word	0x20000518

08001364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff fff8 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001376:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800138c:	4c09      	ldr	r4, [pc, #36]	@ (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f009 fab5 	bl	800a908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fac7 	bl	8000930 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80013ac:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 80013b0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80013b4:	20001160 	.word	0x20001160

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fd09 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fe08 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fd21 	bl	8001e4e <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 fce9 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	@ (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	@ (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	20000578 	.word	0x20000578

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	@ (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000578 	.word	0x20000578

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0be      	b.n	8001668 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fda2 	bl	8001050 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 faf5 	bl	8001afc <ADC_ConversionStop_Disable>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 8099 	bne.w	8001656 <HAL_ADC_Init+0x18e>
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 8095 	bne.w	8001656 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001534:	f023 0302 	bic.w	r3, r3, #2
 8001538:	f043 0202 	orr.w	r2, r3, #2
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001548:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7b1b      	ldrb	r3, [r3, #12]
 800154e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001550:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	4313      	orrs	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001560:	d003      	beq.n	800156a <HAL_ADC_Init+0xa2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <HAL_ADC_Init+0xa8>
 800156a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800156e:	e000      	b.n	8001572 <HAL_ADC_Init+0xaa>
 8001570:	2300      	movs	r3, #0
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7d1b      	ldrb	r3, [r3, #20]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d119      	bne.n	80015b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	3b01      	subs	r3, #1
 800158e:	035a      	lsls	r2, r3, #13
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e00b      	b.n	80015b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	f043 0220 	orr.w	r2, r3, #32
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <HAL_ADC_Init+0x1a8>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	430b      	orrs	r3, r1
 80015da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e4:	d003      	beq.n	80015ee <HAL_ADC_Init+0x126>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d104      	bne.n	80015f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	051b      	lsls	r3, r3, #20
 80015f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	430a      	orrs	r2, r1
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_ADC_Init+0x1ac>)
 8001614:	4013      	ands	r3, r2
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	d10b      	bne.n	8001634 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001632:	e018      	b.n	8001666 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	f023 0312 	bic.w	r3, r3, #18
 800163c:	f043 0210 	orr.w	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001654:	e007      	b.n	8001666 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001666:	7dfb      	ldrb	r3, [r7, #23]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	ffe1f7fd 	.word	0xffe1f7fd
 8001674:	ff1f0efe 	.word	0xff1f0efe

08001678 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a64      	ldr	r2, [pc, #400]	@ (8001820 <HAL_ADC_Start_DMA+0x1a8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d004      	beq.n	800169c <HAL_ADC_Start_DMA+0x24>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_ADC_Start_DMA+0x1ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d106      	bne.n	80016aa <HAL_ADC_Start_DMA+0x32>
 800169c:	4b60      	ldr	r3, [pc, #384]	@ (8001820 <HAL_ADC_Start_DMA+0x1a8>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 80b3 	bne.w	8001810 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_Start_DMA+0x40>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e0ae      	b.n	8001816 <HAL_ADC_Start_DMA+0x19e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f9c1 	bl	8001a48 <ADC_Enable>
 80016c6:	4603      	mov	r3, r0
 80016c8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 809a 	bne.w	8001806 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001824 <HAL_ADC_Start_DMA+0x1ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_Start_DMA+0x84>
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <HAL_ADC_Start_DMA+0x1a8>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d115      	bne.n	8001728 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001712:	2b00      	cmp	r3, #0
 8001714:	d026      	beq.n	8001764 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800171e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001726:	e01d      	b.n	8001764 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a39      	ldr	r2, [pc, #228]	@ (8001820 <HAL_ADC_Start_DMA+0x1a8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d004      	beq.n	8001748 <HAL_ADC_Start_DMA+0xd0>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a38      	ldr	r2, [pc, #224]	@ (8001824 <HAL_ADC_Start_DMA+0x1ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d10d      	bne.n	8001764 <HAL_ADC_Start_DMA+0xec>
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_ADC_Start_DMA+0x1a8>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800175c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001774:	f023 0206 	bic.w	r2, r3, #6
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800177c:	e002      	b.n	8001784 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <HAL_ADC_Start_DMA+0x1b0>)
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a24      	ldr	r2, [pc, #144]	@ (800182c <HAL_ADC_Start_DMA+0x1b4>)
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <HAL_ADC_Start_DMA+0x1b8>)
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0202 	mvn.w	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a18      	ldr	r0, [r3, #32]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	334c      	adds	r3, #76	@ 0x4c
 80017c8:	4619      	mov	r1, r3
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f000 fba5 	bl	8001f1c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017e0:	d108      	bne.n	80017f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80017f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017f2:	e00f      	b.n	8001814 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001802:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001804:	e006      	b.n	8001814 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800180e:	e001      	b.n	8001814 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40012400 	.word	0x40012400
 8001824:	40012800 	.word	0x40012800
 8001828:	08001b7f 	.word	0x08001b7f
 800182c:	08001bfb 	.word	0x08001bfb
 8001830:	08001c17 	.word	0x08001c17

08001834 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x20>
 8001874:	2302      	movs	r3, #2
 8001876:	e0dc      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1da>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d81c      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b05      	subs	r3, #5
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4019      	ands	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b05      	subs	r3, #5
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c0:	e03c      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d81c      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b23      	subs	r3, #35	@ 0x23
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4019      	ands	r1, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b23      	subs	r3, #35	@ 0x23
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	631a      	str	r2, [r3, #48]	@ 0x30
 8001902:	e01b      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b41      	subs	r3, #65	@ 0x41
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b41      	subs	r3, #65	@ 0x41
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d91c      	bls.n	800197e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6898      	ldr	r0, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	3b1e      	subs	r3, #30
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e019      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d132      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <HAL_ADC_ConfigChannel+0x1e4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d125      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d126      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d11a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_ADC_ConfigChannel+0x1e8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <HAL_ADC_ConfigChannel+0x1ec>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9a      	lsrs	r2, r3, #18
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x1b2>
 8001a16:	e007      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012400 	.word	0x40012400
 8001a40:	20000000 	.word	0x20000000
 8001a44:	431bde83 	.word	0x431bde83

08001a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d040      	beq.n	8001ae8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <ADC_Enable+0xac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <ADC_Enable+0xb0>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a84:	e002      	b.n	8001a8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a92:	f7ff fceb 	bl	800146c <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a98:	e01f      	b.n	8001ada <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a9a:	f7ff fce7 	bl	800146c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d918      	bls.n	8001ada <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d011      	beq.n	8001ada <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e007      	b.n	8001aea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d1d8      	bne.n	8001a9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d12e      	bne.n	8001b74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b26:	f7ff fca1 	bl	800146c <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2c:	e01b      	b.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b2e:	f7ff fc9d 	bl	800146c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d914      	bls.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10d      	bne.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d0dc      	beq.n	8001b2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d127      	bne.n	8001be8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bb2:	d115      	bne.n	8001be0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7fe fab3 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001be6:	e004      	b.n	8001bf2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff fe13 	bl	8001834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff fe02 	bl	8001846 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4906      	ldr	r1, [pc, #24]	@ (8001ce4 <__NVIC_EnableIRQ+0x34>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff90 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff2d 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff42 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff90 	bl	8001d3c <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5f 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff35 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e043      	b.n	8001f06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <HAL_DMA_Init+0xa8>)
 8001e86:	4413      	add	r3, r2
 8001e88:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_DMA_Init+0xac>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	009a      	lsls	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_DMA_Init+0xb0>)
 8001e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eb2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001eb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	bffdfff8 	.word	0xbffdfff8
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Start_IT+0x20>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e04b      	b.n	8001fd4 <HAL_DMA_Start_IT+0xb8>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f9eb 	bl	8002350 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 020e 	orr.w	r2, r2, #14
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e00f      	b.n	8001fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0204 	bic.w	r2, r2, #4
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 020a 	orr.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e020      	b.n	8002048 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 020e 	bic.w	r2, r2, #14
 8002014:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
	...

08002054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d005      	beq.n	8002078 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e051      	b.n	800211c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 020e 	bic.w	r2, r2, #14
 8002086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a22      	ldr	r2, [pc, #136]	@ (8002128 <HAL_DMA_Abort_IT+0xd4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d029      	beq.n	80020f6 <HAL_DMA_Abort_IT+0xa2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a21      	ldr	r2, [pc, #132]	@ (800212c <HAL_DMA_Abort_IT+0xd8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d022      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x9e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <HAL_DMA_Abort_IT+0xdc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_Abort_IT+0x98>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002134 <HAL_DMA_Abort_IT+0xe0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d012      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x92>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_DMA_Abort_IT+0xe4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00a      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x8c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1b      	ldr	r2, [pc, #108]	@ (800213c <HAL_DMA_Abort_IT+0xe8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d102      	bne.n	80020da <HAL_DMA_Abort_IT+0x86>
 80020d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020d8:	e00e      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020de:	e00b      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020e4:	e008      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ea:	e005      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f0:	e002      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020f2:	2310      	movs	r3, #16
 80020f4:	e000      	b.n	80020f8 <HAL_DMA_Abort_IT+0xa4>
 80020f6:	2301      	movs	r3, #1
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_DMA_Abort_IT+0xec>)
 80020fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
    } 
  }
  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40020008 	.word	0x40020008
 800212c:	4002001c 	.word	0x4002001c
 8002130:	40020030 	.word	0x40020030
 8002134:	40020044 	.word	0x40020044
 8002138:	40020058 	.word	0x40020058
 800213c:	4002006c 	.word	0x4002006c
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d04f      	beq.n	800220c <HAL_DMA_IRQHandler+0xc8>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d04a      	beq.n	800220c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0204 	bic.w	r2, r2, #4
 8002192:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a66      	ldr	r2, [pc, #408]	@ (8002334 <HAL_DMA_IRQHandler+0x1f0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d029      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xae>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a65      	ldr	r2, [pc, #404]	@ (8002338 <HAL_DMA_IRQHandler+0x1f4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_IRQHandler+0xaa>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a63      	ldr	r2, [pc, #396]	@ (800233c <HAL_DMA_IRQHandler+0x1f8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01a      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xa4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a62      	ldr	r2, [pc, #392]	@ (8002340 <HAL_DMA_IRQHandler+0x1fc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d012      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x9e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a60      	ldr	r2, [pc, #384]	@ (8002344 <HAL_DMA_IRQHandler+0x200>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00a      	beq.n	80021dc <HAL_DMA_IRQHandler+0x98>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002348 <HAL_DMA_IRQHandler+0x204>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d102      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x92>
 80021d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d4:	e00e      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021da:	e00b      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021e0:	e008      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021e6:	e005      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ec:	e002      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021ee:	2340      	movs	r3, #64	@ 0x40
 80021f0:	e000      	b.n	80021f4 <HAL_DMA_IRQHandler+0xb0>
 80021f2:	2304      	movs	r3, #4
 80021f4:	4a55      	ldr	r2, [pc, #340]	@ (800234c <HAL_DMA_IRQHandler+0x208>)
 80021f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8094 	beq.w	800232a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800220a:	e08e      	b.n	800232a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	2202      	movs	r2, #2
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d056      	beq.n	80022ca <HAL_DMA_IRQHandler+0x186>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d051      	beq.n	80022ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 020a 	bic.w	r2, r2, #10
 8002242:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a38      	ldr	r2, [pc, #224]	@ (8002334 <HAL_DMA_IRQHandler+0x1f0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d029      	beq.n	80022aa <HAL_DMA_IRQHandler+0x166>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a37      	ldr	r2, [pc, #220]	@ (8002338 <HAL_DMA_IRQHandler+0x1f4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x162>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a35      	ldr	r2, [pc, #212]	@ (800233c <HAL_DMA_IRQHandler+0x1f8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01a      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x15c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a34      	ldr	r2, [pc, #208]	@ (8002340 <HAL_DMA_IRQHandler+0x1fc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d012      	beq.n	800229a <HAL_DMA_IRQHandler+0x156>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a32      	ldr	r2, [pc, #200]	@ (8002344 <HAL_DMA_IRQHandler+0x200>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00a      	beq.n	8002294 <HAL_DMA_IRQHandler+0x150>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_DMA_IRQHandler+0x204>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <HAL_DMA_IRQHandler+0x14a>
 8002288:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800228c:	e00e      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 800228e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002292:	e00b      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 8002294:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002298:	e008      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 800229a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800229e:	e005      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 80022a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022a4:	e002      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 80022a6:	2320      	movs	r3, #32
 80022a8:	e000      	b.n	80022ac <HAL_DMA_IRQHandler+0x168>
 80022aa:	2302      	movs	r3, #2
 80022ac:	4a27      	ldr	r2, [pc, #156]	@ (800234c <HAL_DMA_IRQHandler+0x208>)
 80022ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d034      	beq.n	800232a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022c8:	e02f      	b.n	800232a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	2208      	movs	r2, #8
 80022d0:	409a      	lsls	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_DMA_IRQHandler+0x1e8>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d023      	beq.n	800232c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020e 	bic.w	r2, r2, #14
 80022f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
    }
  }
  return;
 800232a:	bf00      	nop
 800232c:	bf00      	nop
}
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020008 	.word	0x40020008
 8002338:	4002001c 	.word	0x4002001c
 800233c:	40020030 	.word	0x40020030
 8002340:	40020044 	.word	0x40020044
 8002344:	40020058 	.word	0x40020058
 8002348:	4002006c 	.word	0x4002006c
 800234c:	40020000 	.word	0x40020000

08002350 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d108      	bne.n	8002390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800238e:	e007      	b.n	80023a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b08b      	sub	sp, #44	@ 0x2c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	e169      	b.n	8002694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023c0:	2201      	movs	r2, #1
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8158 	bne.w	800268e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a9a      	ldr	r2, [pc, #616]	@ (800264c <HAL_GPIO_Init+0x2a0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05e      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 80023e8:	4a98      	ldr	r2, [pc, #608]	@ (800264c <HAL_GPIO_Init+0x2a0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d875      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 80023ee:	4a98      	ldr	r2, [pc, #608]	@ (8002650 <HAL_GPIO_Init+0x2a4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d058      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 80023f4:	4a96      	ldr	r2, [pc, #600]	@ (8002650 <HAL_GPIO_Init+0x2a4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d86f      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 80023fa:	4a96      	ldr	r2, [pc, #600]	@ (8002654 <HAL_GPIO_Init+0x2a8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d052      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 8002400:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_GPIO_Init+0x2a8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d869      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002406:	4a94      	ldr	r2, [pc, #592]	@ (8002658 <HAL_GPIO_Init+0x2ac>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04c      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 800240c:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <HAL_GPIO_Init+0x2ac>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d863      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002412:	4a92      	ldr	r2, [pc, #584]	@ (800265c <HAL_GPIO_Init+0x2b0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d046      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
 8002418:	4a90      	ldr	r2, [pc, #576]	@ (800265c <HAL_GPIO_Init+0x2b0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d85d      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d82a      	bhi.n	8002478 <HAL_GPIO_Init+0xcc>
 8002422:	2b12      	cmp	r3, #18
 8002424:	d859      	bhi.n	80024da <HAL_GPIO_Init+0x12e>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <HAL_GPIO_Init+0x80>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	080024a7 	.word	0x080024a7
 8002430:	08002481 	.word	0x08002481
 8002434:	08002493 	.word	0x08002493
 8002438:	080024d5 	.word	0x080024d5
 800243c:	080024db 	.word	0x080024db
 8002440:	080024db 	.word	0x080024db
 8002444:	080024db 	.word	0x080024db
 8002448:	080024db 	.word	0x080024db
 800244c:	080024db 	.word	0x080024db
 8002450:	080024db 	.word	0x080024db
 8002454:	080024db 	.word	0x080024db
 8002458:	080024db 	.word	0x080024db
 800245c:	080024db 	.word	0x080024db
 8002460:	080024db 	.word	0x080024db
 8002464:	080024db 	.word	0x080024db
 8002468:	080024db 	.word	0x080024db
 800246c:	080024db 	.word	0x080024db
 8002470:	08002489 	.word	0x08002489
 8002474:	0800249d 	.word	0x0800249d
 8002478:	4a79      	ldr	r2, [pc, #484]	@ (8002660 <HAL_GPIO_Init+0x2b4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800247e:	e02c      	b.n	80024da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	623b      	str	r3, [r7, #32]
          break;
 8002486:	e029      	b.n	80024dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e024      	b.n	80024dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	3308      	adds	r3, #8
 8002498:	623b      	str	r3, [r7, #32]
          break;
 800249a:	e01f      	b.n	80024dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	330c      	adds	r3, #12
 80024a2:	623b      	str	r3, [r7, #32]
          break;
 80024a4:	e01a      	b.n	80024dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ae:	2304      	movs	r3, #4
 80024b0:	623b      	str	r3, [r7, #32]
          break;
 80024b2:	e013      	b.n	80024dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	611a      	str	r2, [r3, #16]
          break;
 80024c6:	e009      	b.n	80024dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c8:	2308      	movs	r3, #8
 80024ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	615a      	str	r2, [r3, #20]
          break;
 80024d2:	e003      	b.n	80024dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
          break;
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x130>
          break;
 80024da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d801      	bhi.n	80024e6 <HAL_GPIO_Init+0x13a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_Init+0x13e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d802      	bhi.n	80024f8 <HAL_GPIO_Init+0x14c>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x152>
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	3b08      	subs	r3, #8
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	210f      	movs	r1, #15
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	6a39      	ldr	r1, [r7, #32]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	431a      	orrs	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80b1 	beq.w	800268e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a4c      	ldr	r2, [pc, #304]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_GPIO_Init+0x2b8>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002544:	4a48      	ldr	r2, [pc, #288]	@ (8002668 <HAL_GPIO_Init+0x2bc>)
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	@ (800266c <HAL_GPIO_Init+0x2c0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_GPIO_Init+0x1ec>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <HAL_GPIO_Init+0x2c4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_GPIO_Init+0x1e8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3e      	ldr	r2, [pc, #248]	@ (8002674 <HAL_GPIO_Init+0x2c8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <HAL_GPIO_Init+0x1e4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3d      	ldr	r2, [pc, #244]	@ (8002678 <HAL_GPIO_Init+0x2cc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_GPIO_Init+0x1e0>
 8002588:	2303      	movs	r3, #3
 800258a:	e006      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 800258c:	2304      	movs	r3, #4
 800258e:	e004      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002590:	2302      	movs	r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_GPIO_Init+0x1ee>
 8002598:	2300      	movs	r3, #0
 800259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259c:	f002 0203 	and.w	r2, r2, #3
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	4093      	lsls	r3, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025aa:	492f      	ldr	r1, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x2bc>)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	492c      	ldr	r1, [pc, #176]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	43db      	mvns	r3, r3
 80025da:	4928      	ldr	r1, [pc, #160]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4922      	ldr	r1, [pc, #136]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	43db      	mvns	r3, r3
 8002602:	491e      	ldr	r1, [pc, #120]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002604:	4013      	ands	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4918      	ldr	r1, [pc, #96]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	43db      	mvns	r3, r3
 800262a:	4914      	ldr	r1, [pc, #80]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800262c:	4013      	ands	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	490e      	ldr	r1, [pc, #56]	@ (800267c <HAL_GPIO_Init+0x2d0>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e021      	b.n	800268e <HAL_GPIO_Init+0x2e2>
 800264a:	bf00      	nop
 800264c:	10320000 	.word	0x10320000
 8002650:	10310000 	.word	0x10310000
 8002654:	10220000 	.word	0x10220000
 8002658:	10210000 	.word	0x10210000
 800265c:	10120000 	.word	0x10120000
 8002660:	10110000 	.word	0x10110000
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	40010800 	.word	0x40010800
 8002670:	40010c00 	.word	0x40010c00
 8002674:	40011000 	.word	0x40011000
 8002678:	40011400 	.word	0x40011400
 800267c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	43db      	mvns	r3, r3
 8002688:	4909      	ldr	r1, [pc, #36]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 800268a:	4013      	ands	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	3301      	adds	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f47f ae8e 	bne.w	80023c0 <HAL_GPIO_Init+0x14>
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	372c      	adds	r7, #44	@ 0x2c
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43d9      	mvns	r1, r3
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	400b      	ands	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
	...

08002718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e12b      	b.n	8002982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fcee 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	@ 0x24
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800277c:	f002 fa48 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8002780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a81      	ldr	r2, [pc, #516]	@ (800298c <HAL_I2C_Init+0x274>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d807      	bhi.n	800279c <HAL_I2C_Init+0x84>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a80      	ldr	r2, [pc, #512]	@ (8002990 <HAL_I2C_Init+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e006      	b.n	80027aa <HAL_I2C_Init+0x92>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a7d      	ldr	r2, [pc, #500]	@ (8002994 <HAL_I2C_Init+0x27c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bf94      	ite	ls
 80027a4:	2301      	movls	r3, #1
 80027a6:	2300      	movhi	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e7      	b.n	8002982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a78      	ldr	r2, [pc, #480]	@ (8002998 <HAL_I2C_Init+0x280>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	@ (800298c <HAL_I2C_Init+0x274>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <HAL_I2C_Init+0xd4>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	e009      	b.n	8002800 <HAL_I2C_Init+0xe8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a69      	ldr	r2, [pc, #420]	@ (800299c <HAL_I2C_Init+0x284>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002812:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	495c      	ldr	r1, [pc, #368]	@ (800298c <HAL_I2C_Init+0x274>)
 800281c:	428b      	cmp	r3, r1
 800281e:	d819      	bhi.n	8002854 <HAL_I2C_Init+0x13c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e59      	subs	r1, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fbb1 f3f3 	udiv	r3, r1, r3
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002834:	400b      	ands	r3, r1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_I2C_Init+0x138>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e59      	subs	r1, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284e:	e051      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002850:	2304      	movs	r3, #4
 8002852:	e04f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_I2C_Init+0x168>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_I2C_Init+0x18e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x196>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_I2C_Init+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e58      	subs	r0, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	440b      	add	r3, r1
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002922:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6911      	ldr	r1, [r2, #16]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	000186a0 	.word	0x000186a0
 8002990:	001e847f 	.word	0x001e847f
 8002994:	003d08ff 	.word	0x003d08ff
 8002998:	431bde83 	.word	0x431bde83
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b08b      	sub	sp, #44	@ 0x2c
 80029a4:	af06      	add	r7, sp, #24
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0f1      	b.n	8002b96 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f007 fcec 	bl	800a3a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fbc1 	bl	8006160 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	687e      	ldr	r6, [r7, #4]
 80029e6:	466d      	mov	r5, sp
 80029e8:	f106 0410 	add.w	r4, r6, #16
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	602b      	str	r3, [r5, #0]
 80029f4:	1d33      	adds	r3, r6, #4
 80029f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f003 fb8b 	bl	8006114 <USB_CoreInit>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0c2      	b.n	8002b96 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fbbc 	bl	8006194 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e040      	b.n	8002aa4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3301      	adds	r3, #1
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3303      	adds	r3, #3
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3338      	adds	r3, #56	@ 0x38
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	333c      	adds	r3, #60	@ 0x3c
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	3340      	adds	r3, #64	@ 0x40
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b9      	bcc.n	8002a22 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e044      	b.n	8002b3e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3b5      	bcc.n	8002ab4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	687e      	ldr	r6, [r7, #4]
 8002b50:	466d      	mov	r5, sp
 8002b52:	f106 0410 	add.w	r4, r6, #16
 8002b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	1d33      	adds	r3, r6, #4
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f003 fb22 	bl	80061ac <USB_DevInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00d      	b.n	8002b96 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f005 fda3 	bl	80086da <USB_DevDisconnect>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_Start+0x16>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e016      	b.n	8002be2 <HAL_PCD_Start+0x44>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fab7 	bl	8006134 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f007 fe5e 	bl	800a88a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f005 fd77 	bl	80086c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b088      	sub	sp, #32
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f005 fd79 	bl	80086ee <USB_ReadInterrupts>
 8002bfc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb1b 	bl	8003244 <PCD_EP_ISR_Handler>

    return;
 8002c0e:	e119      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f007 fc31 	bl	800a49a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f905 	bl	8002e4a <HAL_PCD_SetAddress>

    return;
 8002c40:	e100      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c64:	e0ee      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c82:	b292      	uxth	r2, r2
 8002c84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c88:	e0dc      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d027      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0208 	bic.w	r2, r2, #8
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f007 fc21 	bl	800a50c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ce2:	e0af      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8083 	beq.w	8002df6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e010      	b.n	8002d18 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	441a      	add	r2, r3
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	8812      	ldrh	r2, [r2, #0]
 8002d06:	b292      	uxth	r2, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	3301      	adds	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	7ffb      	ldrb	r3, [r7, #31]
 8002d1a:	2b07      	cmp	r3, #7
 8002d1c:	d9eb      	bls.n	8002cf6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	b292      	uxth	r2, r2
 8002d32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d4e:	bf00      	nop
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f6      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d74:	b292      	uxth	r2, r2
 8002d76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e00f      	b.n	8002da0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d80:	7ffb      	ldrb	r3, [r7, #31]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
 8002d88:	7ffa      	ldrb	r2, [r7, #31]
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	440a      	add	r2, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	3320      	adds	r3, #32
 8002d92:	443b      	add	r3, r7
 8002d94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d98:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	7ffb      	ldrb	r3, [r7, #31]
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d9ec      	bls.n	8002d80 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0208 	orr.w	r2, r2, #8
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0204 	orr.w	r2, r2, #4
 8002de8:	b292      	uxth	r2, r2
 8002dea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f007 fb72 	bl	800a4d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002df4:	e026      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00f      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e12:	b292      	uxth	r2, r2
 8002e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f007 fb30 	bl	800a47e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e1e:	e011      	b.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e42:	bf00      	nop
  }
}
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_PCD_SetAddress+0x1a>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e013      	b.n	8002e8c <HAL_PCD_SetAddress+0x42>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 fc0f 	bl	80086a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	70fb      	strb	r3, [r7, #3]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	803b      	strh	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da0e      	bge.n	8002ed8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	705a      	strb	r2, [r3, #1]
 8002ed6:	e00e      	b.n	8002ef6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 0207 	and.w	r2, r3, #7
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f02:	883a      	ldrh	r2, [r7, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	78ba      	ldrb	r2, [r7, #2]
 8002f0c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f0e:	78bb      	ldrb	r3, [r7, #2]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PCD_EP_Open+0x94>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e00e      	b.n	8002f46 <HAL_PCD_EP_Open+0xb2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 f958 	bl	80061ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002f44:	7afb      	ldrb	r3, [r7, #11]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da0e      	bge.n	8002f80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	705a      	strb	r2, [r3, #1]
 8002f7e:	e00e      	b.n	8002f9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 0207 	and.w	r2, r3, #7
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_PCD_EP_Close+0x6a>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e00e      	b.n	8002fd6 <HAL_PCD_EP_Close+0x88>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 fcd0 	bl	800696c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	460b      	mov	r3, r1
 8002fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	f003 0207 	and.w	r2, r3, #7
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	b2da      	uxtb	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fe87 	bl	8006d44 <USB_EPStartXfer>

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	460b      	mov	r3, r1
 800307c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2201      	movs	r2, #1
 80030b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fe39 	bl	8006d44 <USB_EPStartXfer>

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d901      	bls.n	80030fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e04c      	b.n	8003194 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da0e      	bge.n	8003120 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	705a      	strb	r2, [r3, #1]
 800311e:	e00c      	b.n	800313a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_PCD_EP_SetStall+0x7e>
 8003156:	2302      	movs	r3, #2
 8003158:	e01c      	b.n	8003194 <HAL_PCD_EP_SetStall+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f005 f99c 	bl	80084a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f005 fac1 	bl	800870c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d901      	bls.n	80031ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e040      	b.n	800323c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da0e      	bge.n	80031e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	705a      	strb	r2, [r3, #1]
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 0207 	and.w	r2, r3, #7
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_EP_ClrStall+0x82>
 800321a:	2302      	movs	r3, #2
 800321c:	e00e      	b.n	800323c <HAL_PCD_EP_ClrStall+0xa0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 f98a 	bl	8008546 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b096      	sub	sp, #88	@ 0x58
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800324c:	e3be      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003256:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800325a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003268:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8178 	bne.w	8003562 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	d151      	bne.n	8003322 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	81fb      	strh	r3, [r7, #14]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800329a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3328      	adds	r3, #40	@ 0x28
 80032a6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	3302      	adds	r3, #2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	441a      	add	r2, r3
 80032de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f007 f8b0 	bl	800a44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 836a 	beq.w	80039cc <PCD_EP_ISR_Handler+0x788>
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 8365 	bne.w	80039cc <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003320:	e354      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003328:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003334:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d034      	beq.n	80033aa <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	3306      	adds	r3, #6
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800337e:	b29b      	uxth	r3, r3
 8003380:	f005 fa14 	bl	80087ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29a      	uxth	r2, r3
 800338c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003390:	4013      	ands	r3, r2
 8003392:	823b      	strh	r3, [r7, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	8a3a      	ldrh	r2, [r7, #16]
 800339a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f007 f824 	bl	800a3f0 <HAL_PCD_SetupStageCallback>
 80033a8:	e310      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f280 830c 	bge.w	80039cc <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033c0:	4013      	ands	r3, r2
 80033c2:	83fb      	strh	r3, [r7, #30]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	8bfa      	ldrh	r2, [r7, #30]
 80033ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ce:	b292      	uxth	r2, r2
 80033d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	3306      	adds	r3, #6
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d019      	beq.n	800343a <PCD_EP_ISR_Handler+0x1f6>
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d015      	beq.n	800343a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	6959      	ldr	r1, [r3, #20]
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800341e:	b29b      	uxth	r3, r3
 8003420:	f005 f9c4 	bl	80087ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	441a      	add	r2, r3
 800342e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003430:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003432:	2100      	movs	r1, #0
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f006 ffed 	bl	800a414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 82bd 	bne.w	80039cc <PCD_EP_ISR_Handler+0x788>
 8003452:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003456:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800345a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800345e:	f000 82b5 	beq.w	80039cc <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348c:	b29a      	uxth	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b3e      	cmp	r3, #62	@ 0x3e
 8003498:	d91d      	bls.n	80034d6 <PCD_EP_ISR_Handler+0x292>
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <PCD_EP_ISR_Handler+0x270>
 80034ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b0:	3b01      	subs	r3, #1
 80034b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034bc:	b29b      	uxth	r3, r3
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	e026      	b.n	8003524 <PCD_EP_ISR_Handler+0x2e0>
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <PCD_EP_ISR_Handler+0x2b0>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e017      	b.n	8003524 <PCD_EP_ISR_Handler+0x2e0>
 80034f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <PCD_EP_ISR_Handler+0x2ca>
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	3301      	adds	r3, #1
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003516:	b29b      	uxth	r3, r3
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	b29b      	uxth	r3, r3
 800351c:	4313      	orrs	r3, r2
 800351e:	b29a      	uxth	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003534:	827b      	strh	r3, [r7, #18]
 8003536:	8a7b      	ldrh	r3, [r7, #18]
 8003538:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800353c:	827b      	strh	r3, [r7, #18]
 800353e:	8a7b      	ldrh	r3, [r7, #18]
 8003540:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003544:	827b      	strh	r3, [r7, #18]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	8a7b      	ldrh	r3, [r7, #18]
 800354c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355c:	b29b      	uxth	r3, r3
 800355e:	8013      	strh	r3, [r2, #0]
 8003560:	e234      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003576:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800357a:	2b00      	cmp	r3, #0
 800357c:	f280 80fc 	bge.w	8003778 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003596:	4013      	ands	r3, r2
 8003598:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80035ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035b2:	b292      	uxth	r2, r2
 80035b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035b6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	7b1b      	ldrb	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d125      	bne.n	8003620 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	3306      	adds	r3, #6
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003600:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8092 	beq.w	800372e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	6959      	ldr	r1, [r3, #20]
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	88da      	ldrh	r2, [r3, #6]
 8003616:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800361a:	f005 f8c7 	bl	80087ac <USB_ReadPMA>
 800361e:	e086      	b.n	800372e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d10a      	bne.n	800363e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800362c:	461a      	mov	r2, r3
 800362e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f9d9 	bl	80039e8 <HAL_PCD_EP_DB_Receive>
 8003636:	4603      	mov	r3, r0
 8003638:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800363c:	e077      	b.n	800372e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003658:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800366e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800367e:	b29b      	uxth	r3, r3
 8003680:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d024      	beq.n	80036e6 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	3302      	adds	r3, #2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80036c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02e      	beq.n	800372e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d6:	6959      	ldr	r1, [r3, #20]
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	891a      	ldrh	r2, [r3, #8]
 80036dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036e0:	f005 f864 	bl	80087ac <USB_ReadPMA>
 80036e4:	e023      	b.n	800372e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	3306      	adds	r3, #6
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003712:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003724:	895a      	ldrh	r2, [r3, #10]
 8003726:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800372a:	f005 f83f 	bl	80087ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800372e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003736:	441a      	add	r2, r3
 8003738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800373c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003744:	441a      	add	r2, r3
 8003746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003748:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <PCD_EP_ISR_Handler+0x51a>
 8003752:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	d206      	bcs.n	800376c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f006 fe55 	bl	800a414 <HAL_PCD_DataOutStageCallback>
 800376a:	e005      	b.n	8003778 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fae6 	bl	8006d44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800377c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8123 	beq.w	80039cc <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003786:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80037ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80a2 	bne.w	8003924 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80037e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e8:	7b1b      	ldrb	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8093 	beq.w	8003916 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d046      	beq.n	800388a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d126      	bne.n	8003852 <PCD_EP_ISR_Handler+0x60e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	4413      	add	r3, r2
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	011a      	lsls	r2, r3, #4
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	4413      	add	r3, r2
 8003826:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003836:	b29a      	uxth	r2, r3
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384a:	b29a      	uxth	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e061      	b.n	8003916 <PCD_EP_ISR_Handler+0x6d2>
 8003852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d15d      	bne.n	8003916 <PCD_EP_ISR_Handler+0x6d2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	4413      	add	r3, r2
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	011a      	lsls	r2, r3, #4
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	4413      	add	r3, r2
 800387c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e045      	b.n	8003916 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d126      	bne.n	80038e6 <PCD_EP_ISR_Handler+0x6a2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ac:	4413      	add	r3, r2
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038de:	b29a      	uxth	r2, r3
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e017      	b.n	8003916 <PCD_EP_ISR_Handler+0x6d2>
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d113      	bne.n	8003916 <PCD_EP_ISR_Handler+0x6d2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fc:	4413      	add	r3, r2
 80038fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	011a      	lsls	r2, r3, #4
 8003906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003908:	4413      	add	r3, r2
 800390a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800390e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f006 fd94 	bl	800a44a <HAL_PCD_DataInStageCallback>
 8003922:	e053      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d146      	bne.n	80039be <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	3302      	adds	r3, #2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003958:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003964:	429a      	cmp	r2, r3
 8003966:	d907      	bls.n	8003978 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	619a      	str	r2, [r3, #24]
 8003976:	e002      	b.n	800397e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f006 fd5c 	bl	800a44a <HAL_PCD_DataInStageCallback>
 8003992:	e01b      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800399c:	441a      	add	r2, r3
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039aa:	441a      	add	r2, r3
 80039ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 f9c4 	bl	8006d44 <USB_EPStartXfer>
 80039bc:	e006      	b.n	80039cc <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039c2:	461a      	mov	r2, r3
 80039c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f91b 	bl	8003c02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f6ff ac38 	blt.w	800324e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3758      	adds	r7, #88	@ 0x58
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d07e      	beq.n	8003afe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	3302      	adds	r3, #2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	8b7b      	ldrh	r3, [r7, #26]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d306      	bcc.n	8003a42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	8b7b      	ldrh	r3, [r7, #26]
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	619a      	str	r2, [r3, #24]
 8003a40:	e002      	b.n	8003a48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d123      	bne.n	8003a98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	833b      	strh	r3, [r7, #24]
 8003a6c:	8b3b      	ldrh	r3, [r7, #24]
 8003a6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a72:	833b      	strh	r3, [r7, #24]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	8b3b      	ldrh	r3, [r7, #24]
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01f      	beq.n	8003ae2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abc:	82fb      	strh	r3, [r7, #22]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	8afb      	ldrh	r3, [r7, #22]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ada:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ae2:	8b7b      	ldrh	r3, [r7, #26]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8087 	beq.w	8003bf8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	891a      	ldrh	r2, [r3, #8]
 8003af6:	8b7b      	ldrh	r3, [r7, #26]
 8003af8:	f004 fe58 	bl	80087ac <USB_ReadPMA>
 8003afc:	e07c      	b.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	3306      	adds	r3, #6
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	8b7b      	ldrh	r3, [r7, #26]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d306      	bcc.n	8003b40 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	8b7b      	ldrh	r3, [r7, #26]
 8003b38:	1ad2      	subs	r2, r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	619a      	str	r2, [r3, #24]
 8003b3e:	e002      	b.n	8003b46 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d123      	bne.n	8003b96 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b68:	83fb      	strh	r3, [r7, #30]
 8003b6a:	8bfb      	ldrh	r3, [r7, #30]
 8003b6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b70:	83fb      	strh	r3, [r7, #30]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11f      	bne.n	8003be0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bba:	83bb      	strh	r3, [r7, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	8bbb      	ldrh	r3, [r7, #28]
 8003bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003be0:	8b7b      	ldrh	r3, [r7, #26]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	895a      	ldrh	r2, [r3, #10]
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	f004 fdda 	bl	80087ac <USB_ReadPMA>
    }
  }

  return count;
 8003bf8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b0a4      	sub	sp, #144	@ 0x90
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 81dd 	beq.w	8003fd6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3302      	adds	r3, #2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c44:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d907      	bls.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	619a      	str	r2, [r3, #24]
 8003c62:	e002      	b.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 80b9 	bne.w	8003de6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d126      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	4413      	add	r3, r2
 8003c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	011a      	lsls	r2, r3, #4
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e01a      	b.n	8003d00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d116      	bne.n	8003d00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	4413      	add	r3, r2
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	011a      	lsls	r2, r3, #4
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	785b      	ldrb	r3, [r3, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d126      	bne.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	011a      	lsls	r2, r3, #4
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	e017      	b.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d113      	bne.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	4413      	add	r3, r2
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	011a      	lsls	r2, r3, #4
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	4413      	add	r3, r2
 8003d80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f006 fb59 	bl	800a44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 82fc 	beq.w	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	82fb      	strh	r3, [r7, #22]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	8afb      	ldrh	r3, [r7, #22]
 8003dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
 8003de4:	e2da      	b.n	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f040 82ae 	bne.w	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e48:	441a      	add	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e56:	441a      	add	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d30b      	bcc.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e78:	1ad2      	subs	r2, r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	621a      	str	r2, [r3, #32]
 8003e7e:	e017      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e98:	e00a      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d165      	bne.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x382>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	4413      	add	r3, r2
 8003ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	011a      	lsls	r2, r3, #4
 8003ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ef6:	d91d      	bls.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x332>
 8003ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x310>
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	e044      	b.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x350>
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e035      	b.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f68:	3301      	adds	r3, #1
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	029b      	lsls	r3, r3, #10
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e01c      	b.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d118      	bne.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa0:	4413      	add	r3, r2
 8003fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	011a      	lsls	r2, r3, #4
 8003faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fac:	4413      	add	r3, r2
 8003fae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6959      	ldr	r1, [r3, #20]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	891a      	ldrh	r2, [r3, #8]
 8003fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f004 fba7 	bl	8008722 <USB_WritePMA>
 8003fd4:	e1e2      	b.n	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3306      	adds	r3, #6
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800400a:	429a      	cmp	r2, r3
 800400c:	d307      	bcc.n	800401e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	619a      	str	r2, [r3, #24]
 800401c:	e002      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 80c0 	bne.w	80041ae <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d126      	bne.n	8004084 <HAL_PCD_EP_DB_Transmit+0x482>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800404a:	4413      	add	r3, r2
 800404c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	011a      	lsls	r2, r3, #4
 8004054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004056:	4413      	add	r3, r2
 8004058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800405c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800405e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004068:	b29a      	uxth	r2, r3
 800406a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407c:	b29a      	uxth	r2, r3
 800407e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e01a      	b.n	80040ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d116      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	667b      	str	r3, [r7, #100]	@ 0x64
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a0:	4413      	add	r3, r2
 80040a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	011a      	lsls	r2, r3, #4
 80040aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b6:	2200      	movs	r2, #0
 80040b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	677b      	str	r3, [r7, #116]	@ 0x74
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d12b      	bne.n	8004120 <HAL_PCD_EP_DB_Transmit+0x51e>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040dc:	4413      	add	r3, r2
 80040de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004116:	b29a      	uxth	r2, r3
 8004118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	e017      	b.n	8004150 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d113      	bne.n	8004150 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004136:	4413      	add	r3, r2
 8004138:	677b      	str	r3, [r7, #116]	@ 0x74
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004142:	4413      	add	r3, r2
 8004144:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004148:	673b      	str	r3, [r7, #112]	@ 0x70
 800414a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800414c:	2200      	movs	r2, #0
 800414e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f006 f977 	bl	800a44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 811a 	bne.w	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800417e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004182:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
 80041ac:	e0f6      	b.n	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d121      	bne.n	80041fc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004202:	2b01      	cmp	r3, #1
 8004204:	f040 80ca 	bne.w	800439c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004210:	441a      	add	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800421e:	441a      	add	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	429a      	cmp	r2, r3
 800422e:	d30b      	bcc.n	8004248 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	621a      	str	r2, [r3, #32]
 8004246:	e017      	b.n	8004278 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004250:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004260:	e00a      	b.n	8004278 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	657b      	str	r3, [r7, #84]	@ 0x54
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d165      	bne.n	8004352 <HAL_PCD_EP_DB_Transmit+0x750>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429a:	4413      	add	r3, r2
 800429c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011a      	lsls	r2, r3, #4
 80042a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042c4:	d91d      	bls.n	8004302 <HAL_PCD_EP_DB_Transmit+0x700>
 80042c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80042da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042dc:	3b01      	subs	r3, #1
 80042de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	e041      	b.n	8004386 <HAL_PCD_EP_DB_Transmit+0x784>
 8004302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_PCD_EP_DB_Transmit+0x71e>
 800430a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004318:	b29a      	uxth	r2, r3
 800431a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	e032      	b.n	8004386 <HAL_PCD_EP_DB_Transmit+0x784>
 8004320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_PCD_EP_DB_Transmit+0x738>
 8004334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004336:	3301      	adds	r3, #1
 8004338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800433a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004342:	b29b      	uxth	r3, r3
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	b29b      	uxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e019      	b.n	8004386 <HAL_PCD_EP_DB_Transmit+0x784>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d115      	bne.n	8004386 <HAL_PCD_EP_DB_Transmit+0x784>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	4413      	add	r3, r2
 800436a:	657b      	str	r3, [r7, #84]	@ 0x54
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	011a      	lsls	r2, r3, #4
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	4413      	add	r3, r2
 8004376:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800437a:	653b      	str	r3, [r7, #80]	@ 0x50
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004380:	b29a      	uxth	r2, r3
 8004382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004384:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6959      	ldr	r1, [r3, #20]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	895a      	ldrh	r2, [r3, #10]
 8004392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004396:	b29b      	uxth	r3, r3
 8004398:	f004 f9c3 	bl	8008722 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b6:	82bb      	strh	r3, [r7, #20]
 80043b8:	8abb      	ldrh	r3, [r7, #20]
 80043ba:	f083 0310 	eor.w	r3, r3, #16
 80043be:	82bb      	strh	r3, [r7, #20]
 80043c0:	8abb      	ldrh	r3, [r7, #20]
 80043c2:	f083 0320 	eor.w	r3, r3, #32
 80043c6:	82bb      	strh	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	8abb      	ldrh	r3, [r7, #20]
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3790      	adds	r7, #144	@ 0x90
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	817b      	strh	r3, [r7, #10]
 8004404:	4613      	mov	r3, r2
 8004406:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004414:	897b      	ldrh	r3, [r7, #10]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e009      	b.n	8004440 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800442c:	897a      	ldrh	r2, [r7, #10]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004440:	893b      	ldrh	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2200      	movs	r2, #0
 800444a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	b29a      	uxth	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	80da      	strh	r2, [r3, #6]
 8004454:	e00b      	b.n	800446e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2201      	movs	r2, #1
 800445a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	b29a      	uxth	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	b29a      	uxth	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e272      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8087 	beq.w	80045aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800449c:	4b92      	ldr	r3, [pc, #584]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00c      	beq.n	80044c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044a8:	4b8f      	ldr	r3, [pc, #572]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d112      	bne.n	80044da <HAL_RCC_OscConfig+0x5e>
 80044b4:	4b8c      	ldr	r3, [pc, #560]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d10b      	bne.n	80044da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c2:	4b89      	ldr	r3, [pc, #548]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d06c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x12c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d168      	bne.n	80045a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e24c      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x76>
 80044e4:	4b80      	ldr	r3, [pc, #512]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a7f      	ldr	r2, [pc, #508]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e02e      	b.n	8004550 <HAL_RCC_OscConfig+0xd4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x98>
 80044fa:	4b7b      	ldr	r3, [pc, #492]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7a      	ldr	r2, [pc, #488]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b78      	ldr	r3, [pc, #480]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a77      	ldr	r2, [pc, #476]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800450c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e01d      	b.n	8004550 <HAL_RCC_OscConfig+0xd4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0xbc>
 800451e:	4b72      	ldr	r3, [pc, #456]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a71      	ldr	r2, [pc, #452]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6e      	ldr	r2, [pc, #440]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0xd4>
 8004538:	4b6b      	ldr	r3, [pc, #428]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a6a      	ldr	r2, [pc, #424]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b68      	ldr	r3, [pc, #416]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a67      	ldr	r2, [pc, #412]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fc ff88 	bl	800146c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fc ff84 	bl	800146c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e200      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b5d      	ldr	r3, [pc, #372]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0xe4>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fc ff74 	bl	800146c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fc ff70 	bl	800146c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1ec      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	4b53      	ldr	r3, [pc, #332]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x10c>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b6:	4b4c      	ldr	r3, [pc, #304]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045c2:	4b49      	ldr	r3, [pc, #292]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x18c>
 80045ce:	4b46      	ldr	r3, [pc, #280]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x176>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1c0      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b3d      	ldr	r3, [pc, #244]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4939      	ldr	r1, [pc, #228]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCC_OscConfig+0x270>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fc ff29 	bl	800146c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fc ff25 	bl	800146c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1a1      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b2d      	ldr	r3, [pc, #180]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b2a      	ldr	r3, [pc, #168]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4927      	ldr	r1, [pc, #156]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b26      	ldr	r3, [pc, #152]	@ (80046ec <HAL_RCC_OscConfig+0x270>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fc ff08 	bl	800146c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004660:	f7fc ff04 	bl	800146c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e180      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b1d      	ldr	r3, [pc, #116]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03a      	beq.n	8004700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d019      	beq.n	80046c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b17      	ldr	r3, [pc, #92]	@ (80046f0 <HAL_RCC_OscConfig+0x274>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fc fee8 	bl	800146c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fc fee4 	bl	800146c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e160      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046be:	2001      	movs	r0, #1
 80046c0:	f000 face 	bl	8004c60 <RCC_Delay>
 80046c4:	e01c      	b.n	8004700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c6:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <HAL_RCC_OscConfig+0x274>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fc fece 	bl	800146c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d2:	e00f      	b.n	80046f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fc feca 	bl	800146c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d908      	bls.n	80046f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e146      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	42420000 	.word	0x42420000
 80046f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	4b92      	ldr	r3, [pc, #584]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e9      	bne.n	80046d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a6 	beq.w	800485a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b8b      	ldr	r3, [pc, #556]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	4b88      	ldr	r3, [pc, #544]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4a87      	ldr	r2, [pc, #540]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004728:	61d3      	str	r3, [r2, #28]
 800472a:	4b85      	ldr	r3, [pc, #532]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b82      	ldr	r3, [pc, #520]	@ (8004944 <HAL_RCC_OscConfig+0x4c8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d118      	bne.n	8004778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004746:	4b7f      	ldr	r3, [pc, #508]	@ (8004944 <HAL_RCC_OscConfig+0x4c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7e      	ldr	r2, [pc, #504]	@ (8004944 <HAL_RCC_OscConfig+0x4c8>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fc fe8b 	bl	800146c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fc fe87 	bl	800146c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	@ 0x64
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e103      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b75      	ldr	r3, [pc, #468]	@ (8004944 <HAL_RCC_OscConfig+0x4c8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x312>
 8004780:	4b6f      	ldr	r3, [pc, #444]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6213      	str	r3, [r2, #32]
 800478c:	e02d      	b.n	80047ea <HAL_RCC_OscConfig+0x36e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x334>
 8004796:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4a69      	ldr	r2, [pc, #420]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	6213      	str	r3, [r2, #32]
 80047a2:	4b67      	ldr	r3, [pc, #412]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a66      	ldr	r2, [pc, #408]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	6213      	str	r3, [r2, #32]
 80047ae:	e01c      	b.n	80047ea <HAL_RCC_OscConfig+0x36e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCC_OscConfig+0x356>
 80047b8:	4b61      	ldr	r3, [pc, #388]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4a60      	ldr	r2, [pc, #384]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047be:	f043 0304 	orr.w	r3, r3, #4
 80047c2:	6213      	str	r3, [r2, #32]
 80047c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	e00b      	b.n	80047ea <HAL_RCC_OscConfig+0x36e>
 80047d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4a5a      	ldr	r2, [pc, #360]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6213      	str	r3, [r2, #32]
 80047de:	4b58      	ldr	r3, [pc, #352]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a57      	ldr	r2, [pc, #348]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d015      	beq.n	800481e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7fc fe3b 	bl	800146c <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fc fe37 	bl	800146c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e0b1      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	4b4b      	ldr	r3, [pc, #300]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ee      	beq.n	80047fa <HAL_RCC_OscConfig+0x37e>
 800481c:	e014      	b.n	8004848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fc fe25 	bl	800146c <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fc fe21 	bl	800146c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e09b      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483c:	4b40      	ldr	r3, [pc, #256]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ee      	bne.n	8004826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a3b      	ldr	r2, [pc, #236]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8087 	beq.w	8004972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b08      	cmp	r3, #8
 800486e:	d061      	beq.n	8004934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d146      	bne.n	8004906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004878:	4b33      	ldr	r3, [pc, #204]	@ (8004948 <HAL_RCC_OscConfig+0x4cc>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fc fdf5 	bl	800146c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004886:	f7fc fdf1 	bl	800146c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e06d      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004898:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d108      	bne.n	80048c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ae:	4b24      	ldr	r3, [pc, #144]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4921      	ldr	r1, [pc, #132]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a19      	ldr	r1, [r3, #32]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	430b      	orrs	r3, r1
 80048d2:	491b      	ldr	r1, [pc, #108]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x4cc>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fc fdc5 	bl	800146c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fc fdc1 	bl	800146c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e03d      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x46a>
 8004904:	e035      	b.n	8004972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_RCC_OscConfig+0x4cc>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fc fdae 	bl	800146c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fc fdaa 	bl	800146c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e026      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004926:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x498>
 8004932:	e01e      	b.n	8004972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e019      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_RCC_OscConfig+0x500>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	429a      	cmp	r2, r3
 800495e:	d106      	bne.n	800496e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000

08004980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0d0      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b6a      	ldr	r3, [pc, #424]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d910      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b67      	ldr	r3, [pc, #412]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 0207 	bic.w	r2, r3, #7
 80049aa:	4965      	ldr	r1, [pc, #404]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a58      	ldr	r2, [pc, #352]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a52      	ldr	r2, [pc, #328]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d040      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d115      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b41      	ldr	r3, [pc, #260]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e073      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06b      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4936      	ldr	r1, [pc, #216]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a70:	f7fc fcfc 	bl	800146c <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fc fcf8 	bl	800146c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e053      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 020c 	and.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1eb      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b27      	ldr	r3, [pc, #156]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d210      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b24      	ldr	r3, [pc, #144]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
 8004ab6:	4922      	ldr	r1, [pc, #136]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004afa:	4b12      	ldr	r3, [pc, #72]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f821 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	490a      	ldr	r1, [pc, #40]	@ (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	@ (8004b4c <HAL_RCC_ClockConfig+0x1cc>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <HAL_RCC_ClockConfig+0x1d0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc fc5a 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800a9b0 	.word	0x0800a9b0
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	20000004 	.word	0x20000004

08004b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x30>
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x36>
 8004b82:	e027      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b84:	4b19      	ldr	r3, [pc, #100]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x98>)
 8004b86:	613b      	str	r3, [r7, #16]
      break;
 8004b88:	e027      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0c9b      	lsrs	r3, r3, #18
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ba2:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0c5b      	lsrs	r3, r3, #17
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	4a11      	ldr	r2, [pc, #68]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x98>)
 8004bb6:	fb03 f202 	mul.w	r2, r3, r2
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e004      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	613b      	str	r3, [r7, #16]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x98>)
 8004bd6:	613b      	str	r3, [r7, #16]
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	693b      	ldr	r3, [r7, #16]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	007a1200 	.word	0x007a1200
 8004bf0:	0800a9c8 	.word	0x0800a9c8
 8004bf4:	0800a9d8 	.word	0x0800a9d8
 8004bf8:	003d0900 	.word	0x003d0900

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b02      	ldr	r3, [pc, #8]	@ (8004c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	20000000 	.word	0x20000000

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff2 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800a9c0 	.word	0x0800a9c0

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c3c:	f7ff ffde 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	@ (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800a9c0 	.word	0x0800a9c0

08004c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <RCC_Delay+0x34>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c98 <RCC_Delay+0x38>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c7c:	bf00      	nop
  }
  while (Delay --);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	60fa      	str	r2, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f9      	bne.n	8004c7c <RCC_Delay+0x1c>
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	20000000 	.word	0x20000000
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d07d      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	61d3      	str	r3, [r2, #28]
 8004cd4:	4b49      	ldr	r3, [pc, #292]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce4:	4b46      	ldr	r3, [pc, #280]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf0:	4b43      	ldr	r3, [pc, #268]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a42      	ldr	r2, [pc, #264]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfc:	f7fc fbb6 	bl	800146c <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	e008      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d04:	f7fc fbb2 	bl	800146c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e06d      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	4b3a      	ldr	r3, [pc, #232]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d22:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d027      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d40:	4b2e      	ldr	r3, [pc, #184]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d50:	4b2c      	ldr	r3, [pc, #176]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d56:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d014      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fc fb81 	bl	800146c <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fc fb7d 	bl	800146c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e036      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	4b1d      	ldr	r3, [pc, #116]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ee      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d90:	4b1a      	ldr	r3, [pc, #104]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4917      	ldr	r1, [pc, #92]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da8:	4b14      	ldr	r3, [pc, #80]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	490b      	ldr	r1, [pc, #44]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4904      	ldr	r1, [pc, #16]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42420440 	.word	0x42420440

08004e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e041      	b.n	8004e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc f9b6 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fa74 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e03a      	b.n	8004f36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <HAL_TIM_Base_Start_IT+0x98>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x58>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eea:	d009      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x58>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x58>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a13      	ldr	r2, [pc, #76]	@ (8004f48 <HAL_TIM_Base_Start_IT+0xa0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d111      	bne.n	8004f24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d010      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	e007      	b.n	8004f34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0202 	mvn.w	r2, #2
 8004f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9b4 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9a7 	bl	80052ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f9b6 	bl	800530e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f98a 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f97d 	bl	80052ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f98c 	bl	800530e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0208 	mvn.w	r2, #8
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f960 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f953 	bl	80052ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f962 	bl	800530e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b10      	cmp	r3, #16
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0210 	mvn.w	r2, #16
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2208      	movs	r2, #8
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f936 	bl	80052fc <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f929 	bl	80052ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f938 	bl	800530e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0201 	mvn.w	r2, #1
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb f86c 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050da:	2b80      	cmp	r3, #128	@ 0x80
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e8:	2b80      	cmp	r3, #128	@ 0x80
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa7b 	bl	80055f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8fc 	bl	8005320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0220 	mvn.w	r2, #32
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa46 	bl	80055e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIM_ConfigClockSource+0x1c>
 8005174:	2302      	movs	r3, #2
 8005176:	e0b4      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x186>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800519e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b0:	d03e      	beq.n	8005230 <HAL_TIM_ConfigClockSource+0xd4>
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b6:	f200 8087 	bhi.w	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051be:	f000 8086 	beq.w	80052ce <HAL_TIM_ConfigClockSource+0x172>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d87f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b70      	cmp	r3, #112	@ 0x70
 80051ca:	d01a      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xa6>
 80051cc:	2b70      	cmp	r3, #112	@ 0x70
 80051ce:	d87b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b60      	cmp	r3, #96	@ 0x60
 80051d2:	d050      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x11a>
 80051d4:	2b60      	cmp	r3, #96	@ 0x60
 80051d6:	d877      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b50      	cmp	r3, #80	@ 0x50
 80051da:	d03c      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0xfa>
 80051dc:	2b50      	cmp	r3, #80	@ 0x50
 80051de:	d873      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	d058      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x13a>
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	d86f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b30      	cmp	r3, #48	@ 0x30
 80051ea:	d064      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15a>
 80051ec:	2b30      	cmp	r3, #48	@ 0x30
 80051ee:	d86b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d060      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15a>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d867      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d05a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	e062      	b.n	80052c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005212:	f000 f968 	bl	80054e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	609a      	str	r2, [r3, #8]
      break;
 800522e:	e04f      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005240:	f000 f951 	bl	80054e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005252:	609a      	str	r2, [r3, #8]
      break;
 8005254:	e03c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005262:	461a      	mov	r2, r3
 8005264:	f000 f8c8 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2150      	movs	r1, #80	@ 0x50
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f91f 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8005274:	e02c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005282:	461a      	mov	r2, r3
 8005284:	f000 f8e6 	bl	8005454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2160      	movs	r1, #96	@ 0x60
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f90f 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8005294:	e01c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 f8a8 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2140      	movs	r1, #64	@ 0x40
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f8ff 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80052b4:	e00c      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f000 f8f6 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80052c6:	e003      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
      break;
 80052cc:	e000      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
	...

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a29      	ldr	r2, [pc, #164]	@ (80053ec <TIM_Base_SetConfig+0xb8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <TIM_Base_SetConfig+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a25      	ldr	r2, [pc, #148]	@ (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <TIM_Base_SetConfig+0xb8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <TIM_Base_SetConfig+0xbc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a07      	ldr	r2, [pc, #28]	@ (80053ec <TIM_Base_SetConfig+0xb8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0210 	bic.w	r2, r3, #16
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	021a      	lsls	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	431a      	orrs	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e046      	b.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d009      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10c      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800

080055e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e042      	b.n	800569c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb fdf2 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	@ 0x24
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fcd5 	bl	8005ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d112      	bne.n	80056e4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Receive_IT+0x26>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00b      	b.n	80056e6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	461a      	mov	r2, r3
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fab7 	bl	8005c4e <UART_Start_Receive_IT>
 80056e0:	4603      	mov	r3, r0
 80056e2:	e000      	b.n	80056e6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b0ba      	sub	sp, #232	@ 0xe8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800571c:	2300      	movs	r3, #0
 800571e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800572e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_UART_IRQHandler+0x66>
 8005742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fb93 	bl	8005e7a <UART_Receive_IT>
      return;
 8005754:	e25b      	b.n	8005c0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80de 	beq.w	800591c <HAL_UART_IRQHandler+0x22c>
 8005760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005770:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80d1 	beq.w	800591c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_UART_IRQHandler+0xae>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	f043 0201 	orr.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_UART_IRQHandler+0xd2>
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f043 0202 	orr.w	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <HAL_UART_IRQHandler+0xf6>
 80057ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d011      	beq.n	8005816 <HAL_UART_IRQHandler+0x126>
 80057f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d105      	bne.n	800580a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f043 0208 	orr.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 81f2 	beq.w	8005c04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_UART_IRQHandler+0x14e>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fb1e 	bl	8005e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <HAL_UART_IRQHandler+0x17a>
 8005862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d04f      	beq.n	800590a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa28 	bl	8005cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d041      	beq.n	8005902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3314      	adds	r3, #20
 8005884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800589c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3314      	adds	r3, #20
 80058a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1d9      	bne.n	800587e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d013      	beq.n	80058fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ad0 <HAL_UART_IRQHandler+0x3e0>)
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fbb8 	bl	8002054 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e00e      	b.n	8005918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f993 	bl	8005c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e00a      	b.n	8005918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f98f 	bl	8005c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f98b 	bl	8005c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005916:	e175      	b.n	8005c04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	bf00      	nop
    return;
 800591a:	e173      	b.n	8005c04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	f040 814f 	bne.w	8005bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8148 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8141 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80b6 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8145 	beq.w	8005c08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005986:	429a      	cmp	r2, r3
 8005988:	f080 813e 	bcs.w	8005c08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005992:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b20      	cmp	r3, #32
 800599c:	f000 8088 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1d9      	bne.n	80059a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3314      	adds	r3, #20
 80059f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a10:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a14:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e1      	bne.n	80059ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e3      	bne.n	8005a28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a80:	f023 0310 	bic.w	r3, r3, #16
 8005a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e3      	bne.n	8005a6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fc fa96 	bl	8001fdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8b6 	bl	8005c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005acc:	e09c      	b.n	8005c08 <HAL_UART_IRQHandler+0x518>
 8005ace:	bf00      	nop
 8005ad0:	08005d85 	.word	0x08005d85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 808e 	beq.w	8005c0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8089 	beq.w	8005c0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	330c      	adds	r3, #12
 8005b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e3      	bne.n	8005afa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	623b      	str	r3, [r7, #32]
   return(result);
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3314      	adds	r3, #20
 8005b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e3      	bne.n	8005b32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b9c:	61fa      	str	r2, [r7, #28]
 8005b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e3      	bne.n	8005b78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f83b 	bl	8005c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc2:	e023      	b.n	8005c0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_UART_IRQHandler+0x4f4>
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8e5 	bl	8005dac <UART_Transmit_IT>
    return;
 8005be2:	e014      	b.n	8005c0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <HAL_UART_IRQHandler+0x51e>
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f924 	bl	8005e4a <UART_EndTransmit_IT>
    return;
 8005c02:	e004      	b.n	8005c0e <HAL_UART_IRQHandler+0x51e>
    return;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c0c:	bf00      	nop
  }
}
 8005c0e:	37e8      	adds	r7, #232	@ 0xe8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2222      	movs	r2, #34	@ 0x22
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0220 	orr.w	r2, r2, #32
 8005cb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b095      	sub	sp, #84	@ 0x54
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ce8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3314      	adds	r3, #20
 8005d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d119      	bne.n	8005d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d58:	61ba      	str	r2, [r7, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	613b      	str	r3, [r7, #16]
   return(result);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d7a:	bf00      	nop
 8005d7c:	3754      	adds	r7, #84	@ 0x54
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ff41 	bl	8005c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b21      	cmp	r3, #33	@ 0x21
 8005dbe:	d13e      	bne.n	8005e3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc8:	d114      	bne.n	8005df4 <UART_Transmit_IT+0x48>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d110      	bne.n	8005df4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]
 8005df2:	e008      	b.n	8005e06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6211      	str	r1, [r2, #32]
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4619      	mov	r1, r3
 8005e14:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fed2 	bl	8005c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08c      	sub	sp, #48	@ 0x30
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b22      	cmp	r3, #34	@ 0x22
 8005e8c:	f040 80ae 	bne.w	8005fec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e98:	d117      	bne.n	8005eca <UART_Receive_IT+0x50>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d113      	bne.n	8005eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ec8:	e026      	b.n	8005f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005edc:	d007      	beq.n	8005eee <UART_Receive_IT+0x74>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <UART_Receive_IT+0x82>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e008      	b.n	8005f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4619      	mov	r1, r3
 8005f26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d15d      	bne.n	8005fe8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0220 	bic.w	r2, r2, #32
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d135      	bne.n	8005fde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	613b      	str	r3, [r7, #16]
   return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f98:	623a      	str	r2, [r7, #32]
 8005f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69f9      	ldr	r1, [r7, #28]
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d10a      	bne.n	8005fd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe2e 	bl	8005c38 <HAL_UARTEx_RxEventCallback>
 8005fdc:	e002      	b.n	8005fe4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fa f91c 	bl	800021c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e002      	b.n	8005fee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3730      	adds	r7, #48	@ 0x30
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006032:	f023 030c 	bic.w	r3, r3, #12
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	430b      	orrs	r3, r1
 800603e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2c      	ldr	r2, [pc, #176]	@ (800610c <UART_SetConfig+0x114>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006060:	f7fe fdea 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	e002      	b.n	800606e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe fdd2 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 800606c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009a      	lsls	r2, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	4a22      	ldr	r2, [pc, #136]	@ (8006110 <UART_SetConfig+0x118>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	0119      	lsls	r1, r3, #4
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009a      	lsls	r2, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <UART_SetConfig+0x118>)
 80060a6:	fba3 0302 	umull	r0, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	2064      	movs	r0, #100	@ 0x64
 80060ae:	fb00 f303 	mul.w	r3, r0, r3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	3332      	adds	r3, #50	@ 0x32
 80060b8:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <UART_SetConfig+0x118>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c4:	4419      	add	r1, r3
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009a      	lsls	r2, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <UART_SetConfig+0x118>)
 80060de:	fba3 0302 	umull	r0, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2064      	movs	r0, #100	@ 0x64
 80060e6:	fb00 f303 	mul.w	r3, r0, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	3332      	adds	r3, #50	@ 0x32
 80060f0:	4a07      	ldr	r2, [pc, #28]	@ (8006110 <UART_SetConfig+0x118>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	440a      	add	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40013800 	.word	0x40013800
 8006110:	51eb851f 	.word	0x51eb851f

08006114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006114:	b084      	sub	sp, #16
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	f107 0014 	add.w	r0, r7, #20
 8006122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr

08006134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006144:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006148:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006168:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800616c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	b29b      	uxth	r3, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	4013      	ands	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 0014 	add.w	r0, r7, #20
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	b004      	add	sp, #16
 80061ea:	4770      	bx	lr

080061ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b09d      	sub	sp, #116	@ 0x74
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800620e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006212:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	2b03      	cmp	r3, #3
 800621c:	d81f      	bhi.n	800625e <USB_ActivateEndpoint+0x72>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <USB_ActivateEndpoint+0x38>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006235 	.word	0x08006235
 8006228:	08006251 	.word	0x08006251
 800622c:	08006267 	.word	0x08006267
 8006230:	08006243 	.word	0x08006243
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006238:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800623c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006240:	e012      	b.n	8006268 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006242:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006246:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800624a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800624e:	e00b      	b.n	8006268 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006250:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006258:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800625c:	e004      	b.n	8006268 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006264:	e000      	b.n	8006268 <USB_ActivateEndpoint+0x7c>
      break;
 8006266:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	7b1b      	ldrb	r3, [r3, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 8178 	bne.w	80065c8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8084 	beq.w	80063ea <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	4413      	add	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	88db      	ldrh	r3, [r3, #6]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	827b      	strh	r3, [r7, #18]
 8006324:	8a7b      	ldrh	r3, [r7, #18]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01b      	beq.n	8006366 <USB_ActivateEndpoint+0x17a>
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006344:	823b      	strh	r3, [r7, #16]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	8a3b      	ldrh	r3, [r7, #16]
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	78db      	ldrb	r3, [r3, #3]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d020      	beq.n	80063b0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006384:	81bb      	strh	r3, [r7, #12]
 8006386:	89bb      	ldrh	r3, [r7, #12]
 8006388:	f083 0320 	eor.w	r3, r3, #32
 800638c:	81bb      	strh	r3, [r7, #12]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	89bb      	ldrh	r3, [r7, #12]
 800639a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]
 80063ae:	e2d5      	b.n	800695c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c6:	81fb      	strh	r3, [r7, #14]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	8013      	strh	r3, [r2, #0]
 80063e8:	e2b8      	b.n	800695c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	4413      	add	r3, r2
 80063fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	011a      	lsls	r2, r3, #4
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	4413      	add	r3, r2
 8006408:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	b29b      	uxth	r3, r3
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	4413      	add	r3, r2
 8006430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	011a      	lsls	r2, r3, #4
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	4413      	add	r3, r2
 800643c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b3e      	cmp	r3, #62	@ 0x3e
 8006458:	d91d      	bls.n	8006496 <USB_ActivateEndpoint+0x2aa>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <USB_ActivateEndpoint+0x288>
 800646e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006470:	3b01      	subs	r3, #1
 8006472:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29a      	uxth	r2, r3
 800647a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800647c:	b29b      	uxth	r3, r3
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	b29b      	uxth	r3, r3
 8006482:	4313      	orrs	r3, r2
 8006484:	b29b      	uxth	r3, r3
 8006486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648e:	b29a      	uxth	r2, r3
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	e026      	b.n	80064e4 <USB_ActivateEndpoint+0x2f8>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <USB_ActivateEndpoint+0x2c8>
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e017      	b.n	80064e4 <USB_ActivateEndpoint+0x2f8>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <USB_ActivateEndpoint+0x2e2>
 80064c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ca:	3301      	adds	r3, #1
 80064cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <USB_ActivateEndpoint+0x348>
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006512:	843b      	strh	r3, [r7, #32]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	8c3b      	ldrh	r3, [r7, #32]
 8006520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800652c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006530:	b29b      	uxth	r3, r3
 8006532:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d124      	bne.n	8006586 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	83bb      	strh	r3, [r7, #28]
 8006554:	8bbb      	ldrh	r3, [r7, #28]
 8006556:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800655a:	83bb      	strh	r3, [r7, #28]
 800655c:	8bbb      	ldrh	r3, [r7, #28]
 800655e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006562:	83bb      	strh	r3, [r7, #28]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	8bbb      	ldrh	r3, [r7, #28]
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
 8006584:	e1ea      	b.n	800695c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	83fb      	strh	r3, [r7, #30]
 800659e:	8bfb      	ldrh	r3, [r7, #30]
 80065a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065a4:	83fb      	strh	r3, [r7, #30]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	8bfb      	ldrh	r3, [r7, #30]
 80065b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	8013      	strh	r3, [r2, #0]
 80065c6:	e1c9      	b.n	800695c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d11e      	bne.n	800660e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006600:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]
 800660c:	e01d      	b.n	800664a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800665a:	4413      	add	r3, r2
 800665c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	011a      	lsls	r2, r3, #4
 8006664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006666:	4413      	add	r3, r2
 8006668:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	891b      	ldrh	r3, [r3, #8]
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	657b      	str	r3, [r7, #84]	@ 0x54
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	4413      	add	r3, r2
 8006690:	657b      	str	r3, [r7, #84]	@ 0x54
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	011a      	lsls	r2, r3, #4
 8006698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800669a:	4413      	add	r3, r2
 800669c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80066a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066b0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 8093 	bne.w	80067e2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80066cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01b      	beq.n	8006710 <USB_ActivateEndpoint+0x524>
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800671e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01b      	beq.n	8006760 <USB_ActivateEndpoint+0x574>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006758:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006778:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800677a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800677e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006780:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006782:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006786:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]
 80067e0:	e0bc      	b.n	800695c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01d      	beq.n	800683a <USB_ActivateEndpoint+0x64e>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006814:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800682e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800684a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01d      	beq.n	8006892 <USB_ActivateEndpoint+0x6a6>
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d024      	beq.n	80068e4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068b8:	f083 0320 	eor.w	r3, r3, #32
 80068bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]
 80068e2:	e01d      	b.n	8006920 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800695c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006960:	4618      	mov	r0, r3
 8006962:	3774      	adds	r7, #116	@ 0x74
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop

0800696c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800696c:	b480      	push	{r7}
 800696e:	b08d      	sub	sp, #52	@ 0x34
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	7b1b      	ldrb	r3, [r3, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 808e 	bne.w	8006a9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d044      	beq.n	8006a12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	81bb      	strh	r3, [r7, #12]
 8006996:	89bb      	ldrh	r3, [r7, #12]
 8006998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <USB_DeactivateEndpoint+0x6c>
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b6:	817b      	strh	r3, [r7, #10]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ee:	813b      	strh	r3, [r7, #8]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	893b      	ldrh	r3, [r7, #8]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]
 8006a10:	e192      	b.n	8006d38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	827b      	strh	r3, [r7, #18]
 8006a20:	8a7b      	ldrh	r3, [r7, #18]
 8006a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01b      	beq.n	8006a62 <USB_DeactivateEndpoint+0xf6>
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a40:	823b      	strh	r3, [r7, #16]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	8a3b      	ldrh	r3, [r7, #16]
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	81fb      	strh	r3, [r7, #14]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
 8006a9a:	e14d      	b.n	8006d38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 80a5 	bne.w	8006bf0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	843b      	strh	r3, [r7, #32]
 8006ab4:	8c3b      	ldrh	r3, [r7, #32]
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <USB_DeactivateEndpoint+0x18a>
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	83fb      	strh	r3, [r7, #30]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	8bfb      	ldrh	r3, [r7, #30]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	83bb      	strh	r3, [r7, #28]
 8006b04:	8bbb      	ldrh	r3, [r7, #28]
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01b      	beq.n	8006b46 <USB_DeactivateEndpoint+0x1da>
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b24:	837b      	strh	r3, [r7, #26]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	441a      	add	r2, r3
 8006b30:	8b7b      	ldrh	r3, [r7, #26]
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5c:	833b      	strh	r3, [r7, #24]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8b3b      	ldrh	r3, [r7, #24]
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b94:	82fb      	strh	r3, [r7, #22]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8afb      	ldrh	r3, [r7, #22]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bcc:	82bb      	strh	r3, [r7, #20]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8abb      	ldrh	r3, [r7, #20]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
 8006bee:	e0a3      	b.n	8006d38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006bfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <USB_DeactivateEndpoint+0x2d4>
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01b      	beq.n	8006c90 <USB_DeactivateEndpoint+0x324>
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3734      	adds	r7, #52	@ 0x34
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0c2      	sub	sp, #264	@ 0x108
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d52:	6018      	str	r0, [r3, #0]
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	f040 86b7 	bne.w	8007ade <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d908      	bls.n	8006d9e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d9c:	e007      	b.n	8006dae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	7b1b      	ldrb	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d13a      	bne.n	8006e34 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6959      	ldr	r1, [r3, #20]
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	88da      	ldrh	r2, [r3, #6]
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006de0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006de4:	6800      	ldr	r0, [r0, #0]
 8006de6:	f001 fc9c 	bl	8008722 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	011a      	lsls	r2, r3, #4
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	f000 be1f 	b.w	8007a72 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f040 8462 	bne.w	800770a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	f240 83df 	bls.w	8007622 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81c7 	beq.w	8007294 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d177      	bne.n	8007012 <USB_EPStartXfer+0x2ce>
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	4413      	add	r3, r2
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f74:	d921      	bls.n	8006fba <USB_EPStartXfer+0x276>
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <USB_EPStartXfer+0x252>
 8006f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f90:	3b01      	subs	r3, #1
 8006f92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e050      	b.n	800705c <USB_EPStartXfer+0x318>
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <USB_EPStartXfer+0x294>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e041      	b.n	800705c <USB_EPStartXfer+0x318>
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <USB_EPStartXfer+0x2b4>
 8006fee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007002:	b29b      	uxth	r3, r3
 8007004:	029b      	lsls	r3, r3, #10
 8007006:	b29b      	uxth	r3, r3
 8007008:	4313      	orrs	r3, r2
 800700a:	b29a      	uxth	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e024      	b.n	800705c <USB_EPStartXfer+0x318>
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d11c      	bne.n	800705c <USB_EPStartXfer+0x318>
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007030:	b29b      	uxth	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	4413      	add	r3, r2
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	011a      	lsls	r2, r3, #4
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	4413      	add	r3, r2
 800704c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	b29a      	uxth	r2, r3
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	895b      	ldrh	r3, [r3, #10]
 8007068:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6959      	ldr	r1, [r3, #20]
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	b29b      	uxth	r3, r3
 800707e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007082:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007086:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	f001 fb49 	bl	8008722 <USB_WritePMA>
            ep->xfer_buff += len;
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a0:	441a      	add	r2, r3
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6a1a      	ldr	r2, [r3, #32]
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d90f      	bls.n	80070ea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	621a      	str	r2, [r3, #32]
 80070e8:	e00e      	b.n	8007108 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d177      	bne.n	8007208 <USB_EPStartXfer+0x4c4>
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007132:	b29b      	uxth	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	4413      	add	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	011a      	lsls	r2, r3, #4
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	4413      	add	r3, r2
 800714e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	2b3e      	cmp	r3, #62	@ 0x3e
 800716a:	d921      	bls.n	80071b0 <USB_EPStartXfer+0x46c>
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <USB_EPStartXfer+0x448>
 8007182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007186:	3b01      	subs	r3, #1
 8007188:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007196:	b29b      	uxth	r3, r3
 8007198:	029b      	lsls	r3, r3, #10
 800719a:	b29b      	uxth	r3, r3
 800719c:	4313      	orrs	r3, r2
 800719e:	b29b      	uxth	r3, r3
 80071a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e056      	b.n	800725e <USB_EPStartXfer+0x51a>
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <USB_EPStartXfer+0x48a>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e047      	b.n	800725e <USB_EPStartXfer+0x51a>
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0x4aa>
 80071e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	029b      	lsls	r3, r3, #10
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4313      	orrs	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	e02a      	b.n	800725e <USB_EPStartXfer+0x51a>
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d122      	bne.n	800725e <USB_EPStartXfer+0x51a>
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	623b      	str	r3, [r7, #32]
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007232:	b29b      	uxth	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	4413      	add	r3, r2
 800723a:	623b      	str	r3, [r7, #32]
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	011a      	lsls	r2, r3, #4
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	4413      	add	r3, r2
 800724e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007258:	b29a      	uxth	r2, r3
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	891b      	ldrh	r3, [r3, #8]
 800726a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6959      	ldr	r1, [r3, #20]
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	b29b      	uxth	r3, r3
 8007280:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007284:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007288:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	f001 fa48 	bl	8008722 <USB_WritePMA>
 8007292:	e3ee      	b.n	8007a72 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d177      	bne.n	8007394 <USB_EPStartXfer+0x650>
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c4:	4413      	add	r3, r2
 80072c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	011a      	lsls	r2, r3, #4
 80072d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d8:	4413      	add	r3, r2
 80072da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072de:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072f6:	d921      	bls.n	800733c <USB_EPStartXfer+0x5f8>
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <USB_EPStartXfer+0x5d4>
 800730e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007312:	3b01      	subs	r3, #1
 8007314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29b      	uxth	r3, r3
 8007328:	4313      	orrs	r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	e056      	b.n	80073ea <USB_EPStartXfer+0x6a6>
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <USB_EPStartXfer+0x616>
 8007344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e047      	b.n	80073ea <USB_EPStartXfer+0x6a6>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0x636>
 8007370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800737a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007384:	b29b      	uxth	r3, r3
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	b29b      	uxth	r3, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e02a      	b.n	80073ea <USB_EPStartXfer+0x6a6>
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d122      	bne.n	80073ea <USB_EPStartXfer+0x6a6>
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c4:	4413      	add	r3, r2
 80073c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	011a      	lsls	r2, r3, #4
 80073d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	891b      	ldrh	r3, [r3, #8]
 80073f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6959      	ldr	r1, [r3, #20]
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	b29b      	uxth	r3, r3
 800740c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007410:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007414:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007418:	6800      	ldr	r0, [r0, #0]
 800741a:	f001 f982 	bl	8008722 <USB_WritePMA>
            ep->xfer_buff += len;
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742e:	441a      	add	r2, r3
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	429a      	cmp	r2, r3
 8007456:	d90f      	bls.n	8007478 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	621a      	str	r2, [r3, #32]
 8007476:	e00e      	b.n	8007496 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2200      	movs	r2, #0
 8007494:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d177      	bne.n	80075a2 <USB_EPStartXfer+0x85e>
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	4413      	add	r3, r2
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	011a      	lsls	r2, r3, #4
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	2b3e      	cmp	r3, #62	@ 0x3e
 8007504:	d921      	bls.n	800754a <USB_EPStartXfer+0x806>
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <USB_EPStartXfer+0x7e2>
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007520:	3b01      	subs	r3, #1
 8007522:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	b29b      	uxth	r3, r3
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	b29b      	uxth	r3, r3
 8007536:	4313      	orrs	r3, r2
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e050      	b.n	80075ec <USB_EPStartXfer+0x8a8>
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <USB_EPStartXfer+0x824>
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29a      	uxth	r2, r3
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e041      	b.n	80075ec <USB_EPStartXfer+0x8a8>
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <USB_EPStartXfer+0x844>
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007582:	3301      	adds	r3, #1
 8007584:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e024      	b.n	80075ec <USB_EPStartXfer+0x8a8>
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d11c      	bne.n	80075ec <USB_EPStartXfer+0x8a8>
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c6:	4413      	add	r3, r2
 80075c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	011a      	lsls	r2, r3, #4
 80075d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075da:	4413      	add	r3, r2
 80075dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	895b      	ldrh	r3, [r3, #10]
 80075f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6959      	ldr	r1, [r3, #20]
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	b29b      	uxth	r3, r3
 800760e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007612:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007616:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	f001 f881 	bl	8008722 <USB_WritePMA>
 8007620:	e227      	b.n	8007a72 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007658:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076ae:	4413      	add	r3, r2
 80076b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	011a      	lsls	r2, r3, #4
 80076c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c2:	4413      	add	r3, r2
 80076c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	891b      	ldrh	r3, [r3, #8]
 80076e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6959      	ldr	r1, [r3, #20]
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007702:	6800      	ldr	r0, [r0, #0]
 8007704:	f001 f80d 	bl	8008722 <USB_WritePMA>
 8007708:	e1b3      	b.n	8007a72 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80c6 	beq.w	80078dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	673b      	str	r3, [r7, #112]	@ 0x70
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d177      	bne.n	800785c <USB_EPStartXfer+0xb18>
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800778c:	4413      	add	r3, r2
 800778e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077a0:	4413      	add	r3, r2
 80077a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80077a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80077be:	d921      	bls.n	8007804 <USB_EPStartXfer+0xac0>
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <USB_EPStartXfer+0xa9c>
 80077d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077da:	3b01      	subs	r3, #1
 80077dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	029b      	lsls	r3, r3, #10
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	e050      	b.n	80078a6 <USB_EPStartXfer+0xb62>
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <USB_EPStartXfer+0xade>
 800780c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781a:	b29a      	uxth	r2, r3
 800781c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e041      	b.n	80078a6 <USB_EPStartXfer+0xb62>
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <USB_EPStartXfer+0xafe>
 8007838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800783c:	3301      	adds	r3, #1
 800783e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800784c:	b29b      	uxth	r3, r3
 800784e:	029b      	lsls	r3, r3, #10
 8007850:	b29b      	uxth	r3, r3
 8007852:	4313      	orrs	r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	e024      	b.n	80078a6 <USB_EPStartXfer+0xb62>
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d11c      	bne.n	80078a6 <USB_EPStartXfer+0xb62>
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800787a:	b29b      	uxth	r3, r3
 800787c:	461a      	mov	r2, r3
 800787e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007880:	4413      	add	r3, r2
 8007882:	673b      	str	r3, [r7, #112]	@ 0x70
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	011a      	lsls	r2, r3, #4
 8007892:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007894:	4413      	add	r3, r2
 8007896:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800789a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	895b      	ldrh	r3, [r3, #10]
 80078b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6959      	ldr	r1, [r3, #20]
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078d4:	6800      	ldr	r0, [r0, #0]
 80078d6:	f000 ff24 	bl	8008722 <USB_WritePMA>
 80078da:	e0ca      	b.n	8007a72 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	785b      	ldrb	r3, [r3, #1]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d177      	bne.n	80079dc <USB_EPStartXfer+0xc98>
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800790c:	4413      	add	r3, r2
 800790e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	011a      	lsls	r2, r3, #4
 800791e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007920:	4413      	add	r3, r2
 8007922:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007926:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29b      	uxth	r3, r3
 800792e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007932:	b29a      	uxth	r2, r3
 8007934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	2b3e      	cmp	r3, #62	@ 0x3e
 800793e:	d921      	bls.n	8007984 <USB_EPStartXfer+0xc40>
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794e:	f003 031f 	and.w	r3, r3, #31
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <USB_EPStartXfer+0xc1c>
 8007956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800795a:	3b01      	subs	r3, #1
 800795c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29a      	uxth	r2, r3
 8007966:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800796a:	b29b      	uxth	r3, r3
 800796c:	029b      	lsls	r3, r3, #10
 800796e:	b29b      	uxth	r3, r3
 8007970:	4313      	orrs	r3, r2
 8007972:	b29b      	uxth	r3, r3
 8007974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797c:	b29a      	uxth	r2, r3
 800797e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	e05c      	b.n	8007a3e <USB_EPStartXfer+0xcfa>
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <USB_EPStartXfer+0xc5e>
 800798c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799a:	b29a      	uxth	r2, r3
 800799c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	e04d      	b.n	8007a3e <USB_EPStartXfer+0xcfa>
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d004      	beq.n	80079c2 <USB_EPStartXfer+0xc7e>
 80079b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079bc:	3301      	adds	r3, #1
 80079be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	029b      	lsls	r3, r3, #10
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e030      	b.n	8007a3e <USB_EPStartXfer+0xcfa>
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d128      	bne.n	8007a3e <USB_EPStartXfer+0xcfa>
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a10:	4413      	add	r3, r2
 8007a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	011a      	lsls	r2, r3, #4
 8007a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a28:	4413      	add	r3, r2
 8007a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6959      	ldr	r1, [r3, #20]
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f000 fe58 	bl	8008722 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a98:	817b      	strh	r3, [r7, #10]
 8007a9a:	897b      	ldrh	r3, [r7, #10]
 8007a9c:	f083 0310 	eor.w	r3, r3, #16
 8007aa0:	817b      	strh	r3, [r7, #10]
 8007aa2:	897b      	ldrh	r3, [r7, #10]
 8007aa4:	f083 0320 	eor.w	r3, r3, #32
 8007aa8:	817b      	strh	r3, [r7, #10]
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	441a      	add	r2, r3
 8007ac4:	897b      	ldrh	r3, [r7, #10]
 8007ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	8013      	strh	r3, [r2, #0]
 8007ada:	f000 bcde 	b.w	800849a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	7b1b      	ldrb	r3, [r3, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80bb 	bne.w	8007c66 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d917      	bls.n	8007b3c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	1ad2      	subs	r2, r2, r3
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	619a      	str	r2, [r3, #24]
 8007b3a:	e00e      	b.n	8007b5a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b7e:	4413      	add	r3, r2
 8007b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	011a      	lsls	r2, r3, #4
 8007b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bba:	d924      	bls.n	8007c06 <USB_EPStartXfer+0xec2>
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <USB_EPStartXfer+0xe98>
 8007bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	f000 bc10 	b.w	8008426 <USB_EPStartXfer+0x16e2>
 8007c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <USB_EPStartXfer+0xee4>
 8007c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e3fe      	b.n	8008426 <USB_EPStartXfer+0x16e2>
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <USB_EPStartXfer+0xf04>
 8007c3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c42:	3301      	adds	r3, #1
 8007c44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	029b      	lsls	r3, r3, #10
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	e3df      	b.n	8008426 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	78db      	ldrb	r3, [r3, #3]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	f040 8218 	bne.w	80080a8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 809d 	bne.w	8007dc4 <USB_EPStartXfer+0x1080>
 8007c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cae:	4413      	add	r3, r2
 8007cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	011a      	lsls	r2, r3, #4
 8007cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cf2:	d92b      	bls.n	8007d4c <USB_EPStartXfer+0x1008>
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 031f 	and.w	r3, r3, #31
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <USB_EPStartXfer+0xfe0>
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	029b      	lsls	r3, r3, #10
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	e070      	b.n	8007e2e <USB_EPStartXfer+0x10ea>
 8007d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10c      	bne.n	8007d76 <USB_EPStartXfer+0x1032>
 8007d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e05b      	b.n	8007e2e <USB_EPStartXfer+0x10ea>
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <USB_EPStartXfer+0x1062>
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da0:	3301      	adds	r3, #1
 8007da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	029b      	lsls	r3, r3, #10
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	e034      	b.n	8007e2e <USB_EPStartXfer+0x10ea>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d12c      	bne.n	8007e2e <USB_EPStartXfer+0x10ea>
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007df8:	4413      	add	r3, r2
 8007dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	011a      	lsls	r2, r3, #4
 8007e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e10:	4413      	add	r3, r2
 8007e12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 809d 	bne.w	8007f88 <USB_EPStartXfer+0x1244>
 8007e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e72:	4413      	add	r3, r2
 8007e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	011a      	lsls	r2, r3, #4
 8007e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eb6:	d92b      	bls.n	8007f10 <USB_EPStartXfer+0x11cc>
 8007eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USB_EPStartXfer+0x11a4>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	029b      	lsls	r3, r3, #10
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e069      	b.n	8007fe4 <USB_EPStartXfer+0x12a0>
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <USB_EPStartXfer+0x11f6>
 8007f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	e054      	b.n	8007fe4 <USB_EPStartXfer+0x12a0>
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <USB_EPStartXfer+0x1226>
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e02d      	b.n	8007fe4 <USB_EPStartXfer+0x12a0>
 8007f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d125      	bne.n	8007fe4 <USB_EPStartXfer+0x12a0>
 8007f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fae:	4413      	add	r3, r2
 8007fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	011a      	lsls	r2, r3, #4
 8007fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fe2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8218 	beq.w	8008426 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800801a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <USB_EPStartXfer+0x12ea>
 8008022:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10d      	bne.n	800804a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800802e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 81f5 	bne.w	8008426 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800803c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 81ee 	bne.w	8008426 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800804a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008070:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008078:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	441a      	add	r2, r3
 800808e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
 80080a6:	e1be      	b.n	8008426 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	f040 81b4 	bne.w	8008422 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d917      	bls.n	8008106 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80080e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	619a      	str	r2, [r3, #24]
 8008104:	e00e      	b.n	8008124 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2200      	movs	r2, #0
 8008122:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 8085 	bne.w	8008240 <USB_EPStartXfer+0x14fc>
 8008136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008152:	b29b      	uxth	r3, r3
 8008154:	461a      	mov	r2, r3
 8008156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800815a:	4413      	add	r3, r2
 800815c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	011a      	lsls	r2, r3, #4
 800816e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008172:	4413      	add	r3, r2
 8008174:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800817c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008188:	b29a      	uxth	r2, r3
 800818a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800818e:	801a      	strh	r2, [r3, #0]
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	2b3e      	cmp	r3, #62	@ 0x3e
 8008196:	d923      	bls.n	80081e0 <USB_EPStartXfer+0x149c>
 8008198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <USB_EPStartXfer+0x1474>
 80081ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b2:	3b01      	subs	r3, #1
 80081b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	029b      	lsls	r3, r3, #10
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e060      	b.n	80082a2 <USB_EPStartXfer+0x155e>
 80081e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10c      	bne.n	8008202 <USB_EPStartXfer+0x14be>
 80081e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	e04f      	b.n	80082a2 <USB_EPStartXfer+0x155e>
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <USB_EPStartXfer+0x14de>
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821c:	3301      	adds	r3, #1
 800821e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800822e:	b29b      	uxth	r3, r3
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	b29b      	uxth	r3, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	e030      	b.n	80082a2 <USB_EPStartXfer+0x155e>
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d128      	bne.n	80082a2 <USB_EPStartXfer+0x155e>
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800825e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800826c:	b29b      	uxth	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008274:	4413      	add	r3, r2
 8008276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800827a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	011a      	lsls	r2, r3, #4
 8008288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800828c:	4413      	add	r3, r2
 800828e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008292:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8085 	bne.w	80083cc <USB_EPStartXfer+0x1688>
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082de:	b29b      	uxth	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082e6:	4413      	add	r3, r2
 80082e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	011a      	lsls	r2, r3, #4
 80082fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082fe:	4413      	add	r3, r2
 8008300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008320:	2b3e      	cmp	r3, #62	@ 0x3e
 8008322:	d923      	bls.n	800836c <USB_EPStartXfer+0x1628>
 8008324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <USB_EPStartXfer+0x1600>
 800833a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800833e:	3b01      	subs	r3, #1
 8008340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008350:	b29b      	uxth	r3, r3
 8008352:	029b      	lsls	r3, r3, #10
 8008354:	b29b      	uxth	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b29b      	uxth	r3, r3
 800835a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008362:	b29a      	uxth	r2, r3
 8008364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008368:	801a      	strh	r2, [r3, #0]
 800836a:	e05c      	b.n	8008426 <USB_EPStartXfer+0x16e2>
 800836c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10c      	bne.n	800838e <USB_EPStartXfer+0x164a>
 8008374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	e04b      	b.n	8008426 <USB_EPStartXfer+0x16e2>
 800838e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <USB_EPStartXfer+0x166a>
 80083a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a8:	3301      	adds	r3, #1
 80083aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	e02c      	b.n	8008426 <USB_EPStartXfer+0x16e2>
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d124      	bne.n	8008426 <USB_EPStartXfer+0x16e2>
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083f2:	4413      	add	r3, r2
 80083f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	011a      	lsls	r2, r3, #4
 8008406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800840a:	4413      	add	r3, r2
 800840c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008418:	b29a      	uxth	r2, r3
 800841a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e001      	b.n	8008426 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e03a      	b.n	800849c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008450:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008454:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008458:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800845c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008460:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008464:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	441a      	add	r2, r3
 8008482:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800848e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008496:	b29b      	uxth	r3, r3
 8008498:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d020      	beq.n	80084fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ce:	81bb      	strh	r3, [r7, #12]
 80084d0:	89bb      	ldrh	r3, [r7, #12]
 80084d2:	f083 0310 	eor.w	r3, r3, #16
 80084d6:	81bb      	strh	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	441a      	add	r2, r3
 80084e2:	89bb      	ldrh	r3, [r7, #12]
 80084e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	8013      	strh	r3, [r2, #0]
 80084f8:	e01f      	b.n	800853a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800850c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008510:	81fb      	strh	r3, [r7, #14]
 8008512:	89fb      	ldrh	r3, [r7, #14]
 8008514:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008518:	81fb      	strh	r3, [r7, #14]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	441a      	add	r2, r3
 8008524:	89fb      	ldrh	r3, [r7, #14]
 8008526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008546:	b480      	push	{r7}
 8008548:	b087      	sub	sp, #28
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	7b1b      	ldrb	r3, [r3, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f040 809d 	bne.w	8008694 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d04c      	beq.n	80085fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	823b      	strh	r3, [r7, #16]
 8008570:	8a3b      	ldrh	r3, [r7, #16]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01b      	beq.n	80085b2 <USB_EPClearStall+0x6c>
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800858c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008590:	81fb      	strh	r3, [r7, #14]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	441a      	add	r2, r3
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d06c      	beq.n	8008694 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085d0:	81bb      	strh	r3, [r7, #12]
 80085d2:	89bb      	ldrh	r3, [r7, #12]
 80085d4:	f083 0320 	eor.w	r3, r3, #32
 80085d8:	81bb      	strh	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	89bb      	ldrh	r3, [r7, #12]
 80085e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8013      	strh	r3, [r2, #0]
 80085fa:	e04b      	b.n	8008694 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	82fb      	strh	r3, [r7, #22]
 800860a:	8afb      	ldrh	r3, [r7, #22]
 800860c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01b      	beq.n	800864c <USB_EPClearStall+0x106>
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862a:	82bb      	strh	r3, [r7, #20]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	441a      	add	r2, r3
 8008636:	8abb      	ldrh	r3, [r7, #20]
 8008638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800863c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008648:	b29b      	uxth	r3, r3
 800864a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800865e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008662:	827b      	strh	r3, [r7, #18]
 8008664:	8a7b      	ldrh	r3, [r7, #18]
 8008666:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800866a:	827b      	strh	r3, [r7, #18]
 800866c:	8a7b      	ldrh	r3, [r7, #18]
 800866e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008672:	827b      	strh	r3, [r7, #18]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	8a7b      	ldrh	r3, [r7, #18]
 8008680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800868c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008690:	b29b      	uxth	r3, r3
 8008692:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d103      	bne.n	80086ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2280      	movs	r2, #128	@ 0x80
 80086b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr

08008722 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008722:	b480      	push	{r7}
 8008724:	b08b      	sub	sp, #44	@ 0x2c
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	4611      	mov	r1, r2
 800872e:	461a      	mov	r2, r3
 8008730:	460b      	mov	r3, r1
 8008732:	80fb      	strh	r3, [r7, #6]
 8008734:	4613      	mov	r3, r2
 8008736:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008738:	88bb      	ldrh	r3, [r7, #4]
 800873a:	3301      	adds	r3, #1
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	005a      	lsls	r2, r3, #1
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008754:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
 800875a:	e01e      	b.n	800879a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	b21a      	sxth	r2, r3
 800876c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008770:	4313      	orrs	r3, r2
 8008772:	b21b      	sxth	r3, r3
 8008774:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	8a7a      	ldrh	r2, [r7, #18]
 800877a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	3302      	adds	r3, #2
 8008780:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	3302      	adds	r3, #2
 8008786:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	3301      	adds	r3, #1
 800878c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3301      	adds	r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	3b01      	subs	r3, #1
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1dd      	bne.n	800875c <USB_WritePMA+0x3a>
  }
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	372c      	adds	r7, #44	@ 0x2c
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b08b      	sub	sp, #44	@ 0x2c
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	460b      	mov	r3, r1
 80087bc:	80fb      	strh	r3, [r7, #6]
 80087be:	4613      	mov	r3, r2
 80087c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087c2:	88bb      	ldrh	r3, [r7, #4]
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	005a      	lsls	r2, r3, #1
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e4:	e01b      	b.n	800881e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	3302      	adds	r3, #2
 80087f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	0a1b      	lsrs	r3, r3, #8
 8008806:	b2da      	uxtb	r2, r3
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	3301      	adds	r3, #1
 8008810:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	3302      	adds	r3, #2
 8008816:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	3b01      	subs	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e0      	bne.n	80087e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008824:	88bb      	ldrh	r3, [r7, #4]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	701a      	strb	r2, [r3, #0]
  }
}
 8008840:	bf00      	nop
 8008842:	372c      	adds	r7, #44	@ 0x2c
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7c1b      	ldrb	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d115      	bne.n	800888e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008866:	2202      	movs	r2, #2
 8008868:	2181      	movs	r1, #129	@ 0x81
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fed1 	bl	800a612 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800887a:	2202      	movs	r2, #2
 800887c:	2101      	movs	r1, #1
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fec7 	bl	800a612 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800888c:	e012      	b.n	80088b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800888e:	2340      	movs	r3, #64	@ 0x40
 8008890:	2202      	movs	r2, #2
 8008892:	2181      	movs	r1, #129	@ 0x81
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 febc 	bl	800a612 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088a0:	2340      	movs	r3, #64	@ 0x40
 80088a2:	2202      	movs	r2, #2
 80088a4:	2101      	movs	r1, #1
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 feb3 	bl	800a612 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088b4:	2308      	movs	r3, #8
 80088b6:	2203      	movs	r2, #3
 80088b8:	2182      	movs	r1, #130	@ 0x82
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 fea9 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80088ca:	f001 ffc9 	bl	800a860 <USBD_static_malloc>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80088e0:	2301      	movs	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]
 80088e4:	e026      	b.n	8008934 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	7c1b      	ldrb	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800891a:	2101      	movs	r1, #1
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 ff69 	bl	800a7f4 <USBD_LL_PrepareReceive>
 8008922:	e007      	b.n	8008934 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800892a:	2340      	movs	r3, #64	@ 0x40
 800892c:	2101      	movs	r1, #1
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 ff60 	bl	800a7f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800894e:	2181      	movs	r1, #129	@ 0x81
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fe84 	bl	800a65e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800895c:	2101      	movs	r1, #1
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fe7d 	bl	800a65e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800896c:	2182      	movs	r1, #130	@ 0x82
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fe75 	bl	800a65e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00e      	beq.n	80089a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008994:	4618      	mov	r0, r3
 8008996:	f001 ff6f 	bl	800a878 <USBD_static_free>
    pdev->pClassData = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d039      	beq.n	8008a4a <USBD_CDC_Setup+0x9e>
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d17f      	bne.n	8008ada <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	88db      	ldrh	r3, [r3, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d029      	beq.n	8008a36 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	da11      	bge.n	8008a10 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80089f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	88d2      	ldrh	r2, [r2, #6]
 80089fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a00:	6939      	ldr	r1, [r7, #16]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	88db      	ldrh	r3, [r3, #6]
 8008a06:	461a      	mov	r2, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fa05 	bl	8009e18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a0e:	e06b      	b.n	8008ae8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	785a      	ldrb	r2, [r3, #1]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a26:	6939      	ldr	r1, [r7, #16]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fa20 	bl	8009e74 <USBD_CtlPrepareRx>
      break;
 8008a34:	e058      	b.n	8008ae8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	7850      	ldrb	r0, [r2, #1]
 8008a42:	2200      	movs	r2, #0
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	4798      	blx	r3
      break;
 8008a48:	e04e      	b.n	8008ae8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b0b      	cmp	r3, #11
 8008a50:	d02e      	beq.n	8008ab0 <USBD_CDC_Setup+0x104>
 8008a52:	2b0b      	cmp	r3, #11
 8008a54:	dc38      	bgt.n	8008ac8 <USBD_CDC_Setup+0x11c>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <USBD_CDC_Setup+0xb4>
 8008a5a:	2b0a      	cmp	r3, #10
 8008a5c:	d014      	beq.n	8008a88 <USBD_CDC_Setup+0xdc>
 8008a5e:	e033      	b.n	8008ac8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d107      	bne.n	8008a7a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a6a:	f107 030c 	add.w	r3, r7, #12
 8008a6e:	2202      	movs	r2, #2
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f9d0 	bl	8009e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a78:	e02e      	b.n	8008ad8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 f961 	bl	8009d44 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a82:	2302      	movs	r3, #2
 8008a84:	75fb      	strb	r3, [r7, #23]
          break;
 8008a86:	e027      	b.n	8008ad8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d107      	bne.n	8008aa2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a92:	f107 030f 	add.w	r3, r7, #15
 8008a96:	2201      	movs	r2, #1
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 f9bc 	bl	8009e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aa0:	e01a      	b.n	8008ad8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f94d 	bl	8009d44 <USBD_CtlError>
            ret = USBD_FAIL;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	75fb      	strb	r3, [r7, #23]
          break;
 8008aae:	e013      	b.n	8008ad8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d00d      	beq.n	8008ad6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 f941 	bl	8009d44 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ac6:	e006      	b.n	8008ad6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f93a 	bl	8009d44 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ad4:	e000      	b.n	8008ad8 <USBD_CDC_Setup+0x12c>
          break;
 8008ad6:	bf00      	nop
      }
      break;
 8008ad8:	e006      	b.n	8008ae8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f931 	bl	8009d44 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae6:	bf00      	nop
  }

  return ret;
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d03a      	beq.n	8008b8e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	331c      	adds	r3, #28
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d029      	beq.n	8008b82 <USBD_CDC_DataIn+0x90>
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	331c      	adds	r3, #28
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	78f9      	ldrb	r1, [r7, #3]
 8008b42:	68b8      	ldr	r0, [r7, #8]
 8008b44:	460b      	mov	r3, r1
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	4403      	add	r3, r0
 8008b4e:	3338      	adds	r3, #56	@ 0x38
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b56:	fb01 f303 	mul.w	r3, r1, r3
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d110      	bne.n	8008b82 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	331c      	adds	r3, #28
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b74:	78f9      	ldrb	r1, [r7, #3]
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fe17 	bl	800a7ae <USBD_LL_Transmit>
 8008b80:	e003      	b.n	8008b8a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e000      	b.n	8008b90 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fe42 	bl	800a83a <USBD_LL_GetRxDataSize>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00d      	beq.n	8008be4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4798      	blx	r3

    return USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e000      	b.n	8008be6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008be4:	2302      	movs	r3, #2
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bfc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d014      	beq.n	8008c32 <USBD_CDC_EP0_RxReady+0x44>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c0e:	2bff      	cmp	r3, #255	@ 0xff
 8008c10:	d00f      	beq.n	8008c32 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	@ 0xff
 8008c2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2243      	movs	r2, #67	@ 0x43
 8008c48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c4a:	4b03      	ldr	r3, [pc, #12]	@ (8008c58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000094 	.word	0x20000094

08008c5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2243      	movs	r2, #67	@ 0x43
 8008c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c6a:	4b03      	ldr	r3, [pc, #12]	@ (8008c78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000050 	.word	0x20000050

08008c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2243      	movs	r2, #67	@ 0x43
 8008c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c8a:	4b03      	ldr	r3, [pc, #12]	@ (8008c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200000d8 	.word	0x200000d8

08008c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008caa:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	2000000c 	.word	0x2000000c

08008cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008d06:	88fa      	ldrh	r2, [r7, #6]
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01c      	beq.n	8008d94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d115      	bne.n	8008d90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2181      	movs	r1, #129	@ 0x81
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fd11 	bl	800a7ae <USBD_LL_Transmit>

      return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e002      	b.n	8008d96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d94:	2302      	movs	r3, #2
  }
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d017      	beq.n	8008de8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7c1b      	ldrb	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dca:	2101      	movs	r1, #1
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fd11 	bl	800a7f4 <USBD_LL_PrepareReceive>
 8008dd2:	e007      	b.n	8008de4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dda:	2340      	movs	r3, #64	@ 0x40
 8008ddc:	2101      	movs	r1, #1
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fd08 	bl	800a7f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e000      	b.n	8008dea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008de8:	2302      	movs	r3, #2
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	e01a      	b.n	8008e40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	79fa      	ldrb	r2, [r7, #7]
 8008e36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f001 fb75 	bl	800a528 <USBD_LL_Init>

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
 8008e68:	e001      	b.n	8008e6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr

08008e7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fbaa 	bl	800a5dc <USBD_LL_Start>

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr

08008ea6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	78fa      	ldrb	r2, [r7, #3]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	4798      	blx	r3
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	4611      	mov	r1, r2
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	4798      	blx	r3

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fed8 	bl	8009cd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f30:	461a      	mov	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f3e:	f003 031f 	and.w	r3, r3, #31
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d016      	beq.n	8008f74 <USBD_LL_SetupStage+0x6a>
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d81c      	bhi.n	8008f84 <USBD_LL_SetupStage+0x7a>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <USBD_LL_SetupStage+0x4a>
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d008      	beq.n	8008f64 <USBD_LL_SetupStage+0x5a>
 8008f52:	e017      	b.n	8008f84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9cb 	bl	80092f8 <USBD_StdDevReq>
      break;
 8008f62:	e01a      	b.n	8008f9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa2d 	bl	80093cc <USBD_StdItfReq>
      break;
 8008f72:	e012      	b.n	8008f9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa6d 	bl	800945c <USBD_StdEPReq>
      break;
 8008f82:	e00a      	b.n	8008f9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 fb82 	bl	800a69c <USBD_LL_StallEP>
      break;
 8008f98:	bf00      	nop
  }

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	460b      	mov	r3, r1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d14b      	bne.n	8009050 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d134      	bne.n	8009034 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d919      	bls.n	800900a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d203      	bcs.n	8008ff8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	e002      	b.n	8008ffe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 ff54 	bl	8009eb0 <USBD_CtlContinueRx>
 8009008:	e038      	b.n	800907c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800901c:	2b03      	cmp	r3, #3
 800901e:	d105      	bne.n	800902c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 ff51 	bl	8009ed4 <USBD_CtlSendStatus>
 8009032:	e023      	b.n	800907c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800903a:	2b05      	cmp	r3, #5
 800903c:	d11e      	bne.n	800907c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009046:	2100      	movs	r1, #0
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f001 fb27 	bl	800a69c <USBD_LL_StallEP>
 800904e:	e015      	b.n	800907c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009062:	2b03      	cmp	r3, #3
 8009064:	d108      	bne.n	8009078 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	7afa      	ldrb	r2, [r7, #11]
 8009070:	4611      	mov	r1, r2
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	4798      	blx	r3
 8009076:	e001      	b.n	800907c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	e000      	b.n	800907e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b086      	sub	sp, #24
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	460b      	mov	r3, r1
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d17f      	bne.n	800919a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3314      	adds	r3, #20
 800909e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d15c      	bne.n	8009164 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d915      	bls.n	80090e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 febe 	bl	8009e50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d4:	2300      	movs	r3, #0
 80090d6:	2200      	movs	r2, #0
 80090d8:	2100      	movs	r1, #0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f001 fb8a 	bl	800a7f4 <USBD_LL_PrepareReceive>
 80090e0:	e04e      	b.n	8009180 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	6912      	ldr	r2, [r2, #16]
 80090ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80090ee:	fb01 f202 	mul.w	r2, r1, r2
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11c      	bne.n	8009132 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009100:	429a      	cmp	r2, r3
 8009102:	d316      	bcc.n	8009132 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800910e:	429a      	cmp	r2, r3
 8009110:	d20f      	bcs.n	8009132 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009112:	2200      	movs	r2, #0
 8009114:	2100      	movs	r1, #0
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 fe9a 	bl	8009e50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009124:	2300      	movs	r3, #0
 8009126:	2200      	movs	r2, #0
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f001 fb62 	bl	800a7f4 <USBD_LL_PrepareReceive>
 8009130:	e026      	b.n	8009180 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009144:	2b03      	cmp	r3, #3
 8009146:	d105      	bne.n	8009154 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009154:	2180      	movs	r1, #128	@ 0x80
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f001 faa0 	bl	800a69c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fecc 	bl	8009efa <USBD_CtlReceiveStatus>
 8009162:	e00d      	b.n	8009180 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800916a:	2b04      	cmp	r3, #4
 800916c:	d004      	beq.n	8009178 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009178:	2180      	movs	r1, #128	@ 0x80
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f001 fa8e 	bl	800a69c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009186:	2b01      	cmp	r3, #1
 8009188:	d11d      	bne.n	80091c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff fe81 	bl	8008e92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009198:	e015      	b.n	80091c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00d      	beq.n	80091c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d108      	bne.n	80091c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	7afa      	ldrb	r2, [r7, #11]
 80091ba:	4611      	mov	r1, r2
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	4798      	blx	r3
 80091c0:	e001      	b.n	80091c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091c2:	2302      	movs	r3, #2
 80091c4:	e000      	b.n	80091c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d8:	2340      	movs	r3, #64	@ 0x40
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fa17 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2240      	movs	r2, #64	@ 0x40
 80091f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091f4:	2340      	movs	r3, #64	@ 0x40
 80091f6:	2200      	movs	r2, #0
 80091f8:	2180      	movs	r1, #128	@ 0x80
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fa09 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2240      	movs	r2, #64	@ 0x40
 800920a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009230:	2b00      	cmp	r3, #0
 8009232:	d009      	beq.n	8009248 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6852      	ldr	r2, [r2, #4]
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	4611      	mov	r1, r2
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
  }

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2204      	movs	r2, #4
 8009288:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr

08009298 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d105      	bne.n	80092b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr

080092c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d10b      	bne.n	80092ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800930e:	2b40      	cmp	r3, #64	@ 0x40
 8009310:	d005      	beq.n	800931e <USBD_StdDevReq+0x26>
 8009312:	2b40      	cmp	r3, #64	@ 0x40
 8009314:	d84f      	bhi.n	80093b6 <USBD_StdDevReq+0xbe>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <USBD_StdDevReq+0x36>
 800931a:	2b20      	cmp	r3, #32
 800931c:	d14b      	bne.n	80093b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
      break;
 800932c:	e048      	b.n	80093c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	2b09      	cmp	r3, #9
 8009334:	d839      	bhi.n	80093aa <USBD_StdDevReq+0xb2>
 8009336:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <USBD_StdDevReq+0x44>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	0800938d 	.word	0x0800938d
 8009340:	080093a1 	.word	0x080093a1
 8009344:	080093ab 	.word	0x080093ab
 8009348:	08009397 	.word	0x08009397
 800934c:	080093ab 	.word	0x080093ab
 8009350:	0800936f 	.word	0x0800936f
 8009354:	08009365 	.word	0x08009365
 8009358:	080093ab 	.word	0x080093ab
 800935c:	08009383 	.word	0x08009383
 8009360:	08009379 	.word	0x08009379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f9dc 	bl	8009724 <USBD_GetDescriptor>
          break;
 800936c:	e022      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fb3f 	bl	80099f4 <USBD_SetAddress>
          break;
 8009376:	e01d      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb7e 	bl	8009a7c <USBD_SetConfig>
          break;
 8009380:	e018      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fc07 	bl	8009b98 <USBD_GetConfig>
          break;
 800938a:	e013      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fc37 	bl	8009c02 <USBD_GetStatus>
          break;
 8009394:	e00e      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fc65 	bl	8009c68 <USBD_SetFeature>
          break;
 800939e:	e009      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc74 	bl	8009c90 <USBD_ClrFeature>
          break;
 80093a8:	e004      	b.n	80093b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fcc9 	bl	8009d44 <USBD_CtlError>
          break;
 80093b2:	bf00      	nop
      }
      break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fcc3 	bl	8009d44 <USBD_CtlError>
      break;
 80093be:	bf00      	nop
  }

  return ret;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop

080093cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e2:	2b40      	cmp	r3, #64	@ 0x40
 80093e4:	d005      	beq.n	80093f2 <USBD_StdItfReq+0x26>
 80093e6:	2b40      	cmp	r3, #64	@ 0x40
 80093e8:	d82e      	bhi.n	8009448 <USBD_StdItfReq+0x7c>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <USBD_StdItfReq+0x26>
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d12a      	bne.n	8009448 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f8:	3b01      	subs	r3, #1
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d81d      	bhi.n	800943a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	889b      	ldrh	r3, [r3, #4]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	d813      	bhi.n	8009430 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	88db      	ldrh	r3, [r3, #6]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d110      	bne.n	8009444 <USBD_StdItfReq+0x78>
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10d      	bne.n	8009444 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fd53 	bl	8009ed4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800942e:	e009      	b.n	8009444 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fc86 	bl	8009d44 <USBD_CtlError>
          break;
 8009438:	e004      	b.n	8009444 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc81 	bl	8009d44 <USBD_CtlError>
          break;
 8009442:	e000      	b.n	8009446 <USBD_StdItfReq+0x7a>
          break;
 8009444:	bf00      	nop
      }
      break;
 8009446:	e004      	b.n	8009452 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc7a 	bl	8009d44 <USBD_CtlError>
      break;
 8009450:	bf00      	nop
  }

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	889b      	ldrh	r3, [r3, #4]
 800946e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009478:	2b40      	cmp	r3, #64	@ 0x40
 800947a:	d007      	beq.n	800948c <USBD_StdEPReq+0x30>
 800947c:	2b40      	cmp	r3, #64	@ 0x40
 800947e:	f200 8146 	bhi.w	800970e <USBD_StdEPReq+0x2b2>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <USBD_StdEPReq+0x40>
 8009486:	2b20      	cmp	r3, #32
 8009488:	f040 8141 	bne.w	800970e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
      break;
 800949a:	e13d      	b.n	8009718 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d10a      	bne.n	80094be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	4798      	blx	r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	e12d      	b.n	800971a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d007      	beq.n	80094d6 <USBD_StdEPReq+0x7a>
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	f300 811b 	bgt.w	8009702 <USBD_StdEPReq+0x2a6>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d072      	beq.n	80095b6 <USBD_StdEPReq+0x15a>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d03a      	beq.n	800954a <USBD_StdEPReq+0xee>
 80094d4:	e115      	b.n	8009702 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d002      	beq.n	80094e6 <USBD_StdEPReq+0x8a>
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d015      	beq.n	8009510 <USBD_StdEPReq+0xb4>
 80094e4:	e02b      	b.n	800953e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00c      	beq.n	8009506 <USBD_StdEPReq+0xaa>
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b80      	cmp	r3, #128	@ 0x80
 80094f0:	d009      	beq.n	8009506 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 f8d0 	bl	800a69c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094fc:	2180      	movs	r1, #128	@ 0x80
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 f8cc 	bl	800a69c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009504:	e020      	b.n	8009548 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fc1b 	bl	8009d44 <USBD_CtlError>
              break;
 800950e:	e01b      	b.n	8009548 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	885b      	ldrh	r3, [r3, #2]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10e      	bne.n	8009536 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <USBD_StdEPReq+0xda>
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b80      	cmp	r3, #128	@ 0x80
 8009522:	d008      	beq.n	8009536 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	88db      	ldrh	r3, [r3, #6]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 f8b3 	bl	800a69c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fccc 	bl	8009ed4 <USBD_CtlSendStatus>

              break;
 800953c:	e004      	b.n	8009548 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbff 	bl	8009d44 <USBD_CtlError>
              break;
 8009546:	bf00      	nop
          }
          break;
 8009548:	e0e0      	b.n	800970c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009550:	2b02      	cmp	r3, #2
 8009552:	d002      	beq.n	800955a <USBD_StdEPReq+0xfe>
 8009554:	2b03      	cmp	r3, #3
 8009556:	d015      	beq.n	8009584 <USBD_StdEPReq+0x128>
 8009558:	e026      	b.n	80095a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00c      	beq.n	800957a <USBD_StdEPReq+0x11e>
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b80      	cmp	r3, #128	@ 0x80
 8009564:	d009      	beq.n	800957a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 f896 	bl	800a69c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009570:	2180      	movs	r1, #128	@ 0x80
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 f892 	bl	800a69c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009578:	e01c      	b.n	80095b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fbe1 	bl	8009d44 <USBD_CtlError>
              break;
 8009582:	e017      	b.n	80095b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	885b      	ldrh	r3, [r3, #2]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d112      	bne.n	80095b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f89d 	bl	800a6da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fc97 	bl	8009ed4 <USBD_CtlSendStatus>
              }
              break;
 80095a6:	e004      	b.n	80095b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fbca 	bl	8009d44 <USBD_CtlError>
              break;
 80095b0:	e000      	b.n	80095b4 <USBD_StdEPReq+0x158>
              break;
 80095b2:	bf00      	nop
          }
          break;
 80095b4:	e0aa      	b.n	800970c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d002      	beq.n	80095c6 <USBD_StdEPReq+0x16a>
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d032      	beq.n	800962a <USBD_StdEPReq+0x1ce>
 80095c4:	e097      	b.n	80096f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <USBD_StdEPReq+0x180>
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b80      	cmp	r3, #128	@ 0x80
 80095d0:	d004      	beq.n	80095dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fbb5 	bl	8009d44 <USBD_CtlError>
                break;
 80095da:	e091      	b.n	8009700 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	da0b      	bge.n	80095fc <USBD_StdEPReq+0x1a0>
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	3310      	adds	r3, #16
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	3304      	adds	r3, #4
 80095fa:	e00b      	b.n	8009614 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	3304      	adds	r3, #4
 8009614:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2202      	movs	r2, #2
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fbf8 	bl	8009e18 <USBD_CtlSendData>
              break;
 8009628:	e06a      	b.n	8009700 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800962a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	da11      	bge.n	8009656 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3318      	adds	r3, #24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d117      	bne.n	800967c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fb78 	bl	8009d44 <USBD_CtlError>
                  break;
 8009654:	e054      	b.n	8009700 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	f003 020f 	and.w	r2, r3, #15
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fb65 	bl	8009d44 <USBD_CtlError>
                  break;
 800967a:	e041      	b.n	8009700 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800967c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da0b      	bge.n	800969c <USBD_StdEPReq+0x240>
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	3310      	adds	r3, #16
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	4413      	add	r3, r2
 8009698:	3304      	adds	r3, #4
 800969a:	e00b      	b.n	80096b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	3304      	adds	r3, #4
 80096b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <USBD_StdEPReq+0x266>
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b80      	cmp	r3, #128	@ 0x80
 80096c0:	d103      	bne.n	80096ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e00e      	b.n	80096e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 f822 	bl	800a718 <USBD_LL_IsStallEP>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2201      	movs	r2, #1
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	e002      	b.n	80096e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2202      	movs	r2, #2
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fb92 	bl	8009e18 <USBD_CtlSendData>
              break;
 80096f4:	e004      	b.n	8009700 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb23 	bl	8009d44 <USBD_CtlError>
              break;
 80096fe:	bf00      	nop
          }
          break;
 8009700:	e004      	b.n	800970c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb1d 	bl	8009d44 <USBD_CtlError>
          break;
 800970a:	bf00      	nop
      }
      break;
 800970c:	e004      	b.n	8009718 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fb17 	bl	8009d44 <USBD_CtlError>
      break;
 8009716:	bf00      	nop
  }

  return ret;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	885b      	ldrh	r3, [r3, #2]
 800973e:	0a1b      	lsrs	r3, r3, #8
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	2b06      	cmp	r3, #6
 8009746:	f200 8128 	bhi.w	800999a <USBD_GetDescriptor+0x276>
 800974a:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <USBD_GetDescriptor+0x2c>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	0800976d 	.word	0x0800976d
 8009754:	08009785 	.word	0x08009785
 8009758:	080097c5 	.word	0x080097c5
 800975c:	0800999b 	.word	0x0800999b
 8009760:	0800999b 	.word	0x0800999b
 8009764:	0800993b 	.word	0x0800993b
 8009768:	08009967 	.word	0x08009967
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	7c12      	ldrb	r2, [r2, #16]
 8009778:	f107 0108 	add.w	r1, r7, #8
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
 8009780:	60f8      	str	r0, [r7, #12]
      break;
 8009782:	e112      	b.n	80099aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	7c1b      	ldrb	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10d      	bne.n	80097a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	f107 0208 	add.w	r2, r7, #8
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3301      	adds	r3, #1
 80097a2:	2202      	movs	r2, #2
 80097a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097a6:	e100      	b.n	80099aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	f107 0208 	add.w	r2, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3301      	adds	r3, #1
 80097be:	2202      	movs	r2, #2
 80097c0:	701a      	strb	r2, [r3, #0]
      break;
 80097c2:	e0f2      	b.n	80099aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	885b      	ldrh	r3, [r3, #2]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	f200 80ac 	bhi.w	8009928 <USBD_GetDescriptor+0x204>
 80097d0:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <USBD_GetDescriptor+0xb4>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	080097f1 	.word	0x080097f1
 80097dc:	08009825 	.word	0x08009825
 80097e0:	08009859 	.word	0x08009859
 80097e4:	0800988d 	.word	0x0800988d
 80097e8:	080098c1 	.word	0x080098c1
 80097ec:	080098f5 	.word	0x080098f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	7c12      	ldrb	r2, [r2, #16]
 8009808:	f107 0108 	add.w	r1, r7, #8
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009812:	e091      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa94 	bl	8009d44 <USBD_CtlError>
            err++;
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	3301      	adds	r3, #1
 8009820:	72fb      	strb	r3, [r7, #11]
          break;
 8009822:	e089      	b.n	8009938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7c12      	ldrb	r2, [r2, #16]
 800983c:	f107 0108 	add.w	r1, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009846:	e077      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa7a 	bl	8009d44 <USBD_CtlError>
            err++;
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	3301      	adds	r3, #1
 8009854:	72fb      	strb	r3, [r7, #11]
          break;
 8009856:	e06f      	b.n	8009938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7c12      	ldrb	r2, [r2, #16]
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	4610      	mov	r0, r2
 8009876:	4798      	blx	r3
 8009878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800987a:	e05d      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa60 	bl	8009d44 <USBD_CtlError>
            err++;
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	3301      	adds	r3, #1
 8009888:	72fb      	strb	r3, [r7, #11]
          break;
 800988a:	e055      	b.n	8009938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	7c12      	ldrb	r2, [r2, #16]
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ae:	e043      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa46 	bl	8009d44 <USBD_CtlError>
            err++;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	3301      	adds	r3, #1
 80098bc:	72fb      	strb	r3, [r7, #11]
          break;
 80098be:	e03b      	b.n	8009938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e2:	e029      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa2c 	bl	8009d44 <USBD_CtlError>
            err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
          break;
 80098f2:	e021      	b.n	8009938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	7c12      	ldrb	r2, [r2, #16]
 800990c:	f107 0108 	add.w	r1, r7, #8
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
 8009914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009916:	e00f      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa12 	bl	8009d44 <USBD_CtlError>
            err++;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	3301      	adds	r3, #1
 8009924:	72fb      	strb	r3, [r7, #11]
          break;
 8009926:	e007      	b.n	8009938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa0a 	bl	8009d44 <USBD_CtlError>
          err++;
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	3301      	adds	r3, #1
 8009934:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009936:	e038      	b.n	80099aa <USBD_GetDescriptor+0x286>
 8009938:	e037      	b.n	80099aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7c1b      	ldrb	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d109      	bne.n	8009956 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800994a:	f107 0208 	add.w	r2, r7, #8
 800994e:	4610      	mov	r0, r2
 8009950:	4798      	blx	r3
 8009952:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009954:	e029      	b.n	80099aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f9f3 	bl	8009d44 <USBD_CtlError>
        err++;
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	3301      	adds	r3, #1
 8009962:	72fb      	strb	r3, [r7, #11]
      break;
 8009964:	e021      	b.n	80099aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7c1b      	ldrb	r3, [r3, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10d      	bne.n	800998a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009976:	f107 0208 	add.w	r2, r7, #8
 800997a:	4610      	mov	r0, r2
 800997c:	4798      	blx	r3
 800997e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	2207      	movs	r2, #7
 8009986:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009988:	e00f      	b.n	80099aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9d9 	bl	8009d44 <USBD_CtlError>
        err++;
 8009992:	7afb      	ldrb	r3, [r7, #11]
 8009994:	3301      	adds	r3, #1
 8009996:	72fb      	strb	r3, [r7, #11]
      break;
 8009998:	e007      	b.n	80099aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9d1 	bl	8009d44 <USBD_CtlError>
      err++;
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	3301      	adds	r3, #1
 80099a6:	72fb      	strb	r3, [r7, #11]
      break;
 80099a8:	bf00      	nop
  }

  if (err != 0U)
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11c      	bne.n	80099ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099b0:	893b      	ldrh	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d011      	beq.n	80099da <USBD_GetDescriptor+0x2b6>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00d      	beq.n	80099da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88da      	ldrh	r2, [r3, #6]
 80099c2:	893b      	ldrh	r3, [r7, #8]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	bf28      	it	cs
 80099c8:	4613      	movcs	r3, r2
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099ce:	893b      	ldrh	r3, [r7, #8]
 80099d0:	461a      	mov	r2, r3
 80099d2:	68f9      	ldr	r1, [r7, #12]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa1f 	bl	8009e18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	88db      	ldrh	r3, [r3, #6]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa76 	bl	8009ed4 <USBD_CtlSendStatus>
 80099e8:	e000      	b.n	80099ec <USBD_GetDescriptor+0x2c8>
    return;
 80099ea:	bf00      	nop
    }
  }
}
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop

080099f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	889b      	ldrh	r3, [r3, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d130      	bne.n	8009a68 <USBD_SetAddress+0x74>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	88db      	ldrh	r3, [r3, #6]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d12c      	bne.n	8009a68 <USBD_SetAddress+0x74>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	885b      	ldrh	r3, [r3, #2]
 8009a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a14:	d828      	bhi.n	8009a68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	885b      	ldrh	r3, [r3, #2]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d104      	bne.n	8009a36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f988 	bl	8009d44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a34:	e01d      	b.n	8009a72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7bfa      	ldrb	r2, [r7, #15]
 8009a3a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fe94 	bl	800a770 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa43 	bl	8009ed4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5c:	e009      	b.n	8009a72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a66:	e004      	b.n	8009a72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f96a 	bl	8009d44 <USBD_CtlError>
  }
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	4b41      	ldr	r3, [pc, #260]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009a8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a90:	4b40      	ldr	r3, [pc, #256]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d904      	bls.n	8009aa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f952 	bl	8009d44 <USBD_CtlError>
 8009aa0:	e075      	b.n	8009b8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d002      	beq.n	8009ab2 <USBD_SetConfig+0x36>
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d023      	beq.n	8009af8 <USBD_SetConfig+0x7c>
 8009ab0:	e062      	b.n	8009b78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ab2:	4b38      	ldr	r3, [pc, #224]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01a      	beq.n	8009af0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009aba:	4b36      	ldr	r3, [pc, #216]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009acc:	4b31      	ldr	r3, [pc, #196]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff f9e7 	bl	8008ea6 <USBD_SetClassConfig>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d104      	bne.n	8009ae8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f92f 	bl	8009d44 <USBD_CtlError>
            return;
 8009ae6:	e052      	b.n	8009b8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9f3 	bl	8009ed4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aee:	e04e      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9ef 	bl	8009ed4 <USBD_CtlSendStatus>
        break;
 8009af6:	e04a      	b.n	8009b8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009af8:	4b26      	ldr	r3, [pc, #152]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d112      	bne.n	8009b26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009b08:	4b22      	ldr	r3, [pc, #136]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b12:	4b20      	ldr	r3, [pc, #128]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff f9e3 	bl	8008ee4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9d8 	bl	8009ed4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b24:	e033      	b.n	8009b8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b26:	4b1b      	ldr	r3, [pc, #108]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d01d      	beq.n	8009b70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff f9d1 	bl	8008ee4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b42:	4b14      	ldr	r3, [pc, #80]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b4c:	4b11      	ldr	r3, [pc, #68]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff f9a7 	bl	8008ea6 <USBD_SetClassConfig>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d104      	bne.n	8009b68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f8ef 	bl	8009d44 <USBD_CtlError>
            return;
 8009b66:	e012      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9b3 	bl	8009ed4 <USBD_CtlSendStatus>
        break;
 8009b6e:	e00e      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9af 	bl	8009ed4 <USBD_CtlSendStatus>
        break;
 8009b76:	e00a      	b.n	8009b8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f8e2 	bl	8009d44 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b80:	4b04      	ldr	r3, [pc, #16]	@ (8009b94 <USBD_SetConfig+0x118>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff f9ac 	bl	8008ee4 <USBD_ClrClassConfig>
        break;
 8009b8c:	bf00      	nop
    }
  }
}
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	2000057c 	.word	0x2000057c

08009b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d004      	beq.n	8009bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8c9 	bl	8009d44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bb2:	e022      	b.n	8009bfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	dc02      	bgt.n	8009bc4 <USBD_GetConfig+0x2c>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dc03      	bgt.n	8009bca <USBD_GetConfig+0x32>
 8009bc2:	e015      	b.n	8009bf0 <USBD_GetConfig+0x58>
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d00b      	beq.n	8009be0 <USBD_GetConfig+0x48>
 8009bc8:	e012      	b.n	8009bf0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f91d 	bl	8009e18 <USBD_CtlSendData>
        break;
 8009bde:	e00c      	b.n	8009bfa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2201      	movs	r2, #1
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f915 	bl	8009e18 <USBD_CtlSendData>
        break;
 8009bee:	e004      	b.n	8009bfa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f8a6 	bl	8009d44 <USBD_CtlError>
        break;
 8009bf8:	bf00      	nop
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d81e      	bhi.n	8009c56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d004      	beq.n	8009c2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f88e 	bl	8009d44 <USBD_CtlError>
        break;
 8009c28:	e01a      	b.n	8009c60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f043 0202 	orr.w	r2, r3, #2
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8e2 	bl	8009e18 <USBD_CtlSendData>
      break;
 8009c54:	e004      	b.n	8009c60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f873 	bl	8009d44 <USBD_CtlError>
      break;
 8009c5e:	bf00      	nop
  }
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d106      	bne.n	8009c88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f926 	bl	8009ed4 <USBD_CtlSendStatus>
  }
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d80b      	bhi.n	8009cbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10c      	bne.n	8009cc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f90c 	bl	8009ed4 <USBD_CtlSendStatus>
      }
      break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f83f 	bl	8009d44 <USBD_CtlError>
      break;
 8009cc6:	e000      	b.n	8009cca <USBD_ClrFeature+0x3a>
      break;
 8009cc8:	bf00      	nop
  }
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	785a      	ldrb	r2, [r3, #1]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	3303      	adds	r3, #3
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4413      	add	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	3305      	adds	r3, #5
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4413      	add	r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	3306      	adds	r3, #6
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	3307      	adds	r3, #7
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	80da      	strh	r2, [r3, #6]

}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bc80      	pop	{r7}
 8009d42:	4770      	bx	lr

08009d44 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d4e:	2180      	movs	r1, #128	@ 0x80
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fca3 	bl	800a69c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d56:	2100      	movs	r1, #0
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fc9f 	bl	800a69c <USBD_LL_StallEP>
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d032      	beq.n	8009de2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f834 	bl	8009dea <USBD_GetLen>
 8009d82:	4603      	mov	r3, r0
 8009d84:	3301      	adds	r3, #1
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	75fa      	strb	r2, [r7, #23]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	75fa      	strb	r2, [r7, #23]
 8009da8:	461a      	mov	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4413      	add	r3, r2
 8009dae:	2203      	movs	r2, #3
 8009db0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009db2:	e012      	b.n	8009dda <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	60fa      	str	r2, [r7, #12]
 8009dba:	7dfa      	ldrb	r2, [r7, #23]
 8009dbc:	1c51      	adds	r1, r2, #1
 8009dbe:	75f9      	strb	r1, [r7, #23]
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	75fa      	strb	r2, [r7, #23]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1e8      	bne.n	8009db4 <USBD_GetString+0x4e>
    }
  }
}
 8009de2:	bf00      	nop
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009df6:	e005      	b.n	8009e04 <USBD_GetLen+0x1a>
  {
    len++;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3301      	adds	r3, #1
 8009e02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1f5      	bne.n	8009df8 <USBD_GetLen+0xe>
  }

  return len;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e34:	88fa      	ldrh	r2, [r7, #6]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e3a:	88fb      	ldrh	r3, [r7, #6]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	2100      	movs	r1, #0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 fcb4 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fca2 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2203      	movs	r2, #3
 8009e86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e8a:	88fa      	ldrh	r2, [r7, #6]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e92:	88fa      	ldrh	r2, [r7, #6]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fca7 	bl	800a7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 fc95 	bl	800a7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fc5f 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2205      	movs	r2, #5
 8009f06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc6f 	bl	800a7f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f24:	2200      	movs	r2, #0
 8009f26:	4912      	ldr	r1, [pc, #72]	@ (8009f70 <MX_USB_DEVICE_Init+0x50>)
 8009f28:	4812      	ldr	r0, [pc, #72]	@ (8009f74 <MX_USB_DEVICE_Init+0x54>)
 8009f2a:	f7fe ff62 	bl	8008df2 <USBD_Init>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f34:	f7f7 f854 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f38:	490f      	ldr	r1, [pc, #60]	@ (8009f78 <MX_USB_DEVICE_Init+0x58>)
 8009f3a:	480e      	ldr	r0, [pc, #56]	@ (8009f74 <MX_USB_DEVICE_Init+0x54>)
 8009f3c:	f7fe ff84 	bl	8008e48 <USBD_RegisterClass>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f46:	f7f7 f84b 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f4a:	490c      	ldr	r1, [pc, #48]	@ (8009f7c <MX_USB_DEVICE_Init+0x5c>)
 8009f4c:	4809      	ldr	r0, [pc, #36]	@ (8009f74 <MX_USB_DEVICE_Init+0x54>)
 8009f4e:	f7fe feb5 	bl	8008cbc <USBD_CDC_RegisterInterface>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f58:	f7f7 f842 	bl	8000fe0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f5c:	4805      	ldr	r0, [pc, #20]	@ (8009f74 <MX_USB_DEVICE_Init+0x54>)
 8009f5e:	f7fe ff8c 	bl	8008e7a <USBD_Start>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f68:	f7f7 f83a 	bl	8000fe0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f6c:	bf00      	nop
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	2000012c 	.word	0x2000012c
 8009f74:	20000580 	.word	0x20000580
 8009f78:	20000018 	.word	0x20000018
 8009f7c:	2000011c 	.word	0x2000011c

08009f80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f84:	2200      	movs	r2, #0
 8009f86:	4905      	ldr	r1, [pc, #20]	@ (8009f9c <CDC_Init_FS+0x1c>)
 8009f88:	4805      	ldr	r0, [pc, #20]	@ (8009fa0 <CDC_Init_FS+0x20>)
 8009f8a:	f7fe fead 	bl	8008ce8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f8e:	4905      	ldr	r1, [pc, #20]	@ (8009fa4 <CDC_Init_FS+0x24>)
 8009f90:	4803      	ldr	r0, [pc, #12]	@ (8009fa0 <CDC_Init_FS+0x20>)
 8009f92:	f7fe fec2 	bl	8008d1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20000944 	.word	0x20000944
 8009fa0:	20000580 	.word	0x20000580
 8009fa4:	20000844 	.word	0x20000844

08009fa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bc80      	pop	{r7}
 8009fb4:	4770      	bx	lr
	...

08009fb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	71fb      	strb	r3, [r7, #7]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b23      	cmp	r3, #35	@ 0x23
 8009fcc:	f200 808c 	bhi.w	800a0e8 <CDC_Control_FS+0x130>
 8009fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd8 <CDC_Control_FS+0x20>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	0800a0e9 	.word	0x0800a0e9
 8009fdc:	0800a0e9 	.word	0x0800a0e9
 8009fe0:	0800a0e9 	.word	0x0800a0e9
 8009fe4:	0800a0e9 	.word	0x0800a0e9
 8009fe8:	0800a0e9 	.word	0x0800a0e9
 8009fec:	0800a0e9 	.word	0x0800a0e9
 8009ff0:	0800a0e9 	.word	0x0800a0e9
 8009ff4:	0800a0e9 	.word	0x0800a0e9
 8009ff8:	0800a0e9 	.word	0x0800a0e9
 8009ffc:	0800a0e9 	.word	0x0800a0e9
 800a000:	0800a0e9 	.word	0x0800a0e9
 800a004:	0800a0e9 	.word	0x0800a0e9
 800a008:	0800a0e9 	.word	0x0800a0e9
 800a00c:	0800a0e9 	.word	0x0800a0e9
 800a010:	0800a0e9 	.word	0x0800a0e9
 800a014:	0800a0e9 	.word	0x0800a0e9
 800a018:	0800a0e9 	.word	0x0800a0e9
 800a01c:	0800a0e9 	.word	0x0800a0e9
 800a020:	0800a0e9 	.word	0x0800a0e9
 800a024:	0800a0e9 	.word	0x0800a0e9
 800a028:	0800a0e9 	.word	0x0800a0e9
 800a02c:	0800a0e9 	.word	0x0800a0e9
 800a030:	0800a0e9 	.word	0x0800a0e9
 800a034:	0800a0e9 	.word	0x0800a0e9
 800a038:	0800a0e9 	.word	0x0800a0e9
 800a03c:	0800a0e9 	.word	0x0800a0e9
 800a040:	0800a0e9 	.word	0x0800a0e9
 800a044:	0800a0e9 	.word	0x0800a0e9
 800a048:	0800a0e9 	.word	0x0800a0e9
 800a04c:	0800a0e9 	.word	0x0800a0e9
 800a050:	0800a0e9 	.word	0x0800a0e9
 800a054:	0800a0e9 	.word	0x0800a0e9
 800a058:	0800a069 	.word	0x0800a069
 800a05c:	0800a0a3 	.word	0x0800a0a3
 800a060:	0800a0e9 	.word	0x0800a0e9
 800a064:	0800a0e9 	.word	0x0800a0e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	4b22      	ldr	r3, [pc, #136]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a06e:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	785a      	ldrb	r2, [r3, #1]
 800a074:	4b20      	ldr	r3, [pc, #128]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a076:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	789a      	ldrb	r2, [r3, #2]
 800a07c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a07e:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	78da      	ldrb	r2, [r3, #3]
 800a084:	4b1c      	ldr	r3, [pc, #112]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a086:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	791a      	ldrb	r2, [r3, #4]
 800a08c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a08e:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	795a      	ldrb	r2, [r3, #5]
 800a094:	4b18      	ldr	r3, [pc, #96]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a096:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	799a      	ldrb	r2, [r3, #6]
 800a09c:	4b16      	ldr	r3, [pc, #88]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a09e:	719a      	strb	r2, [r3, #6]

    break;
 800a0a0:	e023      	b.n	800a0ea <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a0a2:	4b15      	ldr	r3, [pc, #84]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0a4:	781a      	ldrb	r2, [r3, #0]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	4a12      	ldr	r2, [pc, #72]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0b0:	7852      	ldrb	r2, [r2, #1]
 800a0b2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0ba:	7892      	ldrb	r2, [r2, #2]
 800a0bc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	3303      	adds	r3, #3
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0c4:	78d2      	ldrb	r2, [r2, #3]
 800a0c6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0ce:	7912      	ldrb	r2, [r2, #4]
 800a0d0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	3305      	adds	r3, #5
 800a0d6:	4a08      	ldr	r2, [pc, #32]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0d8:	7952      	ldrb	r2, [r2, #5]
 800a0da:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	3306      	adds	r3, #6
 800a0e0:	4a05      	ldr	r2, [pc, #20]	@ (800a0f8 <CDC_Control_FS+0x140>)
 800a0e2:	7992      	ldrb	r2, [r2, #6]
 800a0e4:	701a      	strb	r2, [r3, #0]
    break;
 800a0e6:	e000      	b.n	800a0ea <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0e8:	bf00      	nop
  }

  return (USBD_OK);
 800a0ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc80      	pop	{r7}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20000a44 	.word	0x20000a44

0800a0fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a106:	4b0c      	ldr	r3, [pc, #48]	@ (800a138 <CDC_Receive_FS+0x3c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a10e:	4b0a      	ldr	r3, [pc, #40]	@ (800a138 <CDC_Receive_FS+0x3c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	b292      	uxth	r2, r2
 800a118:	4611      	mov	r1, r2
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4806      	ldr	r0, [pc, #24]	@ (800a13c <CDC_Receive_FS+0x40>)
 800a122:	f7fe fdfa 	bl	8008d1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a126:	4805      	ldr	r0, [pc, #20]	@ (800a13c <CDC_Receive_FS+0x40>)
 800a128:	f7fe fe39 	bl	8008d9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a12c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000a4c 	.word	0x20000a4c
 800a13c:	20000580 	.word	0x20000580

0800a140 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a150:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <CDC_Transmit_FS+0x48>)
 800a152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a156:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a162:	2301      	movs	r3, #1
 800a164:	e00b      	b.n	800a17e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a166:	887b      	ldrh	r3, [r7, #2]
 800a168:	461a      	mov	r2, r3
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4806      	ldr	r0, [pc, #24]	@ (800a188 <CDC_Transmit_FS+0x48>)
 800a16e:	f7fe fdbb 	bl	8008ce8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a172:	4805      	ldr	r0, [pc, #20]	@ (800a188 <CDC_Transmit_FS+0x48>)
 800a174:	f7fe fde4 	bl	8008d40 <USBD_CDC_TransmitPacket>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000580 	.word	0x20000580

0800a18c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a194:	4a03      	ldr	r2, [pc, #12]	@ (800a1a4 <CDC_AttachRxData+0x18>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6013      	str	r3, [r2, #0]
}
 800a19a:	bf00      	nop
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr
 800a1a4:	20000a4c 	.word	0x20000a4c

0800a1a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2212      	movs	r2, #18
 800a1b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1ba:	4b03      	ldr	r3, [pc, #12]	@ (800a1c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20000148 	.word	0x20000148

0800a1cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1de:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bc80      	pop	{r7}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	2000015c 	.word	0x2000015c

0800a1f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	6039      	str	r1, [r7, #0]
 800a1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d105      	bne.n	800a20e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	4907      	ldr	r1, [pc, #28]	@ (800a224 <USBD_FS_ProductStrDescriptor+0x34>)
 800a206:	4808      	ldr	r0, [pc, #32]	@ (800a228 <USBD_FS_ProductStrDescriptor+0x38>)
 800a208:	f7ff fdad 	bl	8009d66 <USBD_GetString>
 800a20c:	e004      	b.n	800a218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4904      	ldr	r1, [pc, #16]	@ (800a224 <USBD_FS_ProductStrDescriptor+0x34>)
 800a212:	4805      	ldr	r0, [pc, #20]	@ (800a228 <USBD_FS_ProductStrDescriptor+0x38>)
 800a214:	f7ff fda7 	bl	8009d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a218:	4b02      	ldr	r3, [pc, #8]	@ (800a224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000a50 	.word	0x20000a50
 800a228:	0800a968 	.word	0x0800a968

0800a22c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	4904      	ldr	r1, [pc, #16]	@ (800a24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a23c:	4804      	ldr	r0, [pc, #16]	@ (800a250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a23e:	f7ff fd92 	bl	8009d66 <USBD_GetString>
  return USBD_StrDesc;
 800a242:	4b02      	ldr	r3, [pc, #8]	@ (800a24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20000a50 	.word	0x20000a50
 800a250:	0800a980 	.word	0x0800a980

0800a254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	6039      	str	r1, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	221a      	movs	r2, #26
 800a264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a266:	f000 f843 	bl	800a2f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a26a:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000160 	.word	0x20000160

0800a278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d105      	bne.n	800a296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	4907      	ldr	r1, [pc, #28]	@ (800a2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a28e:	4808      	ldr	r0, [pc, #32]	@ (800a2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a290:	f7ff fd69 	bl	8009d66 <USBD_GetString>
 800a294:	e004      	b.n	800a2a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4904      	ldr	r1, [pc, #16]	@ (800a2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a29a:	4805      	ldr	r0, [pc, #20]	@ (800a2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a29c:	f7ff fd63 	bl	8009d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2a0:	4b02      	ldr	r3, [pc, #8]	@ (800a2ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000a50 	.word	0x20000a50
 800a2b0:	0800a994 	.word	0x0800a994

0800a2b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d105      	bne.n	800a2d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	4907      	ldr	r1, [pc, #28]	@ (800a2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ca:	4808      	ldr	r0, [pc, #32]	@ (800a2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2cc:	f7ff fd4b 	bl	8009d66 <USBD_GetString>
 800a2d0:	e004      	b.n	800a2dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	4904      	ldr	r1, [pc, #16]	@ (800a2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2d6:	4805      	ldr	r0, [pc, #20]	@ (800a2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2d8:	f7ff fd45 	bl	8009d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2dc:	4b02      	ldr	r3, [pc, #8]	@ (800a2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000a50 	.word	0x20000a50
 800a2ec:	0800a9a0 	.word	0x0800a9a0

0800a2f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d009      	beq.n	800a318 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a304:	2208      	movs	r2, #8
 800a306:	4906      	ldr	r1, [pc, #24]	@ (800a320 <Get_SerialNum+0x30>)
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f80d 	bl	800a328 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a30e:	2204      	movs	r2, #4
 800a310:	4904      	ldr	r1, [pc, #16]	@ (800a324 <Get_SerialNum+0x34>)
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f808 	bl	800a328 <IntToUnicode>
  }
}
 800a318:	bf00      	nop
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000162 	.word	0x20000162
 800a324:	20000172 	.word	0x20000172

0800a328 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	4613      	mov	r3, r2
 800a334:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]
 800a33e:	e027      	b.n	800a390 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	0f1b      	lsrs	r3, r3, #28
 800a344:	2b09      	cmp	r3, #9
 800a346:	d80b      	bhi.n	800a360 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	0f1b      	lsrs	r3, r3, #28
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	4619      	mov	r1, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	440b      	add	r3, r1
 800a358:	3230      	adds	r2, #48	@ 0x30
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	e00a      	b.n	800a376 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	0f1b      	lsrs	r3, r3, #28
 800a364:	b2da      	uxtb	r2, r3
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	4619      	mov	r1, r3
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	440b      	add	r3, r1
 800a370:	3237      	adds	r2, #55	@ 0x37
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	011b      	lsls	r3, r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	3301      	adds	r3, #1
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	4413      	add	r3, r2
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	3301      	adds	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
 800a390:	7dfa      	ldrb	r2, [r7, #23]
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	429a      	cmp	r2, r3
 800a396:	d3d3      	bcc.n	800a340 <IntToUnicode+0x18>
  }
}
 800a398:	bf00      	nop
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e8 <HAL_PCD_MspInit+0x44>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d113      	bne.n	800a3de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ec <HAL_PCD_MspInit+0x48>)
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a3ec <HAL_PCD_MspInit+0x48>)
 800a3bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3c0:	61d3      	str	r3, [r2, #28]
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <HAL_PCD_MspInit+0x48>)
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2014      	movs	r0, #20
 800a3d4:	f7f7 fd11 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3d8:	2014      	movs	r0, #20
 800a3da:	f7f7 fd2a 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	40005c00 	.word	0x40005c00
 800a3ec:	40021000 	.word	0x40021000

0800a3f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7fe fd7f 	bl	8008f0a <USBD_LL_SetupStage>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	440b      	add	r3, r1
 800a434:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	4619      	mov	r1, r3
 800a43e:	f7fe fdb1 	bl	8008fa4 <USBD_LL_DataOutStage>
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	440b      	add	r3, r1
 800a46a:	333c      	adds	r3, #60	@ 0x3c
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	4619      	mov	r1, r3
 800a472:	f7fe fe08 	bl	8009086 <USBD_LL_DataInStage>
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe ff18 	bl	80092c2 <USBD_LL_SOF>
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d001      	beq.n	800a4b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4ae:	f7f6 fd97 	bl	8000fe0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4b8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fec8 	bl	8009252 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe fe81 	bl	80091d0 <USBD_LL_Reset>
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fec2 	bl	8009270 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4f4:	4b04      	ldr	r3, [pc, #16]	@ (800a508 <HAL_PCD_SuspendCallback+0x30>)
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	4a03      	ldr	r2, [pc, #12]	@ (800a508 <HAL_PCD_SuspendCallback+0x30>)
 800a4fa:	f043 0306 	orr.w	r3, r3, #6
 800a4fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	e000ed00 	.word	0xe000ed00

0800a50c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe febc 	bl	8009298 <USBD_LL_Resume>
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a530:	4a28      	ldr	r2, [pc, #160]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a26      	ldr	r2, [pc, #152]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a53c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a540:	4b24      	ldr	r3, [pc, #144]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a542:	4a25      	ldr	r2, [pc, #148]	@ (800a5d8 <USBD_LL_Init+0xb0>)
 800a544:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a546:	4b23      	ldr	r3, [pc, #140]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a548:	2208      	movs	r2, #8
 800a54a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a54c:	4b21      	ldr	r3, [pc, #132]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a54e:	2202      	movs	r2, #2
 800a550:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a552:	4b20      	ldr	r3, [pc, #128]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a554:	2200      	movs	r2, #0
 800a556:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a558:	4b1e      	ldr	r3, [pc, #120]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a55e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a560:	2200      	movs	r2, #0
 800a562:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a564:	481b      	ldr	r0, [pc, #108]	@ (800a5d4 <USBD_LL_Init+0xac>)
 800a566:	f7f8 fa1b 	bl	80029a0 <HAL_PCD_Init>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a570:	f7f6 fd36 	bl	8000fe0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a57a:	2318      	movs	r3, #24
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	f7f9 ff39 	bl	80043f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58a:	2358      	movs	r3, #88	@ 0x58
 800a58c:	2200      	movs	r2, #0
 800a58e:	2180      	movs	r1, #128	@ 0x80
 800a590:	f7f9 ff31 	bl	80043f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a59a:	23c0      	movs	r3, #192	@ 0xc0
 800a59c:	2200      	movs	r2, #0
 800a59e:	2181      	movs	r1, #129	@ 0x81
 800a5a0:	f7f9 ff29 	bl	80043f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	f7f9 ff20 	bl	80043f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2182      	movs	r1, #130	@ 0x82
 800a5c4:	f7f9 ff17 	bl	80043f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000c50 	.word	0x20000c50
 800a5d8:	40005c00 	.word	0x40005c00

0800a5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f8 fad3 	bl	8002b9e <HAL_PCD_Start>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f94e 	bl	800a8a0 <USBD_Get_USB_Status>
 800a604:	4603      	mov	r3, r0
 800a606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a608:	7bbb      	ldrb	r3, [r7, #14]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	461a      	mov	r2, r3
 800a620:	4603      	mov	r3, r0
 800a622:	70fb      	strb	r3, [r7, #3]
 800a624:	460b      	mov	r3, r1
 800a626:	70bb      	strb	r3, [r7, #2]
 800a628:	4613      	mov	r3, r2
 800a62a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a63a:	78bb      	ldrb	r3, [r7, #2]
 800a63c:	883a      	ldrh	r2, [r7, #0]
 800a63e:	78f9      	ldrb	r1, [r7, #3]
 800a640:	f7f8 fc28 	bl	8002e94 <HAL_PCD_EP_Open>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f928 	bl	800a8a0 <USBD_Get_USB_Status>
 800a650:	4603      	mov	r3, r0
 800a652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a654:	7bbb      	ldrb	r3, [r7, #14]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	460b      	mov	r3, r1
 800a668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a678:	78fa      	ldrb	r2, [r7, #3]
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f8 fc66 	bl	8002f4e <HAL_PCD_EP_Close>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 f909 	bl	800a8a0 <USBD_Get_USB_Status>
 800a68e:	4603      	mov	r3, r0
 800a690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a692:	7bbb      	ldrb	r3, [r7, #14]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7f8 fd0e 	bl	80030dc <HAL_PCD_EP_SetStall>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f8ea 	bl	800a8a0 <USBD_Get_USB_Status>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6f4:	78fa      	ldrb	r2, [r7, #3]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f8 fd4f 	bl	800319c <HAL_PCD_EP_ClrStall>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f8cb 	bl	800a8a0 <USBD_Get_USB_Status>
 800a70a:	4603      	mov	r3, r0
 800a70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a72a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a72c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a730:	2b00      	cmp	r3, #0
 800a732:	da0c      	bge.n	800a74e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a73a:	68f9      	ldr	r1, [r7, #12]
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	440b      	add	r3, r1
 800a748:	3302      	adds	r3, #2
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	e00b      	b.n	800a766 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a754:	68f9      	ldr	r1, [r7, #12]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	440b      	add	r3, r1
 800a760:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a764:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bc80      	pop	{r7}
 800a76e:	4770      	bx	lr

0800a770 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a78a:	78fa      	ldrb	r2, [r7, #3]
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7f8 fb5b 	bl	8002e4a <HAL_PCD_SetAddress>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f880 	bl	800a8a0 <USBD_Get_USB_Status>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	72fb      	strb	r3, [r7, #11]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7d0:	893b      	ldrh	r3, [r7, #8]
 800a7d2:	7af9      	ldrb	r1, [r7, #11]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f7f8 fc4a 	bl	800306e <HAL_PCD_EP_Transmit>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f85d 	bl	800a8a0 <USBD_Get_USB_Status>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	461a      	mov	r2, r3
 800a800:	460b      	mov	r3, r1
 800a802:	72fb      	strb	r3, [r7, #11]
 800a804:	4613      	mov	r3, r2
 800a806:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a816:	893b      	ldrh	r3, [r7, #8]
 800a818:	7af9      	ldrb	r1, [r7, #11]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	f7f8 fbdf 	bl	8002fde <HAL_PCD_EP_Receive>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f83a 	bl	800a8a0 <USBD_Get_USB_Status>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a830:	7dbb      	ldrb	r3, [r7, #22]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f7f8 fbf5 	bl	8003040 <HAL_PCD_EP_GetRxCount>
 800a856:	4603      	mov	r3, r0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <USBD_static_malloc+0x14>)
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	bc80      	pop	{r7}
 800a872:	4770      	bx	lr
 800a874:	20000f40 	.word	0x20000f40

0800a878 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]

}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr

0800a88a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bc80      	pop	{r7}
 800a89e:	4770      	bx	lr

0800a8a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d817      	bhi.n	800a8e4 <USBD_Get_USB_Status+0x44>
 800a8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8bc <USBD_Get_USB_Status+0x1c>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8cd 	.word	0x0800a8cd
 800a8c0:	0800a8d3 	.word	0x0800a8d3
 800a8c4:	0800a8d9 	.word	0x0800a8d9
 800a8c8:	0800a8df 	.word	0x0800a8df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d0:	e00b      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d6:	e008      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	73fb      	strb	r3, [r7, #15]
    break;
 800a8dc:	e005      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e2:	e002      	b.n	800a8ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e8:	bf00      	nop
  }
  return usb_status;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc80      	pop	{r7}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop

0800a8f8 <memset>:
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4402      	add	r2, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <__libc_init_array>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	2600      	movs	r6, #0
 800a90c:	4d0c      	ldr	r5, [pc, #48]	@ (800a940 <__libc_init_array+0x38>)
 800a90e:	4c0d      	ldr	r4, [pc, #52]	@ (800a944 <__libc_init_array+0x3c>)
 800a910:	1b64      	subs	r4, r4, r5
 800a912:	10a4      	asrs	r4, r4, #2
 800a914:	42a6      	cmp	r6, r4
 800a916:	d109      	bne.n	800a92c <__libc_init_array+0x24>
 800a918:	f000 f81a 	bl	800a950 <_init>
 800a91c:	2600      	movs	r6, #0
 800a91e:	4d0a      	ldr	r5, [pc, #40]	@ (800a948 <__libc_init_array+0x40>)
 800a920:	4c0a      	ldr	r4, [pc, #40]	@ (800a94c <__libc_init_array+0x44>)
 800a922:	1b64      	subs	r4, r4, r5
 800a924:	10a4      	asrs	r4, r4, #2
 800a926:	42a6      	cmp	r6, r4
 800a928:	d105      	bne.n	800a936 <__libc_init_array+0x2e>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a930:	4798      	blx	r3
 800a932:	3601      	adds	r6, #1
 800a934:	e7ee      	b.n	800a914 <__libc_init_array+0xc>
 800a936:	f855 3b04 	ldr.w	r3, [r5], #4
 800a93a:	4798      	blx	r3
 800a93c:	3601      	adds	r6, #1
 800a93e:	e7f2      	b.n	800a926 <__libc_init_array+0x1e>
 800a940:	0800a9dc 	.word	0x0800a9dc
 800a944:	0800a9dc 	.word	0x0800a9dc
 800a948:	0800a9dc 	.word	0x0800a9dc
 800a94c:	0800a9e0 	.word	0x0800a9e0

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
