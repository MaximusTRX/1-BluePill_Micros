
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a604  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a710  0800a710  0000b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a784  0800a784  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a784  0800a784  0000c17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a784  0800a784  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a784  0800a784  0000b784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a788  0800a788  0000b788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a78c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  2000017c  0800a908  0000c17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001148  0800a908  0000d148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ba  00000000  00000000  0000c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bab  00000000  00000000  0002545f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00029010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b0  00000000  00000000  0002b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d19b  00000000  00000000  00046de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009689c  00000000  00000000  00063f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  000fa85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00100784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a6f8 	.word	0x0800a6f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800a6f8 	.word	0x0800a6f8

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
	...

08000160 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0c      	ldr	r2, [pc, #48]	@ (80001a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d105      	bne.n	800017e <HAL_TIM_PeriodElapsedCallback+0x1e>
		t100ms--;
 8000172:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	3b01      	subs	r3, #1
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800017c:	701a      	strb	r2, [r3, #0]
	}
	if(t100ms==0){
 800017e:	4b09      	ldr	r3, [pc, #36]	@ (80001a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d107      	bne.n	8000196 <HAL_TIM_PeriodElapsedCallback+0x36>
		flags1.F100MS = 1;
 8000186:	4a08      	ldr	r2, [pc, #32]	@ (80001a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000188:	7813      	ldrb	r3, [r2, #0]
 800018a:	f043 0302 	orr.w	r3, r3, #2
 800018e:	7013      	strb	r3, [r2, #0]
		t100ms=10;
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000192:	220a      	movs	r2, #10
 8000194:	701a      	strb	r2, [r3, #0]
	}
}
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40012c00 	.word	0x40012c00
 80001a4:	20000548 	.word	0x20000548
 80001a8:	200003a4 	.word	0x200003a4

080001ac <HAL_UART_RxCpltCallback>:

/*=============>Recepci贸n de datos desde USART<=============
 * Interrupci贸n que es llamada cuando se produce una recepci贸n de datos.
 * Cargo los datos recibidos al Buffer de Recepci贸n
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0a      	ldr	r2, [pc, #40]	@ (80001e4 <HAL_UART_RxCpltCallback+0x38>)
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d10d      	bne.n	80001da <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 80001be:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <HAL_UART_RxCpltCallback+0x3c>)
 80001c0:	791b      	ldrb	r3, [r3, #4]
 80001c2:	1c5a      	adds	r2, r3, #1
 80001c4:	b2d1      	uxtb	r1, r2
 80001c6:	4a08      	ldr	r2, [pc, #32]	@ (80001e8 <HAL_UART_RxCpltCallback+0x3c>)
 80001c8:	7111      	strb	r1, [r2, #4]
 80001ca:	3308      	adds	r3, #8
 80001cc:	4a06      	ldr	r2, [pc, #24]	@ (80001e8 <HAL_UART_RxCpltCallback+0x3c>)
 80001ce:	4413      	add	r3, r2
 80001d0:	2201      	movs	r2, #1
 80001d2:	4619      	mov	r1, r3
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <HAL_UART_RxCpltCallback+0x40>)
 80001d6:	f005 f990 	bl	80054fa <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40013800 	.word	0x40013800
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	20000500 	.word	0x20000500

080001f0 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	460b      	mov	r3, r1
 80001fa:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	e00c      	b.n	800021c <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	4a09      	ldr	r2, [pc, #36]	@ (8000230 <USBReceive+0x40>)
 800020a:	7912      	ldrb	r2, [r2, #4]
 800020c:	4611      	mov	r1, r2
 800020e:	781a      	ldrb	r2, [r3, #0]
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <USBReceive+0x40>)
 8000212:	440b      	add	r3, r1
 8000214:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	3301      	adds	r3, #1
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	887b      	ldrh	r3, [r7, #2]
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	429a      	cmp	r2, r3
 8000222:	dbee      	blt.n	8000202 <USBReceive+0x12>
	}


}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	2000019c 	.word	0x2000019c

08000234 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 800023c:	e0e3      	b.n	8000406 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 800023e:	4b78      	ldr	r3, [pc, #480]	@ (8000420 <decodeProtocol+0x1ec>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b06      	cmp	r3, #6
 8000244:	f200 80d8 	bhi.w	80003f8 <decodeProtocol+0x1c4>
 8000248:	a201      	add	r2, pc, #4	@ (adr r2, 8000250 <decodeProtocol+0x1c>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	0800026d 	.word	0x0800026d
 8000254:	08000295 	.word	0x08000295
 8000258:	080002c9 	.word	0x080002c9
 800025c:	080002fd 	.word	0x080002fd
 8000260:	08000331 	.word	0x08000331
 8000264:	08000359 	.word	0x08000359
 8000268:	0800039b 	.word	0x0800039b
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	b2d1      	uxtb	r1, r2
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7151      	strb	r1, [r2, #5]
 8000278:	461a      	mov	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	7a1b      	ldrb	r3, [r3, #8]
 8000280:	2b55      	cmp	r3, #85	@ 0x55
 8000282:	f040 80bd 	bne.w	8000400 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 8000286:	4b66      	ldr	r3, [pc, #408]	@ (8000420 <decodeProtocol+0x1ec>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000292:	e0b5      	b.n	8000400 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	795b      	ldrb	r3, [r3, #5]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	b2d1      	uxtb	r1, r2
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	7151      	strb	r1, [r2, #5]
 80002a0:	461a      	mov	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	7a1b      	ldrb	r3, [r3, #8]
 80002a8:	2b4e      	cmp	r3, #78	@ 0x4e
 80002aa:	d103      	bne.n	80002b4 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 80002ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000420 <decodeProtocol+0x1ec>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80002b2:	e0a8      	b.n	8000406 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	795b      	ldrb	r3, [r3, #5]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 80002c0:	4b57      	ldr	r3, [pc, #348]	@ (8000420 <decodeProtocol+0x1ec>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
			break;
 80002c6:	e09e      	b.n	8000406 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	795b      	ldrb	r3, [r3, #5]
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	b2d1      	uxtb	r1, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	7151      	strb	r1, [r2, #5]
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	7a1b      	ldrb	r3, [r3, #8]
 80002dc:	2b45      	cmp	r3, #69	@ 0x45
 80002de:	d103      	bne.n	80002e8 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 80002e0:	4b4f      	ldr	r3, [pc, #316]	@ (8000420 <decodeProtocol+0x1ec>)
 80002e2:	2203      	movs	r2, #3
 80002e4:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 80002e6:	e08e      	b.n	8000406 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	795b      	ldrb	r3, [r3, #5]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 80002f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000420 <decodeProtocol+0x1ec>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
			break;
 80002fa:	e084      	b.n	8000406 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	b2d1      	uxtb	r1, r2
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	7151      	strb	r1, [r2, #5]
 8000308:	461a      	mov	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	7a1b      	ldrb	r3, [r3, #8]
 8000310:	2b52      	cmp	r3, #82	@ 0x52
 8000312:	d103      	bne.n	800031c <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000314:	4b42      	ldr	r3, [pc, #264]	@ (8000420 <decodeProtocol+0x1ec>)
 8000316:	2204      	movs	r2, #4
 8000318:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800031a:	e074      	b.n	8000406 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	3b01      	subs	r3, #1
 8000322:	b2da      	uxtb	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000328:	4b3d      	ldr	r3, [pc, #244]	@ (8000420 <decodeProtocol+0x1ec>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
			break;
 800032e:	e06a      	b.n	8000406 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	795a      	ldrb	r2, [r3, #5]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1a      	ldrb	r2, [r3, #8]
 800034c:	4b35      	ldr	r3, [pc, #212]	@ (8000424 <decodeProtocol+0x1f0>)
 800034e:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 8000350:	4b33      	ldr	r3, [pc, #204]	@ (8000420 <decodeProtocol+0x1ec>)
 8000352:	2205      	movs	r2, #5
 8000354:	701a      	strb	r2, [r3, #0]
			break;
 8000356:	e056      	b.n	8000406 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	1c5a      	adds	r2, r3, #1
 800035e:	b2d1      	uxtb	r1, r2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	7151      	strb	r1, [r2, #5]
 8000364:	461a      	mov	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	7a1b      	ldrb	r3, [r3, #8]
 800036c:	2b3a      	cmp	r3, #58	@ 0x3a
 800036e:	d10a      	bne.n	8000386 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 8000370:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <decodeProtocol+0x1ec>)
 8000372:	2206      	movs	r2, #6
 8000374:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000376:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <decodeProtocol+0x1f0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800037e:	b2da      	uxtb	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000384:	e03f      	b.n	8000406 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	3b01      	subs	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <decodeProtocol+0x1ec>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
			break;
 8000398:	e035      	b.n	8000406 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 800039a:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <decodeProtocol+0x1f0>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d90f      	bls.n	80003c2 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	795b      	ldrb	r3, [r3, #5]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	b2d1      	uxtb	r1, r2
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7151      	strb	r1, [r2, #5]
 80003ae:	461a      	mov	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	7a1a      	ldrb	r2, [r3, #8]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	789b      	ldrb	r3, [r3, #2]
 80003ba:	4053      	eors	r3, r2
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 80003c2:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <decodeProtocol+0x1f0>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <decodeProtocol+0x1f0>)
 80003cc:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <decodeProtocol+0x1f0>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d116      	bne.n	8000404 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 80003d6:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <decodeProtocol+0x1ec>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	789a      	ldrb	r2, [r3, #2]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	4619      	mov	r1, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	440b      	add	r3, r1
 80003ea:	7a1b      	ldrb	r3, [r3, #8]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d109      	bne.n	8000404 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f819 	bl	8000428 <decodeData>
				}
			}
			break;
 80003f6:	e005      	b.n	8000404 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 80003f8:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <decodeProtocol+0x1ec>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
			break;
 80003fe:	e002      	b.n	8000406 <decodeProtocol+0x1d2>
			break;
 8000400:	bf00      	nop
 8000402:	e000      	b.n	8000406 <decodeProtocol+0x1d2>
			break;
 8000404:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795a      	ldrb	r2, [r3, #5]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	791b      	ldrb	r3, [r3, #4]
 800040e:	429a      	cmp	r2, r3
 8000410:	f47f af15 	bne.w	800023e <decodeProtocol+0xa>
		}
	}

}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000198 	.word	0x20000198
 8000424:	2000055c 	.word	0x2000055c

08000428 <decodeData>:

void decodeData(_sDato *datosCom){
 8000428:	b480      	push	{r7}
 800042a:	b091      	sub	sp, #68	@ 0x44
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000430:	2300      	movs	r3, #0
 8000432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 8000436:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000440:	3340      	adds	r3, #64	@ 0x40
 8000442:	443b      	add	r3, r7
 8000444:	2255      	movs	r2, #85	@ 0x55
 8000446:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 800044a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000454:	3340      	adds	r3, #64	@ 0x40
 8000456:	443b      	add	r3, r7
 8000458:	224e      	movs	r2, #78	@ 0x4e
 800045a:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 800045e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000468:	3340      	adds	r3, #64	@ 0x40
 800046a:	443b      	add	r3, r7
 800046c:	2245      	movs	r2, #69	@ 0x45
 800046e:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000472:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800047c:	3340      	adds	r3, #64	@ 0x40
 800047e:	443b      	add	r3, r7
 8000480:	2252      	movs	r2, #82	@ 0x52
 8000482:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 8000486:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000490:	3340      	adds	r3, #64	@ 0x40
 8000492:	443b      	add	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 800049a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004a4:	3340      	adds	r3, #64	@ 0x40
 80004a6:	443b      	add	r3, r7
 80004a8:	223a      	movs	r2, #58	@ 0x3a
 80004aa:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	3302      	adds	r3, #2
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	7a1b      	ldrb	r3, [r3, #8]
 80004ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80004bc:	d116      	bne.n	80004ec <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 80004be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004c8:	3340      	adds	r3, #64	@ 0x40
 80004ca:	443b      	add	r3, r7
 80004cc:	22f0      	movs	r2, #240	@ 0xf0
 80004ce:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 80004d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004dc:	3340      	adds	r3, #64	@ 0x40
 80004de:	443b      	add	r3, r7
 80004e0:	220d      	movs	r2, #13
 80004e2:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 80004e6:	2303      	movs	r3, #3
 80004e8:	733b      	strb	r3, [r7, #12]
			break;
 80004ea:	e00c      	b.n	8000506 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 80004ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004f6:	3340      	adds	r3, #64	@ 0x40
 80004f8:	443b      	add	r3, r7
 80004fa:	22dd      	movs	r2, #221	@ 0xdd
 80004fc:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000500:	2302      	movs	r3, #2
 8000502:	733b      	strb	r3, [r7, #12]
			break;
 8000504:	bf00      	nop
	}

	cheksum=0;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800050c:	2300      	movs	r3, #0
 800050e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000512:	e021      	b.n	8000558 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000514:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000518:	3340      	adds	r3, #64	@ 0x40
 800051a:	443b      	add	r3, r7
 800051c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000520:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000524:	4053      	eors	r3, r2
 8000526:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800052a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800052e:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <decodeData+0x160>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	1c59      	adds	r1, r3, #1
 8000534:	b2c8      	uxtb	r0, r1
 8000536:	4914      	ldr	r1, [pc, #80]	@ (8000588 <decodeData+0x160>)
 8000538:	7188      	strb	r0, [r1, #6]
 800053a:	4619      	mov	r1, r3
 800053c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8000540:	443b      	add	r3, r7
 8000542:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	440b      	add	r3, r1
 800054a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800054e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000552:	3301      	adds	r3, #1
 8000554:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000558:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800055c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000560:	429a      	cmp	r2, r3
 8000562:	d3d7      	bcc.n	8000514 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <decodeData+0x160>)
 8000566:	799b      	ldrb	r3, [r3, #6]
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	b2d1      	uxtb	r1, r2
 800056c:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <decodeData+0x160>)
 800056e:	7191      	strb	r1, [r2, #6]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800057a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 800057e:	bf00      	nop
 8000580:	3744      	adds	r7, #68	@ 0x44
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	2000019c 	.word	0x2000019c

0800058c <encodeData>:

void encodeData(uint8_t id){
 800058c:	b480      	push	{r7}
 800058e:	b091      	sub	sp, #68	@ 0x44
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 800059c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005a6:	3340      	adds	r3, #64	@ 0x40
 80005a8:	443b      	add	r3, r7
 80005aa:	2255      	movs	r2, #85	@ 0x55
 80005ac:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80005b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005ba:	3340      	adds	r3, #64	@ 0x40
 80005bc:	443b      	add	r3, r7
 80005be:	224e      	movs	r2, #78	@ 0x4e
 80005c0:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80005c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005ce:	3340      	adds	r3, #64	@ 0x40
 80005d0:	443b      	add	r3, r7
 80005d2:	2245      	movs	r2, #69	@ 0x45
 80005d4:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80005d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005e2:	3340      	adds	r3, #64	@ 0x40
 80005e4:	443b      	add	r3, r7
 80005e6:	2252      	movs	r2, #82	@ 0x52
 80005e8:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 80005ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005f6:	3340      	adds	r3, #64	@ 0x40
 80005f8:	443b      	add	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800060a:	3340      	adds	r3, #64	@ 0x40
 800060c:	443b      	add	r3, r7
 800060e:	223a      	movs	r2, #58	@ 0x3a
 8000610:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2ba0      	cmp	r3, #160	@ 0xa0
 8000618:	d120      	bne.n	800065c <encodeData+0xd0>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 800061a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000624:	3340      	adds	r3, #64	@ 0x40
 8000626:	443b      	add	r3, r7
 8000628:	22a0      	movs	r2, #160	@ 0xa0
 800062a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x04;
 800062e:	2304      	movs	r3, #4
 8000630:	733b      	strb	r3, [r7, #12]

//		myWord.ui32 = sensorIR.valueIRIzq;
		auxBuffTx[indiceAux++] = 0x99;
 8000632:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800063c:	3340      	adds	r3, #64	@ 0x40
 800063e:	443b      	add	r3, r7
 8000640:	2299      	movs	r2, #153	@ 0x99
 8000642:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = 0x99;
 8000646:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000650:	3340      	adds	r3, #64	@ 0x40
 8000652:	443b      	add	r3, r7
 8000654:	2299      	movs	r2, #153	@ 0x99
 8000656:	f803 2c38 	strb.w	r2, [r3, #-56]
//
//		myWord.ui32 = sensorIR.valueIRDer;
//		auxBuffTx[indiceAux++] = myWord.ui8[0];
//		auxBuffTx[indiceAux++] = myWord.ui8[1];
		break;
 800065a:	e00c      	b.n	8000676 <encodeData+0xea>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800065c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000666:	3340      	adds	r3, #64	@ 0x40
 8000668:	443b      	add	r3, r7
 800066a:	22dd      	movs	r2, #221	@ 0xdd
 800066c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000670:	2302      	movs	r3, #2
 8000672:	733b      	strb	r3, [r7, #12]
			break;
 8000674:	bf00      	nop
	}
	cheksum=0;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800067c:	2300      	movs	r3, #0
 800067e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000682:	e021      	b.n	80006c8 <encodeData+0x13c>
	{
		cheksum ^= auxBuffTx[a];
 8000684:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000688:	3340      	adds	r3, #64	@ 0x40
 800068a:	443b      	add	r3, r7
 800068c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000690:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000694:	4053      	eors	r3, r2
 8000696:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800069a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <encodeData+0x16c>)
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	1c59      	adds	r1, r3, #1
 80006a4:	b2c8      	uxtb	r0, r1
 80006a6:	4914      	ldr	r1, [pc, #80]	@ (80006f8 <encodeData+0x16c>)
 80006a8:	7188      	strb	r0, [r1, #6]
 80006aa:	4619      	mov	r1, r3
 80006ac:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80006b0:	443b      	add	r3, r7
 80006b2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <encodeData+0x16c>)
 80006b8:	440b      	add	r3, r1
 80006ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80006be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80006c2:	3301      	adds	r3, #1
 80006c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80006c8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80006cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3d7      	bcc.n	8000684 <encodeData+0xf8>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <encodeData+0x16c>)
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <encodeData+0x16c>)
 80006de:	7191      	strb	r1, [r2, #6]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <encodeData+0x16c>)
 80006e4:	4413      	add	r3, r2
 80006e6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80006ea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 80006ee:	bf00      	nop
 80006f0:	3744      	adds	r7, #68	@ 0x44
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	2000019c 	.word	0x2000019c

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fd52 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f8ae 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 fac0 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 800070c:	f000 faa0 	bl	8000c50 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000710:	f000 fa74 	bl	8000bfc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000714:	f000 f9d4 	bl	8000ac0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000718:	f009 fafc 	bl	8009d14 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800071c:	f000 f900 	bl	8000920 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000720:	f000 f9a0 	bl	8000a64 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000724:	f000 fa1c 	bl	8000b60 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000728:	4846      	ldr	r0, [pc, #280]	@ (8000844 <main+0x148>)
 800072a:	f004 fab3 	bl	8004c94 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 800072e:	4846      	ldr	r0, [pc, #280]	@ (8000848 <main+0x14c>)
 8000730:	f009 fc00 	bl	8009f34 <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepi贸n del Buffer de Recepci贸n
 8000734:	4b45      	ldr	r3, [pc, #276]	@ (800084c <main+0x150>)
 8000736:	2200      	movs	r2, #0
 8000738:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepci贸n
 800073a:	4b44      	ldr	r3, [pc, #272]	@ (800084c <main+0x150>)
 800073c:	2200      	movs	r2, #0
 800073e:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000740:	4b42      	ldr	r3, [pc, #264]	@ (800084c <main+0x150>)
 8000742:	2200      	movs	r2, #0
 8000744:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 8000746:	4b41      	ldr	r3, [pc, #260]	@ (800084c <main+0x150>)
 8000748:	2200      	movs	r2, #0
 800074a:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 800074c:	4b3f      	ldr	r3, [pc, #252]	@ (800084c <main+0x150>)
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	3308      	adds	r3, #8
 8000752:	4a3e      	ldr	r2, [pc, #248]	@ (800084c <main+0x150>)
 8000754:	4413      	add	r3, r2
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	483d      	ldr	r0, [pc, #244]	@ (8000850 <main+0x154>)
 800075c:	f004 fecd 	bl	80054fa <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000760:	2208      	movs	r2, #8
 8000762:	493c      	ldr	r1, [pc, #240]	@ (8000854 <main+0x158>)
 8000764:	483c      	ldr	r0, [pc, #240]	@ (8000858 <main+0x15c>)
 8000766:	f000 fe7d 	bl	8001464 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000770:	483a      	ldr	r0, [pc, #232]	@ (800085c <main+0x160>)
 8000772:	f001 fe95 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	@ 0x64
 8000778:	f000 fd78 	bl	800126c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000782:	4836      	ldr	r0, [pc, #216]	@ (800085c <main+0x160>)
 8000784:	f001 fe8c 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	@ 0x64
 800078a:	f000 fd6f 	bl	800126c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000794:	4831      	ldr	r0, [pc, #196]	@ (800085c <main+0x160>)
 8000796:	f001 fe83 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	@ 0x64
 800079c:	f000 fd66 	bl	800126c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	482d      	ldr	r0, [pc, #180]	@ (800085c <main+0x160>)
 80007a8:	f001 fe7a 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	@ 0x64
 80007ae:	f000 fd5d 	bl	800126c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b8:	4828      	ldr	r0, [pc, #160]	@ (800085c <main+0x160>)
 80007ba:	f001 fe71 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	@ 0x64
 80007c0:	f000 fd54 	bl	800126c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	4824      	ldr	r0, [pc, #144]	@ (800085c <main+0x160>)
 80007cc:	f001 fe68 	bl	80024a0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags1.F100MS==1){
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <main+0x164>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00c      	beq.n	80007f8 <main+0xfc>
		  flags1.F100MS = 0;
 80007de:	4a20      	ldr	r2, [pc, #128]	@ (8000860 <main+0x164>)
 80007e0:	7813      	ldrb	r3, [r2, #0]
 80007e2:	f36f 0341 	bfc	r3, #1, #1
 80007e6:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 80007e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ec:	481b      	ldr	r0, [pc, #108]	@ (800085c <main+0x160>)
 80007ee:	f001 fe6f 	bl	80024d0 <HAL_GPIO_TogglePin>
		  encodeData(IR_SENSOR);
 80007f2:	20a0      	movs	r0, #160	@ 0xa0
 80007f4:	f7ff feca 	bl	800058c <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <main+0x150>)
 80007fa:	795a      	ldrb	r2, [r3, #5]
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <main+0x150>)
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d002      	beq.n	800080a <main+0x10e>
		  decodeProtocol(&datosComProtocol);
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <main+0x150>)
 8000806:	f7ff fd15 	bl	8000234 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <main+0x150>)
 800080c:	79da      	ldrb	r2, [r3, #7]
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <main+0x150>)
 8000810:	799b      	ldrb	r3, [r3, #6]
 8000812:	429a      	cmp	r2, r3
 8000814:	d0dc      	beq.n	80007d0 <main+0xd4>
//		  CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx++], 1);
		  if (huart1.gState == HAL_UART_STATE_READY) {
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <main+0x154>)
 8000818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b20      	cmp	r3, #32
 8000820:	d1d6      	bne.n	80007d0 <main+0xd4>
			  HAL_UART_Transmit_IT(&huart1, &datosComProtocol.bufferTx[datosComProtocol.indexReadTx++], 1);
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <main+0x150>)
 8000824:	79db      	ldrb	r3, [r3, #7]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	b2d1      	uxtb	r1, r2
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <main+0x150>)
 800082c:	71d1      	strb	r1, [r2, #7]
 800082e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000832:	4a06      	ldr	r2, [pc, #24]	@ (800084c <main+0x150>)
 8000834:	4413      	add	r3, r2
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <main+0x154>)
 800083c:	f004 fe28 	bl	8005490 <HAL_UART_Transmit_IT>
	  if(flags1.F100MS==1){
 8000840:	e7c6      	b.n	80007d0 <main+0xd4>
 8000842:	bf00      	nop
 8000844:	20000470 	.word	0x20000470
 8000848:	080001f1 	.word	0x080001f1
 800084c:	2000019c 	.word	0x2000019c
 8000850:	20000500 	.word	0x20000500
 8000854:	2000054c 	.word	0x2000054c
 8000858:	200003a8 	.word	0x200003a8
 800085c:	40011000 	.word	0x40011000
 8000860:	200003a4 	.word	0x200003a4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	2228      	movs	r2, #40	@ 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 ff14 	bl	800a6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fcd4 	bl	8004268 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008c6:	f000 fa5f 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 ff40 	bl	800476c <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008f2:	f000 fa49 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80008f6:	2312      	movs	r3, #18
 80008f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f004 f8be 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000912:	f000 fa39 	bl	8000d88 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	@ 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000930:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000932:	4a4b      	ldr	r2, [pc, #300]	@ (8000a60 <MX_ADC1_Init+0x140>)
 8000934:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000936:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800093c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800093e:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000940:	2200      	movs	r2, #0
 8000942:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000944:	4b45      	ldr	r3, [pc, #276]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000946:	2200      	movs	r2, #0
 8000948:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094a:	4b44      	ldr	r3, [pc, #272]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 800094c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000952:	4b42      	ldr	r3, [pc, #264]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000958:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 800095a:	2208      	movs	r2, #8
 800095c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	483f      	ldr	r0, [pc, #252]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000960:	f000 fca8 	bl	80012b4 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800096a:	f000 fa0d 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000972:	2301      	movs	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4837      	ldr	r0, [pc, #220]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000980:	f000 fe60 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f9fd 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098e:	2301      	movs	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000992:	2302      	movs	r3, #2
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4830      	ldr	r0, [pc, #192]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 800099c:	f000 fe52 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009a6:	f000 f9ef 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4829      	ldr	r0, [pc, #164]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 80009b8:	f000 fe44 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009c2:	f000 f9e1 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009c6:	2303      	movs	r3, #3
 80009c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 80009d4:	f000 fe36 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009de:	f000 f9d3 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009e6:	2305      	movs	r3, #5
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 80009f0:	f000 fe28 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009fa:	f000 f9c5 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009fe:	2305      	movs	r3, #5
 8000a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a02:	2306      	movs	r3, #6
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000a0c:	f000 fe1a 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a16:	f000 f9b7 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000a28:	f000 fe0c 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000a32:	f000 f9a9 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a36:	2307      	movs	r3, #7
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_ADC1_Init+0x13c>)
 8000a44:	f000 fdfe 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000a4e:	f000 f99b 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200003a8 	.word	0x200003a8
 8000a60:	40012400 	.word	0x40012400

08000a64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <MX_I2C2_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <MX_I2C2_Init+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_I2C2_Init+0x50>)
 8000aa2:	f001 fd2f 	bl	8002504 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 f96c 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000041c 	.word	0x2000041c
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000ade:	4a1f      	ldr	r2, [pc, #124]	@ (8000b5c <MX_TIM1_Init+0x9c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000ae4:	2247      	movs	r2, #71	@ 0x47
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000af0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000b0a:	f004 f873 	bl	8004bf4 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f938 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4619      	mov	r1, r3
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000b26:	f004 fa0f 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b30:	f000 f92a 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_TIM1_Init+0x98>)
 8000b42:	f004 fbe5 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b4c:	f000 f91c 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000470 	.word	0x20000470
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf8 <MX_TIM4_Init+0x98>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000ba4:	f004 f826 	bl	8004bf4 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bae:	f000 f8eb 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000bc0:	f004 f9c2 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 f8dd 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_TIM4_Init+0x94>)
 8000bdc:	f004 fb98 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000be6:	f000 f8cf 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200004b8 	.word	0x200004b8
 8000bf8:	40000800 	.word	0x40000800

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART1_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f004 fbdc 	bl	80053f0 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8a3 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000500 	.word	0x20000500
 8000c4c:	40013800 	.word	0x40013800

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_DMA_Init+0x38>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <MX_DMA_Init+0x38>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_DMA_Init+0x38>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200b      	movs	r0, #11
 8000c74:	f000 ffb7 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c78:	200b      	movs	r0, #11
 8000c7a:	f000 ffd0 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a34      	ldr	r2, [pc, #208]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a28      	ldr	r2, [pc, #160]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <MX_GPIO_Init+0xec>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d06:	481d      	ldr	r0, [pc, #116]	@ (8000d7c <MX_GPIO_Init+0xf0>)
 8000d08:	f001 fbca 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d12:	481b      	ldr	r0, [pc, #108]	@ (8000d80 <MX_GPIO_Init+0xf4>)
 8000d14:	f001 fbc4 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8000d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <MX_GPIO_Init+0xf0>)
 8000d32:	f001 fa31 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000d4c:	f001 fa24 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_GPIO_Init+0xf4>)
 8000d6a:	f001 fa15 	bl	8002198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MspInit+0x60>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_MspInit+0x60>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000

08000df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <HAL_ADC_MspInit+0xbc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d149      	bne.n	8000eac <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a20      	ldr	r2, [pc, #128]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <HAL_ADC_MspInit+0xc0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e48:	23ff      	movs	r3, #255	@ 0xff
 8000e4a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4819      	ldr	r0, [pc, #100]	@ (8000ebc <HAL_ADC_MspInit+0xc4>)
 8000e58:	f001 f99e 	bl	8002198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <HAL_ADC_MspInit+0xcc>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e90:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000e92:	f000 fedf 	bl	8001c54 <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e9c:	f7ff ff74 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_ADC_MspInit+0xc8>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40012400 	.word	0x40012400
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	200003d8 	.word	0x200003d8
 8000ec4:	40020008 	.word	0x40020008

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <HAL_I2C_MspInit+0x74>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d124      	bne.n	8000f32 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <HAL_I2C_MspInit+0x7c>)
 8000f16:	f001 f93f 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000f20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_I2C_MspInit+0x78>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40005800 	.word	0x40005800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010c00 	.word	0x40010c00

08000f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <HAL_TIM_Base_MspInit+0xa8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d114      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 fe2e 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fe47 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f90:	e029      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d124      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	61d3      	str	r3, [r2, #28]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fcc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <HAL_TIM_Base_MspInit+0xb4>)
 8000fe2:	f001 f8d9 	bl	8002198 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012c00 	.word	0x40012c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40000800 	.word	0x40000800
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <HAL_UART_MspInit+0x9c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d139      	bne.n	8001094 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_UART_MspInit+0xa0>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <HAL_UART_MspInit+0xa4>)
 8001066:	f001 f897 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <HAL_UART_MspInit+0xa4>)
 8001080:	f001 f88a 	bl	8002198 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2025      	movs	r0, #37	@ 0x25
 800108a:	f000 fdac 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108e:	2025      	movs	r0, #37	@ 0x25
 8001090:	f000 fdc5 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40013800 	.word	0x40013800
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010800 	.word	0x40010800

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f89c 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <DMA1_Channel1_IRQHandler+0x10>)
 8001106:	f000 ff13 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200003d8 	.word	0x200003d8

08001114 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800111a:	f001 fc5c 	bl	80029d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000c38 	.word	0x20000c38

08001128 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <TIM1_UP_IRQHandler+0x10>)
 800112e:	f003 fe03 	bl	8004d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000470 	.word	0x20000470

0800113c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <USART1_IRQHandler+0x10>)
 8001142:	f004 f9ff 	bl	8005544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000500 	.word	0x20000500

08001150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff fff8 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480b      	ldr	r0, [pc, #44]	@ (8001190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001162:	490c      	ldr	r1, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001164:	4a0c      	ldr	r2, [pc, #48]	@ (8001198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001178:	4c09      	ldr	r4, [pc, #36]	@ (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f009 fa93 	bl	800a6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7ff fab7 	bl	80006fc <main>
  bx lr
 800118e:	4770      	bx	lr
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001198:	0800a78c 	.word	0x0800a78c
  ldr r2, =_sbss
 800119c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80011a0:	20001148 	.word	0x20001148

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x28>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x28>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 fd09 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fde6 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd21 	bl	8001c3a <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 fce9 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_IncTick+0x1c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_IncTick+0x20>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a03      	ldr	r2, [pc, #12]	@ (8001254 <HAL_IncTick+0x20>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000008 	.word	0x20000008
 8001254:	20000560 	.word	0x20000560

08001258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b02      	ldr	r3, [pc, #8]	@ (8001268 <HAL_GetTick+0x10>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000560 	.word	0x20000560

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff fff0 	bl	8001258 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffe0 	bl	8001258 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0be      	b.n	8001454 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd80 	bl	8000df8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 faf5 	bl	80018e8 <ADC_ConversionStop_Disable>
 80012fe:	4603      	mov	r3, r0
 8001300:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8099 	bne.w	8001442 <HAL_ADC_Init+0x18e>
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8095 	bne.w	8001442 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001320:	f023 0302 	bic.w	r3, r3, #2
 8001324:	f043 0202 	orr.w	r2, r3, #2
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001334:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7b1b      	ldrb	r3, [r3, #12]
 800133a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800133c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4313      	orrs	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800134c:	d003      	beq.n	8001356 <HAL_ADC_Init+0xa2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <HAL_ADC_Init+0xa8>
 8001356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135a:	e000      	b.n	800135e <HAL_ADC_Init+0xaa>
 800135c:	2300      	movs	r3, #0
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7d1b      	ldrb	r3, [r3, #20]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d119      	bne.n	80013a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7b1b      	ldrb	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	3b01      	subs	r3, #1
 800137a:	035a      	lsls	r2, r3, #13
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	e00b      	b.n	80013a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f043 0220 	orr.w	r2, r3, #32
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	4b28      	ldr	r3, [pc, #160]	@ (800145c <HAL_ADC_Init+0x1a8>)
 80013bc:	4013      	ands	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013d0:	d003      	beq.n	80013da <HAL_ADC_Init+0x126>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d104      	bne.n	80013e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	3b01      	subs	r3, #1
 80013e0:	051b      	lsls	r3, r3, #20
 80013e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_ADC_Init+0x1ac>)
 8001400:	4013      	ands	r3, r2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	d10b      	bne.n	8001420 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	f043 0201 	orr.w	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800141e:	e018      	b.n	8001452 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	f023 0312 	bic.w	r3, r3, #18
 8001428:	f043 0210 	orr.w	r2, r3, #16
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001440:	e007      	b.n	8001452 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	f043 0210 	orr.w	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	ffe1f7fd 	.word	0xffe1f7fd
 8001460:	ff1f0efe 	.word	0xff1f0efe

08001464 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a64      	ldr	r2, [pc, #400]	@ (800160c <HAL_ADC_Start_DMA+0x1a8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d004      	beq.n	8001488 <HAL_ADC_Start_DMA+0x24>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a63      	ldr	r2, [pc, #396]	@ (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <HAL_ADC_Start_DMA+0x32>
 8001488:	4b60      	ldr	r3, [pc, #384]	@ (800160c <HAL_ADC_Start_DMA+0x1a8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001490:	2b00      	cmp	r3, #0
 8001492:	f040 80b3 	bne.w	80015fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_Start_DMA+0x40>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e0ae      	b.n	8001602 <HAL_ADC_Start_DMA+0x19e>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f9c1 	bl	8001834 <ADC_Enable>
 80014b2:	4603      	mov	r3, r0
 80014b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f040 809a 	bne.w	80015f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_Start_DMA+0x84>
 80014dc:	4b4b      	ldr	r3, [pc, #300]	@ (800160c <HAL_ADC_Start_DMA+0x1a8>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d115      	bne.n	8001514 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d026      	beq.n	8001550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001506:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001512:	e01d      	b.n	8001550 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a39      	ldr	r2, [pc, #228]	@ (800160c <HAL_ADC_Start_DMA+0x1a8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d004      	beq.n	8001534 <HAL_ADC_Start_DMA+0xd0>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a38      	ldr	r2, [pc, #224]	@ (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10d      	bne.n	8001550 <HAL_ADC_Start_DMA+0xec>
 8001534:	4b35      	ldr	r3, [pc, #212]	@ (800160c <HAL_ADC_Start_DMA+0x1a8>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001548:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001560:	f023 0206 	bic.w	r2, r3, #6
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001568:	e002      	b.n	8001570 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a25      	ldr	r2, [pc, #148]	@ (8001614 <HAL_ADC_Start_DMA+0x1b0>)
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a24      	ldr	r2, [pc, #144]	@ (8001618 <HAL_ADC_Start_DMA+0x1b4>)
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_ADC_Start_DMA+0x1b8>)
 800158e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0202 	mvn.w	r2, #2
 8001598:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a18      	ldr	r0, [r3, #32]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	334c      	adds	r3, #76	@ 0x4c
 80015b4:	4619      	mov	r1, r3
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f000 fba5 	bl	8001d08 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015c8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015cc:	d108      	bne.n	80015e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015de:	e00f      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015f0:	e006      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012400 	.word	0x40012400
 8001610:	40012800 	.word	0x40012800
 8001614:	0800196b 	.word	0x0800196b
 8001618:	080019e7 	.word	0x080019e7
 800161c:	08001a03 	.word	0x08001a03

08001620 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x20>
 8001660:	2302      	movs	r3, #2
 8001662:	e0dc      	b.n	800181e <HAL_ADC_ConfigChannel+0x1da>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b06      	cmp	r3, #6
 8001672:	d81c      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ac:	e03c      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d81c      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b23      	subs	r3, #35	@ 0x23
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	@ 0x23
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ee:	e01b      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	@ 0x41
 8001702:	221f      	movs	r2, #31
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	4019      	ands	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	@ 0x41
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d91c      	bls.n	800176a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68d9      	ldr	r1, [r3, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	3b1e      	subs	r3, #30
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6898      	ldr	r0, [r3, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	3b1e      	subs	r3, #30
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	e019      	b.n	800179e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	2207      	movs	r2, #7
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	4019      	ands	r1, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d132      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001828 <HAL_ADC_ConfigChannel+0x1e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d125      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d126      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d11a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_ADC_ConfigChannel+0x1e8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001802:	e007      	b.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012400 	.word	0x40012400
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d040      	beq.n	80018d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <ADC_Enable+0xac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <ADC_Enable+0xb0>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001870:	e002      	b.n	8001878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187e:	f7ff fceb 	bl	8001258 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001884:	e01f      	b.n	80018c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001886:	f7ff fce7 	bl	8001258 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d918      	bls.n	80018c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d011      	beq.n	80018c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d1d8      	bne.n	8001886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d12e      	bne.n	8001960 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001912:	f7ff fca1 	bl	8001258 <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001918:	e01b      	b.n	8001952 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800191a:	f7ff fc9d 	bl	8001258 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d914      	bls.n	8001952 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10d      	bne.n	8001952 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e007      	b.n	8001962 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d0dc      	beq.n	800191a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001980:	2b00      	cmp	r3, #0
 8001982:	d127      	bne.n	80019d4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800199a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800199e:	d115      	bne.n	80019cc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fbbd 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019d2:	e004      	b.n	80019de <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fe13 	bl	8001620 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fe02 	bl	8001632 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4906      	ldr	r1, [pc, #24]	@ (8001ad0 <__NVIC_EnableIRQ+0x34>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	@ (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff90 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff2d 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff42 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff90 	bl	8001b28 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5f 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff35 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e043      	b.n	8001cf2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <HAL_DMA_Init+0xa8>)
 8001c72:	4413      	add	r3, r2
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <HAL_DMA_Init+0xac>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	009a      	lsls	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_DMA_Init+0xb0>)
 8001c86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	bffdfff8 	.word	0xbffdfff8
 8001d00:	cccccccd 	.word	0xcccccccd
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Start_IT+0x20>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e04b      	b.n	8001dc0 <HAL_DMA_Start_IT+0xb8>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d13a      	bne.n	8001db2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f9eb 	bl	800213c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 020e 	orr.w	r2, r2, #14
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e00f      	b.n	8001da0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 020a 	orr.w	r2, r2, #10
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2204      	movs	r2, #4
 8001de4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e020      	b.n	8001e34 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 020e 	bic.w	r2, r2, #14
 8001e00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d005      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e051      	b.n	8001f08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 020e 	bic.w	r2, r2, #14
 8001e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_DMA_Abort_IT+0xd4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d029      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_DMA_Abort_IT+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_Abort_IT+0x9e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_DMA_Abort_IT+0xdc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01a      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x98>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_DMA_Abort_IT+0xe0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d012      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x92>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <HAL_DMA_Abort_IT+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00a      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_DMA_Abort_IT+0xe8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_DMA_Abort_IT+0x86>
 8001ec0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ec4:	e00e      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eca:	e00b      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ecc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ed0:	e008      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed6:	e005      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001edc:	e002      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ede:	2310      	movs	r3, #16
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_DMA_Abort_IT+0xec>)
 8001ee6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    } 
  }
  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40020008 	.word	0x40020008
 8001f18:	4002001c 	.word	0x4002001c
 8001f1c:	40020030 	.word	0x40020030
 8001f20:	40020044 	.word	0x40020044
 8001f24:	40020058 	.word	0x40020058
 8001f28:	4002006c 	.word	0x4002006c
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d04f      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0xc8>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a66      	ldr	r2, [pc, #408]	@ (8002120 <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d029      	beq.n	8001fde <HAL_DMA_IRQHandler+0xae>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a65      	ldr	r2, [pc, #404]	@ (8002124 <HAL_DMA_IRQHandler+0x1f4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d022      	beq.n	8001fda <HAL_DMA_IRQHandler+0xaa>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a63      	ldr	r2, [pc, #396]	@ (8002128 <HAL_DMA_IRQHandler+0x1f8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xa4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a62      	ldr	r2, [pc, #392]	@ (800212c <HAL_DMA_IRQHandler+0x1fc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d012      	beq.n	8001fce <HAL_DMA_IRQHandler+0x9e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a60      	ldr	r2, [pc, #384]	@ (8002130 <HAL_DMA_IRQHandler+0x200>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x98>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002134 <HAL_DMA_IRQHandler+0x204>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x92>
 8001fbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fc0:	e00e      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fc6:	e00b      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fcc:	e008      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fd2:	e005      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fd8:	e002      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fda:	2340      	movs	r3, #64	@ 0x40
 8001fdc:	e000      	b.n	8001fe0 <HAL_DMA_IRQHandler+0xb0>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	4a55      	ldr	r2, [pc, #340]	@ (8002138 <HAL_DMA_IRQHandler+0x208>)
 8001fe2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8094 	beq.w	8002116 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	e08e      	b.n	8002116 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d056      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x186>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d051      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020a 	bic.w	r2, r2, #10
 800202e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a38      	ldr	r2, [pc, #224]	@ (8002120 <HAL_DMA_IRQHandler+0x1f0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d029      	beq.n	8002096 <HAL_DMA_IRQHandler+0x166>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <HAL_DMA_IRQHandler+0x1f4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <HAL_DMA_IRQHandler+0x162>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a35      	ldr	r2, [pc, #212]	@ (8002128 <HAL_DMA_IRQHandler+0x1f8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01a      	beq.n	800208c <HAL_DMA_IRQHandler+0x15c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_DMA_IRQHandler+0x1fc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d012      	beq.n	8002086 <HAL_DMA_IRQHandler+0x156>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <HAL_DMA_IRQHandler+0x200>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00a      	beq.n	8002080 <HAL_DMA_IRQHandler+0x150>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <HAL_DMA_IRQHandler+0x204>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <HAL_DMA_IRQHandler+0x14a>
 8002074:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002078:	e00e      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 800207a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207e:	e00b      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 8002080:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002084:	e008      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 8002086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800208a:	e005      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 800208c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002090:	e002      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 8002092:	2320      	movs	r3, #32
 8002094:	e000      	b.n	8002098 <HAL_DMA_IRQHandler+0x168>
 8002096:	2302      	movs	r3, #2
 8002098:	4a27      	ldr	r2, [pc, #156]	@ (8002138 <HAL_DMA_IRQHandler+0x208>)
 800209a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d034      	beq.n	8002116 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020b4:	e02f      	b.n	8002116 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	2208      	movs	r2, #8
 80020bc:	409a      	lsls	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <HAL_DMA_IRQHandler+0x1e8>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020e 	bic.w	r2, r2, #14
 80020de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
    }
  }
  return;
 8002116:	bf00      	nop
 8002118:	bf00      	nop
}
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40020008 	.word	0x40020008
 8002124:	4002001c 	.word	0x4002001c
 8002128:	40020030 	.word	0x40020030
 800212c:	40020044 	.word	0x40020044
 8002130:	40020058 	.word	0x40020058
 8002134:	4002006c 	.word	0x4002006c
 8002138:	40020000 	.word	0x40020000

0800213c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b10      	cmp	r3, #16
 8002168:	d108      	bne.n	800217c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800217a:	e007      	b.n	800218c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b08b      	sub	sp, #44	@ 0x2c
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	e169      	b.n	8002480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021ac:	2201      	movs	r2, #1
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8158 	bne.w	800247a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d05e      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021d4:	4a98      	ldr	r2, [pc, #608]	@ (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d875      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021da:	4a98      	ldr	r2, [pc, #608]	@ (800243c <HAL_GPIO_Init+0x2a4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d058      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021e0:	4a96      	ldr	r2, [pc, #600]	@ (800243c <HAL_GPIO_Init+0x2a4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d86f      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021e6:	4a96      	ldr	r2, [pc, #600]	@ (8002440 <HAL_GPIO_Init+0x2a8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d052      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021ec:	4a94      	ldr	r2, [pc, #592]	@ (8002440 <HAL_GPIO_Init+0x2a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d869      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021f2:	4a94      	ldr	r2, [pc, #592]	@ (8002444 <HAL_GPIO_Init+0x2ac>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04c      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021f8:	4a92      	ldr	r2, [pc, #584]	@ (8002444 <HAL_GPIO_Init+0x2ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d863      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021fe:	4a92      	ldr	r2, [pc, #584]	@ (8002448 <HAL_GPIO_Init+0x2b0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d046      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 8002204:	4a90      	ldr	r2, [pc, #576]	@ (8002448 <HAL_GPIO_Init+0x2b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d85d      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 800220a:	2b12      	cmp	r3, #18
 800220c:	d82a      	bhi.n	8002264 <HAL_GPIO_Init+0xcc>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d859      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <HAL_GPIO_Init+0x80>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002293 	.word	0x08002293
 800221c:	0800226d 	.word	0x0800226d
 8002220:	0800227f 	.word	0x0800227f
 8002224:	080022c1 	.word	0x080022c1
 8002228:	080022c7 	.word	0x080022c7
 800222c:	080022c7 	.word	0x080022c7
 8002230:	080022c7 	.word	0x080022c7
 8002234:	080022c7 	.word	0x080022c7
 8002238:	080022c7 	.word	0x080022c7
 800223c:	080022c7 	.word	0x080022c7
 8002240:	080022c7 	.word	0x080022c7
 8002244:	080022c7 	.word	0x080022c7
 8002248:	080022c7 	.word	0x080022c7
 800224c:	080022c7 	.word	0x080022c7
 8002250:	080022c7 	.word	0x080022c7
 8002254:	080022c7 	.word	0x080022c7
 8002258:	080022c7 	.word	0x080022c7
 800225c:	08002275 	.word	0x08002275
 8002260:	08002289 	.word	0x08002289
 8002264:	4a79      	ldr	r2, [pc, #484]	@ (800244c <HAL_GPIO_Init+0x2b4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226a:	e02c      	b.n	80022c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e029      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	3304      	adds	r3, #4
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e024      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	3308      	adds	r3, #8
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e01f      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	330c      	adds	r3, #12
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e01a      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229a:	2304      	movs	r3, #4
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e013      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	611a      	str	r2, [r3, #16]
          break;
 80022b2:	e009      	b.n	80022c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	615a      	str	r2, [r3, #20]
          break;
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          break;
 80022c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2bff      	cmp	r3, #255	@ 0xff
 80022cc:	d801      	bhi.n	80022d2 <HAL_GPIO_Init+0x13a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	e001      	b.n	80022d6 <HAL_GPIO_Init+0x13e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	@ 0xff
 80022dc:	d802      	bhi.n	80022e4 <HAL_GPIO_Init+0x14c>
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x152>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	3b08      	subs	r3, #8
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	210f      	movs	r1, #15
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80b1 	beq.w	800247a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002330:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <HAL_GPIO_Init+0x2bc>)
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <HAL_GPIO_Init+0x2c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <HAL_GPIO_Init+0x1ec>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3f      	ldr	r2, [pc, #252]	@ (800245c <HAL_GPIO_Init+0x2c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00d      	beq.n	8002380 <HAL_GPIO_Init+0x1e8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3e      	ldr	r2, [pc, #248]	@ (8002460 <HAL_GPIO_Init+0x2c8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x1e4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3d      	ldr	r2, [pc, #244]	@ (8002464 <HAL_GPIO_Init+0x2cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_GPIO_Init+0x1e0>
 8002374:	2303      	movs	r3, #3
 8002376:	e006      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002378:	2304      	movs	r3, #4
 800237a:	e004      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 800237c:	2302      	movs	r3, #2
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002384:	2300      	movs	r3, #0
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	f002 0203 	and.w	r2, r2, #3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4093      	lsls	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002396:	492f      	ldr	r1, [pc, #188]	@ (8002454 <HAL_GPIO_Init+0x2bc>)
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	492c      	ldr	r1, [pc, #176]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4928      	ldr	r1, [pc, #160]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4922      	ldr	r1, [pc, #136]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e6:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	491e      	ldr	r1, [pc, #120]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4918      	ldr	r1, [pc, #96]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	4914      	ldr	r1, [pc, #80]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d021      	beq.n	800246c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x2e2>
 8002436:	bf00      	nop
 8002438:	10320000 	.word	0x10320000
 800243c:	10310000 	.word	0x10310000
 8002440:	10220000 	.word	0x10220000
 8002444:	10210000 	.word	0x10210000
 8002448:	10120000 	.word	0x10120000
 800244c:	10110000 	.word	0x10110000
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	40010800 	.word	0x40010800
 800245c:	40010c00 	.word	0x40010c00
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_GPIO_Init+0x304>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	43db      	mvns	r3, r3
 8002474:	4909      	ldr	r1, [pc, #36]	@ (800249c <HAL_GPIO_Init+0x304>)
 8002476:	4013      	ands	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f ae8e 	bne.w	80021ac <HAL_GPIO_Init+0x14>
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	372c      	adds	r7, #44	@ 0x2c
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43d9      	mvns	r1, r3
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	400b      	ands	r3, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	611a      	str	r2, [r3, #16]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e12b      	b.n	800276e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fccc 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002568:	f002 fa48 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a81      	ldr	r2, [pc, #516]	@ (8002778 <HAL_I2C_Init+0x274>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d807      	bhi.n	8002588 <HAL_I2C_Init+0x84>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a80      	ldr	r2, [pc, #512]	@ (800277c <HAL_I2C_Init+0x278>)
 800257c:	4293      	cmp	r3, r2
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e006      	b.n	8002596 <HAL_I2C_Init+0x92>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a7d      	ldr	r2, [pc, #500]	@ (8002780 <HAL_I2C_Init+0x27c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0e7      	b.n	800276e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a78      	ldr	r2, [pc, #480]	@ (8002784 <HAL_I2C_Init+0x280>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002778 <HAL_I2C_Init+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d802      	bhi.n	80025d8 <HAL_I2C_Init+0xd4>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3301      	adds	r3, #1
 80025d6:	e009      	b.n	80025ec <HAL_I2C_Init+0xe8>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_I2C_Init+0x284>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	495c      	ldr	r1, [pc, #368]	@ (8002778 <HAL_I2C_Init+0x274>)
 8002608:	428b      	cmp	r3, r1
 800260a:	d819      	bhi.n	8002640 <HAL_I2C_Init+0x13c>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e59      	subs	r1, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fbb1 f3f3 	udiv	r3, r1, r3
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_I2C_Init+0x138>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e59      	subs	r1, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fbb1 f3f3 	udiv	r3, r1, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	e051      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800263c:	2304      	movs	r3, #4
 800263e:	e04f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d111      	bne.n	800266c <HAL_I2C_Init+0x168>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e012      	b.n	8002692 <HAL_I2C_Init+0x18e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	0099      	lsls	r1, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x196>
 8002696:	2301      	movs	r3, #1
 8002698:	e022      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10e      	bne.n	80026c0 <HAL_I2C_Init+0x1bc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1e58      	subs	r0, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	440b      	add	r3, r1
 80026b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6809      	ldr	r1, [r1, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800270e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6911      	ldr	r1, [r2, #16]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	000186a0 	.word	0x000186a0
 800277c:	001e847f 	.word	0x001e847f
 8002780:	003d08ff 	.word	0x003d08ff
 8002784:	431bde83 	.word	0x431bde83
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	b08b      	sub	sp, #44	@ 0x2c
 8002790:	af06      	add	r7, sp, #24
 8002792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0f1      	b.n	8002982 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f007 fcca 	bl	800a14c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fbf5 	bl	8005fb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	687e      	ldr	r6, [r7, #4]
 80027d2:	466d      	mov	r5, sp
 80027d4:	f106 0410 	add.w	r4, r6, #16
 80027d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	602b      	str	r3, [r5, #0]
 80027e0:	1d33      	adds	r3, r6, #4
 80027e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e4:	6838      	ldr	r0, [r7, #0]
 80027e6:	f003 fbbf 	bl	8005f68 <USB_CoreInit>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0c2      	b.n	8002982 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fbf0 	bl	8005fe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e040      	b.n	8002890 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3301      	adds	r3, #1
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3303      	adds	r3, #3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	3338      	adds	r3, #56	@ 0x38
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	333c      	adds	r3, #60	@ 0x3c
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	3340      	adds	r3, #64	@ 0x40
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	3301      	adds	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	d3b9      	bcc.n	800280e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e044      	b.n	800292a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	3301      	adds	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d3b5      	bcc.n	80028a0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	687e      	ldr	r6, [r7, #4]
 800293c:	466d      	mov	r5, sp
 800293e:	f106 0410 	add.w	r4, r6, #16
 8002942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	602b      	str	r3, [r5, #0]
 800294a:	1d33      	adds	r3, r6, #4
 800294c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294e:	6838      	ldr	r0, [r7, #0]
 8002950:	f003 fb56 	bl	8006000 <USB_DevInit>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00d      	b.n	8002982 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fdd7 	bl	800852e <USB_DevDisconnect>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800298a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_PCD_Start+0x16>
 800299c:	2302      	movs	r3, #2
 800299e:	e016      	b.n	80029ce <HAL_PCD_Start+0x44>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 faeb 	bl	8005f88 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029b2:	2101      	movs	r1, #1
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f007 fe3c 	bl	800a632 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fdab 	bl	800851a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b088      	sub	sp, #32
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 fdad 	bl	8008542 <USB_ReadInterrupts>
 80029e8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb1b 	bl	8003030 <PCD_EP_ISR_Handler>

    return;
 80029fa:	e119      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a18:	b292      	uxth	r2, r2
 8002a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f007 fc0f 	bl	800a242 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a24:	2100      	movs	r1, #0
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f905 	bl	8002c36 <HAL_PCD_SetAddress>

    return;
 8002a2c:	e100      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a50:	e0ee      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a74:	e0dc      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d027      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0208 	bic.w	r2, r2, #8
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f007 fbff 	bl	800a2b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ace:	e0af      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8083 	beq.w	8002be2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e010      	b.n	8002b04 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	7ffb      	ldrb	r3, [r7, #31]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	7ffb      	ldrb	r3, [r7, #31]
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	b292      	uxth	r2, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	3320      	adds	r3, #32
 8002af8:	443b      	add	r3, r7
 8002afa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002afe:	7ffb      	ldrb	r3, [r7, #31]
 8002b00:	3301      	adds	r3, #1
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	7ffb      	ldrb	r3, [r7, #31]
 8002b06:	2b07      	cmp	r3, #7
 8002b08:	d9eb      	bls.n	8002ae2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	b292      	uxth	r2, r2
 8002b36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b3a:	bf00      	nop
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f6      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b60:	b292      	uxth	r2, r2
 8002b62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e00f      	b.n	8002b8c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	4611      	mov	r1, r2
 8002b74:	7ffa      	ldrb	r2, [r7, #31]
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	440a      	add	r2, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	3320      	adds	r3, #32
 8002b7e:	443b      	add	r3, r7
 8002b80:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b84:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	2b07      	cmp	r3, #7
 8002b90:	d9ec      	bls.n	8002b6c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0208 	orr.w	r2, r2, #8
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0204 	orr.w	r2, r2, #4
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f007 fb50 	bl	800a280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002be0:	e026      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00f      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f007 fb0e 	bl	800a226 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c0a:	e011      	b.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c2e:	bf00      	nop
  }
}
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_SetAddress+0x1a>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e013      	b.n	8002c78 <HAL_PCD_SetAddress+0x42>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f005 fc43 	bl	80084f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	70fb      	strb	r3, [r7, #3]
 8002c92:	460b      	mov	r3, r1
 8002c94:	803b      	strh	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da0e      	bge.n	8002cc4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0207 	and.w	r2, r3, #7
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cee:	883a      	ldrh	r2, [r7, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cfa:	78bb      	ldrb	r3, [r7, #2]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d102      	bne.n	8002d06 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_PCD_EP_Open+0x94>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e00e      	b.n	8002d32 <HAL_PCD_EP_Open+0xb2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 f98c 	bl	8006040 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da0e      	bge.n	8002d6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e00e      	b.n	8002d8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 0207 	and.w	r2, r3, #7
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_PCD_EP_Close+0x6a>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e00e      	b.n	8002dc2 <HAL_PCD_EP_Close+0x88>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fd04 	bl	80067c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f003 0207 	and.w	r2, r3, #7
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 febb 	bl	8006b98 <USB_EPStartXfer>

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fe6d 	bl	8006b98 <USB_EPStartXfer>

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 0207 	and.w	r2, r3, #7
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d901      	bls.n	8002ee6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e04c      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da0e      	bge.n	8002f0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	705a      	strb	r2, [r3, #1]
 8002f0a:	e00c      	b.n	8002f26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_PCD_EP_SetStall+0x7e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e01c      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xb8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 f9d0 	bl	80082fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f005 faf5 	bl	8008560 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e040      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0e      	bge.n	8002fcc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0207 	and.w	r2, r3, #7
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_EP_ClrStall+0x82>
 8003006:	2302      	movs	r3, #2
 8003008:	e00e      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa0>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f005 f9be 	bl	800839a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b096      	sub	sp, #88	@ 0x58
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003038:	e3be      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003042:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003046:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003054:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 8178 	bne.w	800334e <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d151      	bne.n	800310e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	81fb      	strh	r3, [r7, #14]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29b      	uxth	r3, r3
 800308c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3328      	adds	r3, #40	@ 0x28
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	3302      	adds	r3, #2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	441a      	add	r2, r3
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ce:	2100      	movs	r1, #0
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f007 f88e 	bl	800a1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 836a 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x788>
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 8365 	bne.w	80037b8 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800310c:	e354      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003114:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003120:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d034      	beq.n	8003196 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	3306      	adds	r3, #6
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003156:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003164:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800316a:	b29b      	uxth	r3, r3
 800316c:	f005 fa48 	bl	8008600 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29a      	uxth	r2, r3
 8003178:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800317c:	4013      	ands	r3, r2
 800317e:	823b      	strh	r3, [r7, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	8a3a      	ldrh	r2, [r7, #16]
 8003186:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800318a:	b292      	uxth	r2, r2
 800318c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f007 f802 	bl	800a198 <HAL_PCD_SetupStageCallback>
 8003194:	e310      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003196:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800319a:	2b00      	cmp	r3, #0
 800319c:	f280 830c 	bge.w	80037b8 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031ac:	4013      	ands	r3, r2
 80031ae:	83fb      	strh	r3, [r7, #30]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	8bfa      	ldrh	r2, [r7, #30]
 80031b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031ba:	b292      	uxth	r2, r2
 80031bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	3306      	adds	r3, #6
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <PCD_EP_ISR_Handler+0x1f6>
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	6959      	ldr	r1, [r3, #20]
 8003202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003204:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003208:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800320a:	b29b      	uxth	r3, r3
 800320c:	f005 f9f8 	bl	8008600 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	441a      	add	r2, r3
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800321e:	2100      	movs	r1, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f006 ffcb 	bl	800a1bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 82bd 	bne.w	80037b8 <PCD_EP_ISR_Handler+0x788>
 800323e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003242:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003246:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800324a:	f000 82b5 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003278:	b29a      	uxth	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b3e      	cmp	r3, #62	@ 0x3e
 8003284:	d91d      	bls.n	80032c2 <PCD_EP_ISR_Handler+0x292>
 8003286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <PCD_EP_ISR_Handler+0x270>
 800329a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329c:	3b01      	subs	r3, #1
 800329e:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e026      	b.n	8003310 <PCD_EP_ISR_Handler+0x2e0>
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <PCD_EP_ISR_Handler+0x2b0>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d8:	b29a      	uxth	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e017      	b.n	8003310 <PCD_EP_ISR_Handler+0x2e0>
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <PCD_EP_ISR_Handler+0x2ca>
 80032f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f6:	3301      	adds	r3, #1
 80032f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003302:	b29b      	uxth	r3, r3
 8003304:	029b      	lsls	r3, r3, #10
 8003306:	b29b      	uxth	r3, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800331c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003320:	827b      	strh	r3, [r7, #18]
 8003322:	8a7b      	ldrh	r3, [r7, #18]
 8003324:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003328:	827b      	strh	r3, [r7, #18]
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003330:	827b      	strh	r3, [r7, #18]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	8a7b      	ldrh	r3, [r7, #18]
 8003338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800333c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
 800334c:	e234      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003362:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003366:	2b00      	cmp	r3, #0
 8003368:	f280 80fc 	bge.w	8003564 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29a      	uxth	r2, r3
 800337e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003382:	4013      	ands	r3, r2
 8003384:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800339a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033a2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ba:	7b1b      	ldrb	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d125      	bne.n	800340c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	3306      	adds	r3, #6
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80033ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8092 	beq.w	800351a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	88da      	ldrh	r2, [r3, #6]
 8003402:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003406:	f005 f8fb 	bl	8008600 <USB_ReadPMA>
 800340a:	e086      	b.n	800351a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d10a      	bne.n	800342a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003414:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003418:	461a      	mov	r2, r3
 800341a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f9d9 	bl	80037d4 <HAL_PCD_EP_DB_Receive>
 8003422:	4603      	mov	r3, r0
 8003424:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003428:	e077      	b.n	800351a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003444:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003466:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d024      	beq.n	80034d2 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	3302      	adds	r3, #2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02e      	beq.n	800351a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	6959      	ldr	r1, [r3, #20]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	891a      	ldrh	r2, [r3, #8]
 80034c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034cc:	f005 f898 	bl	8008600 <USB_ReadPMA>
 80034d0:	e023      	b.n	800351a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	3306      	adds	r3, #6
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003510:	895a      	ldrh	r2, [r3, #10]
 8003512:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003516:	f005 f873 	bl	8008600 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003522:	441a      	add	r2, r3
 8003524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003526:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003530:	441a      	add	r2, r3
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <PCD_EP_ISR_Handler+0x51a>
 800353e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	429a      	cmp	r2, r3
 8003548:	d206      	bcs.n	8003558 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f006 fe33 	bl	800a1bc <HAL_PCD_DataOutStageCallback>
 8003556:	e005      	b.n	8003564 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fb1a 	bl	8006b98 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8123 	beq.w	80037b8 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003572:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800359c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 80a2 	bne.w	8003710 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d4:	7b1b      	ldrb	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8093 	beq.w	8003702 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d046      	beq.n	8003676 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d126      	bne.n	800363e <PCD_EP_ISR_Handler+0x60e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	4413      	add	r3, r2
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	4413      	add	r3, r2
 8003612:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	b29a      	uxth	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	e061      	b.n	8003702 <PCD_EP_ISR_Handler+0x6d2>
 800363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d15d      	bne.n	8003702 <PCD_EP_ISR_Handler+0x6d2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	4413      	add	r3, r2
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	011a      	lsls	r2, r3, #4
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003666:	4413      	add	r3, r2
 8003668:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e045      	b.n	8003702 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d126      	bne.n	80036d2 <PCD_EP_ISR_Handler+0x6a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003698:	4413      	add	r3, r2
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	4413      	add	r3, r2
 80036a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e017      	b.n	8003702 <PCD_EP_ISR_Handler+0x6d2>
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d113      	bne.n	8003702 <PCD_EP_ISR_Handler+0x6d2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	4413      	add	r3, r2
 80036ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	011a      	lsls	r2, r3, #4
 80036f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	2200      	movs	r2, #0
 8003700:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f006 fd72 	bl	800a1f2 <HAL_PCD_DataInStageCallback>
 800370e:	e053      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d146      	bne.n	80037aa <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	3302      	adds	r3, #2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003744:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003750:	429a      	cmp	r2, r3
 8003752:	d907      	bls.n	8003764 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800375c:	1ad2      	subs	r2, r2, r3
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	619a      	str	r2, [r3, #24]
 8003762:	e002      	b.n	800376a <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f006 fd3a 	bl	800a1f2 <HAL_PCD_DataInStageCallback>
 800377e:	e01b      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003788:	441a      	add	r2, r3
 800378a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800378e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003796:	441a      	add	r2, r3
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f9f8 	bl	8006b98 <USB_EPStartXfer>
 80037a8:	e006      	b.n	80037b8 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037ae:	461a      	mov	r2, r3
 80037b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f91b 	bl	80039ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f6ff ac38 	blt.w	800303a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3758      	adds	r7, #88	@ 0x58
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07e      	beq.n	80038ea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	3302      	adds	r3, #2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	8b7b      	ldrh	r3, [r7, #26]
 800381c:	429a      	cmp	r2, r3
 800381e:	d306      	bcc.n	800382e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	8b7b      	ldrh	r3, [r7, #26]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	e002      	b.n	8003834 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d123      	bne.n	8003884 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	833b      	strh	r3, [r7, #24]
 8003858:	8b3b      	ldrh	r3, [r7, #24]
 800385a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800385e:	833b      	strh	r3, [r7, #24]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	441a      	add	r2, r3
 800386e:	8b3b      	ldrh	r3, [r7, #24]
 8003870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800387c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003880:	b29b      	uxth	r3, r3
 8003882:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01f      	beq.n	80038ce <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a8:	82fb      	strh	r3, [r7, #22]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ce:	8b7b      	ldrh	r3, [r7, #26]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8087 	beq.w	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6959      	ldr	r1, [r3, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	891a      	ldrh	r2, [r3, #8]
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	f004 fe8c 	bl	8008600 <USB_ReadPMA>
 80038e8:	e07c      	b.n	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	3306      	adds	r3, #6
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003912:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	8b7b      	ldrh	r3, [r7, #26]
 800391a:	429a      	cmp	r2, r3
 800391c:	d306      	bcc.n	800392c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	8b7b      	ldrh	r3, [r7, #26]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	619a      	str	r2, [r3, #24]
 800392a:	e002      	b.n	8003932 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d123      	bne.n	8003982 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003954:	83fb      	strh	r3, [r7, #30]
 8003956:	8bfb      	ldrh	r3, [r7, #30]
 8003958:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800395c:	83fb      	strh	r3, [r7, #30]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	441a      	add	r2, r3
 800396c:	8bfb      	ldrh	r3, [r7, #30]
 800396e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397e:	b29b      	uxth	r3, r3
 8003980:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11f      	bne.n	80039cc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	83bb      	strh	r3, [r7, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	8bbb      	ldrh	r3, [r7, #28]
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039cc:	8b7b      	ldrh	r3, [r7, #26]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6959      	ldr	r1, [r3, #20]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	895a      	ldrh	r2, [r3, #10]
 80039de:	8b7b      	ldrh	r3, [r7, #26]
 80039e0:	f004 fe0e 	bl	8008600 <USB_ReadPMA>
    }
  }

  return count;
 80039e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b0a4      	sub	sp, #144	@ 0x90
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 81dd 	beq.w	8003dc2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d907      	bls.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	e002      	b.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2200      	movs	r2, #0
 8003a54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 80b9 	bne.w	8003bd2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d126      	bne.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	4413      	add	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	e01a      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	785b      	ldrb	r3, [r3, #1]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d116      	bne.n	8003aec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad2:	4413      	add	r3, r2
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	011a      	lsls	r2, r3, #4
 8003adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ade:	4413      	add	r3, r2
 8003ae0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	2200      	movs	r2, #0
 8003aea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	011a      	lsls	r2, r3, #4
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	e017      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d113      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	4413      	add	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	011a      	lsls	r2, r3, #4
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2200      	movs	r2, #0
 8003b76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f006 fb37 	bl	800a1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 82fc 	beq.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	82fb      	strh	r3, [r7, #22]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
 8003bd0:	e2da      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d021      	beq.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 82ae 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c34:	441a      	add	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c42:	441a      	add	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d30b      	bcc.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e017      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c84:	e00a      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d165      	bne.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	4413      	add	r3, r2
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	011a      	lsls	r2, r3, #4
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ce2:	d91d      	bls.n	8003d20 <HAL_PCD_EP_DB_Transmit+0x332>
 8003ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x310>
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	029b      	lsls	r3, r3, #10
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	e044      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x350>
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	e035      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d54:	3301      	adds	r3, #1
 8003d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	e01c      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d118      	bne.n	8003daa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8c:	4413      	add	r3, r2
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	011a      	lsls	r2, r3, #4
 8003d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d98:	4413      	add	r3, r2
 8003d9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	891a      	ldrh	r2, [r3, #8]
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f004 fbdb 	bl	8008576 <USB_WritePMA>
 8003dc0:	e1e2      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3306      	adds	r3, #6
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d307      	bcc.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	e002      	b.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 80c0 	bne.w	8003f9a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d126      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x482>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e36:	4413      	add	r3, r2
 8003e38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	011a      	lsls	r2, r3, #4
 8003e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e42:	4413      	add	r3, r2
 8003e44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	e01a      	b.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d116      	bne.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e8c:	4413      	add	r3, r2
 8003e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	677b      	str	r3, [r7, #116]	@ 0x74
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d12b      	bne.n	8003f0c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec8:	4413      	add	r3, r2
 8003eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e017      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d113      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f22:	4413      	add	r3, r2
 8003f24:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f006 f955 	bl	800a1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 811a 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8013      	strh	r3, [r2, #0]
 8003f98:	e0f6      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f040 80ca 	bne.w	8004188 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800400a:	441a      	add	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d30b      	bcc.n	8004034 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	621a      	str	r2, [r3, #32]
 8004032:	e017      	b.n	8004064 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800403c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800404c:	e00a      	b.n	8004064 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	657b      	str	r3, [r7, #84]	@ 0x54
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d165      	bne.n	800413e <HAL_PCD_EP_DB_Transmit+0x750>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004086:	4413      	add	r3, r2
 8004088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	011a      	lsls	r2, r3, #4
 8004090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004092:	4413      	add	r3, r2
 8004094:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800409a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80040b0:	d91d      	bls.n	80040ee <HAL_PCD_EP_DB_Transmit+0x700>
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x6de>
 80040c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c8:	3b01      	subs	r3, #1
 80040ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e041      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 80040ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x71e>
 80040f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004104:	b29a      	uxth	r2, r3
 8004106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e032      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 800410c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_PCD_EP_DB_Transmit+0x738>
 8004120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004122:	3301      	adds	r3, #1
 8004124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29b      	uxth	r3, r3
 8004134:	4313      	orrs	r3, r2
 8004136:	b29a      	uxth	r2, r3
 8004138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	e019      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d115      	bne.n	8004172 <HAL_PCD_EP_DB_Transmit+0x784>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	4413      	add	r3, r2
 8004156:	657b      	str	r3, [r7, #84]	@ 0x54
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	4413      	add	r3, r2
 8004162:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004166:	653b      	str	r3, [r7, #80]	@ 0x50
 8004168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800416c:	b29a      	uxth	r2, r3
 800416e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004170:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6959      	ldr	r1, [r3, #20]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	895a      	ldrh	r2, [r3, #10]
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004182:	b29b      	uxth	r3, r3
 8004184:	f004 f9f7 	bl	8008576 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800419e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a2:	82bb      	strh	r3, [r7, #20]
 80041a4:	8abb      	ldrh	r3, [r7, #20]
 80041a6:	f083 0310 	eor.w	r3, r3, #16
 80041aa:	82bb      	strh	r3, [r7, #20]
 80041ac:	8abb      	ldrh	r3, [r7, #20]
 80041ae:	f083 0320 	eor.w	r3, r3, #32
 80041b2:	82bb      	strh	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	8abb      	ldrh	r3, [r7, #20]
 80041c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3790      	adds	r7, #144	@ 0x90
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
 80041f0:	4613      	mov	r3, r2
 80041f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e009      	b.n	800422c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004218:	897a      	ldrh	r2, [r7, #10]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b29a      	uxth	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	80da      	strh	r2, [r3, #6]
 8004240:	e00b      	b.n	800425a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2201      	movs	r2, #1
 8004246:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	b29a      	uxth	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b29a      	uxth	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
	...

08004268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e272      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8087 	beq.w	8004396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004288:	4b92      	ldr	r3, [pc, #584]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b04      	cmp	r3, #4
 8004292:	d00c      	beq.n	80042ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004294:	4b8f      	ldr	r3, [pc, #572]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d112      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
 80042a0:	4b8c      	ldr	r3, [pc, #560]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ae:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d06c      	beq.n	8004394 <HAL_RCC_OscConfig+0x12c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d168      	bne.n	8004394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e24c      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x76>
 80042d0:	4b80      	ldr	r3, [pc, #512]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a7f      	ldr	r2, [pc, #508]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e02e      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b7b      	ldr	r3, [pc, #492]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7a      	ldr	r2, [pc, #488]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b78      	ldr	r3, [pc, #480]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0xbc>
 800430a:	4b72      	ldr	r3, [pc, #456]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a71      	ldr	r2, [pc, #452]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b6f      	ldr	r3, [pc, #444]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004324:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6a      	ldr	r2, [pc, #424]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b68      	ldr	r3, [pc, #416]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a67      	ldr	r2, [pc, #412]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fc ff88 	bl	8001258 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fc ff84 	bl	8001258 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e200      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b5d      	ldr	r3, [pc, #372]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xe4>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fc ff74 	bl	8001258 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fc ff70 	bl	8001258 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1ec      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b53      	ldr	r3, [pc, #332]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x10c>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a2:	4b4c      	ldr	r3, [pc, #304]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ae:	4b49      	ldr	r3, [pc, #292]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
 80043ba:	4b46      	ldr	r3, [pc, #280]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1c0      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3d      	ldr	r3, [pc, #244]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4939      	ldr	r1, [pc, #228]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fc ff29 	bl	8001258 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fc ff25 	bl	8001258 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1a1      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2d      	ldr	r3, [pc, #180]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b2a      	ldr	r3, [pc, #168]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4927      	ldr	r1, [pc, #156]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b26      	ldr	r3, [pc, #152]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fc ff08 	bl	8001258 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444c:	f7fc ff04 	bl	8001258 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e180      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03a      	beq.n	80044ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d019      	beq.n	80044b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004484:	f7fc fee8 	bl	8001258 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448c:	f7fc fee4 	bl	8001258 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e160      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 face 	bl	8004a4c <RCC_Delay>
 80044b0:	e01c      	b.n	80044ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b8:	f7fc fece 	bl	8001258 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044be:	e00f      	b.n	80044e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fc feca 	bl	8001258 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d908      	bls.n	80044e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e146      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	42420000 	.word	0x42420000
 80044dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b92      	ldr	r3, [pc, #584]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e9      	bne.n	80044c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a6 	beq.w	8004646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b8b      	ldr	r3, [pc, #556]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b88      	ldr	r3, [pc, #544]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4a87      	ldr	r2, [pc, #540]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	61d3      	str	r3, [r2, #28]
 8004516:	4b85      	ldr	r3, [pc, #532]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b82      	ldr	r3, [pc, #520]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b7f      	ldr	r3, [pc, #508]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7e      	ldr	r2, [pc, #504]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fc fe8b 	bl	8001258 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fc fe87 	bl	8001258 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	@ 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e103      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b75      	ldr	r3, [pc, #468]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x312>
 800456c:	4b6f      	ldr	r3, [pc, #444]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a6e      	ldr	r2, [pc, #440]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	e02d      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x334>
 8004582:	4b6a      	ldr	r3, [pc, #424]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b67      	ldr	r3, [pc, #412]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a66      	ldr	r2, [pc, #408]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	e01c      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x356>
 80045a4:	4b61      	ldr	r3, [pc, #388]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a60      	ldr	r2, [pc, #384]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	4b5e      	ldr	r3, [pc, #376]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a5d      	ldr	r2, [pc, #372]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	e00b      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 80045be:	4b5b      	ldr	r3, [pc, #364]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a5a      	ldr	r2, [pc, #360]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4b58      	ldr	r3, [pc, #352]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d015      	beq.n	800460a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fc fe3b 	bl	8001258 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fc fe37 	bl	8001258 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0b1      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b4b      	ldr	r3, [pc, #300]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ee      	beq.n	80045e6 <HAL_RCC_OscConfig+0x37e>
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fc fe25 	bl	8001258 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fe21 	bl	8001258 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e09b      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	4b40      	ldr	r3, [pc, #256]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b3c      	ldr	r3, [pc, #240]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8087 	beq.w	800475e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	4b36      	ldr	r3, [pc, #216]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d061      	beq.n	8004720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d146      	bne.n	80046f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b33      	ldr	r3, [pc, #204]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7fc fdf5 	bl	8001258 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004672:	f7fc fdf1 	bl	8001258 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e06d      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004684:	4b29      	ldr	r3, [pc, #164]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d108      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4921      	ldr	r1, [pc, #132]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ac:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a19      	ldr	r1, [r3, #32]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	491b      	ldr	r1, [pc, #108]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fdc5 	bl	8001258 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc fdc1 	bl	8001258 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e03d      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x46a>
 80046f0:	e035      	b.n	800475e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fdae 	bl	8001258 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fdaa 	bl	8001258 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e026      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x498>
 800471e:	e01e      	b.n	800475e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e019      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
 800472c:	40021000 	.word	0x40021000
 8004730:	40007000 	.word	0x40007000
 8004734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_OscConfig+0x500>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	429a      	cmp	r2, r3
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0d0      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d910      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b67      	ldr	r3, [pc, #412]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 0207 	bic.w	r2, r3, #7
 8004796:	4965      	ldr	r1, [pc, #404]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d040      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d115      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e073      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06b      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4936      	ldr	r1, [pc, #216]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fc fcfc 	bl	8001258 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fc fcf8 	bl	8001258 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e053      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b27      	ldr	r3, [pc, #156]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d210      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 0207 	bic.w	r2, r3, #7
 80048a2:	4922      	ldr	r1, [pc, #136]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	@ (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1cc>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fc fc5a 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	40021000 	.word	0x40021000
 8004934:	0800a758 	.word	0x0800a758
 8004938:	20000000 	.word	0x20000000
 800493c:	20000004 	.word	0x20000004

08004940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800495a:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d002      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x30>
 800496a:	2b08      	cmp	r3, #8
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x36>
 800496e:	e027      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004972:	613b      	str	r3, [r7, #16]
      break;
 8004974:	e027      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	0c9b      	lsrs	r3, r3, #18
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498e:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	0c5b      	lsrs	r3, r3, #17
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	4a11      	ldr	r2, [pc, #68]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a0d      	ldr	r2, [pc, #52]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e004      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0c      	ldr	r2, [pc, #48]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	613b      	str	r3, [r7, #16]
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80049c2:	613b      	str	r3, [r7, #16]
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	693b      	ldr	r3, [r7, #16]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	007a1200 	.word	0x007a1200
 80049dc:	0800a770 	.word	0x0800a770
 80049e0:	0800a780 	.word	0x0800a780
 80049e4:	003d0900 	.word	0x003d0900

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b02      	ldr	r3, [pc, #8]	@ (80049f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	20000000 	.word	0x20000000

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a00:	f7ff fff2 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800a768 	.word	0x0800a768

08004a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a28:	f7ff ffde 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	0adb      	lsrs	r3, r3, #11
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4903      	ldr	r1, [pc, #12]	@ (8004a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	0800a768 	.word	0x0800a768

08004a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a54:	4b0a      	ldr	r3, [pc, #40]	@ (8004a80 <RCC_Delay+0x34>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <RCC_Delay+0x38>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0a5b      	lsrs	r3, r3, #9
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a68:	bf00      	nop
  }
  while (Delay --);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	60fa      	str	r2, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f9      	bne.n	8004a68 <RCC_Delay+0x1c>
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	20000000 	.word	0x20000000
 8004a84:	10624dd3 	.word	0x10624dd3

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d07d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	61d3      	str	r3, [r2, #28]
 8004ac0:	4b49      	ldr	r3, [pc, #292]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b46      	ldr	r3, [pc, #280]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d118      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004adc:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a42      	ldr	r2, [pc, #264]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae8:	f7fc fbb6 	bl	8001258 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	e008      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af0:	f7fc fbb2 	bl	8001258 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e06d      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	4b3a      	ldr	r3, [pc, #232]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b0e:	4b36      	ldr	r3, [pc, #216]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02e      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d027      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b36:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b42:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d014      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b52:	f7fc fb81 	bl	8001258 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fc fb7d 	bl	8001258 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e036      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ee      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4917      	ldr	r1, [pc, #92]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4a13      	ldr	r2, [pc, #76]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bac:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	490b      	ldr	r1, [pc, #44]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bca:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42420440 	.word	0x42420440

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e041      	b.n	8004c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc f994 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fa74 	bl	8005120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e03a      	b.n	8004d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <HAL_TIM_Base_Start_IT+0x98>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x58>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd6:	d009      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x58>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	@ (8004d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x58>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d111      	bne.n	8004d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d010      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	e007      	b.n	8004d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800

08004d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0202 	mvn.w	r2, #2
 8004d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9b4 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9a7 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f9b6 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0204 	mvn.w	r2, #4
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f98a 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f97d 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f98c 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0208 	mvn.w	r2, #8
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2204      	movs	r2, #4
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f960 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f953 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f962 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0210 	mvn.w	r2, #16
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2208      	movs	r2, #8
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f936 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f929 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f938 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0201 	mvn.w	r2, #1
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb f952 	bl	8000160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	2b80      	cmp	r3, #128	@ 0x80
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed4:	2b80      	cmp	r3, #128	@ 0x80
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa7b 	bl	80053de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8fc 	bl	800510c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d10e      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d107      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0220 	mvn.w	r2, #32
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa46 	bl	80053cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_ConfigClockSource+0x1c>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e0b4      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x186>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9c:	d03e      	beq.n	800501c <HAL_TIM_ConfigClockSource+0xd4>
 8004f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fa2:	f200 8087 	bhi.w	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004faa:	f000 8086 	beq.w	80050ba <HAL_TIM_ConfigClockSource+0x172>
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb2:	d87f      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b70      	cmp	r3, #112	@ 0x70
 8004fb6:	d01a      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xa6>
 8004fb8:	2b70      	cmp	r3, #112	@ 0x70
 8004fba:	d87b      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fbc:	2b60      	cmp	r3, #96	@ 0x60
 8004fbe:	d050      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x11a>
 8004fc0:	2b60      	cmp	r3, #96	@ 0x60
 8004fc2:	d877      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc4:	2b50      	cmp	r3, #80	@ 0x50
 8004fc6:	d03c      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xfa>
 8004fc8:	2b50      	cmp	r3, #80	@ 0x50
 8004fca:	d873      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d058      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x13a>
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d86f      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b30      	cmp	r3, #48	@ 0x30
 8004fd6:	d064      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd8:	2b30      	cmp	r3, #48	@ 0x30
 8004fda:	d86b      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d060      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d867      	bhi.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05c      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d05a      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	e062      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ffe:	f000 f968 	bl	80052d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	609a      	str	r2, [r3, #8]
      break;
 800501a:	e04f      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800502c:	f000 f951 	bl	80052d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800503e:	609a      	str	r2, [r3, #8]
      break;
 8005040:	e03c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	461a      	mov	r2, r3
 8005050:	f000 f8c8 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2150      	movs	r1, #80	@ 0x50
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f91f 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8005060:	e02c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800506e:	461a      	mov	r2, r3
 8005070:	f000 f8e6 	bl	8005240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2160      	movs	r1, #96	@ 0x60
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f90f 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8005080:	e01c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	461a      	mov	r2, r3
 8005090:	f000 f8a8 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2140      	movs	r1, #64	@ 0x40
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f8ff 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 80050a0:	e00c      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f000 f8f6 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 80050b2:	e003      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	e000      	b.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
	...

08005120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a29      	ldr	r2, [pc, #164]	@ (80051d8 <TIM_Base_SetConfig+0xb8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_Base_SetConfig+0x30>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513e:	d007      	beq.n	8005150 <TIM_Base_SetConfig+0x30>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a26      	ldr	r2, [pc, #152]	@ (80051dc <TIM_Base_SetConfig+0xbc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0x30>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a25      	ldr	r2, [pc, #148]	@ (80051e0 <TIM_Base_SetConfig+0xc0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d108      	bne.n	8005162 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1c      	ldr	r2, [pc, #112]	@ (80051d8 <TIM_Base_SetConfig+0xb8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00b      	beq.n	8005182 <TIM_Base_SetConfig+0x62>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005170:	d007      	beq.n	8005182 <TIM_Base_SetConfig+0x62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a19      	ldr	r2, [pc, #100]	@ (80051dc <TIM_Base_SetConfig+0xbc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_Base_SetConfig+0x62>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <TIM_Base_SetConfig+0xc0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a07      	ldr	r2, [pc, #28]	@ (80051d8 <TIM_Base_SetConfig+0xb8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	615a      	str	r2, [r3, #20]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800

080051e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 030a 	bic.w	r3, r3, #10
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0210 	bic.w	r2, r3, #16
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	031b      	lsls	r3, r3, #12
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f043 0307 	orr.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	021a      	lsls	r2, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	609a      	str	r2, [r3, #8]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e046      	b.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a16      	ldr	r2, [pc, #88]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d009      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a12      	ldr	r2, [pc, #72]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a10      	ldr	r2, [pc, #64]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10c      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4313      	orrs	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800

080053cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr

080053de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e042      	b.n	8005488 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fdf2 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	@ 0x24
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fd09 	bl	8005e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695a      	ldr	r2, [r3, #20]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d121      	bne.n	80054ee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Transmit_IT+0x26>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e01a      	b.n	80054f0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	4613      	mov	r3, r2
 8005506:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b20      	cmp	r3, #32
 8005512:	d112      	bne.n	800553a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_UART_Receive_IT+0x26>
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e00b      	b.n	800553c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	461a      	mov	r2, r3
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fab6 	bl	8005aa2 <UART_Start_Receive_IT>
 8005536:	4603      	mov	r3, r0
 8005538:	e000      	b.n	800553c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b0ba      	sub	sp, #232	@ 0xe8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_UART_IRQHandler+0x66>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fb93 	bl	8005cce <UART_Receive_IT>
      return;
 80055a8:	e25b      	b.n	8005a62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80de 	beq.w	8005770 <HAL_UART_IRQHandler+0x22c>
 80055b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80d1 	beq.w	8005770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_UART_IRQHandler+0xae>
 80055da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_UART_IRQHandler+0xd2>
 80055fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	f043 0202 	orr.w	r2, r3, #2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HAL_UART_IRQHandler+0xf6>
 8005622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005632:	f043 0204 	orr.w	r2, r3, #4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <HAL_UART_IRQHandler+0x126>
 8005646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f043 0208 	orr.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 81f2 	beq.w	8005a58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_UART_IRQHandler+0x14e>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb1e 	bl	8005cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_UART_IRQHandler+0x17a>
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d04f      	beq.n	800575e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa28 	bl	8005b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d041      	beq.n	8005756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800570a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1d9      	bne.n	80056d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d013      	beq.n	800574e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572a:	4a7e      	ldr	r2, [pc, #504]	@ (8005924 <HAL_UART_IRQHandler+0x3e0>)
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005732:	4618      	mov	r0, r3
 8005734:	f7fc fb84 	bl	8001e40 <HAL_DMA_Abort_IT>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d016      	beq.n	800576c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	e00e      	b.n	800576c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f993 	bl	8005a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	e00a      	b.n	800576c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f98f 	bl	8005a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	e006      	b.n	800576c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f98b 	bl	8005a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800576a:	e175      	b.n	8005a58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	bf00      	nop
    return;
 800576e:	e173      	b.n	8005a58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	f040 814f 	bne.w	8005a18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8148 	beq.w	8005a18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8141 	beq.w	8005a18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80b6 	beq.w	8005928 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8145 	beq.w	8005a5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057da:	429a      	cmp	r2, r3
 80057dc:	f080 813e 	bcs.w	8005a5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	f000 8088 	beq.w	8005904 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800580a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800580e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005812:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005820:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800582c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1d9      	bne.n	80057f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005864:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005868:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800586c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e1      	bne.n	8005840 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800588c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800588e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e3      	bne.n	800587c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d4:	f023 0310 	bic.w	r3, r3, #16
 80058d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e3      	bne.n	80058c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fc fa62 	bl	8001dc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8b6 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005920:	e09c      	b.n	8005a5c <HAL_UART_IRQHandler+0x518>
 8005922:	bf00      	nop
 8005924:	08005bd9 	.word	0x08005bd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 808e 	beq.w	8005a60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8089 	beq.w	8005a60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800595e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005972:	647a      	str	r2, [r7, #68]	@ 0x44
 8005974:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	623b      	str	r3, [r7, #32]
   return(result);
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e3      	bne.n	8005986 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f83b 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a16:	e023      	b.n	8005a60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <HAL_UART_IRQHandler+0x4f4>
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8e5 	bl	8005c00 <UART_Transmit_IT>
    return;
 8005a36:	e014      	b.n	8005a62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00e      	beq.n	8005a62 <HAL_UART_IRQHandler+0x51e>
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f924 	bl	8005c9e <UART_EndTransmit_IT>
    return;
 8005a56:	e004      	b.n	8005a62 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a60:	bf00      	nop
  }
}
 8005a62:	37e8      	adds	r7, #232	@ 0xe8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	4613      	mov	r3, r2
 8005aae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2222      	movs	r2, #34	@ 0x22
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0220 	orr.w	r2, r2, #32
 8005b06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b095      	sub	sp, #84	@ 0x54
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bac:	61ba      	str	r2, [r7, #24]
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	@ 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff ff41 	bl	8005a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b21      	cmp	r3, #33	@ 0x21
 8005c12:	d13e      	bne.n	8005c92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1c:	d114      	bne.n	8005c48 <UART_Transmit_IT+0x48>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d110      	bne.n	8005c48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	1c9a      	adds	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]
 8005c46:	e008      	b.n	8005c5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6211      	str	r1, [r2, #32]
 8005c52:	781a      	ldrb	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4619      	mov	r1, r3
 8005c68:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fed2 	bl	8005a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b08c      	sub	sp, #48	@ 0x30
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b22      	cmp	r3, #34	@ 0x22
 8005ce0:	f040 80ae 	bne.w	8005e40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cec:	d117      	bne.n	8005d1e <UART_Receive_IT+0x50>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d113      	bne.n	8005d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d1c:	e026      	b.n	8005d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d30:	d007      	beq.n	8005d42 <UART_Receive_IT+0x74>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <UART_Receive_IT+0x82>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e008      	b.n	8005d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d15d      	bne.n	8005e3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0220 	bic.w	r2, r2, #32
 8005d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d135      	bne.n	8005e32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dec:	623a      	str	r2, [r7, #32]
 8005dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	69f9      	ldr	r1, [r7, #28]
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d10a      	bne.n	8005e24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fe2e 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
 8005e30:	e002      	b.n	8005e38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fa f9ba 	bl	80001ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e002      	b.n	8005e42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e000      	b.n	8005e42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2302      	movs	r3, #2
  }
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3730      	adds	r7, #48	@ 0x30
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e86:	f023 030c 	bic.w	r3, r3, #12
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2c      	ldr	r2, [pc, #176]	@ (8005f60 <UART_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fe fdb6 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	e002      	b.n	8005ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fe fd9e 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009a      	lsls	r2, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <UART_SetConfig+0x118>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	0119      	lsls	r1, r3, #4
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <UART_SetConfig+0x118>)
 8005efa:	fba3 0302 	umull	r0, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2064      	movs	r0, #100	@ 0x64
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	@ 0x32
 8005f0c:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f18:	4419      	add	r1, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f32:	fba3 0302 	umull	r0, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2064      	movs	r0, #100	@ 0x64
 8005f3a:	fb00 f303 	mul.w	r3, r0, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	@ 0x32
 8005f44:	4a07      	ldr	r2, [pc, #28]	@ (8005f64 <UART_SetConfig+0x118>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	440a      	add	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40013800 	.word	0x40013800
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f68:	b084      	sub	sp, #16
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	f107 0014 	add.w	r0, r7, #20
 8005f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	b004      	add	sp, #16
 8005f86:	4770      	bx	lr

08005f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f98:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fbc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005fc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006000:	b084      	sub	sp, #16
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	f107 0014 	add.w	r0, r7, #20
 800600e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	b004      	add	sp, #16
 800603e:	4770      	bx	lr

08006040 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006040:	b480      	push	{r7}
 8006042:	b09d      	sub	sp, #116	@ 0x74
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006066:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d81f      	bhi.n	80060b2 <USB_ActivateEndpoint+0x72>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <USB_ActivateEndpoint+0x38>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060bb 	.word	0x080060bb
 8006084:	08006097 	.word	0x08006097
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006088:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800608c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006090:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006094:	e012      	b.n	80060bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006096:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800609a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800609e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80060a2:	e00b      	b.n	80060bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80060b0:	e004      	b.n	80060bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80060b8:	e000      	b.n	80060bc <USB_ActivateEndpoint+0x7c>
      break;
 80060ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	7b1b      	ldrb	r3, [r3, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 8178 	bne.w	800641c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8084 	beq.w	800623e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	4413      	add	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	011a      	lsls	r2, r3, #4
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	88db      	ldrh	r3, [r3, #6]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	827b      	strh	r3, [r7, #18]
 8006178:	8a7b      	ldrh	r3, [r7, #18]
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01b      	beq.n	80061ba <USB_ActivateEndpoint+0x17a>
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	823b      	strh	r3, [r7, #16]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8a3b      	ldrh	r3, [r7, #16]
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	78db      	ldrb	r3, [r3, #3]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d020      	beq.n	8006204 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d8:	81bb      	strh	r3, [r7, #12]
 80061da:	89bb      	ldrh	r3, [r7, #12]
 80061dc:	f083 0320 	eor.w	r3, r3, #32
 80061e0:	81bb      	strh	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	89bb      	ldrh	r3, [r7, #12]
 80061ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8013      	strh	r3, [r2, #0]
 8006202:	e2d5      	b.n	80067b0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	89fb      	ldrh	r3, [r7, #14]
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]
 800623c:	e2b8      	b.n	80067b0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	633b      	str	r3, [r7, #48]	@ 0x30
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	4413      	add	r3, r2
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	4413      	add	r3, r2
 800625c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	4413      	add	r3, r2
 8006284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	011a      	lsls	r2, r3, #4
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	4413      	add	r3, r2
 8006290:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ac:	d91d      	bls.n	80062ea <USB_ActivateEndpoint+0x2aa>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <USB_ActivateEndpoint+0x288>
 80062c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062c4:	3b01      	subs	r3, #1
 80062c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e026      	b.n	8006338 <USB_ActivateEndpoint+0x2f8>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USB_ActivateEndpoint+0x2c8>
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e017      	b.n	8006338 <USB_ActivateEndpoint+0x2f8>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <USB_ActivateEndpoint+0x2e2>
 800631c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800631e:	3301      	adds	r3, #1
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29a      	uxth	r2, r3
 8006328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	b29a      	uxth	r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <USB_ActivateEndpoint+0x348>
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006366:	843b      	strh	r3, [r7, #32]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8c3b      	ldrh	r3, [r7, #32]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d124      	bne.n	80063da <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	83bb      	strh	r3, [r7, #28]
 80063a8:	8bbb      	ldrh	r3, [r7, #28]
 80063aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063ae:	83bb      	strh	r3, [r7, #28]
 80063b0:	8bbb      	ldrh	r3, [r7, #28]
 80063b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063b6:	83bb      	strh	r3, [r7, #28]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8bbb      	ldrh	r3, [r7, #28]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
 80063d8:	e1ea      	b.n	80067b0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f0:	83fb      	strh	r3, [r7, #30]
 80063f2:	8bfb      	ldrh	r3, [r7, #30]
 80063f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063f8:	83fb      	strh	r3, [r7, #30]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8bfb      	ldrh	r3, [r7, #30]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
 800641a:	e1c9      	b.n	80067b0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d11e      	bne.n	8006462 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006454:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
 8006460:	e01d      	b.n	800649e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006478:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ae:	4413      	add	r3, r2
 80064b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	011a      	lsls	r2, r3, #4
 80064b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	891b      	ldrh	r3, [r3, #8]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e2:	4413      	add	r3, r2
 80064e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	011a      	lsls	r2, r3, #4
 80064ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	895b      	ldrh	r3, [r3, #10]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006504:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8093 	bne.w	8006636 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <USB_ActivateEndpoint+0x524>
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800655c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006572:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <USB_ActivateEndpoint+0x574>
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065da:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006612:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]
 8006634:	e0bc      	b.n	80067b0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006646:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800664a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01d      	beq.n	800668e <USB_ActivateEndpoint+0x64e>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006668:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006682:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800669e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80066a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01d      	beq.n	80066e6 <USB_ActivateEndpoint+0x6a6>
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d024      	beq.n	8006738 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006704:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800670c:	f083 0320 	eor.w	r3, r3, #32
 8006710:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e01d      	b.n	8006774 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80067b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3774      	adds	r7, #116	@ 0x74
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b08d      	sub	sp, #52	@ 0x34
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	7b1b      	ldrb	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 808e 	bne.w	80068f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d044      	beq.n	8006866 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	81bb      	strh	r3, [r7, #12]
 80067ea:	89bb      	ldrh	r3, [r7, #12]
 80067ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01b      	beq.n	800682c <USB_DeactivateEndpoint+0x6c>
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680a:	817b      	strh	r3, [r7, #10]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	897b      	ldrh	r3, [r7, #10]
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006824:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006842:	813b      	strh	r3, [r7, #8]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
 8006864:	e192      	b.n	8006b8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	827b      	strh	r3, [r7, #18]
 8006874:	8a7b      	ldrh	r3, [r7, #18]
 8006876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01b      	beq.n	80068b6 <USB_DeactivateEndpoint+0xf6>
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006894:	823b      	strh	r3, [r7, #16]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	8a3b      	ldrh	r3, [r7, #16]
 80068a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068cc:	81fb      	strh	r3, [r7, #14]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8013      	strh	r3, [r2, #0]
 80068ee:	e14d      	b.n	8006b8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 80a5 	bne.w	8006a44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	843b      	strh	r3, [r7, #32]
 8006908:	8c3b      	ldrh	r3, [r7, #32]
 800690a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01b      	beq.n	800694a <USB_DeactivateEndpoint+0x18a>
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	83fb      	strh	r3, [r7, #30]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	8bfb      	ldrh	r3, [r7, #30]
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	83bb      	strh	r3, [r7, #28]
 8006958:	8bbb      	ldrh	r3, [r7, #28]
 800695a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01b      	beq.n	800699a <USB_DeactivateEndpoint+0x1da>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006978:	837b      	strh	r3, [r7, #26]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	8b7b      	ldrh	r3, [r7, #26]
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006992:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b0:	833b      	strh	r3, [r7, #24]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	8b3b      	ldrh	r3, [r7, #24]
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e8:	82fb      	strh	r3, [r7, #22]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	8afb      	ldrh	r3, [r7, #22]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a20:	82bb      	strh	r3, [r7, #20]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	8abb      	ldrh	r3, [r7, #20]
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
 8006a42:	e0a3      	b.n	8006b8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <USB_DeactivateEndpoint+0x2d4>
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006aa2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01b      	beq.n	8006ae4 <USB_DeactivateEndpoint+0x324>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006adc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	441a      	add	r2, r3
 8006b3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3734      	adds	r7, #52	@ 0x34
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b0c2      	sub	sp, #264	@ 0x108
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba6:	6018      	str	r0, [r3, #0]
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	f040 86b7 	bne.w	8007932 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d908      	bls.n	8006bf2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006bf0:	e007      	b.n	8006c02 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	7b1b      	ldrb	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d13a      	bne.n	8006c88 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	88da      	ldrh	r2, [r3, #6]
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c38:	6800      	ldr	r0, [r0, #0]
 8006c3a:	f001 fc9c 	bl	8008576 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	011a      	lsls	r2, r3, #4
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	f000 be1f 	b.w	80078c6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	f040 8462 	bne.w	800755e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	f240 83df 	bls.w	8007476 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d08:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a1a      	ldr	r2, [r3, #32]
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	1ad2      	subs	r2, r2, r3
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 81c7 	beq.w	80070e8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d177      	bne.n	8006e66 <USB_EPStartXfer+0x2ce>
 8006d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	4413      	add	r3, r2
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	011a      	lsls	r2, r3, #4
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	4413      	add	r3, r2
 8006dac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dc8:	d921      	bls.n	8006e0e <USB_EPStartXfer+0x276>
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <USB_EPStartXfer+0x252>
 8006de0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	029b      	lsls	r3, r3, #10
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e050      	b.n	8006eb0 <USB_EPStartXfer+0x318>
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <USB_EPStartXfer+0x294>
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	e041      	b.n	8006eb0 <USB_EPStartXfer+0x318>
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	085b      	lsrs	r3, r3, #1
 8006e32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <USB_EPStartXfer+0x2b4>
 8006e42:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e46:	3301      	adds	r3, #1
 8006e48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	e024      	b.n	8006eb0 <USB_EPStartXfer+0x318>
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d11c      	bne.n	8006eb0 <USB_EPStartXfer+0x318>
 8006e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	4413      	add	r3, r2
 8006e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	011a      	lsls	r2, r3, #4
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	895b      	ldrh	r3, [r3, #10]
 8006ebc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6959      	ldr	r1, [r3, #20]
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ed6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eda:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	f001 fb49 	bl	8008576 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef4:	441a      	add	r2, r3
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d90f      	bls.n	8006f3e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	621a      	str	r2, [r3, #32]
 8006f3c:	e00e      	b.n	8006f5c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d177      	bne.n	800705c <USB_EPStartXfer+0x4c4>
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	011a      	lsls	r2, r3, #4
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fbe:	d921      	bls.n	8007004 <USB_EPStartXfer+0x46c>
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <USB_EPStartXfer+0x448>
 8006fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e056      	b.n	80070b2 <USB_EPStartXfer+0x51a>
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <USB_EPStartXfer+0x48a>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e047      	b.n	80070b2 <USB_EPStartXfer+0x51a>
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <USB_EPStartXfer+0x4aa>
 8007038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704c:	b29b      	uxth	r3, r3
 800704e:	029b      	lsls	r3, r3, #10
 8007050:	b29b      	uxth	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b29a      	uxth	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	e02a      	b.n	80070b2 <USB_EPStartXfer+0x51a>
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d122      	bne.n	80070b2 <USB_EPStartXfer+0x51a>
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	623b      	str	r3, [r7, #32]
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007086:	b29b      	uxth	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	4413      	add	r3, r2
 800708e:	623b      	str	r3, [r7, #32]
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	011a      	lsls	r2, r3, #4
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	4413      	add	r3, r2
 80070a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	891b      	ldrh	r3, [r3, #8]
 80070be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6959      	ldr	r1, [r3, #20]
 80070ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070e0:	6800      	ldr	r0, [r0, #0]
 80070e2:	f001 fa48 	bl	8008576 <USB_WritePMA>
 80070e6:	e3ee      	b.n	80078c6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d177      	bne.n	80071e8 <USB_EPStartXfer+0x650>
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007118:	4413      	add	r3, r2
 800711a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	011a      	lsls	r2, r3, #4
 800712a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800712c:	4413      	add	r3, r2
 800712e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007132:	647b      	str	r3, [r7, #68]	@ 0x44
 8007134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713e:	b29a      	uxth	r2, r3
 8007140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	2b3e      	cmp	r3, #62	@ 0x3e
 800714a:	d921      	bls.n	8007190 <USB_EPStartXfer+0x5f8>
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	2b00      	cmp	r3, #0
 8007160:	d104      	bne.n	800716c <USB_EPStartXfer+0x5d4>
 8007162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007166:	3b01      	subs	r3, #1
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800716c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007176:	b29b      	uxth	r3, r3
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	b29b      	uxth	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007188:	b29a      	uxth	r2, r3
 800718a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e056      	b.n	800723e <USB_EPStartXfer+0x6a6>
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <USB_EPStartXfer+0x616>
 8007198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	e047      	b.n	800723e <USB_EPStartXfer+0x6a6>
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <USB_EPStartXfer+0x636>
 80071c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	b29b      	uxth	r3, r3
 80071de:	4313      	orrs	r3, r2
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e02a      	b.n	800723e <USB_EPStartXfer+0x6a6>
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d122      	bne.n	800723e <USB_EPStartXfer+0x6a6>
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	653b      	str	r3, [r7, #80]	@ 0x50
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007218:	4413      	add	r3, r2
 800721a:	653b      	str	r3, [r7, #80]	@ 0x50
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	011a      	lsls	r2, r3, #4
 800722a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722c:	4413      	add	r3, r2
 800722e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007238:	b29a      	uxth	r2, r3
 800723a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	891b      	ldrh	r3, [r3, #8]
 800724a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007264:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007268:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f001 f982 	bl	8008576 <USB_WritePMA>
            ep->xfer_buff += len;
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007282:	441a      	add	r2, r3
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d90f      	bls.n	80072cc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80072ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a1a      	ldr	r2, [r3, #32]
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	621a      	str	r2, [r3, #32]
 80072ca:	e00e      	b.n	80072ea <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80072f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d177      	bne.n	80073f6 <USB_EPStartXfer+0x85e>
 8007306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	4413      	add	r3, r2
 8007328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	011a      	lsls	r2, r3, #4
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	4413      	add	r3, r2
 800733c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007340:	637b      	str	r3, [r7, #52]	@ 0x34
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734c:	b29a      	uxth	r2, r3
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	2b3e      	cmp	r3, #62	@ 0x3e
 8007358:	d921      	bls.n	800739e <USB_EPStartXfer+0x806>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <USB_EPStartXfer+0x7e2>
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007374:	3b01      	subs	r3, #1
 8007376:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	b29b      	uxth	r3, r3
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	b29b      	uxth	r3, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e050      	b.n	8007440 <USB_EPStartXfer+0x8a8>
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <USB_EPStartXfer+0x824>
 80073a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e041      	b.n	8007440 <USB_EPStartXfer+0x8a8>
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <USB_EPStartXfer+0x844>
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d6:	3301      	adds	r3, #1
 80073d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	029b      	lsls	r3, r3, #10
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e024      	b.n	8007440 <USB_EPStartXfer+0x8a8>
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d11c      	bne.n	8007440 <USB_EPStartXfer+0x8a8>
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741a:	4413      	add	r3, r2
 800741c:	643b      	str	r3, [r7, #64]	@ 0x40
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	011a      	lsls	r2, r3, #4
 800742c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800742e:	4413      	add	r3, r2
 8007430:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	b29a      	uxth	r2, r3
 800743c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	895b      	ldrh	r3, [r3, #10]
 800744c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6959      	ldr	r1, [r3, #20]
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007460:	b29b      	uxth	r3, r3
 8007462:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007466:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800746a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800746e:	6800      	ldr	r0, [r0, #0]
 8007470:	f001 f881 	bl	8008576 <USB_WritePMA>
 8007474:	e227      	b.n	80078c6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80074a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007502:	4413      	add	r3, r2
 8007504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	011a      	lsls	r2, r3, #4
 8007514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007516:	4413      	add	r3, r2
 8007518:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800751c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	b29a      	uxth	r2, r3
 8007524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007526:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	891b      	ldrh	r3, [r3, #8]
 8007534:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6959      	ldr	r1, [r3, #20]
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	b29b      	uxth	r3, r3
 800754a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800754e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007552:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007556:	6800      	ldr	r0, [r0, #0]
 8007558:	f001 f80d 	bl	8008576 <USB_WritePMA>
 800755c:	e1b3      	b.n	80078c6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80c6 	beq.w	8007730 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d177      	bne.n	80076b0 <USB_EPStartXfer+0xb18>
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075e0:	4413      	add	r3, r2
 80075e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80075fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007606:	b29a      	uxth	r2, r3
 8007608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007610:	2b3e      	cmp	r3, #62	@ 0x3e
 8007612:	d921      	bls.n	8007658 <USB_EPStartXfer+0xac0>
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <USB_EPStartXfer+0xa9c>
 800762a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800762e:	3b01      	subs	r3, #1
 8007630:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800763e:	b29b      	uxth	r3, r3
 8007640:	029b      	lsls	r3, r3, #10
 8007642:	b29b      	uxth	r3, r3
 8007644:	4313      	orrs	r3, r2
 8007646:	b29b      	uxth	r3, r3
 8007648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007650:	b29a      	uxth	r2, r3
 8007652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	e050      	b.n	80076fa <USB_EPStartXfer+0xb62>
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <USB_EPStartXfer+0xade>
 8007660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766e:	b29a      	uxth	r2, r3
 8007670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	e041      	b.n	80076fa <USB_EPStartXfer+0xb62>
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <USB_EPStartXfer+0xafe>
 800768c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007690:	3301      	adds	r3, #1
 8007692:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29a      	uxth	r2, r3
 800769c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	029b      	lsls	r3, r3, #10
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4313      	orrs	r3, r2
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	e024      	b.n	80076fa <USB_EPStartXfer+0xb62>
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d11c      	bne.n	80076fa <USB_EPStartXfer+0xb62>
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d4:	4413      	add	r3, r2
 80076d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	011a      	lsls	r2, r3, #4
 80076e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076e8:	4413      	add	r3, r2
 80076ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	895b      	ldrh	r3, [r3, #10]
 8007706:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6959      	ldr	r1, [r3, #20]
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	b29b      	uxth	r3, r3
 800771c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007720:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007724:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007728:	6800      	ldr	r0, [r0, #0]
 800772a:	f000 ff24 	bl	8008576 <USB_WritePMA>
 800772e:	e0ca      	b.n	80078c6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d177      	bne.n	8007830 <USB_EPStartXfer+0xc98>
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007760:	4413      	add	r3, r2
 8007762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	011a      	lsls	r2, r3, #4
 8007772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007774:	4413      	add	r3, r2
 8007776:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800777a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800777c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007786:	b29a      	uxth	r2, r3
 8007788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	2b3e      	cmp	r3, #62	@ 0x3e
 8007792:	d921      	bls.n	80077d8 <USB_EPStartXfer+0xc40>
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <USB_EPStartXfer+0xc1c>
 80077aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077ae:	3b01      	subs	r3, #1
 80077b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e05c      	b.n	8007892 <USB_EPStartXfer+0xcfa>
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <USB_EPStartXfer+0xc5e>
 80077e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e04d      	b.n	8007892 <USB_EPStartXfer+0xcfa>
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <USB_EPStartXfer+0xc7e>
 800780c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007810:	3301      	adds	r3, #1
 8007812:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29a      	uxth	r2, r3
 800781c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29b      	uxth	r3, r3
 8007826:	4313      	orrs	r3, r2
 8007828:	b29a      	uxth	r2, r3
 800782a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e030      	b.n	8007892 <USB_EPStartXfer+0xcfa>
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d128      	bne.n	8007892 <USB_EPStartXfer+0xcfa>
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800785c:	b29b      	uxth	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007864:	4413      	add	r3, r2
 8007866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	011a      	lsls	r2, r3, #4
 8007878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800787c:	4413      	add	r3, r2
 800787e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007882:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007890:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	891b      	ldrh	r3, [r3, #8]
 800789e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6959      	ldr	r1, [r3, #20]
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078c0:	6800      	ldr	r0, [r0, #0]
 80078c2:	f000 fe58 	bl	8008576 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ec:	817b      	strh	r3, [r7, #10]
 80078ee:	897b      	ldrh	r3, [r7, #10]
 80078f0:	f083 0310 	eor.w	r3, r3, #16
 80078f4:	817b      	strh	r3, [r7, #10]
 80078f6:	897b      	ldrh	r3, [r7, #10]
 80078f8:	f083 0320 	eor.w	r3, r3, #32
 80078fc:	817b      	strh	r3, [r7, #10]
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	441a      	add	r2, r3
 8007918:	897b      	ldrh	r3, [r7, #10]
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
 800792e:	f000 bcde 	b.w	80082ee <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	7b1b      	ldrb	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 80bb 	bne.w	8007aba <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d917      	bls.n	8007990 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	619a      	str	r2, [r3, #24]
 800798e:	e00e      	b.n	80079ae <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80079a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079d2:	4413      	add	r3, r2
 80079d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	011a      	lsls	r2, r3, #4
 80079e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a0e:	d924      	bls.n	8007a5a <USB_EPStartXfer+0xec2>
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USB_EPStartXfer+0xe98>
 8007a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	f000 bc10 	b.w	800827a <USB_EPStartXfer+0x16e2>
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10c      	bne.n	8007a7c <USB_EPStartXfer+0xee4>
 8007a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e3fe      	b.n	800827a <USB_EPStartXfer+0x16e2>
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <USB_EPStartXfer+0xf04>
 8007a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a96:	3301      	adds	r3, #1
 8007a98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e3df      	b.n	800827a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	78db      	ldrb	r3, [r3, #3]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	f040 8218 	bne.w	8007efc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f040 809d 	bne.w	8007c18 <USB_EPStartXfer+0x1080>
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b02:	4413      	add	r3, r2
 8007b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	011a      	lsls	r2, r3, #4
 8007b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b46:	d92b      	bls.n	8007ba0 <USB_EPStartXfer+0x1008>
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	095b      	lsrs	r3, r3, #5
 8007b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 031f 	and.w	r3, r3, #31
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USB_EPStartXfer+0xfe0>
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	3b01      	subs	r3, #1
 8007b74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	029b      	lsls	r3, r3, #10
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e070      	b.n	8007c82 <USB_EPStartXfer+0x10ea>
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10c      	bne.n	8007bca <USB_EPStartXfer+0x1032>
 8007bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bc6:	801a      	strh	r2, [r3, #0]
 8007bc8:	e05b      	b.n	8007c82 <USB_EPStartXfer+0x10ea>
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	085b      	lsrs	r3, r3, #1
 8007bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <USB_EPStartXfer+0x1062>
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	029b      	lsls	r3, r3, #10
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	e034      	b.n	8007c82 <USB_EPStartXfer+0x10ea>
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d12c      	bne.n	8007c82 <USB_EPStartXfer+0x10ea>
 8007c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	011a      	lsls	r2, r3, #4
 8007c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 809d 	bne.w	8007ddc <USB_EPStartXfer+0x1244>
 8007ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	011a      	lsls	r2, r3, #4
 8007cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cde:	4413      	add	r3, r2
 8007ce0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d0a:	d92b      	bls.n	8007d64 <USB_EPStartXfer+0x11cc>
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <USB_EPStartXfer+0x11a4>
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d36:	3b01      	subs	r3, #1
 8007d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e069      	b.n	8007e38 <USB_EPStartXfer+0x12a0>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10c      	bne.n	8007d8e <USB_EPStartXfer+0x11f6>
 8007d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e054      	b.n	8007e38 <USB_EPStartXfer+0x12a0>
 8007d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <USB_EPStartXfer+0x1226>
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db8:	3301      	adds	r3, #1
 8007dba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	029b      	lsls	r3, r3, #10
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e02d      	b.n	8007e38 <USB_EPStartXfer+0x12a0>
 8007ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	785b      	ldrb	r3, [r3, #1]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d125      	bne.n	8007e38 <USB_EPStartXfer+0x12a0>
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e02:	4413      	add	r3, r2
 8007e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8218 	beq.w	800827a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <USB_EPStartXfer+0x12ea>
 8007e76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10d      	bne.n	8007e9e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 81f5 	bne.w	800827a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 81ee 	bne.w	800827a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
 8007efa:	e1be      	b.n	800827a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	f040 81b4 	bne.w	8008276 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d917      	bls.n	8007f5a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	1ad2      	subs	r2, r2, r3
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	619a      	str	r2, [r3, #24]
 8007f58:	e00e      	b.n	8007f78 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2200      	movs	r2, #0
 8007f76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 8085 	bne.w	8008094 <USB_EPStartXfer+0x14fc>
 8007f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fae:	4413      	add	r3, r2
 8007fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	011a      	lsls	r2, r3, #4
 8007fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fea:	d923      	bls.n	8008034 <USB_EPStartXfer+0x149c>
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <USB_EPStartXfer+0x1474>
 8008002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008006:	3b01      	subs	r3, #1
 8008008:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800800c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008018:	b29b      	uxth	r3, r3
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	b29b      	uxth	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e060      	b.n	80080f6 <USB_EPStartXfer+0x155e>
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <USB_EPStartXfer+0x14be>
 800803c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804c:	b29a      	uxth	r2, r3
 800804e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	e04f      	b.n	80080f6 <USB_EPStartXfer+0x155e>
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <USB_EPStartXfer+0x14de>
 800806c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008070:	3301      	adds	r3, #1
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e030      	b.n	80080f6 <USB_EPStartXfer+0x155e>
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d128      	bne.n	80080f6 <USB_EPStartXfer+0x155e>
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8085 	bne.w	8008220 <USB_EPStartXfer+0x1688>
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800813a:	4413      	add	r3, r2
 800813c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	011a      	lsls	r2, r3, #4
 800814e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008152:	4413      	add	r3, r2
 8008154:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800815c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008174:	2b3e      	cmp	r3, #62	@ 0x3e
 8008176:	d923      	bls.n	80081c0 <USB_EPStartXfer+0x1628>
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2b00      	cmp	r3, #0
 800818c:	d104      	bne.n	8008198 <USB_EPStartXfer+0x1600>
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008192:	3b01      	subs	r3, #1
 8008194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	029b      	lsls	r3, r3, #10
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e05c      	b.n	800827a <USB_EPStartXfer+0x16e2>
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10c      	bne.n	80081e2 <USB_EPStartXfer+0x164a>
 80081c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d8:	b29a      	uxth	r2, r3
 80081da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081de:	801a      	strh	r2, [r3, #0]
 80081e0:	e04b      	b.n	800827a <USB_EPStartXfer+0x16e2>
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USB_EPStartXfer+0x166a>
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081fc:	3301      	adds	r3, #1
 80081fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29a      	uxth	r2, r3
 800820a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800820e:	b29b      	uxth	r3, r3
 8008210:	029b      	lsls	r3, r3, #10
 8008212:	b29b      	uxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	e02c      	b.n	800827a <USB_EPStartXfer+0x16e2>
 8008220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d124      	bne.n	800827a <USB_EPStartXfer+0x16e2>
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800823e:	b29b      	uxth	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008246:	4413      	add	r3, r2
 8008248:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800824c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	011a      	lsls	r2, r3, #4
 800825a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800825e:	4413      	add	r3, r2
 8008260:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e001      	b.n	800827a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e03a      	b.n	80082f0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800827a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800829c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d020      	beq.n	800834e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800831e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008322:	81bb      	strh	r3, [r7, #12]
 8008324:	89bb      	ldrh	r3, [r7, #12]
 8008326:	f083 0310 	eor.w	r3, r3, #16
 800832a:	81bb      	strh	r3, [r7, #12]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	89bb      	ldrh	r3, [r7, #12]
 8008338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008348:	b29b      	uxth	r3, r3
 800834a:	8013      	strh	r3, [r2, #0]
 800834c:	e01f      	b.n	800838e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008364:	81fb      	strh	r3, [r7, #14]
 8008366:	89fb      	ldrh	r3, [r7, #14]
 8008368:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800836c:	81fb      	strh	r3, [r7, #14]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800839a:	b480      	push	{r7}
 800839c:	b087      	sub	sp, #28
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	7b1b      	ldrb	r3, [r3, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 809d 	bne.w	80084e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d04c      	beq.n	8008450 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	823b      	strh	r3, [r7, #16]
 80083c4:	8a3b      	ldrh	r3, [r7, #16]
 80083c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01b      	beq.n	8008406 <USB_EPClearStall+0x6c>
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e4:	81fb      	strh	r3, [r7, #14]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d06c      	beq.n	80084e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008424:	81bb      	strh	r3, [r7, #12]
 8008426:	89bb      	ldrh	r3, [r7, #12]
 8008428:	f083 0320 	eor.w	r3, r3, #32
 800842c:	81bb      	strh	r3, [r7, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	441a      	add	r2, r3
 8008438:	89bb      	ldrh	r3, [r7, #12]
 800843a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800843e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800844a:	b29b      	uxth	r3, r3
 800844c:	8013      	strh	r3, [r2, #0]
 800844e:	e04b      	b.n	80084e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	82fb      	strh	r3, [r7, #22]
 800845e:	8afb      	ldrh	r3, [r7, #22]
 8008460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <USB_EPClearStall+0x106>
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	82bb      	strh	r3, [r7, #20]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	441a      	add	r2, r3
 800848a:	8abb      	ldrh	r3, [r7, #20]
 800848c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800849c:	b29b      	uxth	r3, r3
 800849e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b6:	827b      	strh	r3, [r7, #18]
 80084b8:	8a7b      	ldrh	r3, [r7, #18]
 80084ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084be:	827b      	strh	r3, [r7, #18]
 80084c0:	8a7b      	ldrh	r3, [r7, #18]
 80084c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084c6:	827b      	strh	r3, [r7, #18]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	8a7b      	ldrh	r3, [r7, #18]
 80084d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2280      	movs	r2, #128	@ 0x80
 800850a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr

0800851a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr

0800852e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008550:	b29b      	uxth	r3, r3
 8008552:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008576:	b480      	push	{r7}
 8008578:	b08b      	sub	sp, #44	@ 0x2c
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	4611      	mov	r1, r2
 8008582:	461a      	mov	r2, r3
 8008584:	460b      	mov	r3, r1
 8008586:	80fb      	strh	r3, [r7, #6]
 8008588:	4613      	mov	r3, r2
 800858a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800858c:	88bb      	ldrh	r3, [r7, #4]
 800858e:	3301      	adds	r3, #1
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	005a      	lsls	r2, r3, #1
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ae:	e01e      	b.n	80085ee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	3301      	adds	r3, #1
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	b21a      	sxth	r2, r3
 80085c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	b21b      	sxth	r3, r3
 80085c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	8a7a      	ldrh	r2, [r7, #18]
 80085ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	3302      	adds	r3, #2
 80085d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	3302      	adds	r3, #2
 80085da:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3301      	adds	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	3b01      	subs	r3, #1
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1dd      	bne.n	80085b0 <USB_WritePMA+0x3a>
  }
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	372c      	adds	r7, #44	@ 0x2c
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008600:	b480      	push	{r7}
 8008602:	b08b      	sub	sp, #44	@ 0x2c
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	80fb      	strh	r3, [r7, #6]
 8008612:	4613      	mov	r3, r2
 8008614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008616:	88bb      	ldrh	r3, [r7, #4]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	b29b      	uxth	r3, r3
 800861c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	005a      	lsls	r2, r3, #1
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008632:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
 8008638:	e01b      	b.n	8008672 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	3302      	adds	r3, #2
 8008646:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	3301      	adds	r3, #1
 8008654:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	b2da      	uxtb	r2, r3
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	3302      	adds	r3, #2
 800866a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	3b01      	subs	r3, #1
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e0      	bne.n	800863a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008678:	88bb      	ldrh	r3, [r7, #4]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	b2da      	uxtb	r2, r3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	701a      	strb	r2, [r3, #0]
  }
}
 8008694:	bf00      	nop
 8008696:	372c      	adds	r7, #44	@ 0x2c
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7c1b      	ldrb	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d115      	bne.n	80086e2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086ba:	2202      	movs	r2, #2
 80086bc:	2181      	movs	r1, #129	@ 0x81
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fe7b 	bl	800a3ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086ce:	2202      	movs	r2, #2
 80086d0:	2101      	movs	r1, #1
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 fe71 	bl	800a3ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80086e0:	e012      	b.n	8008708 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086e2:	2340      	movs	r3, #64	@ 0x40
 80086e4:	2202      	movs	r2, #2
 80086e6:	2181      	movs	r1, #129	@ 0x81
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fe66 	bl	800a3ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086f4:	2340      	movs	r3, #64	@ 0x40
 80086f6:	2202      	movs	r2, #2
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fe5d 	bl	800a3ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008708:	2308      	movs	r3, #8
 800870a:	2203      	movs	r2, #3
 800870c:	2182      	movs	r1, #130	@ 0x82
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fe53 	bl	800a3ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800871a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800871e:	f001 ff73 	bl	800a608 <USBD_static_malloc>
 8008722:	4602      	mov	r2, r0
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	e026      	b.n	8008788 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008740:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7c1b      	ldrb	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800876a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800876e:	2101      	movs	r1, #1
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 ff13 	bl	800a59c <USBD_LL_PrepareReceive>
 8008776:	e007      	b.n	8008788 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800877e:	2340      	movs	r3, #64	@ 0x40
 8008780:	2101      	movs	r1, #1
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 ff0a 	bl	800a59c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087a2:	2181      	movs	r1, #129	@ 0x81
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fe2e 	bl	800a406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087b0:	2101      	movs	r1, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fe27 	bl	800a406 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087c0:	2182      	movs	r1, #130	@ 0x82
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fe1f 	bl	800a406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00e      	beq.n	80087f6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 ff19 	bl	800a620 <USBD_static_free>
    pdev->pClassData = NULL;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008810:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008826:	2b00      	cmp	r3, #0
 8008828:	d039      	beq.n	800889e <USBD_CDC_Setup+0x9e>
 800882a:	2b20      	cmp	r3, #32
 800882c:	d17f      	bne.n	800892e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	88db      	ldrh	r3, [r3, #6]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d029      	beq.n	800888a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	b25b      	sxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	da11      	bge.n	8008864 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800884c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	88d2      	ldrh	r2, [r2, #6]
 8008852:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008854:	6939      	ldr	r1, [r7, #16]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	461a      	mov	r2, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 f9d5 	bl	8009c0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008862:	e06b      	b.n	800893c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	88db      	ldrh	r3, [r3, #6]
 8008872:	b2da      	uxtb	r2, r3
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800887a:	6939      	ldr	r1, [r7, #16]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88db      	ldrh	r3, [r3, #6]
 8008880:	461a      	mov	r2, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 f9f0 	bl	8009c68 <USBD_CtlPrepareRx>
      break;
 8008888:	e058      	b.n	800893c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	7850      	ldrb	r0, [r2, #1]
 8008896:	2200      	movs	r2, #0
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	4798      	blx	r3
      break;
 800889c:	e04e      	b.n	800893c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b0b      	cmp	r3, #11
 80088a4:	d02e      	beq.n	8008904 <USBD_CDC_Setup+0x104>
 80088a6:	2b0b      	cmp	r3, #11
 80088a8:	dc38      	bgt.n	800891c <USBD_CDC_Setup+0x11c>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <USBD_CDC_Setup+0xb4>
 80088ae:	2b0a      	cmp	r3, #10
 80088b0:	d014      	beq.n	80088dc <USBD_CDC_Setup+0xdc>
 80088b2:	e033      	b.n	800891c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d107      	bne.n	80088ce <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	2202      	movs	r2, #2
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f9a0 	bl	8009c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088cc:	e02e      	b.n	800892c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 f931 	bl	8009b38 <USBD_CtlError>
            ret = USBD_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	75fb      	strb	r3, [r7, #23]
          break;
 80088da:	e027      	b.n	800892c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d107      	bne.n	80088f6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80088e6:	f107 030f 	add.w	r3, r7, #15
 80088ea:	2201      	movs	r2, #1
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f98c 	bl	8009c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f4:	e01a      	b.n	800892c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f91d 	bl	8009b38 <USBD_CtlError>
            ret = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	75fb      	strb	r3, [r7, #23]
          break;
 8008902:	e013      	b.n	800892c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800890a:	2b03      	cmp	r3, #3
 800890c:	d00d      	beq.n	800892a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f911 	bl	8009b38 <USBD_CtlError>
            ret = USBD_FAIL;
 8008916:	2302      	movs	r3, #2
 8008918:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800891a:	e006      	b.n	800892a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 f90a 	bl	8009b38 <USBD_CtlError>
          ret = USBD_FAIL;
 8008924:	2302      	movs	r3, #2
 8008926:	75fb      	strb	r3, [r7, #23]
          break;
 8008928:	e000      	b.n	800892c <USBD_CDC_Setup+0x12c>
          break;
 800892a:	bf00      	nop
      }
      break;
 800892c:	e006      	b.n	800893c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f901 	bl	8009b38 <USBD_CtlError>
      ret = USBD_FAIL;
 8008936:	2302      	movs	r3, #2
 8008938:	75fb      	strb	r3, [r7, #23]
      break;
 800893a:	bf00      	nop
  }

  return ret;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008958:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008960:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d03a      	beq.n	80089e2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	331c      	adds	r3, #28
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d029      	beq.n	80089d6 <USBD_CDC_DataIn+0x90>
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	331c      	adds	r3, #28
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	78f9      	ldrb	r1, [r7, #3]
 8008996:	68b8      	ldr	r0, [r7, #8]
 8008998:	460b      	mov	r3, r1
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4403      	add	r3, r0
 80089a2:	3338      	adds	r3, #56	@ 0x38
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80089aa:	fb01 f303 	mul.w	r3, r1, r3
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d110      	bne.n	80089d6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	331c      	adds	r3, #28
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089c8:	78f9      	ldrb	r1, [r7, #3]
 80089ca:	2300      	movs	r3, #0
 80089cc:	2200      	movs	r2, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fdc1 	bl	800a556 <USBD_LL_Transmit>
 80089d4:	e003      	b.n	80089de <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	e000      	b.n	80089e4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80089e2:	2302      	movs	r3, #2
  }
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fdec 	bl	800a5e2 <USBD_LL_GetRxDataSize>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00d      	beq.n	8008a38 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008a30:	4611      	mov	r1, r2
 8008a32:	4798      	blx	r3

    return USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	e000      	b.n	8008a3a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a38:	2302      	movs	r3, #2
  }
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a50:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d014      	beq.n	8008a86 <USBD_CDC_EP0_RxReady+0x44>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008a62:	2bff      	cmp	r3, #255	@ 0xff
 8008a64:	d00f      	beq.n	8008a86 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	22ff      	movs	r2, #255	@ 0xff
 8008a82:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2243      	movs	r2, #67	@ 0x43
 8008a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	@ (8008aac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000094 	.word	0x20000094

08008ab0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2243      	movs	r2, #67	@ 0x43
 8008abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	@ (8008acc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20000050 	.word	0x20000050

08008ad0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2243      	movs	r2, #67	@ 0x43
 8008adc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ade:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	200000d8 	.word	0x200000d8

08008af0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	220a      	movs	r2, #10
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008afe:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	2000000c 	.word	0x2000000c

08008b10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bc80      	pop	{r7}
 8008b3a:	4770      	bx	lr

08008b3c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr

08008b6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d017      	beq.n	8008bde <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7c1b      	ldrb	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fcea 	bl	800a59c <USBD_LL_PrepareReceive>
 8008bc8:	e007      	b.n	8008bda <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bd0:	2340      	movs	r3, #64	@ 0x40
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fce1 	bl	800a59c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e000      	b.n	8008be0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bde:	2302      	movs	r3, #2
  }
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e01a      	b.n	8008c36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	79fa      	ldrb	r2, [r7, #7]
 8008c2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f001 fb4e 	bl	800a2d0 <USBD_LL_Init>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d006      	beq.n	8008c60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73fb      	strb	r3, [r7, #15]
 8008c5e:	e001      	b.n	8008c64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c60:	2302      	movs	r3, #2
 8008c62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr

08008c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fb83 	bl	800a384 <USBD_LL_Start>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr

08008c9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00c      	beq.n	8008cd0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fed7 	bl	8009ac6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d016      	beq.n	8008d6a <USBD_LL_SetupStage+0x6a>
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d81c      	bhi.n	8008d7a <USBD_LL_SetupStage+0x7a>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <USBD_LL_SetupStage+0x4a>
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d008      	beq.n	8008d5a <USBD_LL_SetupStage+0x5a>
 8008d48:	e017      	b.n	8008d7a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9ca 	bl	80090ec <USBD_StdDevReq>
      break;
 8008d58:	e01a      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa2c 	bl	80091c0 <USBD_StdItfReq>
      break;
 8008d68:	e012      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa6c 	bl	8009250 <USBD_StdEPReq>
      break;
 8008d78:	e00a      	b.n	8008d90 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d80:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fb5b 	bl	800a444 <USBD_LL_StallEP>
      break;
 8008d8e:	bf00      	nop
  }

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b086      	sub	sp, #24
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	460b      	mov	r3, r1
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d14b      	bne.n	8008e46 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008db4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d134      	bne.n	8008e2a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d919      	bls.n	8008e00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d203      	bcs.n	8008dee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	e002      	b.n	8008df4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 ff53 	bl	8009ca4 <USBD_CtlContinueRx>
 8008dfe:	e038      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d105      	bne.n	8008e22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 ff50 	bl	8009cc8 <USBD_CtlSendStatus>
 8008e28:	e023      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e30:	2b05      	cmp	r3, #5
 8008e32:	d11e      	bne.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f001 fb00 	bl	800a444 <USBD_LL_StallEP>
 8008e44:	e015      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00d      	beq.n	8008e6e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d108      	bne.n	8008e6e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	7afa      	ldrb	r2, [r7, #11]
 8008e66:	4611      	mov	r1, r2
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	4798      	blx	r3
 8008e6c:	e001      	b.n	8008e72 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e000      	b.n	8008e74 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	460b      	mov	r3, r1
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d17f      	bne.n	8008f90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3314      	adds	r3, #20
 8008e94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d15c      	bne.n	8008f5a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d915      	bls.n	8008ed8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 febd 	bl	8009c44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f001 fb63 	bl	800a59c <USBD_LL_PrepareReceive>
 8008ed6:	e04e      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	6912      	ldr	r2, [r2, #16]
 8008ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ee4:	fb01 f202 	mul.w	r2, r1, r2
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11c      	bne.n	8008f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d316      	bcc.n	8008f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d20f      	bcs.n	8008f28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fe99 	bl	8009c44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f001 fb3b 	bl	800a59c <USBD_LL_PrepareReceive>
 8008f26:	e026      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d105      	bne.n	8008f4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f4a:	2180      	movs	r1, #128	@ 0x80
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f001 fa79 	bl	800a444 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fecb 	bl	8009cee <USBD_CtlReceiveStatus>
 8008f58:	e00d      	b.n	8008f76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d004      	beq.n	8008f6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f001 fa67 	bl	800a444 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d11d      	bne.n	8008fbc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff fe81 	bl	8008c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f8e:	e015      	b.n	8008fbc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d108      	bne.n	8008fb8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	7afa      	ldrb	r2, [r7, #11]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	4798      	blx	r3
 8008fb6:	e001      	b.n	8008fbc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e000      	b.n	8008fbe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fce:	2340      	movs	r3, #64	@ 0x40
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 f9f0 	bl	800a3ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fea:	2340      	movs	r3, #64	@ 0x40
 8008fec:	2200      	movs	r2, #0
 8008fee:	2180      	movs	r1, #128	@ 0x80
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f9e2 	bl	800a3ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2240      	movs	r2, #64	@ 0x40
 8009000:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6852      	ldr	r2, [r2, #4]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	4611      	mov	r1, r2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
  }

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2204      	movs	r2, #4
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr

0800908e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800909c:	2b04      	cmp	r3, #4
 800909e:	d105      	bne.n	80090ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d10b      	bne.n	80090e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009102:	2b40      	cmp	r3, #64	@ 0x40
 8009104:	d005      	beq.n	8009112 <USBD_StdDevReq+0x26>
 8009106:	2b40      	cmp	r3, #64	@ 0x40
 8009108:	d84f      	bhi.n	80091aa <USBD_StdDevReq+0xbe>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <USBD_StdDevReq+0x36>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d14b      	bne.n	80091aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
      break;
 8009120:	e048      	b.n	80091b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b09      	cmp	r3, #9
 8009128:	d839      	bhi.n	800919e <USBD_StdDevReq+0xb2>
 800912a:	a201      	add	r2, pc, #4	@ (adr r2, 8009130 <USBD_StdDevReq+0x44>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009181 	.word	0x08009181
 8009134:	08009195 	.word	0x08009195
 8009138:	0800919f 	.word	0x0800919f
 800913c:	0800918b 	.word	0x0800918b
 8009140:	0800919f 	.word	0x0800919f
 8009144:	08009163 	.word	0x08009163
 8009148:	08009159 	.word	0x08009159
 800914c:	0800919f 	.word	0x0800919f
 8009150:	08009177 	.word	0x08009177
 8009154:	0800916d 	.word	0x0800916d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9dc 	bl	8009518 <USBD_GetDescriptor>
          break;
 8009160:	e022      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fb3f 	bl	80097e8 <USBD_SetAddress>
          break;
 800916a:	e01d      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb7e 	bl	8009870 <USBD_SetConfig>
          break;
 8009174:	e018      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc07 	bl	800998c <USBD_GetConfig>
          break;
 800917e:	e013      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc37 	bl	80099f6 <USBD_GetStatus>
          break;
 8009188:	e00e      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc65 	bl	8009a5c <USBD_SetFeature>
          break;
 8009192:	e009      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc74 	bl	8009a84 <USBD_ClrFeature>
          break;
 800919c:	e004      	b.n	80091a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fcc9 	bl	8009b38 <USBD_CtlError>
          break;
 80091a6:	bf00      	nop
      }
      break;
 80091a8:	e004      	b.n	80091b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fcc3 	bl	8009b38 <USBD_CtlError>
      break;
 80091b2:	bf00      	nop
  }

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop

080091c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091d6:	2b40      	cmp	r3, #64	@ 0x40
 80091d8:	d005      	beq.n	80091e6 <USBD_StdItfReq+0x26>
 80091da:	2b40      	cmp	r3, #64	@ 0x40
 80091dc:	d82e      	bhi.n	800923c <USBD_StdItfReq+0x7c>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <USBD_StdItfReq+0x26>
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d12a      	bne.n	800923c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ec:	3b01      	subs	r3, #1
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d81d      	bhi.n	800922e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	889b      	ldrh	r3, [r3, #4]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d813      	bhi.n	8009224 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d110      	bne.n	8009238 <USBD_StdItfReq+0x78>
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10d      	bne.n	8009238 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fd53 	bl	8009cc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009222:	e009      	b.n	8009238 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc86 	bl	8009b38 <USBD_CtlError>
          break;
 800922c:	e004      	b.n	8009238 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fc81 	bl	8009b38 <USBD_CtlError>
          break;
 8009236:	e000      	b.n	800923a <USBD_StdItfReq+0x7a>
          break;
 8009238:	bf00      	nop
      }
      break;
 800923a:	e004      	b.n	8009246 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc7a 	bl	8009b38 <USBD_CtlError>
      break;
 8009244:	bf00      	nop
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	889b      	ldrh	r3, [r3, #4]
 8009262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800926c:	2b40      	cmp	r3, #64	@ 0x40
 800926e:	d007      	beq.n	8009280 <USBD_StdEPReq+0x30>
 8009270:	2b40      	cmp	r3, #64	@ 0x40
 8009272:	f200 8146 	bhi.w	8009502 <USBD_StdEPReq+0x2b2>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <USBD_StdEPReq+0x40>
 800927a:	2b20      	cmp	r3, #32
 800927c:	f040 8141 	bne.w	8009502 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
      break;
 800928e:	e13d      	b.n	800950c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009298:	2b20      	cmp	r3, #32
 800929a:	d10a      	bne.n	80092b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	e12d      	b.n	800950e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d007      	beq.n	80092ca <USBD_StdEPReq+0x7a>
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	f300 811b 	bgt.w	80094f6 <USBD_StdEPReq+0x2a6>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d072      	beq.n	80093aa <USBD_StdEPReq+0x15a>
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d03a      	beq.n	800933e <USBD_StdEPReq+0xee>
 80092c8:	e115      	b.n	80094f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d002      	beq.n	80092da <USBD_StdEPReq+0x8a>
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d015      	beq.n	8009304 <USBD_StdEPReq+0xb4>
 80092d8:	e02b      	b.n	8009332 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <USBD_StdEPReq+0xaa>
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b80      	cmp	r3, #128	@ 0x80
 80092e4:	d009      	beq.n	80092fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 f8aa 	bl	800a444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	@ 0x80
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f8a6 	bl	800a444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092f8:	e020      	b.n	800933c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc1b 	bl	8009b38 <USBD_CtlError>
              break;
 8009302:	e01b      	b.n	800933c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	885b      	ldrh	r3, [r3, #2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10e      	bne.n	800932a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <USBD_StdEPReq+0xda>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b80      	cmp	r3, #128	@ 0x80
 8009316:	d008      	beq.n	800932a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	88db      	ldrh	r3, [r3, #6]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f88d 	bl	800a444 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fccc 	bl	8009cc8 <USBD_CtlSendStatus>

              break;
 8009330:	e004      	b.n	800933c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbff 	bl	8009b38 <USBD_CtlError>
              break;
 800933a:	bf00      	nop
          }
          break;
 800933c:	e0e0      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009344:	2b02      	cmp	r3, #2
 8009346:	d002      	beq.n	800934e <USBD_StdEPReq+0xfe>
 8009348:	2b03      	cmp	r3, #3
 800934a:	d015      	beq.n	8009378 <USBD_StdEPReq+0x128>
 800934c:	e026      	b.n	800939c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00c      	beq.n	800936e <USBD_StdEPReq+0x11e>
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b80      	cmp	r3, #128	@ 0x80
 8009358:	d009      	beq.n	800936e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 f870 	bl	800a444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009364:	2180      	movs	r1, #128	@ 0x80
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f86c 	bl	800a444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800936c:	e01c      	b.n	80093a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fbe1 	bl	8009b38 <USBD_CtlError>
              break;
 8009376:	e017      	b.n	80093a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	885b      	ldrh	r3, [r3, #2]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d112      	bne.n	80093a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 f877 	bl	800a482 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc97 	bl	8009cc8 <USBD_CtlSendStatus>
              }
              break;
 800939a:	e004      	b.n	80093a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fbca 	bl	8009b38 <USBD_CtlError>
              break;
 80093a4:	e000      	b.n	80093a8 <USBD_StdEPReq+0x158>
              break;
 80093a6:	bf00      	nop
          }
          break;
 80093a8:	e0aa      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d002      	beq.n	80093ba <USBD_StdEPReq+0x16a>
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d032      	beq.n	800941e <USBD_StdEPReq+0x1ce>
 80093b8:	e097      	b.n	80094ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <USBD_StdEPReq+0x180>
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b80      	cmp	r3, #128	@ 0x80
 80093c4:	d004      	beq.n	80093d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fbb5 	bl	8009b38 <USBD_CtlError>
                break;
 80093ce:	e091      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da0b      	bge.n	80093f0 <USBD_StdEPReq+0x1a0>
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	3310      	adds	r3, #16
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	4413      	add	r3, r2
 80093ec:	3304      	adds	r3, #4
 80093ee:	e00b      	b.n	8009408 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2202      	movs	r2, #2
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fbf8 	bl	8009c0c <USBD_CtlSendData>
              break;
 800941c:	e06a      	b.n	80094f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da11      	bge.n	800944a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 020f 	and.w	r2, r3, #15
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	3318      	adds	r3, #24
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d117      	bne.n	8009470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fb78 	bl	8009b38 <USBD_CtlError>
                  break;
 8009448:	e054      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fb65 	bl	8009b38 <USBD_CtlError>
                  break;
 800946e:	e041      	b.n	80094f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da0b      	bge.n	8009490 <USBD_StdEPReq+0x240>
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	3310      	adds	r3, #16
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	3304      	adds	r3, #4
 800948e:	e00b      	b.n	80094a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4413      	add	r3, r2
 80094a6:	3304      	adds	r3, #4
 80094a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <USBD_StdEPReq+0x266>
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b80      	cmp	r3, #128	@ 0x80
 80094b4:	d103      	bne.n	80094be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e00e      	b.n	80094dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fffc 	bl	800a4c0 <USBD_LL_IsStallEP>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2201      	movs	r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e002      	b.n	80094dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2202      	movs	r2, #2
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fb92 	bl	8009c0c <USBD_CtlSendData>
              break;
 80094e8:	e004      	b.n	80094f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fb23 	bl	8009b38 <USBD_CtlError>
              break;
 80094f2:	bf00      	nop
          }
          break;
 80094f4:	e004      	b.n	8009500 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb1d 	bl	8009b38 <USBD_CtlError>
          break;
 80094fe:	bf00      	nop
      }
      break;
 8009500:	e004      	b.n	800950c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb17 	bl	8009b38 <USBD_CtlError>
      break;
 800950a:	bf00      	nop
  }

  return ret;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	885b      	ldrh	r3, [r3, #2]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	2b06      	cmp	r3, #6
 800953a:	f200 8128 	bhi.w	800978e <USBD_GetDescriptor+0x276>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <USBD_GetDescriptor+0x2c>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009561 	.word	0x08009561
 8009548:	08009579 	.word	0x08009579
 800954c:	080095b9 	.word	0x080095b9
 8009550:	0800978f 	.word	0x0800978f
 8009554:	0800978f 	.word	0x0800978f
 8009558:	0800972f 	.word	0x0800972f
 800955c:	0800975b 	.word	0x0800975b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7c12      	ldrb	r2, [r2, #16]
 800956c:	f107 0108 	add.w	r1, r7, #8
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	60f8      	str	r0, [r7, #12]
      break;
 8009576:	e112      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7c1b      	ldrb	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10d      	bne.n	800959c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f107 0208 	add.w	r2, r7, #8
 800958c:	4610      	mov	r0, r2
 800958e:	4798      	blx	r3
 8009590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3301      	adds	r3, #1
 8009596:	2202      	movs	r2, #2
 8009598:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800959a:	e100      	b.n	800979e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	f107 0208 	add.w	r2, r7, #8
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	e0f2      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	885b      	ldrh	r3, [r3, #2]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b05      	cmp	r3, #5
 80095c0:	f200 80ac 	bhi.w	800971c <USBD_GetDescriptor+0x204>
 80095c4:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <USBD_GetDescriptor+0xb4>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	08009619 	.word	0x08009619
 80095d4:	0800964d 	.word	0x0800964d
 80095d8:	08009681 	.word	0x08009681
 80095dc:	080096b5 	.word	0x080096b5
 80095e0:	080096e9 	.word	0x080096e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	7c12      	ldrb	r2, [r2, #16]
 80095fc:	f107 0108 	add.w	r1, r7, #8
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009606:	e091      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa94 	bl	8009b38 <USBD_CtlError>
            err++;
 8009610:	7afb      	ldrb	r3, [r7, #11]
 8009612:	3301      	adds	r3, #1
 8009614:	72fb      	strb	r3, [r7, #11]
          break;
 8009616:	e089      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	7c12      	ldrb	r2, [r2, #16]
 8009630:	f107 0108 	add.w	r1, r7, #8
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963a:	e077      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa7a 	bl	8009b38 <USBD_CtlError>
            err++;
 8009644:	7afb      	ldrb	r3, [r7, #11]
 8009646:	3301      	adds	r3, #1
 8009648:	72fb      	strb	r3, [r7, #11]
          break;
 800964a:	e06f      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	7c12      	ldrb	r2, [r2, #16]
 8009664:	f107 0108 	add.w	r1, r7, #8
 8009668:	4610      	mov	r0, r2
 800966a:	4798      	blx	r3
 800966c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800966e:	e05d      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fa60 	bl	8009b38 <USBD_CtlError>
            err++;
 8009678:	7afb      	ldrb	r3, [r7, #11]
 800967a:	3301      	adds	r3, #1
 800967c:	72fb      	strb	r3, [r7, #11]
          break;
 800967e:	e055      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	7c12      	ldrb	r2, [r2, #16]
 8009698:	f107 0108 	add.w	r1, r7, #8
 800969c:	4610      	mov	r0, r2
 800969e:	4798      	blx	r3
 80096a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096a2:	e043      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa46 	bl	8009b38 <USBD_CtlError>
            err++;
 80096ac:	7afb      	ldrb	r3, [r7, #11]
 80096ae:	3301      	adds	r3, #1
 80096b0:	72fb      	strb	r3, [r7, #11]
          break;
 80096b2:	e03b      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	7c12      	ldrb	r2, [r2, #16]
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d6:	e029      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa2c 	bl	8009b38 <USBD_CtlError>
            err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
          break;
 80096e6:	e021      	b.n	800972c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e00f      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa12 	bl	8009b38 <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e007      	b.n	800972c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa0a 	bl	8009b38 <USBD_CtlError>
          err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800972a:	e038      	b.n	800979e <USBD_GetDescriptor+0x286>
 800972c:	e037      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7c1b      	ldrb	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800973c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973e:	f107 0208 	add.w	r2, r7, #8
 8009742:	4610      	mov	r0, r2
 8009744:	4798      	blx	r3
 8009746:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009748:	e029      	b.n	800979e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f9f3 	bl	8009b38 <USBD_CtlError>
        err++;
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	3301      	adds	r3, #1
 8009756:	72fb      	strb	r3, [r7, #11]
      break;
 8009758:	e021      	b.n	800979e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10d      	bne.n	800977e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
 8009772:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	2207      	movs	r2, #7
 800977a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800977c:	e00f      	b.n	800979e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f9d9 	bl	8009b38 <USBD_CtlError>
        err++;
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	3301      	adds	r3, #1
 800978a:	72fb      	strb	r3, [r7, #11]
      break;
 800978c:	e007      	b.n	800979e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9d1 	bl	8009b38 <USBD_CtlError>
      err++;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	3301      	adds	r3, #1
 800979a:	72fb      	strb	r3, [r7, #11]
      break;
 800979c:	bf00      	nop
  }

  if (err != 0U)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11c      	bne.n	80097de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097a4:	893b      	ldrh	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d011      	beq.n	80097ce <USBD_GetDescriptor+0x2b6>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	88db      	ldrh	r3, [r3, #6]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00d      	beq.n	80097ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	88da      	ldrh	r2, [r3, #6]
 80097b6:	893b      	ldrh	r3, [r7, #8]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	bf28      	it	cs
 80097bc:	4613      	movcs	r3, r2
 80097be:	b29b      	uxth	r3, r3
 80097c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097c2:	893b      	ldrh	r3, [r7, #8]
 80097c4:	461a      	mov	r2, r3
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa1f 	bl	8009c0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa76 	bl	8009cc8 <USBD_CtlSendStatus>
 80097dc:	e000      	b.n	80097e0 <USBD_GetDescriptor+0x2c8>
    return;
 80097de:	bf00      	nop
    }
  }
}
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	889b      	ldrh	r3, [r3, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d130      	bne.n	800985c <USBD_SetAddress+0x74>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d12c      	bne.n	800985c <USBD_SetAddress+0x74>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	2b7f      	cmp	r3, #127	@ 0x7f
 8009808:	d828      	bhi.n	800985c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800981c:	2b03      	cmp	r3, #3
 800981e:	d104      	bne.n	800982a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f988 	bl	8009b38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	e01d      	b.n	8009866 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7bfa      	ldrb	r2, [r7, #15]
 800982e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fe6e 	bl	800a518 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fa43 	bl	8009cc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009850:	e009      	b.n	8009866 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985a:	e004      	b.n	8009866 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f96a 	bl	8009b38 <USBD_CtlError>
  }
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	885b      	ldrh	r3, [r3, #2]
 800987e:	b2da      	uxtb	r2, r3
 8009880:	4b41      	ldr	r3, [pc, #260]	@ (8009988 <USBD_SetConfig+0x118>)
 8009882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009884:	4b40      	ldr	r3, [pc, #256]	@ (8009988 <USBD_SetConfig+0x118>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d904      	bls.n	8009896 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f952 	bl	8009b38 <USBD_CtlError>
 8009894:	e075      	b.n	8009982 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989c:	2b02      	cmp	r3, #2
 800989e:	d002      	beq.n	80098a6 <USBD_SetConfig+0x36>
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d023      	beq.n	80098ec <USBD_SetConfig+0x7c>
 80098a4:	e062      	b.n	800996c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098a6:	4b38      	ldr	r3, [pc, #224]	@ (8009988 <USBD_SetConfig+0x118>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01a      	beq.n	80098e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098ae:	4b36      	ldr	r3, [pc, #216]	@ (8009988 <USBD_SetConfig+0x118>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2203      	movs	r2, #3
 80098bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098c0:	4b31      	ldr	r3, [pc, #196]	@ (8009988 <USBD_SetConfig+0x118>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff f9e8 	bl	8008c9c <USBD_SetClassConfig>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d104      	bne.n	80098dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f92f 	bl	8009b38 <USBD_CtlError>
            return;
 80098da:	e052      	b.n	8009982 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9f3 	bl	8009cc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098e2:	e04e      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f9ef 	bl	8009cc8 <USBD_CtlSendStatus>
        break;
 80098ea:	e04a      	b.n	8009982 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80098ec:	4b26      	ldr	r3, [pc, #152]	@ (8009988 <USBD_SetConfig+0x118>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d112      	bne.n	800991a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80098fc:	4b22      	ldr	r3, [pc, #136]	@ (8009988 <USBD_SetConfig+0x118>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009906:	4b20      	ldr	r3, [pc, #128]	@ (8009988 <USBD_SetConfig+0x118>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff f9e4 	bl	8008cda <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9d8 	bl	8009cc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009918:	e033      	b.n	8009982 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800991a:	4b1b      	ldr	r3, [pc, #108]	@ (8009988 <USBD_SetConfig+0x118>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d01d      	beq.n	8009964 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9d2 	bl	8008cda <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009936:	4b14      	ldr	r3, [pc, #80]	@ (8009988 <USBD_SetConfig+0x118>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009940:	4b11      	ldr	r3, [pc, #68]	@ (8009988 <USBD_SetConfig+0x118>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff f9a8 	bl	8008c9c <USBD_SetClassConfig>
 800994c:	4603      	mov	r3, r0
 800994e:	2b02      	cmp	r3, #2
 8009950:	d104      	bne.n	800995c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8ef 	bl	8009b38 <USBD_CtlError>
            return;
 800995a:	e012      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9b3 	bl	8009cc8 <USBD_CtlSendStatus>
        break;
 8009962:	e00e      	b.n	8009982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f9af 	bl	8009cc8 <USBD_CtlSendStatus>
        break;
 800996a:	e00a      	b.n	8009982 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8e2 	bl	8009b38 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009974:	4b04      	ldr	r3, [pc, #16]	@ (8009988 <USBD_SetConfig+0x118>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff f9ad 	bl	8008cda <USBD_ClrClassConfig>
        break;
 8009980:	bf00      	nop
    }
  }
}
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000564 	.word	0x20000564

0800998c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	88db      	ldrh	r3, [r3, #6]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d004      	beq.n	80099a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f8c9 	bl	8009b38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099a6:	e022      	b.n	80099ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	dc02      	bgt.n	80099b8 <USBD_GetConfig+0x2c>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc03      	bgt.n	80099be <USBD_GetConfig+0x32>
 80099b6:	e015      	b.n	80099e4 <USBD_GetConfig+0x58>
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d00b      	beq.n	80099d4 <USBD_GetConfig+0x48>
 80099bc:	e012      	b.n	80099e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3308      	adds	r3, #8
 80099c8:	2201      	movs	r2, #1
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f91d 	bl	8009c0c <USBD_CtlSendData>
        break;
 80099d2:	e00c      	b.n	80099ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	2201      	movs	r2, #1
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f915 	bl	8009c0c <USBD_CtlSendData>
        break;
 80099e2:	e004      	b.n	80099ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f8a6 	bl	8009b38 <USBD_CtlError>
        break;
 80099ec:	bf00      	nop
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d81e      	bhi.n	8009a4a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d004      	beq.n	8009a1e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f88e 	bl	8009b38 <USBD_CtlError>
        break;
 8009a1c:	e01a      	b.n	8009a54 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f043 0202 	orr.w	r2, r3, #2
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	2202      	movs	r2, #2
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f8e2 	bl	8009c0c <USBD_CtlSendData>
      break;
 8009a48:	e004      	b.n	8009a54 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f873 	bl	8009b38 <USBD_CtlError>
      break;
 8009a52:	bf00      	nop
  }
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	885b      	ldrh	r3, [r3, #2]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d106      	bne.n	8009a7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f926 	bl	8009cc8 <USBD_CtlSendStatus>
  }
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a94:	3b01      	subs	r3, #1
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d80b      	bhi.n	8009ab2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d10c      	bne.n	8009abc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f90c 	bl	8009cc8 <USBD_CtlSendStatus>
      }
      break;
 8009ab0:	e004      	b.n	8009abc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f83f 	bl	8009b38 <USBD_CtlError>
      break;
 8009aba:	e000      	b.n	8009abe <USBD_ClrFeature+0x3a>
      break;
 8009abc:	bf00      	nop
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	785a      	ldrb	r2, [r3, #1]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	3303      	adds	r3, #3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	021b      	lsls	r3, r3, #8
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	4413      	add	r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	3304      	adds	r3, #4
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	3305      	adds	r3, #5
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	021b      	lsls	r3, r3, #8
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4413      	add	r3, r2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	3306      	adds	r3, #6
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	3307      	adds	r3, #7
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	80da      	strh	r2, [r3, #6]

}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bc80      	pop	{r7}
 8009b36:	4770      	bx	lr

08009b38 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b42:	2180      	movs	r1, #128	@ 0x80
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc7d 	bl	800a444 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fc79 	bl	800a444 <USBD_LL_StallEP>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d032      	beq.n	8009bd6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f834 	bl	8009bde <USBD_GetLen>
 8009b76:	4603      	mov	r3, r0
 8009b78:	3301      	adds	r3, #1
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	75fa      	strb	r2, [r7, #23]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	4413      	add	r3, r2
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7812      	ldrb	r2, [r2, #0]
 8009b94:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	75fa      	strb	r2, [r7, #23]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ba6:	e012      	b.n	8009bce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	60fa      	str	r2, [r7, #12]
 8009bae:	7dfa      	ldrb	r2, [r7, #23]
 8009bb0:	1c51      	adds	r1, r2, #1
 8009bb2:	75f9      	strb	r1, [r7, #23]
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	440a      	add	r2, r1
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	75fa      	strb	r2, [r7, #23]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	4413      	add	r3, r2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e8      	bne.n	8009ba8 <USBD_GetString+0x4e>
    }
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009bea:	e005      	b.n	8009bf8 <USBD_GetLen+0x1a>
  {
    len++;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1f5      	bne.n	8009bec <USBD_GetLen+0xe>
  }

  return len;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bc80      	pop	{r7}
 8009c0a:	4770      	bx	lr

08009c0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c28:	88fa      	ldrh	r2, [r7, #6]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	2100      	movs	r1, #0
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fc8e 	bl	800a556 <USBD_LL_Transmit>

  return USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	2100      	movs	r1, #0
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fc7c 	bl	800a556 <USBD_LL_Transmit>

  return USBD_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009c86:	88fa      	ldrh	r2, [r7, #6]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	2100      	movs	r1, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fc81 	bl	800a59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fc6f 	bl	800a59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fc39 	bl	800a556 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2200      	movs	r2, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fc49 	bl	800a59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4912      	ldr	r1, [pc, #72]	@ (8009d64 <MX_USB_DEVICE_Init+0x50>)
 8009d1c:	4812      	ldr	r0, [pc, #72]	@ (8009d68 <MX_USB_DEVICE_Init+0x54>)
 8009d1e:	f7fe ff63 	bl	8008be8 <USBD_Init>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d28:	f7f7 f82e 	bl	8000d88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d2c:	490f      	ldr	r1, [pc, #60]	@ (8009d6c <MX_USB_DEVICE_Init+0x58>)
 8009d2e:	480e      	ldr	r0, [pc, #56]	@ (8009d68 <MX_USB_DEVICE_Init+0x54>)
 8009d30:	f7fe ff85 	bl	8008c3e <USBD_RegisterClass>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d3a:	f7f7 f825 	bl	8000d88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d3e:	490c      	ldr	r1, [pc, #48]	@ (8009d70 <MX_USB_DEVICE_Init+0x5c>)
 8009d40:	4809      	ldr	r0, [pc, #36]	@ (8009d68 <MX_USB_DEVICE_Init+0x54>)
 8009d42:	f7fe fee5 	bl	8008b10 <USBD_CDC_RegisterInterface>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d4c:	f7f7 f81c 	bl	8000d88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d50:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <MX_USB_DEVICE_Init+0x54>)
 8009d52:	f7fe ff8d 	bl	8008c70 <USBD_Start>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d5c:	f7f7 f814 	bl	8000d88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d60:	bf00      	nop
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	2000012c 	.word	0x2000012c
 8009d68:	20000568 	.word	0x20000568
 8009d6c:	20000018 	.word	0x20000018
 8009d70:	2000011c 	.word	0x2000011c

08009d74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4905      	ldr	r1, [pc, #20]	@ (8009d90 <CDC_Init_FS+0x1c>)
 8009d7c:	4805      	ldr	r0, [pc, #20]	@ (8009d94 <CDC_Init_FS+0x20>)
 8009d7e:	f7fe fedd 	bl	8008b3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d82:	4905      	ldr	r1, [pc, #20]	@ (8009d98 <CDC_Init_FS+0x24>)
 8009d84:	4803      	ldr	r0, [pc, #12]	@ (8009d94 <CDC_Init_FS+0x20>)
 8009d86:	f7fe fef2 	bl	8008b6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	2000092c 	.word	0x2000092c
 8009d94:	20000568 	.word	0x20000568
 8009d98:	2000082c 	.word	0x2000082c

08009d9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009da0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr
	...

08009dac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
 8009db8:	4613      	mov	r3, r2
 8009dba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b23      	cmp	r3, #35	@ 0x23
 8009dc0:	f200 808c 	bhi.w	8009edc <CDC_Control_FS+0x130>
 8009dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <CDC_Control_FS+0x20>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009edd 	.word	0x08009edd
 8009dd0:	08009edd 	.word	0x08009edd
 8009dd4:	08009edd 	.word	0x08009edd
 8009dd8:	08009edd 	.word	0x08009edd
 8009ddc:	08009edd 	.word	0x08009edd
 8009de0:	08009edd 	.word	0x08009edd
 8009de4:	08009edd 	.word	0x08009edd
 8009de8:	08009edd 	.word	0x08009edd
 8009dec:	08009edd 	.word	0x08009edd
 8009df0:	08009edd 	.word	0x08009edd
 8009df4:	08009edd 	.word	0x08009edd
 8009df8:	08009edd 	.word	0x08009edd
 8009dfc:	08009edd 	.word	0x08009edd
 8009e00:	08009edd 	.word	0x08009edd
 8009e04:	08009edd 	.word	0x08009edd
 8009e08:	08009edd 	.word	0x08009edd
 8009e0c:	08009edd 	.word	0x08009edd
 8009e10:	08009edd 	.word	0x08009edd
 8009e14:	08009edd 	.word	0x08009edd
 8009e18:	08009edd 	.word	0x08009edd
 8009e1c:	08009edd 	.word	0x08009edd
 8009e20:	08009edd 	.word	0x08009edd
 8009e24:	08009edd 	.word	0x08009edd
 8009e28:	08009edd 	.word	0x08009edd
 8009e2c:	08009edd 	.word	0x08009edd
 8009e30:	08009edd 	.word	0x08009edd
 8009e34:	08009edd 	.word	0x08009edd
 8009e38:	08009edd 	.word	0x08009edd
 8009e3c:	08009edd 	.word	0x08009edd
 8009e40:	08009edd 	.word	0x08009edd
 8009e44:	08009edd 	.word	0x08009edd
 8009e48:	08009edd 	.word	0x08009edd
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009e97 	.word	0x08009e97
 8009e54:	08009edd 	.word	0x08009edd
 8009e58:	08009edd 	.word	0x08009edd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	4b22      	ldr	r3, [pc, #136]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e62:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	785a      	ldrb	r2, [r3, #1]
 8009e68:	4b20      	ldr	r3, [pc, #128]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e6a:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	789a      	ldrb	r2, [r3, #2]
 8009e70:	4b1e      	ldr	r3, [pc, #120]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e72:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	78da      	ldrb	r2, [r3, #3]
 8009e78:	4b1c      	ldr	r3, [pc, #112]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e7a:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	791a      	ldrb	r2, [r3, #4]
 8009e80:	4b1a      	ldr	r3, [pc, #104]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e82:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	795a      	ldrb	r2, [r3, #5]
 8009e88:	4b18      	ldr	r3, [pc, #96]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e8a:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	799a      	ldrb	r2, [r3, #6]
 8009e90:	4b16      	ldr	r3, [pc, #88]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e92:	719a      	strb	r2, [r3, #6]

    break;
 8009e94:	e023      	b.n	8009ede <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 8009e96:	4b15      	ldr	r3, [pc, #84]	@ (8009eec <CDC_Control_FS+0x140>)
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a12      	ldr	r2, [pc, #72]	@ (8009eec <CDC_Control_FS+0x140>)
 8009ea4:	7852      	ldrb	r2, [r2, #1]
 8009ea6:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	3302      	adds	r3, #2
 8009eac:	4a0f      	ldr	r2, [pc, #60]	@ (8009eec <CDC_Control_FS+0x140>)
 8009eae:	7892      	ldrb	r2, [r2, #2]
 8009eb0:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	3303      	adds	r3, #3
 8009eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8009eec <CDC_Control_FS+0x140>)
 8009eb8:	78d2      	ldrb	r2, [r2, #3]
 8009eba:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8009eec <CDC_Control_FS+0x140>)
 8009ec2:	7912      	ldrb	r2, [r2, #4]
 8009ec4:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	3305      	adds	r3, #5
 8009eca:	4a08      	ldr	r2, [pc, #32]	@ (8009eec <CDC_Control_FS+0x140>)
 8009ecc:	7952      	ldrb	r2, [r2, #5]
 8009ece:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	3306      	adds	r3, #6
 8009ed4:	4a05      	ldr	r2, [pc, #20]	@ (8009eec <CDC_Control_FS+0x140>)
 8009ed6:	7992      	ldrb	r2, [r2, #6]
 8009ed8:	701a      	strb	r2, [r3, #0]
    break;
 8009eda:	e000      	b.n	8009ede <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009edc:	bf00      	nop
  }

  return (USBD_OK);
 8009ede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	20000a2c 	.word	0x20000a2c

08009ef0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 8009efa:	4b0c      	ldr	r3, [pc, #48]	@ (8009f2c <CDC_Receive_FS+0x3c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d007      	beq.n	8009f12 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8009f02:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <CDC_Receive_FS+0x3c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	b292      	uxth	r2, r2
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	4806      	ldr	r0, [pc, #24]	@ (8009f30 <CDC_Receive_FS+0x40>)
 8009f16:	f7fe fe2a 	bl	8008b6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f1a:	4805      	ldr	r0, [pc, #20]	@ (8009f30 <CDC_Receive_FS+0x40>)
 8009f1c:	f7fe fe3a 	bl	8008b94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000a34 	.word	0x20000a34
 8009f30:	20000568 	.word	0x20000568

08009f34 <CDC_AttachRxData>:
  /* USER CODE END 7 */
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8009f3c:	4a03      	ldr	r2, [pc, #12]	@ (8009f4c <CDC_AttachRxData+0x18>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6013      	str	r3, [r2, #0]
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr
 8009f4c:	20000a34 	.word	0x20000a34

08009f50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	6039      	str	r1, [r7, #0]
 8009f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2212      	movs	r2, #18
 8009f60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f62:	4b03      	ldr	r3, [pc, #12]	@ (8009f70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bc80      	pop	{r7}
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000148 	.word	0x20000148

08009f74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2204      	movs	r2, #4
 8009f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f86:	4b03      	ldr	r3, [pc, #12]	@ (8009f94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000015c 	.word	0x2000015c

08009f98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4907      	ldr	r1, [pc, #28]	@ (8009fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8009fae:	4808      	ldr	r0, [pc, #32]	@ (8009fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fb0:	f7ff fdd3 	bl	8009b5a <USBD_GetString>
 8009fb4:	e004      	b.n	8009fc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4904      	ldr	r1, [pc, #16]	@ (8009fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8009fba:	4805      	ldr	r0, [pc, #20]	@ (8009fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fbc:	f7ff fdcd 	bl	8009b5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	@ (8009fcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000a38 	.word	0x20000a38
 8009fd0:	0800a710 	.word	0x0800a710

08009fd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	4904      	ldr	r1, [pc, #16]	@ (8009ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fe4:	4804      	ldr	r0, [pc, #16]	@ (8009ff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fe6:	f7ff fdb8 	bl	8009b5a <USBD_GetString>
  return USBD_StrDesc;
 8009fea:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000a38 	.word	0x20000a38
 8009ff8:	0800a728 	.word	0x0800a728

08009ffc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	221a      	movs	r2, #26
 800a00c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a00e:	f000 f843 	bl	800a098 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a012:	4b02      	ldr	r3, [pc, #8]	@ (800a01c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000160 	.word	0x20000160

0800a020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4907      	ldr	r1, [pc, #28]	@ (800a054 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a036:	4808      	ldr	r0, [pc, #32]	@ (800a058 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a038:	f7ff fd8f 	bl	8009b5a <USBD_GetString>
 800a03c:	e004      	b.n	800a048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4904      	ldr	r1, [pc, #16]	@ (800a054 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a042:	4805      	ldr	r0, [pc, #20]	@ (800a058 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a044:	f7ff fd89 	bl	8009b5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a048:	4b02      	ldr	r3, [pc, #8]	@ (800a054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000a38 	.word	0x20000a38
 800a058:	0800a73c 	.word	0x0800a73c

0800a05c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d105      	bne.n	800a07a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	4907      	ldr	r1, [pc, #28]	@ (800a090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a072:	4808      	ldr	r0, [pc, #32]	@ (800a094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a074:	f7ff fd71 	bl	8009b5a <USBD_GetString>
 800a078:	e004      	b.n	800a084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	4904      	ldr	r1, [pc, #16]	@ (800a090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a07e:	4805      	ldr	r0, [pc, #20]	@ (800a094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a080:	f7ff fd6b 	bl	8009b5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a084:	4b02      	ldr	r3, [pc, #8]	@ (800a090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000a38 	.word	0x20000a38
 800a094:	0800a748 	.word	0x0800a748

0800a098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d009      	beq.n	800a0c0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	4906      	ldr	r1, [pc, #24]	@ (800a0c8 <Get_SerialNum+0x30>)
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f80d 	bl	800a0d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	4904      	ldr	r1, [pc, #16]	@ (800a0cc <Get_SerialNum+0x34>)
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f808 	bl	800a0d0 <IntToUnicode>
  }
}
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000162 	.word	0x20000162
 800a0cc:	20000172 	.word	0x20000172

0800a0d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
 800a0e6:	e027      	b.n	800a138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	0f1b      	lsrs	r3, r3, #28
 800a0ec:	2b09      	cmp	r3, #9
 800a0ee:	d80b      	bhi.n	800a108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	0f1b      	lsrs	r3, r3, #28
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	440b      	add	r3, r1
 800a100:	3230      	adds	r2, #48	@ 0x30
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	e00a      	b.n	800a11e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	0f1b      	lsrs	r3, r3, #28
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4619      	mov	r1, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	440b      	add	r3, r1
 800a118:	3237      	adds	r2, #55	@ 0x37
 800a11a:	b2d2      	uxtb	r2, r2
 800a11c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	3301      	adds	r3, #1
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	4413      	add	r3, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	3301      	adds	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
 800a138:	7dfa      	ldrb	r2, [r7, #23]
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d3d3      	bcc.n	800a0e8 <IntToUnicode+0x18>
  }
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	371c      	adds	r7, #28
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a0d      	ldr	r2, [pc, #52]	@ (800a190 <HAL_PCD_MspInit+0x44>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d113      	bne.n	800a186 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a15e:	4b0d      	ldr	r3, [pc, #52]	@ (800a194 <HAL_PCD_MspInit+0x48>)
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	4a0c      	ldr	r2, [pc, #48]	@ (800a194 <HAL_PCD_MspInit+0x48>)
 800a164:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a168:	61d3      	str	r3, [r2, #28]
 800a16a:	4b0a      	ldr	r3, [pc, #40]	@ (800a194 <HAL_PCD_MspInit+0x48>)
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a176:	2200      	movs	r2, #0
 800a178:	2100      	movs	r1, #0
 800a17a:	2014      	movs	r0, #20
 800a17c:	f7f7 fd33 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a180:	2014      	movs	r0, #20
 800a182:	f7f7 fd4c 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	40005c00 	.word	0x40005c00
 800a194:	40021000 	.word	0x40021000

0800a198 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f7fe fda6 	bl	8008d00 <USBD_LL_SetupStage>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	440b      	add	r3, r1
 800a1dc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7fe fdd8 	bl	8008d9a <USBD_LL_DataOutStage>
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	440b      	add	r3, r1
 800a212:	333c      	adds	r3, #60	@ 0x3c
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	4619      	mov	r1, r3
 800a21a:	f7fe fe2f 	bl	8008e7c <USBD_LL_DataInStage>
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a234:	4618      	mov	r0, r3
 800a236:	f7fe ff3f 	bl	80090b8 <USBD_LL_SOF>
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a24a:	2301      	movs	r3, #1
 800a24c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d001      	beq.n	800a25a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a256:	f7f6 fd97 	bl	8000d88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a260:	7bfa      	ldrb	r2, [r7, #15]
 800a262:	4611      	mov	r1, r2
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe feef 	bl	8009048 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe fea8 	bl	8008fc6 <USBD_LL_Reset>
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fee9 	bl	8009066 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a29c:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <HAL_PCD_SuspendCallback+0x30>)
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	4a03      	ldr	r2, [pc, #12]	@ (800a2b0 <HAL_PCD_SuspendCallback+0x30>)
 800a2a2:	f043 0306 	orr.w	r3, r3, #6
 800a2a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	e000ed00 	.word	0xe000ed00

0800a2b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fee3 	bl	800908e <USBD_LL_Resume>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a2d8:	4a28      	ldr	r2, [pc, #160]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a26      	ldr	r2, [pc, #152]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2e4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a2e8:	4b24      	ldr	r3, [pc, #144]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2ea:	4a25      	ldr	r2, [pc, #148]	@ (800a380 <USBD_LL_Init+0xb0>)
 800a2ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2ee:	4b23      	ldr	r3, [pc, #140]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2f4:	4b21      	ldr	r3, [pc, #132]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2fa:	4b20      	ldr	r3, [pc, #128]	@ (800a37c <USBD_LL_Init+0xac>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a300:	4b1e      	ldr	r3, [pc, #120]	@ (800a37c <USBD_LL_Init+0xac>)
 800a302:	2200      	movs	r2, #0
 800a304:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a306:	4b1d      	ldr	r3, [pc, #116]	@ (800a37c <USBD_LL_Init+0xac>)
 800a308:	2200      	movs	r2, #0
 800a30a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a30c:	481b      	ldr	r0, [pc, #108]	@ (800a37c <USBD_LL_Init+0xac>)
 800a30e:	f7f8 fa3d 	bl	800278c <HAL_PCD_Init>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a318:	f7f6 fd36 	bl	8000d88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a322:	2318      	movs	r3, #24
 800a324:	2200      	movs	r2, #0
 800a326:	2100      	movs	r1, #0
 800a328:	f7f9 ff5b 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a332:	2358      	movs	r3, #88	@ 0x58
 800a334:	2200      	movs	r2, #0
 800a336:	2180      	movs	r1, #128	@ 0x80
 800a338:	f7f9 ff53 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a342:	23c0      	movs	r3, #192	@ 0xc0
 800a344:	2200      	movs	r2, #0
 800a346:	2181      	movs	r1, #129	@ 0x81
 800a348:	f7f9 ff4b 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a352:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a356:	2200      	movs	r2, #0
 800a358:	2101      	movs	r1, #1
 800a35a:	f7f9 ff42 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a368:	2200      	movs	r2, #0
 800a36a:	2182      	movs	r1, #130	@ 0x82
 800a36c:	f7f9 ff39 	bl	80041e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000c38 	.word	0x20000c38
 800a380:	40005c00 	.word	0x40005c00

0800a384 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f8 faf5 	bl	800298a <HAL_PCD_Start>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f94e 	bl	800a648 <USBD_Get_USB_Status>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	70fb      	strb	r3, [r7, #3]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70bb      	strb	r3, [r7, #2]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3e2:	78bb      	ldrb	r3, [r7, #2]
 800a3e4:	883a      	ldrh	r2, [r7, #0]
 800a3e6:	78f9      	ldrb	r1, [r7, #3]
 800a3e8:	f7f8 fc4a 	bl	8002c80 <HAL_PCD_EP_Open>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f928 	bl	800a648 <USBD_Get_USB_Status>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	4611      	mov	r1, r2
 800a424:	4618      	mov	r0, r3
 800a426:	f7f8 fc88 	bl	8002d3a <HAL_PCD_EP_Close>
 800a42a:	4603      	mov	r3, r0
 800a42c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f909 	bl	800a648 <USBD_Get_USB_Status>
 800a436:	4603      	mov	r3, r0
 800a438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7f8 fd30 	bl	8002ec8 <HAL_PCD_EP_SetStall>
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 f8ea 	bl	800a648 <USBD_Get_USB_Status>
 800a474:	4603      	mov	r3, r0
 800a476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a478:	7bbb      	ldrb	r3, [r7, #14]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a49c:	78fa      	ldrb	r2, [r7, #3]
 800a49e:	4611      	mov	r1, r2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7f8 fd71 	bl	8002f88 <HAL_PCD_EP_ClrStall>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f8cb 	bl	800a648 <USBD_Get_USB_Status>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da0c      	bge.n	800a4f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	440b      	add	r3, r1
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	e00b      	b.n	800a50e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4fc:	68f9      	ldr	r1, [r7, #12]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	440b      	add	r3, r1
 800a508:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a50c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr

0800a518 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a532:	78fa      	ldrb	r2, [r7, #3]
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7f8 fb7d 	bl	8002c36 <HAL_PCD_SetAddress>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f880 	bl	800a648 <USBD_Get_USB_Status>
 800a548:	4603      	mov	r3, r0
 800a54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b086      	sub	sp, #24
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60f8      	str	r0, [r7, #12]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	461a      	mov	r2, r3
 800a562:	460b      	mov	r3, r1
 800a564:	72fb      	strb	r3, [r7, #11]
 800a566:	4613      	mov	r3, r2
 800a568:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a578:	893b      	ldrh	r3, [r7, #8]
 800a57a:	7af9      	ldrb	r1, [r7, #11]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	f7f8 fc6c 	bl	8002e5a <HAL_PCD_EP_Transmit>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 f85d 	bl	800a648 <USBD_Get_USB_Status>
 800a58e:	4603      	mov	r3, r0
 800a590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a592:	7dbb      	ldrb	r3, [r7, #22]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	72fb      	strb	r3, [r7, #11]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5be:	893b      	ldrh	r3, [r7, #8]
 800a5c0:	7af9      	ldrb	r1, [r7, #11]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	f7f8 fc01 	bl	8002dca <HAL_PCD_EP_Receive>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f83a 	bl	800a648 <USBD_Get_USB_Status>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f8 fc17 	bl	8002e2c <HAL_PCD_EP_GetRxCount>
 800a5fe:	4603      	mov	r3, r0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a610:	4b02      	ldr	r3, [pc, #8]	@ (800a61c <USBD_static_malloc+0x14>)
}
 800a612:	4618      	mov	r0, r3
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	bc80      	pop	{r7}
 800a61a:	4770      	bx	lr
 800a61c:	20000f28 	.word	0x20000f28

0800a620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]

}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr

0800a632 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	bc80      	pop	{r7}
 800a646:	4770      	bx	lr

0800a648 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d817      	bhi.n	800a68c <USBD_Get_USB_Status+0x44>
 800a65c:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <USBD_Get_USB_Status+0x1c>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a675 	.word	0x0800a675
 800a668:	0800a67b 	.word	0x0800a67b
 800a66c:	0800a681 	.word	0x0800a681
 800a670:	0800a687 	.word	0x0800a687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
    break;
 800a678:	e00b      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a67a:	2302      	movs	r3, #2
 800a67c:	73fb      	strb	r3, [r7, #15]
    break;
 800a67e:	e008      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    break;
 800a684:	e005      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a686:	2302      	movs	r3, #2
 800a688:	73fb      	strb	r3, [r7, #15]
    break;
 800a68a:	e002      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a68c:	2302      	movs	r3, #2
 800a68e:	73fb      	strb	r3, [r7, #15]
    break;
 800a690:	bf00      	nop
  }
  return usb_status;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop

0800a6a0 <memset>:
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	4402      	add	r2, r0
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d100      	bne.n	800a6aa <memset+0xa>
 800a6a8:	4770      	bx	lr
 800a6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ae:	e7f9      	b.n	800a6a4 <memset+0x4>

0800a6b0 <__libc_init_array>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	4d0c      	ldr	r5, [pc, #48]	@ (800a6e8 <__libc_init_array+0x38>)
 800a6b6:	4c0d      	ldr	r4, [pc, #52]	@ (800a6ec <__libc_init_array+0x3c>)
 800a6b8:	1b64      	subs	r4, r4, r5
 800a6ba:	10a4      	asrs	r4, r4, #2
 800a6bc:	42a6      	cmp	r6, r4
 800a6be:	d109      	bne.n	800a6d4 <__libc_init_array+0x24>
 800a6c0:	f000 f81a 	bl	800a6f8 <_init>
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	4d0a      	ldr	r5, [pc, #40]	@ (800a6f0 <__libc_init_array+0x40>)
 800a6c8:	4c0a      	ldr	r4, [pc, #40]	@ (800a6f4 <__libc_init_array+0x44>)
 800a6ca:	1b64      	subs	r4, r4, r5
 800a6cc:	10a4      	asrs	r4, r4, #2
 800a6ce:	42a6      	cmp	r6, r4
 800a6d0:	d105      	bne.n	800a6de <__libc_init_array+0x2e>
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d8:	4798      	blx	r3
 800a6da:	3601      	adds	r6, #1
 800a6dc:	e7ee      	b.n	800a6bc <__libc_init_array+0xc>
 800a6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e2:	4798      	blx	r3
 800a6e4:	3601      	adds	r6, #1
 800a6e6:	e7f2      	b.n	800a6ce <__libc_init_array+0x1e>
 800a6e8:	0800a784 	.word	0x0800a784
 800a6ec:	0800a784 	.word	0x0800a784
 800a6f0:	0800a784 	.word	0x0800a784
 800a6f4:	0800a788 	.word	0x0800a788

0800a6f8 <_init>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	bf00      	nop
 800a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fe:	bc08      	pop	{r3}
 800a700:	469e      	mov	lr, r3
 800a702:	4770      	bx	lr

0800a704 <_fini>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	bf00      	nop
 800a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70a:	bc08      	pop	{r3}
 800a70c:	469e      	mov	lr, r3
 800a70e:	4770      	bx	lr
