
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800adfc  0800adfc  0000bdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  0000cc04  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae70  0800ae70  0000cc04  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae70  0800ae70  0000cc04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae70  0800ae70  0000be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae74  0800ae74  0000be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0800ae78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .configeeprom 00000004  0800fc00  0800fc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .bss          00002000  20000180  20000180  0000d180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002180  20002180  0000d180  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000cc04  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194f3  00000000  00000000  0000cc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b74  00000000  00000000  00026120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00029c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001193  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5c5  00000000  00000000  0002c4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d421  00000000  00000000  00047a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000969d8  00000000  00000000  00064ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb879  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f2c  00000000  00000000  000fb8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001017e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ade4 	.word	0x0800ade4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800ade4 	.word	0x0800ade4

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	//Guarda en un Buffer los estados anteriores del IR
	ir.sensor0[ir.count] = bufADC[0];
 8000154:	4ba6      	ldr	r3, [pc, #664]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	4618      	mov	r0, r3
 800015a:	4ba6      	ldr	r3, [pc, #664]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800015c:	8819      	ldrh	r1, [r3, #0]
 800015e:	4aa4      	ldr	r2, [pc, #656]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000160:	0043      	lsls	r3, r0, #1
 8000162:	4413      	add	r3, r2
 8000164:	460a      	mov	r2, r1
 8000166:	805a      	strh	r2, [r3, #2]
	ir.sensor1[ir.count] = bufADC[1];
 8000168:	4ba1      	ldr	r3, [pc, #644]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	4618      	mov	r0, r3
 800016e:	4ba1      	ldr	r3, [pc, #644]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000170:	8859      	ldrh	r1, [r3, #2]
 8000172:	4a9f      	ldr	r2, [pc, #636]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000174:	f500 7380 	add.w	r3, r0, #256	@ 0x100
 8000178:	005b      	lsls	r3, r3, #1
 800017a:	4413      	add	r3, r2
 800017c:	460a      	mov	r2, r1
 800017e:	805a      	strh	r2, [r3, #2]
	ir.sensor2[ir.count] = bufADC[2];
 8000180:	4b9b      	ldr	r3, [pc, #620]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	4b9b      	ldr	r3, [pc, #620]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000188:	8899      	ldrh	r1, [r3, #4]
 800018a:	4a99      	ldr	r2, [pc, #612]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800018c:	f500 7300 	add.w	r3, r0, #512	@ 0x200
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	805a      	strh	r2, [r3, #2]
	ir.sensor3[ir.count] = bufADC[3];
 8000198:	4b95      	ldr	r3, [pc, #596]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	4b95      	ldr	r3, [pc, #596]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80001a0:	88d9      	ldrh	r1, [r3, #6]
 80001a2:	4a93      	ldr	r2, [pc, #588]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001a4:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	4413      	add	r3, r2
 80001ac:	460a      	mov	r2, r1
 80001ae:	805a      	strh	r2, [r3, #2]
	ir.sensor4[ir.count] = bufADC[4];
 80001b0:	4b8f      	ldr	r3, [pc, #572]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	4618      	mov	r0, r3
 80001b6:	4b8f      	ldr	r3, [pc, #572]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80001b8:	8919      	ldrh	r1, [r3, #8]
 80001ba:	4a8d      	ldr	r2, [pc, #564]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001bc:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	4413      	add	r3, r2
 80001c4:	460a      	mov	r2, r1
 80001c6:	805a      	strh	r2, [r3, #2]
	ir.sensor5[ir.count] = bufADC[5];
 80001c8:	4b89      	ldr	r3, [pc, #548]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	4b89      	ldr	r3, [pc, #548]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80001d0:	8959      	ldrh	r1, [r3, #10]
 80001d2:	4a87      	ldr	r2, [pc, #540]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001d4:	f500 63a0 	add.w	r3, r0, #1280	@ 0x500
 80001d8:	005b      	lsls	r3, r3, #1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	805a      	strh	r2, [r3, #2]
	ir.sensor6[ir.count] = bufADC[6];
 80001e0:	4b83      	ldr	r3, [pc, #524]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	4b83      	ldr	r3, [pc, #524]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80001e8:	8999      	ldrh	r1, [r3, #12]
 80001ea:	4a81      	ldr	r2, [pc, #516]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001ec:	f500 63c0 	add.w	r3, r0, #1536	@ 0x600
 80001f0:	005b      	lsls	r3, r3, #1
 80001f2:	4413      	add	r3, r2
 80001f4:	460a      	mov	r2, r1
 80001f6:	805a      	strh	r2, [r3, #2]
	ir.sensor7[ir.count] = bufADC[7];
 80001f8:	4b7d      	ldr	r3, [pc, #500]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	4b7d      	ldr	r3, [pc, #500]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000200:	89d9      	ldrh	r1, [r3, #14]
 8000202:	4a7b      	ldr	r2, [pc, #492]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000204:	f500 63e0 	add.w	r3, r0, #1792	@ 0x700
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	805a      	strh	r2, [r3, #2]

	//Acumulador de la Sumatoria del Promedio Movil
	ir.sumatoriaS0 += bufADC[0];
 8000210:	4b77      	ldr	r3, [pc, #476]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a76      	ldr	r2, [pc, #472]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800021a:	8812      	ldrh	r2, [r2, #0]
 800021c:	4413      	add	r3, r2
 800021e:	4a74      	ldr	r2, [pc, #464]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000220:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000224:	6053      	str	r3, [r2, #4]
	ir.sumatoriaS1 += bufADC[1];
 8000226:	4b72      	ldr	r3, [pc, #456]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a71      	ldr	r2, [pc, #452]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000230:	8852      	ldrh	r2, [r2, #2]
 8000232:	4413      	add	r3, r2
 8000234:	4a6e      	ldr	r2, [pc, #440]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000236:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800023a:	6093      	str	r3, [r2, #8]
	ir.sumatoriaS2 += bufADC[2];
 800023c:	4b6c      	ldr	r3, [pc, #432]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800023e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a6b      	ldr	r2, [pc, #428]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000246:	8892      	ldrh	r2, [r2, #4]
 8000248:	4413      	add	r3, r2
 800024a:	4a69      	ldr	r2, [pc, #420]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800024c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000250:	60d3      	str	r3, [r2, #12]
	ir.sumatoriaS3 += bufADC[3];
 8000252:	4b67      	ldr	r3, [pc, #412]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	4a66      	ldr	r2, [pc, #408]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800025c:	88d2      	ldrh	r2, [r2, #6]
 800025e:	4413      	add	r3, r2
 8000260:	4a63      	ldr	r2, [pc, #396]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000266:	6113      	str	r3, [r2, #16]
	ir.sumatoriaS4 += bufADC[4];
 8000268:	4b61      	ldr	r3, [pc, #388]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800026a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a60      	ldr	r2, [pc, #384]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000272:	8912      	ldrh	r2, [r2, #8]
 8000274:	4413      	add	r3, r2
 8000276:	4a5e      	ldr	r2, [pc, #376]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000278:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800027c:	6153      	str	r3, [r2, #20]
	ir.sumatoriaS5 += bufADC[5];
 800027e:	4b5c      	ldr	r3, [pc, #368]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a5b      	ldr	r2, [pc, #364]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000288:	8952      	ldrh	r2, [r2, #10]
 800028a:	4413      	add	r3, r2
 800028c:	4a58      	ldr	r2, [pc, #352]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800028e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000292:	6193      	str	r3, [r2, #24]
	ir.sumatoriaS6 += bufADC[6];
 8000294:	4b56      	ldr	r3, [pc, #344]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800029a:	69db      	ldr	r3, [r3, #28]
 800029c:	4a55      	ldr	r2, [pc, #340]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800029e:	8992      	ldrh	r2, [r2, #12]
 80002a0:	4413      	add	r3, r2
 80002a2:	4a53      	ldr	r2, [pc, #332]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80002a8:	61d3      	str	r3, [r2, #28]
	ir.sumatoriaS7 += bufADC[7];
 80002aa:	4b51      	ldr	r3, [pc, #324]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4a50      	ldr	r2, [pc, #320]	@ (80003f4 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80002b4:	89d2      	ldrh	r2, [r2, #14]
 80002b6:	4413      	add	r3, r2
 80002b8:	4a4d      	ldr	r2, [pc, #308]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80002be:	6213      	str	r3, [r2, #32]

	//Resta el valor que queda fuera de la ventana del Promedio
	myWord.ui8[0]= ir.count - 39;	//Aux del indice Inferior de la ventana
 80002c0:	4b4b      	ldr	r3, [pc, #300]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	3b27      	subs	r3, #39	@ 0x27
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b4b      	ldr	r3, [pc, #300]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80002ca:	701a      	strb	r2, [r3, #0]

	ir.sumatoriaS0 -= ir.sensor0[myWord.ui8[0]];
 80002cc:	4b48      	ldr	r3, [pc, #288]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	4b48      	ldr	r3, [pc, #288]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4945      	ldr	r1, [pc, #276]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	440b      	add	r3, r1
 80002de:	885b      	ldrh	r3, [r3, #2]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	4a43      	ldr	r2, [pc, #268]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80002e8:	6053      	str	r3, [r2, #4]
	ir.sumatoriaS1 -= ir.sensor1[myWord.ui8[0]];
 80002ea:	4b41      	ldr	r3, [pc, #260]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002f0:	689a      	ldr	r2, [r3, #8]
 80002f2:	4b41      	ldr	r3, [pc, #260]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	493e      	ldr	r1, [pc, #248]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80002f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	440b      	add	r3, r1
 8000300:	885b      	ldrh	r3, [r3, #2]
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	4a3a      	ldr	r2, [pc, #232]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800030a:	6093      	str	r3, [r2, #8]
	ir.sumatoriaS2 -= ir.sensor2[myWord.ui8[0]];
 800030c:	4b38      	ldr	r3, [pc, #224]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800030e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000312:	68da      	ldr	r2, [r3, #12]
 8000314:	4b38      	ldr	r3, [pc, #224]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4935      	ldr	r1, [pc, #212]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800031a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	440b      	add	r3, r1
 8000322:	885b      	ldrh	r3, [r3, #2]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	4a32      	ldr	r2, [pc, #200]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000328:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800032c:	60d3      	str	r3, [r2, #12]
	ir.sumatoriaS3 -= ir.sensor3[myWord.ui8[0]];
 800032e:	4b30      	ldr	r3, [pc, #192]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000334:	691a      	ldr	r2, [r3, #16]
 8000336:	4b30      	ldr	r3, [pc, #192]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	492d      	ldr	r1, [pc, #180]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800033c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	440b      	add	r3, r1
 8000344:	885b      	ldrh	r3, [r3, #2]
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	4a29      	ldr	r2, [pc, #164]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800034a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800034e:	6113      	str	r3, [r2, #16]
	ir.sumatoriaS4 -= ir.sensor4[myWord.ui8[0]];
 8000350:	4b27      	ldr	r3, [pc, #156]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000356:	695a      	ldr	r2, [r3, #20]
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4924      	ldr	r1, [pc, #144]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800035e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	440b      	add	r3, r1
 8000366:	885b      	ldrh	r3, [r3, #2]
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	4a21      	ldr	r2, [pc, #132]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800036c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000370:	6153      	str	r3, [r2, #20]
	ir.sumatoriaS5 -= ir.sensor5[myWord.ui8[0]];
 8000372:	4b1f      	ldr	r3, [pc, #124]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	491c      	ldr	r1, [pc, #112]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	440b      	add	r3, r1
 8000388:	885b      	ldrh	r3, [r3, #2]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	4a18      	ldr	r2, [pc, #96]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800038e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000392:	6193      	str	r3, [r2, #24]
	ir.sumatoriaS6 -= ir.sensor6[myWord.ui8[0]];
 8000394:	4b16      	ldr	r3, [pc, #88]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800039a:	69da      	ldr	r2, [r3, #28]
 800039c:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4913      	ldr	r1, [pc, #76]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003a2:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	440b      	add	r3, r1
 80003aa:	885b      	ldrh	r3, [r3, #2]
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80003b4:	61d3      	str	r3, [r2, #28]
	ir.sumatoriaS7 -= ir.sensor7[myWord.ui8[0]];
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003bc:	6a1a      	ldr	r2, [r3, #32]
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	490b      	ldr	r1, [pc, #44]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003c4:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	440b      	add	r3, r1
 80003cc:	885b      	ldrh	r3, [r3, #2]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80003d6:	6213      	str	r3, [r2, #32]

	ir.count++;
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <HAL_ADC_ConvCpltCallback+0x2a4>)
 80003e2:	701a      	strb	r2, [r3, #0]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	200003ac 	.word	0x200003ac
 80003f4:	20001584 	.word	0x20001584
 80003f8:	200013e0 	.word	0x200013e0

080003fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {	//Entra cada 250us, 1ms= x4, 10ms= x40, 100ms= x400
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2a      	ldr	r2, [pc, #168]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d14c      	bne.n	80004a8 <HAL_TIM_PeriodElapsedCallback+0xac>
		flags1.F250US = 1;
 800040e:	4a2a      	ldr	r2, [pc, #168]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000410:	7813      	ldrb	r3, [r2, #0]
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	7013      	strb	r3, [r2, #0]

		t10ms--;
 8000418:	4b28      	ldr	r3, [pc, #160]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000422:	701a      	strb	r2, [r3, #0]

		if(t10ms == 0){
 8000424:	4b25      	ldr	r3, [pc, #148]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d119      	bne.n	8000460 <HAL_TIM_PeriodElapsedCallback+0x64>
			flags1.F10MS = 1;
 800042c:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800042e:	7813      	ldrb	r3, [r2, #0]
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	7013      	strb	r3, [r2, #0]
			t10ms = TIME10ms;
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000438:	2228      	movs	r2, #40	@ 0x28
 800043a:	701a      	strb	r2, [r3, #0]

			t100ms--;
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3b01      	subs	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000446:	701a      	strb	r2, [r3, #0]
			t500ms--;
 8000448:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000452:	701a      	strb	r2, [r3, #0]
			t1seg--;
 8000454:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800045e:	701a      	strb	r2, [r3, #0]
		}

		if(t100ms == 0){
 8000460:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d107      	bne.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x7c>
			flags1.F100MS = 1;
 8000468:	4a13      	ldr	r2, [pc, #76]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800046a:	7813      	ldrb	r3, [r2, #0]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	7013      	strb	r3, [r2, #0]
			t100ms = TIME100ms;
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000474:	220a      	movs	r2, #10
 8000476:	701a      	strb	r2, [r3, #0]
		}

		if(t500ms == 0){
 8000478:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d107      	bne.n	8000490 <HAL_TIM_PeriodElapsedCallback+0x94>
			flags1.F500MS = 1;
 8000480:	4a0d      	ldr	r2, [pc, #52]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000482:	7813      	ldrb	r3, [r2, #0]
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	7013      	strb	r3, [r2, #0]
			t500ms = TIME500ms;
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800048c:	2232      	movs	r2, #50	@ 0x32
 800048e:	701a      	strb	r2, [r3, #0]
		}

		if (t1seg == 0) {
 8000490:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d107      	bne.n	80004a8 <HAL_TIM_PeriodElapsedCallback+0xac>
			flags1.F1SEG = 1;
 8000498:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800049a:	7813      	ldrb	r3, [r2, #0]
 800049c:	f043 0310 	orr.w	r3, r3, #16
 80004a0:	7013      	strb	r3, [r2, #0]
			t1seg = 100;
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80004a4:	2264      	movs	r2, #100	@ 0x64
 80004a6:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40012c00 	.word	0x40012c00
 80004b8:	200003a8 	.word	0x200003a8
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000001 	.word	0x20000001
 80004c4:	20000002 	.word	0x20000002
 80004c8:	20000003 	.word	0x20000003

080004cc <HAL_UART_RxCpltCallback>:

/*=============>Recepción de datos desde USART<=============
 * Interrupción que es llamada cuando se produce una recepción de datos.
 * Cargo los datos recibidos al Buffer de Recepción
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <HAL_UART_RxCpltCallback+0x38>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d10d      	bne.n	80004fa <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <HAL_UART_RxCpltCallback+0x3c>)
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	b2d1      	uxtb	r1, r2
 80004e6:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <HAL_UART_RxCpltCallback+0x3c>)
 80004e8:	7111      	strb	r1, [r2, #4]
 80004ea:	3308      	adds	r3, #8
 80004ec:	4a06      	ldr	r2, [pc, #24]	@ (8000508 <HAL_UART_RxCpltCallback+0x3c>)
 80004ee:	4413      	add	r3, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <HAL_UART_RxCpltCallback+0x40>)
 80004f6:	f005 fb0f 	bl	8005b18 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40013800 	.word	0x40013800
 8000508:	200001a0 	.word	0x200001a0
 800050c:	2000153c 	.word	0x2000153c

08000510 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e00c      	b.n	800053c <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <USBReceive+0x40>)
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <USBReceive+0x40>)
 8000532:	440b      	add	r3, r1
 8000534:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbee      	blt.n	8000522 <USBReceive+0x12>
	}


}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	200001a0 	.word	0x200001a0

08000554 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS
*/
void decodeProtocol(_sDato *datosCom){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 800055c:	e0e3      	b.n	8000726 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 800055e:	4b78      	ldr	r3, [pc, #480]	@ (8000740 <decodeProtocol+0x1ec>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b06      	cmp	r3, #6
 8000564:	f200 80d8 	bhi.w	8000718 <decodeProtocol+0x1c4>
 8000568:	a201      	add	r2, pc, #4	@ (adr r2, 8000570 <decodeProtocol+0x1c>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	0800058d 	.word	0x0800058d
 8000574:	080005b5 	.word	0x080005b5
 8000578:	080005e9 	.word	0x080005e9
 800057c:	0800061d 	.word	0x0800061d
 8000580:	08000651 	.word	0x08000651
 8000584:	08000679 	.word	0x08000679
 8000588:	080006bb 	.word	0x080006bb
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	b2d1      	uxtb	r1, r2
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7151      	strb	r1, [r2, #5]
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	7a1b      	ldrb	r3, [r3, #8]
 80005a0:	2b55      	cmp	r3, #85	@ 0x55
 80005a2:	f040 80bd 	bne.w	8000720 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 80005a6:	4b66      	ldr	r3, [pc, #408]	@ (8000740 <decodeProtocol+0x1ec>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	709a      	strb	r2, [r3, #2]
			}
			break;
 80005b2:	e0b5      	b.n	8000720 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	b2d1      	uxtb	r1, r2
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7151      	strb	r1, [r2, #5]
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80005ca:	d103      	bne.n	80005d4 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 80005cc:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <decodeProtocol+0x1ec>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80005d2:	e0a8      	b.n	8000726 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	3b01      	subs	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 80005e0:	4b57      	ldr	r3, [pc, #348]	@ (8000740 <decodeProtocol+0x1ec>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
			break;
 80005e6:	e09e      	b.n	8000726 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	b2d1      	uxtb	r1, r2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7151      	strb	r1, [r2, #5]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	2b45      	cmp	r3, #69	@ 0x45
 80005fe:	d103      	bne.n	8000608 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000600:	4b4f      	ldr	r3, [pc, #316]	@ (8000740 <decodeProtocol+0x1ec>)
 8000602:	2203      	movs	r2, #3
 8000604:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 8000606:	e08e      	b.n	8000726 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	3b01      	subs	r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000614:	4b4a      	ldr	r3, [pc, #296]	@ (8000740 <decodeProtocol+0x1ec>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
			break;
 800061a:	e084      	b.n	8000726 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	b2d1      	uxtb	r1, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	7151      	strb	r1, [r2, #5]
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	7a1b      	ldrb	r3, [r3, #8]
 8000630:	2b52      	cmp	r3, #82	@ 0x52
 8000632:	d103      	bne.n	800063c <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000634:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <decodeProtocol+0x1ec>)
 8000636:	2204      	movs	r2, #4
 8000638:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800063a:	e074      	b.n	8000726 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	3b01      	subs	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <decodeProtocol+0x1ec>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e06a      	b.n	8000726 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795a      	ldrb	r2, [r3, #5]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	b2d1      	uxtb	r1, r2
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7151      	strb	r1, [r2, #5]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	7a1a      	ldrb	r2, [r3, #8]
 800066c:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <decodeProtocol+0x1f0>)
 800066e:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 8000670:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <decodeProtocol+0x1ec>)
 8000672:	2205      	movs	r2, #5
 8000674:	701a      	strb	r2, [r3, #0]
			break;
 8000676:	e056      	b.n	8000726 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	b2d1      	uxtb	r1, r2
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7151      	strb	r1, [r2, #5]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	7a1b      	ldrb	r3, [r3, #8]
 800068c:	2b3a      	cmp	r3, #58	@ 0x3a
 800068e:	d10a      	bne.n	80006a6 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 8000690:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <decodeProtocol+0x1ec>)
 8000692:	2206      	movs	r2, #6
 8000694:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000696:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <decodeProtocol+0x1f0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80006a4:	e03f      	b.n	8000726 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	795b      	ldrb	r3, [r3, #5]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <decodeProtocol+0x1ec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	e035      	b.n	8000726 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <decodeProtocol+0x1f0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d90f      	bls.n	80006e2 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	795b      	ldrb	r3, [r3, #5]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	b2d1      	uxtb	r1, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7151      	strb	r1, [r2, #5]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	7a1a      	ldrb	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	789b      	ldrb	r3, [r3, #2]
 80006da:	4053      	eors	r3, r2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <decodeProtocol+0x1f0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <decodeProtocol+0x1f0>)
 80006ec:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <decodeProtocol+0x1f0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d116      	bne.n	8000724 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <decodeProtocol+0x1ec>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	789a      	ldrb	r2, [r3, #2]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	440b      	add	r3, r1
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f819 	bl	8000748 <decodeData>
				}
			}
			break;
 8000716:	e005      	b.n	8000724 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <decodeProtocol+0x1ec>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
			break;
 800071e:	e002      	b.n	8000726 <decodeProtocol+0x1d2>
			break;
 8000720:	bf00      	nop
 8000722:	e000      	b.n	8000726 <decodeProtocol+0x1d2>
			break;
 8000724:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	795a      	ldrb	r2, [r3, #5]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	f47f af15 	bne.w	800055e <decodeProtocol+0xa>
		}
	}

}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000019c 	.word	0x2000019c
 8000744:	20001594 	.word	0x20001594

08000748 <decodeData>:

void decodeData(_sDato *datosCom){
 8000748:	b480      	push	{r7}
 800074a:	b091      	sub	sp, #68	@ 0x44
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 8000756:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000760:	3340      	adds	r3, #64	@ 0x40
 8000762:	443b      	add	r3, r7
 8000764:	2255      	movs	r2, #85	@ 0x55
 8000766:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 800076a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000774:	3340      	adds	r3, #64	@ 0x40
 8000776:	443b      	add	r3, r7
 8000778:	224e      	movs	r2, #78	@ 0x4e
 800077a:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 800077e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000788:	3340      	adds	r3, #64	@ 0x40
 800078a:	443b      	add	r3, r7
 800078c:	2245      	movs	r2, #69	@ 0x45
 800078e:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000792:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800079c:	3340      	adds	r3, #64	@ 0x40
 800079e:	443b      	add	r3, r7
 80007a0:	2252      	movs	r2, #82	@ 0x52
 80007a2:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 80007a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007b0:	3340      	adds	r3, #64	@ 0x40
 80007b2:	443b      	add	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 80007ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c4:	3340      	adds	r3, #64	@ 0x40
 80007c6:	443b      	add	r3, r7
 80007c8:	223a      	movs	r2, #58	@ 0x3a
 80007ca:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	3302      	adds	r3, #2
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	7a1b      	ldrb	r3, [r3, #8]
 80007da:	2bf0      	cmp	r3, #240	@ 0xf0
 80007dc:	d116      	bne.n	800080c <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 80007de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e8:	3340      	adds	r3, #64	@ 0x40
 80007ea:	443b      	add	r3, r7
 80007ec:	22f0      	movs	r2, #240	@ 0xf0
 80007ee:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 80007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007fc:	3340      	adds	r3, #64	@ 0x40
 80007fe:	443b      	add	r3, r7
 8000800:	220d      	movs	r2, #13
 8000802:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 8000806:	2303      	movs	r3, #3
 8000808:	733b      	strb	r3, [r7, #12]
			break;
 800080a:	e00c      	b.n	8000826 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800080c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000816:	3340      	adds	r3, #64	@ 0x40
 8000818:	443b      	add	r3, r7
 800081a:	22dd      	movs	r2, #221	@ 0xdd
 800081c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000820:	2302      	movs	r3, #2
 8000822:	733b      	strb	r3, [r7, #12]
			break;
 8000824:	bf00      	nop
	}

	cheksum=0;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800082c:	2300      	movs	r3, #0
 800082e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000832:	e021      	b.n	8000878 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000834:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000838:	3340      	adds	r3, #64	@ 0x40
 800083a:	443b      	add	r3, r7
 800083c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000840:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000844:	4053      	eors	r3, r2
 8000846:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800084a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <decodeData+0x160>)
 8000850:	799b      	ldrb	r3, [r3, #6]
 8000852:	1c59      	adds	r1, r3, #1
 8000854:	b2c8      	uxtb	r0, r1
 8000856:	4914      	ldr	r1, [pc, #80]	@ (80008a8 <decodeData+0x160>)
 8000858:	7188      	strb	r0, [r1, #6]
 800085a:	4619      	mov	r1, r3
 800085c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8000860:	443b      	add	r3, r7
 8000862:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	440b      	add	r3, r1
 800086a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800086e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000872:	3301      	adds	r3, #1
 8000874:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000878:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800087c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000880:	429a      	cmp	r2, r3
 8000882:	d3d7      	bcc.n	8000834 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <decodeData+0x160>)
 8000886:	799b      	ldrb	r3, [r3, #6]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	b2d1      	uxtb	r1, r2
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <decodeData+0x160>)
 800088e:	7191      	strb	r1, [r2, #6]
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800089a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 800089e:	bf00      	nop
 80008a0:	3744      	adds	r7, #68	@ 0x44
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	200001a0 	.word	0x200001a0

080008ac <encodeData>:

void encodeData(uint8_t id){
 80008ac:	b480      	push	{r7}
 80008ae:	b091      	sub	sp, #68	@ 0x44
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80008bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008c6:	3340      	adds	r3, #64	@ 0x40
 80008c8:	443b      	add	r3, r7
 80008ca:	2255      	movs	r2, #85	@ 0x55
 80008cc:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80008d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008da:	3340      	adds	r3, #64	@ 0x40
 80008dc:	443b      	add	r3, r7
 80008de:	224e      	movs	r2, #78	@ 0x4e
 80008e0:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80008e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008ee:	3340      	adds	r3, #64	@ 0x40
 80008f0:	443b      	add	r3, r7
 80008f2:	2245      	movs	r2, #69	@ 0x45
 80008f4:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80008f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000902:	3340      	adds	r3, #64	@ 0x40
 8000904:	443b      	add	r3, r7
 8000906:	2252      	movs	r2, #82	@ 0x52
 8000908:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 800090c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000916:	3340      	adds	r3, #64	@ 0x40
 8000918:	443b      	add	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000920:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800092a:	3340      	adds	r3, #64	@ 0x40
 800092c:	443b      	add	r3, r7
 800092e:	223a      	movs	r2, #58	@ 0x3a
 8000930:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2ba0      	cmp	r3, #160	@ 0xa0
 8000938:	f040 8115 	bne.w	8000b66 <encodeData+0x2ba>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 800093c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000946:	3340      	adds	r3, #64	@ 0x40
 8000948:	443b      	add	r3, r7
 800094a:	22a0      	movs	r2, #160	@ 0xa0
 800094c:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 8000950:	2312      	movs	r3, #18
 8000952:	733b      	strb	r3, [r7, #12]

		//myWord.ui32 = ir.sensor1[ir.count];
		myWord.ui32 = ir.promS0;
 8000954:	4bab      	ldr	r3, [pc, #684]	@ (8000c04 <encodeData+0x358>)
 8000956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800095a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800095c:	461a      	mov	r2, r3
 800095e:	4baa      	ldr	r3, [pc, #680]	@ (8000c08 <encodeData+0x35c>)
 8000960:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000962:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800096c:	4619      	mov	r1, r3
 800096e:	4ba6      	ldr	r3, [pc, #664]	@ (8000c08 <encodeData+0x35c>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000976:	443b      	add	r3, r7
 8000978:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800097c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000986:	4619      	mov	r1, r3
 8000988:	4b9f      	ldr	r3, [pc, #636]	@ (8000c08 <encodeData+0x35c>)
 800098a:	785a      	ldrb	r2, [r3, #1]
 800098c:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000990:	443b      	add	r3, r7
 8000992:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor1;
		myWord.ui32 = ir.promS1;
 8000996:	4b9b      	ldr	r3, [pc, #620]	@ (8000c04 <encodeData+0x358>)
 8000998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800099c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800099e:	461a      	mov	r2, r3
 80009a0:	4b99      	ldr	r3, [pc, #612]	@ (8000c08 <encodeData+0x35c>)
 80009a2:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80009a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80009ae:	4619      	mov	r1, r3
 80009b0:	4b95      	ldr	r3, [pc, #596]	@ (8000c08 <encodeData+0x35c>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80009b8:	443b      	add	r3, r7
 80009ba:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80009be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80009c8:	4619      	mov	r1, r3
 80009ca:	4b8f      	ldr	r3, [pc, #572]	@ (8000c08 <encodeData+0x35c>)
 80009cc:	785a      	ldrb	r2, [r3, #1]
 80009ce:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80009d2:	443b      	add	r3, r7
 80009d4:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor2[ir.count];
		myWord.ui32 = ir.promS2;
 80009d8:	4b8a      	ldr	r3, [pc, #552]	@ (8000c04 <encodeData+0x358>)
 80009da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b89      	ldr	r3, [pc, #548]	@ (8000c08 <encodeData+0x35c>)
 80009e4:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80009e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80009f0:	4619      	mov	r1, r3
 80009f2:	4b85      	ldr	r3, [pc, #532]	@ (8000c08 <encodeData+0x35c>)
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80009fa:	443b      	add	r3, r7
 80009fc:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000a00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c08 <encodeData+0x35c>)
 8000a0e:	785a      	ldrb	r2, [r3, #1]
 8000a10:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000a14:	443b      	add	r3, r7
 8000a16:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor3[ir.count];
		myWord.ui32 = ir.promS3;
 8000a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8000c04 <encodeData+0x358>)
 8000a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b78      	ldr	r3, [pc, #480]	@ (8000c08 <encodeData+0x35c>)
 8000a26:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000a28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b74      	ldr	r3, [pc, #464]	@ (8000c08 <encodeData+0x35c>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000a42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000c08 <encodeData+0x35c>)
 8000a50:	785a      	ldrb	r2, [r3, #1]
 8000a52:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000a56:	443b      	add	r3, r7
 8000a58:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor4[ir.count];
		myWord.ui32 = ir.promS4;
 8000a5c:	4b69      	ldr	r3, [pc, #420]	@ (8000c04 <encodeData+0x358>)
 8000a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b68      	ldr	r3, [pc, #416]	@ (8000c08 <encodeData+0x35c>)
 8000a68:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000a74:	4619      	mov	r1, r3
 8000a76:	4b64      	ldr	r3, [pc, #400]	@ (8000c08 <encodeData+0x35c>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000a7e:	443b      	add	r3, r7
 8000a80:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000a84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4b5d      	ldr	r3, [pc, #372]	@ (8000c08 <encodeData+0x35c>)
 8000a92:	785a      	ldrb	r2, [r3, #1]
 8000a94:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000a98:	443b      	add	r3, r7
 8000a9a:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor5[ir.count];
		myWord.ui32 = ir.promS5;
 8000a9e:	4b59      	ldr	r3, [pc, #356]	@ (8000c04 <encodeData+0x358>)
 8000aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aa4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b57      	ldr	r3, [pc, #348]	@ (8000c08 <encodeData+0x35c>)
 8000aaa:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000aac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4b53      	ldr	r3, [pc, #332]	@ (8000c08 <encodeData+0x35c>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000ac0:	443b      	add	r3, r7
 8000ac2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8000c08 <encodeData+0x35c>)
 8000ad4:	785a      	ldrb	r2, [r3, #1]
 8000ad6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000ada:	443b      	add	r3, r7
 8000adc:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor6[ir.count];
		myWord.ui32 = ir.promS6;
 8000ae0:	4b48      	ldr	r3, [pc, #288]	@ (8000c04 <encodeData+0x358>)
 8000ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ae6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <encodeData+0x35c>)
 8000aec:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000aee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000af8:	4619      	mov	r1, r3
 8000afa:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <encodeData+0x35c>)
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000b02:	443b      	add	r3, r7
 8000b04:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000b08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000b12:	4619      	mov	r1, r3
 8000b14:	4b3c      	ldr	r3, [pc, #240]	@ (8000c08 <encodeData+0x35c>)
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000b1c:	443b      	add	r3, r7
 8000b1e:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui32 = ir.sensor7[ir.count];
		myWord.ui32 = ir.promS7;
 8000b22:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <encodeData+0x358>)
 8000b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <encodeData+0x35c>)
 8000b2e:	601a      	str	r2, [r3, #0]
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000b30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <encodeData+0x35c>)
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000b44:	443b      	add	r3, r7
 8000b46:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000b54:	4619      	mov	r1, r3
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <encodeData+0x35c>)
 8000b58:	785a      	ldrb	r2, [r3, #1]
 8000b5a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000b5e:	443b      	add	r3, r7
 8000b60:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 8000b64:	e00c      	b.n	8000b80 <encodeData+0x2d4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000b70:	3340      	adds	r3, #64	@ 0x40
 8000b72:	443b      	add	r3, r7
 8000b74:	22dd      	movs	r2, #221	@ 0xdd
 8000b76:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	733b      	strb	r3, [r7, #12]
			break;
 8000b7e:	bf00      	nop
	}
	cheksum=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000b8c:	e021      	b.n	8000bd2 <encodeData+0x326>
	{
		cheksum ^= auxBuffTx[a];
 8000b8e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000b92:	3340      	adds	r3, #64	@ 0x40
 8000b94:	443b      	add	r3, r7
 8000b96:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000b9a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b9e:	4053      	eors	r3, r2
 8000ba0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 8000ba4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <encodeData+0x360>)
 8000baa:	799b      	ldrb	r3, [r3, #6]
 8000bac:	1c59      	adds	r1, r3, #1
 8000bae:	b2c8      	uxtb	r0, r1
 8000bb0:	4916      	ldr	r1, [pc, #88]	@ (8000c0c <encodeData+0x360>)
 8000bb2:	7188      	strb	r0, [r1, #6]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8000bba:	443b      	add	r3, r7
 8000bbc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <encodeData+0x360>)
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 8000bc8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000bd2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000bd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3d7      	bcc.n	8000b8e <encodeData+0x2e2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <encodeData+0x360>)
 8000be0:	799b      	ldrb	r3, [r3, #6]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	b2d1      	uxtb	r1, r2
 8000be6:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <encodeData+0x360>)
 8000be8:	7191      	strb	r1, [r2, #6]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <encodeData+0x360>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000bf4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000bf8:	bf00      	nop
 8000bfa:	3744      	adds	r7, #68	@ 0x44
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200003ac 	.word	0x200003ac
 8000c08:	200013e0 	.word	0x200013e0
 8000c0c:	200001a0 	.word	0x200001a0

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fe0b 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f967 	bl	8000eec <SystemClock_Config>
//_HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 fb79 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c22:	f000 fb59 	bl	80012d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c26:	f000 fb2d 	bl	8001284 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000c2a:	f009 fbb3 	bl	800a394 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000c2e:	f000 f9bb 	bl	8000fa8 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000c32:	f000 fa5b 	bl	80010ec <MX_I2C2_Init>
  MX_TIM4_Init();
 8000c36:	f000 fad7 	bl	80011e8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000c3a:	f000 fa85 	bl	8001148 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000c3e:	48a0      	ldr	r0, [pc, #640]	@ (8000ec0 <main+0x2b0>)
 8000c40:	f004 fb6c 	bl	800531c <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000c44:	489f      	ldr	r0, [pc, #636]	@ (8000ec4 <main+0x2b4>)
 8000c46:	f009 fcdb 	bl	800a600 <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepión del Buffer de Recepción
 8000c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ec8 <main+0x2b8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepción
 8000c50:	4b9d      	ldr	r3, [pc, #628]	@ (8000ec8 <main+0x2b8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000c56:	4b9c      	ldr	r3, [pc, #624]	@ (8000ec8 <main+0x2b8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 8000c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8000ec8 <main+0x2b8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;
  ir.count = 0;
 8000c62:	4b9a      	ldr	r3, [pc, #616]	@ (8000ecc <main+0x2bc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 8000c68:	4b97      	ldr	r3, [pc, #604]	@ (8000ec8 <main+0x2b8>)
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	4a96      	ldr	r2, [pc, #600]	@ (8000ec8 <main+0x2b8>)
 8000c70:	4413      	add	r3, r2
 8000c72:	2201      	movs	r2, #1
 8000c74:	4619      	mov	r1, r3
 8000c76:	4896      	ldr	r0, [pc, #600]	@ (8000ed0 <main+0x2c0>)
 8000c78:	f004 ff4e 	bl	8005b18 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	4995      	ldr	r1, [pc, #596]	@ (8000ed4 <main+0x2c4>)
 8000c80:	4895      	ldr	r0, [pc, #596]	@ (8000ed8 <main+0x2c8>)
 8000c82:	f000 ff33 	bl	8001aec <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c8c:	4893      	ldr	r0, [pc, #588]	@ (8000edc <main+0x2cc>)
 8000c8e:	f001 ff4b 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000c92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c96:	f000 fe2d 	bl	80018f4 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca0:	488e      	ldr	r0, [pc, #568]	@ (8000edc <main+0x2cc>)
 8000ca2:	f001 ff41 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000ca6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000caa:	f000 fe23 	bl	80018f4 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb4:	4889      	ldr	r0, [pc, #548]	@ (8000edc <main+0x2cc>)
 8000cb6:	f001 ff37 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000cba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cbe:	f000 fe19 	bl	80018f4 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc8:	4884      	ldr	r0, [pc, #528]	@ (8000edc <main+0x2cc>)
 8000cca:	f001 ff2d 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000cce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cd2:	f000 fe0f 	bl	80018f4 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cdc:	487f      	ldr	r0, [pc, #508]	@ (8000edc <main+0x2cc>)
 8000cde:	f001 ff23 	bl	8002b28 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000ce2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ce6:	f000 fe05 	bl	80018f4 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf0:	487a      	ldr	r0, [pc, #488]	@ (8000edc <main+0x2cc>)
 8000cf2:	f001 ff19 	bl	8002b28 <HAL_GPIO_WritePin>

//  uint8_t transComplete  = 0;

  uint8_t lengthTx;

  memset(&ir.sensor1,'\0',sizeof(ir.sensor0));
 8000cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4878      	ldr	r0, [pc, #480]	@ (8000ee0 <main+0x2d0>)
 8000cfe:	f00a f845 	bl	800ad8c <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flags1.F250US == 1){
 8000d02:	4b78      	ldr	r3, [pc, #480]	@ (8000ee4 <main+0x2d4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d009      	beq.n	8000d24 <main+0x114>
		  flags1.F250US = 0;
 8000d10:	4a74      	ldr	r2, [pc, #464]	@ (8000ee4 <main+0x2d4>)
 8000d12:	7813      	ldrb	r3, [r2, #0]
 8000d14:	f36f 0300 	bfc	r3, #0, #1
 8000d18:	7013      	strb	r3, [r2, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	496d      	ldr	r1, [pc, #436]	@ (8000ed4 <main+0x2c4>)
 8000d1e:	486e      	ldr	r0, [pc, #440]	@ (8000ed8 <main+0x2c8>)
 8000d20:	f000 fee4 	bl	8001aec <HAL_ADC_Start_DMA>
	  }

	  if (flags1.F10MS == 1){
 8000d24:	4b6f      	ldr	r3, [pc, #444]	@ (8000ee4 <main+0x2d4>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06c      	beq.n	8000e0c <main+0x1fc>
		  flags1.F10MS = 0;
 8000d32:	4a6c      	ldr	r2, [pc, #432]	@ (8000ee4 <main+0x2d4>)
 8000d34:	7813      	ldrb	r3, [r2, #0]
 8000d36:	f36f 0341 	bfc	r3, #1, #1
 8000d3a:	7013      	strb	r3, [r2, #0]

		  //Cálculo del Promedio de la Ventana Movil
		  ir.promS0 = (uint16_t)(ir.sumatoriaS0 / 40);
 8000d3c:	4b63      	ldr	r3, [pc, #396]	@ (8000ecc <main+0x2bc>)
 8000d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a68      	ldr	r2, [pc, #416]	@ (8000ee8 <main+0x2d8>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ecc <main+0x2bc>)
 8000d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d54:	849a      	strh	r2, [r3, #36]	@ 0x24
		  ir.promS1 = (uint16_t)(ir.sumatoriaS1 / 40);
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <main+0x2bc>)
 8000d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a62      	ldr	r2, [pc, #392]	@ (8000ee8 <main+0x2d8>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <main+0x2bc>)
 8000d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d6e:	84da      	strh	r2, [r3, #38]	@ 0x26
		  ir.promS2 = (uint16_t)(ir.sumatoriaS2 / 40);
 8000d70:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <main+0x2bc>)
 8000d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4a5b      	ldr	r2, [pc, #364]	@ (8000ee8 <main+0x2d8>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b52      	ldr	r3, [pc, #328]	@ (8000ecc <main+0x2bc>)
 8000d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d88:	851a      	strh	r2, [r3, #40]	@ 0x28
		  ir.promS3 = (uint16_t)(ir.sumatoriaS3 / 40);
 8000d8a:	4b50      	ldr	r3, [pc, #320]	@ (8000ecc <main+0x2bc>)
 8000d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	4a55      	ldr	r2, [pc, #340]	@ (8000ee8 <main+0x2d8>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ecc <main+0x2bc>)
 8000d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
		  ir.promS4 = (uint16_t)(ir.sumatoriaS4 / 40);
 8000da4:	4b49      	ldr	r3, [pc, #292]	@ (8000ecc <main+0x2bc>)
 8000da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee8 <main+0x2d8>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b45      	ldr	r3, [pc, #276]	@ (8000ecc <main+0x2bc>)
 8000db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dbc:	859a      	strh	r2, [r3, #44]	@ 0x2c
		  ir.promS5 = (uint16_t)(ir.sumatoriaS5 / 40);
 8000dbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <main+0x2bc>)
 8000dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a48      	ldr	r2, [pc, #288]	@ (8000ee8 <main+0x2d8>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ecc <main+0x2bc>)
 8000dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e
		  ir.promS6 = (uint16_t)(ir.sumatoriaS6 / 40);
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <main+0x2bc>)
 8000dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a41      	ldr	r2, [pc, #260]	@ (8000ee8 <main+0x2d8>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b38      	ldr	r3, [pc, #224]	@ (8000ecc <main+0x2bc>)
 8000dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df0:	861a      	strh	r2, [r3, #48]	@ 0x30
		  ir.promS7 = (uint16_t)(ir.sumatoriaS7 / 40);
 8000df2:	4b36      	ldr	r3, [pc, #216]	@ (8000ecc <main+0x2bc>)
 8000df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee8 <main+0x2d8>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <main+0x2bc>)
 8000e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e0a:	865a      	strh	r2, [r3, #50]	@ 0x32

	  }

	  if(flags1.F100MS==1){
 8000e0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ee4 <main+0x2d4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <main+0x214>
		  flags1.F100MS = 0;
 8000e1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ee4 <main+0x2d4>)
 8000e1c:	7813      	ldrb	r3, [r2, #0]
 8000e1e:	f36f 0382 	bfc	r3, #2, #1
 8000e22:	7013      	strb	r3, [r2, #0]
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS == 1) {
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <main+0x2d4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d009      	beq.n	8000e46 <main+0x236>
		  flags1.F500MS = 0;
 8000e32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee4 <main+0x2d4>)
 8000e34:	7813      	ldrb	r3, [r2, #0]
 8000e36:	f36f 03c3 	bfc	r3, #3, #1
 8000e3a:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e40:	4826      	ldr	r0, [pc, #152]	@ (8000edc <main+0x2cc>)
 8000e42:	f001 fe89 	bl	8002b58 <HAL_GPIO_TogglePin>
	  }

	  if (flags1.F1SEG == 1) {
 8000e46:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <main+0x2d4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <main+0x254>
		  flags1.F1SEG = 0;
 8000e54:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <main+0x2d4>)
 8000e56:	7813      	ldrb	r3, [r2, #0]
 8000e58:	f36f 1304 	bfc	r3, #4, #1
 8000e5c:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000e5e:	20a0      	movs	r0, #160	@ 0xa0
 8000e60:	f7ff fd24 	bl	80008ac <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <main+0x2b8>)
 8000e66:	795a      	ldrb	r2, [r3, #5]
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <main+0x2b8>)
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d002      	beq.n	8000e76 <main+0x266>
		  decodeProtocol(&datosComProtocol);
 8000e70:	4815      	ldr	r0, [pc, #84]	@ (8000ec8 <main+0x2b8>)
 8000e72:	f7ff fb6f 	bl	8000554 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <main+0x2b8>)
 8000e78:	79da      	ldrb	r2, [r3, #7]
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <main+0x2b8>)
 8000e7c:	799b      	ldrb	r3, [r3, #6]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	f43f af3f 	beq.w	8000d02 <main+0xf2>
		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
 8000e84:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <main+0x2b8>)
 8000e86:	799a      	ldrb	r2, [r3, #6]
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <main+0x2b8>)
 8000e8a:	79db      	ldrb	r3, [r3, #7]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	71fb      	strb	r3, [r7, #7]
		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK))
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <main+0x2b8>)
 8000e92:	79db      	ldrb	r3, [r3, #7]
 8000e94:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000e98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <main+0x2b8>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 fb86 	bl	800a5b4 <CDC_Transmit_FS>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f af29 	bne.w	8000d02 <main+0xf2>
			  datosComProtocol.indexReadTx++;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <main+0x2b8>)
 8000eb2:	79db      	ldrb	r3, [r3, #7]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <main+0x2b8>)
 8000eba:	71da      	strb	r2, [r3, #7]
	  if (flags1.F250US == 1){
 8000ebc:	e721      	b.n	8000d02 <main+0xf2>
 8000ebe:	bf00      	nop
 8000ec0:	200014ac 	.word	0x200014ac
 8000ec4:	08000511 	.word	0x08000511
 8000ec8:	200001a0 	.word	0x200001a0
 8000ecc:	200003ac 	.word	0x200003ac
 8000ed0:	2000153c 	.word	0x2000153c
 8000ed4:	20001584 	.word	0x20001584
 8000ed8:	200013e4 	.word	0x200013e4
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	200005ae 	.word	0x200005ae
 8000ee4:	200003a8 	.word	0x200003a8
 8000ee8:	cccccccd 	.word	0xcccccccd

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	@ 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef6:	2228      	movs	r2, #40	@ 0x28
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f009 ff46 	bl	800ad8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f38:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fcd4 	bl	80048f0 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f4e:	f000 fa5f 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ff40 	bl	8004df4 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f7a:	f000 fa49 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 f8be 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f9a:	f000 fa39 	bl	8001410 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	@ 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fba:	4a4b      	ldr	r2, [pc, #300]	@ (80010e8 <MX_ADC1_Init+0x140>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fbe:	4b49      	ldr	r3, [pc, #292]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc6:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b45      	ldr	r3, [pc, #276]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd2:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fd4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b42      	ldr	r3, [pc, #264]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000fe0:	4b40      	ldr	r3, [pc, #256]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe6:	483f      	ldr	r0, [pc, #252]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8000fe8:	f000 fca8 	bl	800193c <HAL_ADC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ff2:	f000 fa0d 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4837      	ldr	r0, [pc, #220]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8001008:	f000 fe60 	bl	8001ccc <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 f9fd 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800101a:	2302      	movs	r3, #2
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4830      	ldr	r0, [pc, #192]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8001024:	f000 fe52 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800102e:	f000 f9ef 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001032:	2302      	movs	r3, #2
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001036:	2303      	movs	r3, #3
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4829      	ldr	r0, [pc, #164]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8001040:	f000 fe44 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800104a:	f000 f9e1 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800104e:	2303      	movs	r3, #3
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001052:	2304      	movs	r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 800105c:	f000 fe36 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001066:	f000 f9d3 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800106a:	2304      	movs	r3, #4
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800106e:	2305      	movs	r3, #5
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8001078:	f000 fe28 	bl	8001ccc <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001082:	f000 f9c5 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001086:	2305      	movs	r3, #5
 8001088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800108a:	2306      	movs	r3, #6
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 8001094:	f000 fe1a 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800109e:	f000 f9b7 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 80010b0:	f000 fe0c 	bl	8001ccc <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80010ba:	f000 f9a9 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010be:	2307      	movs	r3, #7
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <MX_ADC1_Init+0x13c>)
 80010cc:	f000 fdfe 	bl	8001ccc <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80010d6:	f000 f99b 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200013e4 	.word	0x200013e4
 80010e8:	40012400 	.word	0x40012400

080010ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_I2C2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_I2C2_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_I2C2_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_I2C2_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_I2C2_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_I2C2_Init+0x50>)
 800112a:	f001 fd2f 	bl	8002b8c <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 f96c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20001458 	.word	0x20001458
 8001140:	40005800 	.word	0x40005800
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM1_Init+0x98>)
 8001166:	4a1f      	ldr	r2, [pc, #124]	@ (80011e4 <MX_TIM1_Init+0x9c>)
 8001168:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_TIM1_Init+0x98>)
 800116c:	2247      	movs	r2, #71	@ 0x47
 800116e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM1_Init+0x98>)
 8001178:	22f9      	movs	r2, #249	@ 0xf9
 800117a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_TIM1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_TIM1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118e:	4814      	ldr	r0, [pc, #80]	@ (80011e0 <MX_TIM1_Init+0x98>)
 8001190:	f004 f874 	bl	800527c <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800119a:	f000 f939 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <MX_TIM1_Init+0x98>)
 80011ac:	f004 fa10 	bl	80055d0 <HAL_TIM_ConfigClockSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80011b6:	f000 f92b 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <MX_TIM1_Init+0x98>)
 80011c8:	f004 fbe6 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80011d2:	f000 f91d 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200014ac 	.word	0x200014ac
 80011e4:	40012c00 	.word	0x40012c00

080011e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_TIM4_Init+0x94>)
 8001206:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <MX_TIM4_Init+0x98>)
 8001208:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_TIM4_Init+0x94>)
 800120c:	2204      	movs	r2, #4
 800120e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_TIM4_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12800;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_TIM4_Init+0x94>)
 8001218:	f44f 5248 	mov.w	r2, #12800	@ 0x3200
 800121c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_TIM4_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_TIM4_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <MX_TIM4_Init+0x94>)
 800122c:	f004 f826 	bl	800527c <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 f8eb 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_TIM4_Init+0x94>)
 8001248:	f004 f9c2 	bl	80055d0 <HAL_TIM_ConfigClockSource>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 f8dd 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_TIM4_Init+0x94>)
 8001264:	f004 fb98 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800126e:	f000 f8cf 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200014f4 	.word	0x200014f4
 8001280:	40000800 	.word	0x40000800

08001284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <MX_USART1_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART1_UART_Init+0x4c>)
 80012bc:	f004 fbdc 	bl	8005a78 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f8a3 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000153c 	.word	0x2000153c
 80012d4:	40013800 	.word	0x40013800

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_DMA_Init+0x38>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <MX_DMA_Init+0x38>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_DMA_Init+0x38>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200b      	movs	r0, #11
 80012fc:	f000 ffb7 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001300:	200b      	movs	r0, #11
 8001302:	f000 ffd0 	bl	80022a6 <HAL_NVIC_EnableIRQ>

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <MX_GPIO_Init+0xec>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <MX_GPIO_Init+0xec>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a2e      	ldr	r2, [pc, #184]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <MX_GPIO_Init+0xec>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <MX_GPIO_Init+0xec>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a28      	ldr	r2, [pc, #160]	@ (8001400 <MX_GPIO_Init+0xec>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <MX_GPIO_Init+0xec>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <MX_GPIO_Init+0xec>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138e:	481d      	ldr	r0, [pc, #116]	@ (8001404 <MX_GPIO_Init+0xf0>)
 8001390:	f001 fbca 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139a:	481b      	ldr	r0, [pc, #108]	@ (8001408 <MX_GPIO_Init+0xf4>)
 800139c:	f001 fbc4 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 80013a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	4812      	ldr	r0, [pc, #72]	@ (8001404 <MX_GPIO_Init+0xf0>)
 80013ba:	f001 fa31 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80013be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480e      	ldr	r0, [pc, #56]	@ (800140c <MX_GPIO_Init+0xf8>)
 80013d4:	f001 fa24 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_GPIO_Init+0xf4>)
 80013f2:	f001 fa15 	bl	8002820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40011000 	.word	0x40011000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_ADC_MspInit+0xbc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d149      	bne.n	8001534 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a20      	ldr	r2, [pc, #128]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014d0:	23ff      	movs	r3, #255	@ 0xff
 80014d2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4819      	ldr	r0, [pc, #100]	@ (8001544 <HAL_ADC_MspInit+0xc4>)
 80014e0:	f001 f99e 	bl	8002820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014e6:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_ADC_MspInit+0xcc>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001502:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 8001506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 800151a:	f000 fedf 	bl	80022dc <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001524:	f7ff ff74 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40012400 	.word	0x40012400
 8001540:	40021000 	.word	0x40021000
 8001544:	40010800 	.word	0x40010800
 8001548:	20001414 	.word	0x20001414
 800154c:	40020008 	.word	0x40020008

08001550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a16      	ldr	r2, [pc, #88]	@ (80015c4 <HAL_I2C_MspInit+0x74>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d124      	bne.n	80015ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001588:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800158c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158e:	2312      	movs	r3, #18
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	480b      	ldr	r0, [pc, #44]	@ (80015cc <HAL_I2C_MspInit+0x7c>)
 800159e:	f001 f93f 	bl	8002820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 80015a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_I2C_MspInit+0x78>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005800 	.word	0x40005800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <HAL_TIM_Base_MspInit+0xa8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d114      	bne.n	800161a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 80015f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	2019      	movs	r0, #25
 800160e:	f000 fe2e 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001612:	2019      	movs	r0, #25
 8001614:	f000 fe47 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001618:	e029      	b.n	800166e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a18      	ldr	r2, [pc, #96]	@ (8001680 <HAL_TIM_Base_MspInit+0xb0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d124      	bne.n	800166e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a0e      	ldr	r2, [pc, #56]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_TIM_Base_MspInit+0xac>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001654:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2302      	movs	r3, #2
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	4619      	mov	r1, r3
 8001668:	4806      	ldr	r0, [pc, #24]	@ (8001684 <HAL_TIM_Base_MspInit+0xb4>)
 800166a:	f001 f8d9 	bl	8002820 <HAL_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40012c00 	.word	0x40012c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40000800 	.word	0x40000800
 8001684:	40010c00 	.word	0x40010c00

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <HAL_UART_MspInit+0x9c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d139      	bne.n	800171c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_UART_MspInit+0xa0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <HAL_UART_MspInit+0xa4>)
 80016ee:	f001 f897 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4809      	ldr	r0, [pc, #36]	@ (800172c <HAL_UART_MspInit+0xa4>)
 8001708:	f001 f88a 	bl	8002820 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2025      	movs	r0, #37	@ 0x25
 8001712:	f000 fdac 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001716:	2025      	movs	r0, #37	@ 0x25
 8001718:	f000 fdc5 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013800 	.word	0x40013800
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f89c 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Channel1_IRQHandler+0x10>)
 800178e:	f000 ff13 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20001414 	.word	0x20001414

0800179c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017a2:	f001 fc5c 	bl	800305e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001c70 	.word	0x20001c70

080017b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM1_UP_IRQHandler+0x10>)
 80017b6:	f003 fe03 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200014ac 	.word	0x200014ac

080017c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <USART1_IRQHandler+0x10>)
 80017ca:	f004 f9cb 	bl	8005b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000153c 	.word	0x2000153c

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff fff8 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480b      	ldr	r0, [pc, #44]	@ (8001818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ea:	490c      	ldr	r1, [pc, #48]	@ (800181c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001800:	4c09      	ldr	r4, [pc, #36]	@ (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f009 fac5 	bl	800ad9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff f9fd 	bl	8000c10 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001820:	0800ae78 	.word	0x0800ae78
  ldr r2, =_sbss
 8001824:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001828:	20002180 	.word	0x20002180

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 fd09 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fde6 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fd21 	bl	80022c2 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 fce9 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000004 	.word	0x20000004
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	20000008 	.word	0x20000008

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	@ (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	20001598 	.word	0x20001598

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	@ (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20001598 	.word	0x20001598

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffe0 	bl	80018e0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000000c 	.word	0x2000000c

0800193c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0be      	b.n	8001adc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd80 	bl	8001480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 faf5 	bl	8001f70 <ADC_ConversionStop_Disable>
 8001986:	4603      	mov	r3, r0
 8001988:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8099 	bne.w	8001aca <HAL_ADC_Init+0x18e>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8095 	bne.w	8001aca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019a8:	f023 0302 	bic.w	r3, r3, #2
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0xa2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_ADC_Init+0xa8>
 80019de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_Init+0xaa>
 80019e4:	2300      	movs	r3, #0
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7d1b      	ldrb	r3, [r3, #20]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d119      	bne.n	8001a28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7b1b      	ldrb	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	035a      	lsls	r2, r3, #13
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e00b      	b.n	8001a28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_ADC_Init+0x1a8>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_Init+0x126>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d104      	bne.n	8001a6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	051b      	lsls	r3, r3, #20
 8001a6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_ADC_Init+0x1ac>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aa6:	e018      	b.n	8001ada <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	f023 0312 	bic.w	r3, r3, #18
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ac8:	e007      	b.n	8001ada <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ae8:	ff1f0efe 	.word	0xff1f0efe

08001aec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a64      	ldr	r2, [pc, #400]	@ (8001c94 <HAL_ADC_Start_DMA+0x1a8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_ADC_Start_DMA+0x24>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a63      	ldr	r2, [pc, #396]	@ (8001c98 <HAL_ADC_Start_DMA+0x1ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d106      	bne.n	8001b1e <HAL_ADC_Start_DMA+0x32>
 8001b10:	4b60      	ldr	r3, [pc, #384]	@ (8001c94 <HAL_ADC_Start_DMA+0x1a8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 80b3 	bne.w	8001c84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_Start_DMA+0x40>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0ae      	b.n	8001c8a <HAL_ADC_Start_DMA+0x19e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9c1 	bl	8001ebc <ADC_Enable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 809a 	bne.w	8001c7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c98 <HAL_ADC_Start_DMA+0x1ac>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d105      	bne.n	8001b70 <HAL_ADC_Start_DMA+0x84>
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <HAL_ADC_Start_DMA+0x1a8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d115      	bne.n	8001b9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d026      	beq.n	8001bd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b9a:	e01d      	b.n	8001bd8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a39      	ldr	r2, [pc, #228]	@ (8001c94 <HAL_ADC_Start_DMA+0x1a8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_Start_DMA+0xd0>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a38      	ldr	r2, [pc, #224]	@ (8001c98 <HAL_ADC_Start_DMA+0x1ac>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d10d      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0xec>
 8001bbc:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <HAL_ADC_Start_DMA+0x1a8>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	f023 0206 	bic.w	r2, r3, #6
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a25      	ldr	r2, [pc, #148]	@ (8001c9c <HAL_ADC_Start_DMA+0x1b0>)
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ca0 <HAL_ADC_Start_DMA+0x1b4>)
 8001c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <HAL_ADC_Start_DMA+0x1b8>)
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0202 	mvn.w	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a18      	ldr	r0, [r3, #32]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	334c      	adds	r3, #76	@ 0x4c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f000 fba5 	bl	8002390 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c50:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c54:	d108      	bne.n	8001c68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c66:	e00f      	b.n	8001c88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c78:	e006      	b.n	8001c88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001c82:	e001      	b.n	8001c88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012400 	.word	0x40012400
 8001c98:	40012800 	.word	0x40012800
 8001c9c:	08001ff3 	.word	0x08001ff3
 8001ca0:	0800206f 	.word	0x0800206f
 8001ca4:	0800208b 	.word	0x0800208b

08001ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x20>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0dc      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1da>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d81c      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b05      	subs	r3, #5
 8001d0e:	221f      	movs	r2, #31
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4019      	ands	r1, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b05      	subs	r3, #5
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d34:	e03c      	b.n	8001db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d81c      	bhi.n	8001d78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b23      	subs	r3, #35	@ 0x23
 8001d50:	221f      	movs	r2, #31
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4019      	ands	r1, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b23      	subs	r3, #35	@ 0x23
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d76:	e01b      	b.n	8001db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b41      	subs	r3, #65	@ 0x41
 8001d8a:	221f      	movs	r2, #31
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b41      	subs	r3, #65	@ 0x41
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d91c      	bls.n	8001df2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68d9      	ldr	r1, [r3, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b1e      	subs	r3, #30
 8001dca:	2207      	movs	r2, #7
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4019      	ands	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6898      	ldr	r0, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	3b1e      	subs	r3, #30
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	e019      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	2207      	movs	r2, #7
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4019      	ands	r1, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6898      	ldr	r0, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d003      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e32:	2b11      	cmp	r3, #17
 8001e34:	d132      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d125      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d126      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d11a      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	0c9a      	lsrs	r2, r3, #18
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e7c:	e002      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f9      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x1b2>
 8001e8a:	e007      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40012400 	.word	0x40012400
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	431bde83 	.word	0x431bde83

08001ebc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d040      	beq.n	8001f5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <ADC_Enable+0xac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <ADC_Enable+0xb0>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ef8:	e002      	b.n	8001f00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f06:	f7ff fceb 	bl	80018e0 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f0c:	e01f      	b.n	8001f4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f0e:	f7ff fce7 	bl	80018e0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d918      	bls.n	8001f4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d011      	beq.n	8001f4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e007      	b.n	8001f5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d1d8      	bne.n	8001f0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d12e      	bne.n	8001fe8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f9a:	f7ff fca1 	bl	80018e0 <HAL_GetTick>
 8001f9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fa0:	e01b      	b.n	8001fda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fa2:	f7ff fc9d 	bl	80018e0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d914      	bls.n	8001fda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10d      	bne.n	8001fda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e007      	b.n	8001fea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d0dc      	beq.n	8001fa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002004:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002008:	2b00      	cmp	r3, #0
 800200a:	d127      	bne.n	800205c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002022:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002026:	d115      	bne.n	8002054 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800202c:	2b00      	cmp	r3, #0
 800202e:	d111      	bne.n	8002054 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7fe f879 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800205a:	e004      	b.n	8002066 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fe13 	bl	8001ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fe02 	bl	8001cba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4906      	ldr	r1, [pc, #24]	@ (8002158 <__NVIC_EnableIRQ+0x34>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff2d 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff42 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff35 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e043      	b.n	800237a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <HAL_DMA_Init+0xa8>)
 80022fa:	4413      	add	r3, r2
 80022fc:	4a22      	ldr	r2, [pc, #136]	@ (8002388 <HAL_DMA_Init+0xac>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	009a      	lsls	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_DMA_Init+0xb0>)
 800230e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002326:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800232a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	bffdfff8 	.word	0xbffdfff8
 8002388:	cccccccd 	.word	0xcccccccd
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Start_IT+0x20>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e04b      	b.n	8002448 <HAL_DMA_Start_IT+0xb8>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d13a      	bne.n	800243a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f9eb 	bl	80027c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 020e 	orr.w	r2, r2, #14
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e00f      	b.n	8002428 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0204 	bic.w	r2, r2, #4
 8002416:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 020a 	orr.w	r2, r2, #10
 8002426:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e005      	b.n	8002446 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d008      	beq.n	800247a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2204      	movs	r2, #4
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e020      	b.n	80024bc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020e 	bic.w	r2, r2, #14
 8002488:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d005      	beq.n	80024ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e051      	b.n	8002590 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020e 	bic.w	r2, r2, #14
 80024fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_DMA_Abort_IT+0xd4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d029      	beq.n	800256a <HAL_DMA_Abort_IT+0xa2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <HAL_DMA_Abort_IT+0xd8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_Abort_IT+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DMA_Abort_IT+0xdc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_Abort_IT+0x98>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <HAL_DMA_Abort_IT+0xe0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d012      	beq.n	800255a <HAL_DMA_Abort_IT+0x92>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_DMA_Abort_IT+0xe4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x8c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_DMA_Abort_IT+0xe8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_DMA_Abort_IT+0x86>
 8002548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800254c:	e00e      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800254e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002552:	e00b      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002558:	e008      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800255a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800255e:	e005      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002564:	e002      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002566:	2310      	movs	r3, #16
 8002568:	e000      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800256a:	2301      	movs	r3, #1
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_DMA_Abort_IT+0xec>)
 800256e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
    } 
  }
  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020008 	.word	0x40020008
 80025a0:	4002001c 	.word	0x4002001c
 80025a4:	40020030 	.word	0x40020030
 80025a8:	40020044 	.word	0x40020044
 80025ac:	40020058 	.word	0x40020058
 80025b0:	4002006c 	.word	0x4002006c
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	2204      	movs	r2, #4
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d04f      	beq.n	8002680 <HAL_DMA_IRQHandler+0xc8>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a66      	ldr	r2, [pc, #408]	@ (80027a8 <HAL_DMA_IRQHandler+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d029      	beq.n	8002666 <HAL_DMA_IRQHandler+0xae>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_DMA_IRQHandler+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_IRQHandler+0xaa>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a63      	ldr	r2, [pc, #396]	@ (80027b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01a      	beq.n	800265c <HAL_DMA_IRQHandler+0xa4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a62      	ldr	r2, [pc, #392]	@ (80027b4 <HAL_DMA_IRQHandler+0x1fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0x9e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_DMA_IRQHandler+0x200>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x98>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5f      	ldr	r2, [pc, #380]	@ (80027bc <HAL_DMA_IRQHandler+0x204>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_DMA_IRQHandler+0x92>
 8002644:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002648:	e00e      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 800264a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800264e:	e00b      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002650:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002654:	e008      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002656:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800265a:	e005      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 800265c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002660:	e002      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002662:	2340      	movs	r3, #64	@ 0x40
 8002664:	e000      	b.n	8002668 <HAL_DMA_IRQHandler+0xb0>
 8002666:	2304      	movs	r3, #4
 8002668:	4a55      	ldr	r2, [pc, #340]	@ (80027c0 <HAL_DMA_IRQHandler+0x208>)
 800266a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8094 	beq.w	800279e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800267e:	e08e      	b.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2202      	movs	r2, #2
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d056      	beq.n	800273e <HAL_DMA_IRQHandler+0x186>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d051      	beq.n	800273e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020a 	bic.w	r2, r2, #10
 80026b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_DMA_IRQHandler+0x1f0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d029      	beq.n	800271e <HAL_DMA_IRQHandler+0x166>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a37      	ldr	r2, [pc, #220]	@ (80027ac <HAL_DMA_IRQHandler+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_IRQHandler+0x162>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a35      	ldr	r2, [pc, #212]	@ (80027b0 <HAL_DMA_IRQHandler+0x1f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x15c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <HAL_DMA_IRQHandler+0x1fc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0x156>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <HAL_DMA_IRQHandler+0x200>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x150>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_DMA_IRQHandler+0x204>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_DMA_IRQHandler+0x14a>
 80026fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002700:	e00e      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002706:	e00b      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270c:	e008      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800270e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002712:	e005      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 8002714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002718:	e002      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800271a:	2320      	movs	r3, #32
 800271c:	e000      	b.n	8002720 <HAL_DMA_IRQHandler+0x168>
 800271e:	2302      	movs	r3, #2
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <HAL_DMA_IRQHandler+0x208>)
 8002722:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d034      	beq.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800273c:	e02f      	b.n	800279e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2208      	movs	r2, #8
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d023      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
    }
  }
  return;
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
}
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40020008 	.word	0x40020008
 80027ac:	4002001c 	.word	0x4002001c
 80027b0:	40020030 	.word	0x40020030
 80027b4:	40020044 	.word	0x40020044
 80027b8:	40020058 	.word	0x40020058
 80027bc:	4002006c 	.word	0x4002006c
 80027c0:	40020000 	.word	0x40020000

080027c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b08b      	sub	sp, #44	@ 0x2c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	e169      	b.n	8002b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002834:	2201      	movs	r2, #1
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8158 	bne.w	8002b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a9a      	ldr	r2, [pc, #616]	@ (8002ac0 <HAL_GPIO_Init+0x2a0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d05e      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 800285c:	4a98      	ldr	r2, [pc, #608]	@ (8002ac0 <HAL_GPIO_Init+0x2a0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d875      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002862:	4a98      	ldr	r2, [pc, #608]	@ (8002ac4 <HAL_GPIO_Init+0x2a4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d058      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002868:	4a96      	ldr	r2, [pc, #600]	@ (8002ac4 <HAL_GPIO_Init+0x2a4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d86f      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800286e:	4a96      	ldr	r2, [pc, #600]	@ (8002ac8 <HAL_GPIO_Init+0x2a8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d052      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002874:	4a94      	ldr	r2, [pc, #592]	@ (8002ac8 <HAL_GPIO_Init+0x2a8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d869      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800287a:	4a94      	ldr	r2, [pc, #592]	@ (8002acc <HAL_GPIO_Init+0x2ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04c      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 8002880:	4a92      	ldr	r2, [pc, #584]	@ (8002acc <HAL_GPIO_Init+0x2ac>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d863      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002886:	4a92      	ldr	r2, [pc, #584]	@ (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d046      	beq.n	800291a <HAL_GPIO_Init+0xfa>
 800288c:	4a90      	ldr	r2, [pc, #576]	@ (8002ad0 <HAL_GPIO_Init+0x2b0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d85d      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d82a      	bhi.n	80028ec <HAL_GPIO_Init+0xcc>
 8002896:	2b12      	cmp	r3, #18
 8002898:	d859      	bhi.n	800294e <HAL_GPIO_Init+0x12e>
 800289a:	a201      	add	r2, pc, #4	@ (adr r2, 80028a0 <HAL_GPIO_Init+0x80>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	0800291b 	.word	0x0800291b
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	08002907 	.word	0x08002907
 80028ac:	08002949 	.word	0x08002949
 80028b0:	0800294f 	.word	0x0800294f
 80028b4:	0800294f 	.word	0x0800294f
 80028b8:	0800294f 	.word	0x0800294f
 80028bc:	0800294f 	.word	0x0800294f
 80028c0:	0800294f 	.word	0x0800294f
 80028c4:	0800294f 	.word	0x0800294f
 80028c8:	0800294f 	.word	0x0800294f
 80028cc:	0800294f 	.word	0x0800294f
 80028d0:	0800294f 	.word	0x0800294f
 80028d4:	0800294f 	.word	0x0800294f
 80028d8:	0800294f 	.word	0x0800294f
 80028dc:	0800294f 	.word	0x0800294f
 80028e0:	0800294f 	.word	0x0800294f
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002911 	.word	0x08002911
 80028ec:	4a79      	ldr	r2, [pc, #484]	@ (8002ad4 <HAL_GPIO_Init+0x2b4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028f2:	e02c      	b.n	800294e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e029      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	3304      	adds	r3, #4
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e024      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	3308      	adds	r3, #8
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e01f      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	330c      	adds	r3, #12
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e01a      	b.n	8002950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002922:	2304      	movs	r3, #4
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e013      	b.n	8002950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002930:	2308      	movs	r3, #8
 8002932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	611a      	str	r2, [r3, #16]
          break;
 800293a:	e009      	b.n	8002950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800293c:	2308      	movs	r3, #8
 800293e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	615a      	str	r2, [r3, #20]
          break;
 8002946:	e003      	b.n	8002950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x130>
          break;
 800294e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	@ 0xff
 8002954:	d801      	bhi.n	800295a <HAL_GPIO_Init+0x13a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	e001      	b.n	800295e <HAL_GPIO_Init+0x13e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2bff      	cmp	r3, #255	@ 0xff
 8002964:	d802      	bhi.n	800296c <HAL_GPIO_Init+0x14c>
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x152>
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	3b08      	subs	r3, #8
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	210f      	movs	r1, #15
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	431a      	orrs	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80b1 	beq.w	8002b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_GPIO_Init+0x2b8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b8:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_GPIO_Init+0x2bc>)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a40      	ldr	r2, [pc, #256]	@ (8002ae0 <HAL_GPIO_Init+0x2c0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_GPIO_Init+0x1ec>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ae4 <HAL_GPIO_Init+0x2c4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00d      	beq.n	8002a08 <HAL_GPIO_Init+0x1e8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae8 <HAL_GPIO_Init+0x2c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x1e4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3d      	ldr	r2, [pc, #244]	@ (8002aec <HAL_GPIO_Init+0x2cc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_GPIO_Init+0x1e0>
 80029fc:	2303      	movs	r3, #3
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e004      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	4093      	lsls	r3, r2
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1e:	492f      	ldr	r1, [pc, #188]	@ (8002adc <HAL_GPIO_Init+0x2bc>)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	492c      	ldr	r1, [pc, #176]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a46:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4928      	ldr	r1, [pc, #160]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a60:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4922      	ldr	r1, [pc, #136]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	491e      	ldr	r1, [pc, #120]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4918      	ldr	r1, [pc, #96]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a96:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4914      	ldr	r1, [pc, #80]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	490e      	ldr	r1, [pc, #56]	@ (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e021      	b.n	8002b02 <HAL_GPIO_Init+0x2e2>
 8002abe:	bf00      	nop
 8002ac0:	10320000 	.word	0x10320000
 8002ac4:	10310000 	.word	0x10310000
 8002ac8:	10220000 	.word	0x10220000
 8002acc:	10210000 	.word	0x10210000
 8002ad0:	10120000 	.word	0x10120000
 8002ad4:	10110000 	.word	0x10110000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	40010c00 	.word	0x40010c00
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_GPIO_Init+0x304>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4909      	ldr	r1, [pc, #36]	@ (8002b24 <HAL_GPIO_Init+0x304>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f47f ae8e 	bne.w	8002834 <HAL_GPIO_Init+0x14>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	372c      	adds	r7, #44	@ 0x2c
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43d9      	mvns	r1, r3
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	400b      	ands	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	611a      	str	r2, [r3, #16]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e12b      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fccc 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	@ 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f002 fa48 	bl	8005084 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d807      	bhi.n	8002c10 <HAL_I2C_Init+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a80      	ldr	r2, [pc, #512]	@ (8002e04 <HAL_I2C_Init+0x278>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a7d      	ldr	r2, [pc, #500]	@ (8002e08 <HAL_I2C_Init+0x27c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0e7      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a78      	ldr	r2, [pc, #480]	@ (8002e0c <HAL_I2C_Init+0x280>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d802      	bhi.n	8002c60 <HAL_I2C_Init+0xd4>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e009      	b.n	8002c74 <HAL_I2C_Init+0xe8>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a69      	ldr	r2, [pc, #420]	@ (8002e10 <HAL_I2C_Init+0x284>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	3301      	adds	r3, #1
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	495c      	ldr	r1, [pc, #368]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d819      	bhi.n	8002cc8 <HAL_I2C_Init+0x13c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e59      	subs	r1, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ca8:	400b      	ands	r3, r1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_I2C_Init+0x138>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	e051      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x168>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x18e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x196>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b08b      	sub	sp, #44	@ 0x2c
 8002e18:	af06      	add	r7, sp, #24
 8002e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0f1      	b.n	800300a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f007 fcfc 	bl	800a838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2203      	movs	r2, #3
 8002e44:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fbc1 	bl	80065d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	687e      	ldr	r6, [r7, #4]
 8002e5a:	466d      	mov	r5, sp
 8002e5c:	f106 0410 	add.w	r4, r6, #16
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	1d33      	adds	r3, r6, #4
 8002e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	f003 fb8b 	bl	8006588 <USB_CoreInit>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0c2      	b.n	800300a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fbbc 	bl	8006608 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e040      	b.n	8002f18 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	3303      	adds	r3, #3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3338      	adds	r3, #56	@ 0x38
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	333c      	adds	r3, #60	@ 0x3c
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3340      	adds	r3, #64	@ 0x40
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	3301      	adds	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3b9      	bcc.n	8002e96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e044      	b.n	8002fb2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3b5      	bcc.n	8002f28 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	687e      	ldr	r6, [r7, #4]
 8002fc4:	466d      	mov	r5, sp
 8002fc6:	f106 0410 	add.w	r4, r6, #16
 8002fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	602b      	str	r3, [r5, #0]
 8002fd2:	1d33      	adds	r3, r6, #4
 8002fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f003 fb22 	bl	8006620 <USB_DevInit>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00d      	b.n	800300a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f005 fda3 	bl	8008b4e <USB_DevDisconnect>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003012 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_Start+0x16>
 8003024:	2302      	movs	r3, #2
 8003026:	e016      	b.n	8003056 <HAL_PCD_Start+0x44>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fab7 	bl	80065a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800303a:	2101      	movs	r1, #1
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f007 fe6e 	bl	800ad1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f005 fd77 	bl	8008b3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f005 fd79 	bl	8008b62 <USB_ReadInterrupts>
 8003070:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fb1b 	bl	80036b8 <PCD_EP_ISR_Handler>

    return;
 8003082:	e119      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308a:	2b00      	cmp	r3, #0
 800308c:	d013      	beq.n	80030b6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a0:	b292      	uxth	r2, r2
 80030a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f007 fc41 	bl	800a92e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f905 	bl	80032be <HAL_PCD_SetAddress>

    return;
 80030b4:	e100      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030d2:	b292      	uxth	r2, r2
 80030d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030d8:	e0ee      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f6:	b292      	uxth	r2, r2
 80030f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030fc:	e0dc      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d027      	beq.n	8003158 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0204 	bic.w	r2, r2, #4
 800311a:	b292      	uxth	r2, r2
 800311c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0208 	bic.w	r2, r2, #8
 8003132:	b292      	uxth	r2, r2
 8003134:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f007 fc31 	bl	800a9a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003150:	b292      	uxth	r2, r2
 8003152:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003156:	e0af      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8083 	beq.w	800326a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003164:	2300      	movs	r3, #0
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e010      	b.n	800318c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	b292      	uxth	r2, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	3320      	adds	r3, #32
 8003180:	443b      	add	r3, r7
 8003182:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003186:	7ffb      	ldrb	r3, [r7, #31]
 8003188:	3301      	adds	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	2b07      	cmp	r3, #7
 8003190:	d9eb      	bls.n	800316a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	b292      	uxth	r2, r2
 80031a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	b292      	uxth	r2, r2
 80031be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80031c2:	bf00      	nop
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f6      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031de:	b29a      	uxth	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	b292      	uxth	r2, r2
 80031ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	4611      	mov	r1, r2
 80031fc:	7ffa      	ldrb	r2, [r7, #31]
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	440a      	add	r2, r1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	3320      	adds	r3, #32
 8003206:	443b      	add	r3, r7
 8003208:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800320c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	3301      	adds	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	2b07      	cmp	r3, #7
 8003218:	d9ec      	bls.n	80031f4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0208 	orr.w	r2, r2, #8
 800322c:	b292      	uxth	r2, r2
 800322e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003244:	b292      	uxth	r2, r2
 8003246:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0204 	orr.w	r2, r2, #4
 800325c:	b292      	uxth	r2, r2
 800325e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f007 fb82 	bl	800a96c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003268:	e026      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00f      	beq.n	8003294 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003286:	b292      	uxth	r2, r2
 8003288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f007 fb40 	bl	800a912 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003292:	e011      	b.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b0:	b292      	uxth	r2, r2
 80032b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80032b6:	bf00      	nop
  }
}
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_PCD_SetAddress+0x1a>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e013      	b.n	8003300 <HAL_PCD_SetAddress+0x42>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f005 fc0f 	bl	8008b14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	461a      	mov	r2, r3
 8003316:	4603      	mov	r3, r0
 8003318:	70fb      	strb	r3, [r7, #3]
 800331a:	460b      	mov	r3, r1
 800331c:	803b      	strh	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0e      	bge.n	800334c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	705a      	strb	r2, [r3, #1]
 800334a:	e00e      	b.n	800336a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003376:	883a      	ldrh	r2, [r7, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	78ba      	ldrb	r2, [r7, #2]
 8003380:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003382:	78bb      	ldrb	r3, [r7, #2]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d102      	bne.n	800338e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_PCD_EP_Open+0x94>
 8003398:	2302      	movs	r3, #2
 800339a:	e00e      	b.n	80033ba <HAL_PCD_EP_Open+0xb2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 f958 	bl	8006660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80033b8:	7afb      	ldrb	r3, [r7, #11]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	da0e      	bge.n	80033f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	705a      	strb	r2, [r3, #1]
 80033f2:	e00e      	b.n	8003412 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	b2da      	uxtb	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_PCD_EP_Close+0x6a>
 8003428:	2302      	movs	r3, #2
 800342a:	e00e      	b.n	800344a <HAL_PCD_EP_Close+0x88>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fcd0 	bl	8006de0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	460b      	mov	r3, r1
 8003460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f003 0207 	and.w	r2, r3, #7
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	b2da      	uxtb	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 fe87 	bl	80071b8 <USB_EPStartXfer>

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 0207 	and.w	r2, r3, #7
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	460b      	mov	r3, r1
 80034f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2201      	movs	r2, #1
 800352c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	b2da      	uxtb	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6979      	ldr	r1, [r7, #20]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fe39 	bl	80071b8 <USB_EPStartXfer>

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 0207 	and.w	r2, r3, #7
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d901      	bls.n	800356e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e04c      	b.n	8003608 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800356e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	da0e      	bge.n	8003594 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	705a      	strb	r2, [r3, #1]
 8003592:	e00c      	b.n	80035ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_PCD_EP_SetStall+0x7e>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e01c      	b.n	8003608 <HAL_PCD_EP_SetStall+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 f99c 	bl	800891a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f005 fac1 	bl	8008b80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	429a      	cmp	r2, r3
 8003628:	d901      	bls.n	800362e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e040      	b.n	80036b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800362e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003632:	2b00      	cmp	r3, #0
 8003634:	da0e      	bge.n	8003654 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	705a      	strb	r2, [r3, #1]
 8003652:	e00e      	b.n	8003672 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_PCD_EP_ClrStall+0x82>
 800368e:	2302      	movs	r3, #2
 8003690:	e00e      	b.n	80036b0 <HAL_PCD_EP_ClrStall+0xa0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f005 f98a 	bl	80089ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b096      	sub	sp, #88	@ 0x58
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036c0:	e3be      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80036ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80036dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 8178 	bne.w	80039d6 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d151      	bne.n	8003796 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	81fb      	strh	r3, [r7, #14]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003712:	b29b      	uxth	r3, r3
 8003714:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3328      	adds	r3, #40	@ 0x28
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	3302      	adds	r3, #2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	441a      	add	r2, r3
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f007 f8c0 	bl	800a8de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 836a 	beq.w	8003e40 <PCD_EP_ISR_Handler+0x788>
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 8365 	bne.w	8003e40 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003782:	b2da      	uxtb	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003794:	e354      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800379c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d034      	beq.n	800381e <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	3306      	adds	r3, #6
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80037ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80037ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f005 fa14 	bl	8008c20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003804:	4013      	ands	r3, r2
 8003806:	823b      	strh	r3, [r7, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	8a3a      	ldrh	r2, [r7, #16]
 800380e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003812:	b292      	uxth	r2, r2
 8003814:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f007 f834 	bl	800a884 <HAL_PCD_SetupStageCallback>
 800381c:	e310      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800381e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003822:	2b00      	cmp	r3, #0
 8003824:	f280 830c 	bge.w	8003e40 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29a      	uxth	r2, r3
 8003830:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003834:	4013      	ands	r3, r2
 8003836:	83fb      	strh	r3, [r7, #30]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	8bfa      	ldrh	r2, [r7, #30]
 800383e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003842:	b292      	uxth	r2, r2
 8003844:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	3306      	adds	r3, #6
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800386e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003870:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d019      	beq.n	80038ae <PCD_EP_ISR_Handler+0x1f6>
 800387a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d015      	beq.n	80038ae <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003888:	6959      	ldr	r1, [r3, #20]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003892:	b29b      	uxth	r3, r3
 8003894:	f005 f9c4 	bl	8008c20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	441a      	add	r2, r3
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038a6:	2100      	movs	r1, #0
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f006 fffd 	bl	800a8a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80038b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 82bd 	bne.w	8003e40 <PCD_EP_ISR_Handler+0x788>
 80038c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80038ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038d2:	f000 82b5 	beq.w	8003e40 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	4413      	add	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003900:	b29a      	uxth	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b3e      	cmp	r3, #62	@ 0x3e
 800390c:	d91d      	bls.n	800394a <PCD_EP_ISR_Handler+0x292>
 800390e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
 8003916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <PCD_EP_ISR_Handler+0x270>
 8003922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003924:	3b01      	subs	r3, #1
 8003926:	647b      	str	r3, [r7, #68]	@ 0x44
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29a      	uxth	r2, r3
 800392e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003930:	b29b      	uxth	r3, r3
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	b29b      	uxth	r3, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	b29b      	uxth	r3, r3
 800393a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003942:	b29a      	uxth	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e026      	b.n	8003998 <PCD_EP_ISR_Handler+0x2e0>
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <PCD_EP_ISR_Handler+0x2b0>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003960:	b29a      	uxth	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	e017      	b.n	8003998 <PCD_EP_ISR_Handler+0x2e0>
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <PCD_EP_ISR_Handler+0x2ca>
 800397c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397e:	3301      	adds	r3, #1
 8003980:	647b      	str	r3, [r7, #68]	@ 0x44
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29a      	uxth	r2, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398a:	b29b      	uxth	r3, r3
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	b29b      	uxth	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b29a      	uxth	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a8:	827b      	strh	r3, [r7, #18]
 80039aa:	8a7b      	ldrh	r3, [r7, #18]
 80039ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80039b0:	827b      	strh	r3, [r7, #18]
 80039b2:	8a7b      	ldrh	r3, [r7, #18]
 80039b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039b8:	827b      	strh	r3, [r7, #18]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	8a7b      	ldrh	r3, [r7, #18]
 80039c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	8013      	strh	r3, [r2, #0]
 80039d4:	e234      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f280 80fc 	bge.w	8003bec <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003a22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a26:	b292      	uxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a2a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	7b1b      	ldrb	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d125      	bne.n	8003a94 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3306      	adds	r3, #6
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8092 	beq.w	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	6959      	ldr	r1, [r3, #20]
 8003a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a88:	88da      	ldrh	r2, [r3, #6]
 8003a8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a8e:	f005 f8c7 	bl	8008c20 <USB_ReadPMA>
 8003a92:	e086      	b.n	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a96:	78db      	ldrb	r3, [r3, #3]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d10a      	bne.n	8003ab2 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9d9 	bl	8003e5c <HAL_PCD_EP_DB_Receive>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003ab0:	e077      	b.n	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003acc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d024      	beq.n	8003b5a <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	3302      	adds	r3, #2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003b3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02e      	beq.n	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4a:	6959      	ldr	r1, [r3, #20]
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4e:	891a      	ldrh	r2, [r3, #8]
 8003b50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b54:	f005 f864 	bl	8008c20 <USB_ReadPMA>
 8003b58:	e023      	b.n	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3306      	adds	r3, #6
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003b86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b94:	6959      	ldr	r1, [r3, #20]
 8003b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b98:	895a      	ldrh	r2, [r3, #10]
 8003b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b9e:	f005 f83f 	bl	8008c20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003baa:	441a      	add	r2, r3
 8003bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bb8:	441a      	add	r2, r3
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <PCD_EP_ISR_Handler+0x51a>
 8003bc6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d206      	bcs.n	8003be0 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f006 fe65 	bl	800a8a8 <HAL_PCD_DataOutStageCallback>
 8003bde:	e005      	b.n	8003bec <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fae6 	bl	80071b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8123 	beq.w	8003e40 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c28:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	78db      	ldrb	r3, [r3, #3]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 80a2 	bne.w	8003d98 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	7b1b      	ldrb	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8093 	beq.w	8003d8a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d126      	bne.n	8003cc6 <PCD_EP_ISR_Handler+0x60e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	4413      	add	r3, r2
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011a      	lsls	r2, r3, #4
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	4413      	add	r3, r2
 8003c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e061      	b.n	8003d8a <PCD_EP_ISR_Handler+0x6d2>
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d15d      	bne.n	8003d8a <PCD_EP_ISR_Handler+0x6d2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	4413      	add	r3, r2
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	011a      	lsls	r2, r3, #4
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	4413      	add	r3, r2
 8003cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	e045      	b.n	8003d8a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d126      	bne.n	8003d5a <PCD_EP_ISR_Handler+0x6a2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	4413      	add	r3, r2
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	011a      	lsls	r2, r3, #4
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	e017      	b.n	8003d8a <PCD_EP_ISR_Handler+0x6d2>
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d113      	bne.n	8003d8a <PCD_EP_ISR_Handler+0x6d2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d70:	4413      	add	r3, r2
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	011a      	lsls	r2, r3, #4
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d86:	2200      	movs	r2, #0
 8003d88:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f006 fda4 	bl	800a8de <HAL_PCD_DataInStageCallback>
 8003d96:	e053      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d146      	bne.n	8003e32 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	3302      	adds	r3, #2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dcc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d907      	bls.n	8003dec <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de8:	619a      	str	r2, [r3, #24]
 8003dea:	e002      	b.n	8003df2 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	2200      	movs	r2, #0
 8003df0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f006 fd6c 	bl	800a8de <HAL_PCD_DataInStageCallback>
 8003e06:	e01b      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e10:	441a      	add	r2, r3
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e1e:	441a      	add	r2, r3
 8003e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e22:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 f9c4 	bl	80071b8 <USB_EPStartXfer>
 8003e30:	e006      	b.n	8003e40 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e36:	461a      	mov	r2, r3
 8003e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f91b 	bl	8004076 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f6ff ac38 	blt.w	80036c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3758      	adds	r7, #88	@ 0x58
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d07e      	beq.n	8003f72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	8b7b      	ldrh	r3, [r7, #26]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d306      	bcc.n	8003eb6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	8b7b      	ldrh	r3, [r7, #26]
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	619a      	str	r2, [r3, #24]
 8003eb4:	e002      	b.n	8003ebc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d123      	bne.n	8003f0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	833b      	strh	r3, [r7, #24]
 8003ee0:	8b3b      	ldrh	r3, [r7, #24]
 8003ee2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ee6:	833b      	strh	r3, [r7, #24]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	8b3b      	ldrh	r3, [r7, #24]
 8003ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01f      	beq.n	8003f56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f30:	82fb      	strh	r3, [r7, #22]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	8afb      	ldrh	r3, [r7, #22]
 8003f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f56:	8b7b      	ldrh	r3, [r7, #26]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8087 	beq.w	800406c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6959      	ldr	r1, [r3, #20]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	891a      	ldrh	r2, [r3, #8]
 8003f6a:	8b7b      	ldrh	r3, [r7, #26]
 8003f6c:	f004 fe58 	bl	8008c20 <USB_ReadPMA>
 8003f70:	e07c      	b.n	800406c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	3306      	adds	r3, #6
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	8b7b      	ldrh	r3, [r7, #26]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d306      	bcc.n	8003fb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	8b7b      	ldrh	r3, [r7, #26]
 8003fac:	1ad2      	subs	r2, r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	e002      	b.n	8003fba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d123      	bne.n	800400a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	83fb      	strh	r3, [r7, #30]
 8003fde:	8bfb      	ldrh	r3, [r7, #30]
 8003fe0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fe4:	83fb      	strh	r3, [r7, #30]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11f      	bne.n	8004054 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	83bb      	strh	r3, [r7, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	8bbb      	ldrh	r3, [r7, #28]
 8004040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800404c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004050:	b29b      	uxth	r3, r3
 8004052:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004054:	8b7b      	ldrh	r3, [r7, #26]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6959      	ldr	r1, [r3, #20]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	895a      	ldrh	r2, [r3, #10]
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	f004 fdda 	bl	8008c20 <USB_ReadPMA>
    }
  }

  return count;
 800406c:	8b7b      	ldrh	r3, [r7, #26]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b0a4      	sub	sp, #144	@ 0x90
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 81dd 	beq.w	800444a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	3302      	adds	r3, #2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d907      	bls.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	619a      	str	r2, [r3, #24]
 80040d6:	e002      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 80b9 	bne.w	800425a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d126      	bne.n	800413e <HAL_PCD_EP_DB_Transmit+0xc8>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	4413      	add	r3, r2
 8004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	011a      	lsls	r2, r3, #4
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	4413      	add	r3, r2
 8004112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004122:	b29a      	uxth	r2, r3
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004136:	b29a      	uxth	r2, r3
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	e01a      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0xfe>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d116      	bne.n	8004174 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	4413      	add	r3, r2
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	011a      	lsls	r2, r3, #4
 8004164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004166:	4413      	add	r3, r2
 8004168:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800416c:	633b      	str	r3, [r7, #48]	@ 0x30
 800416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004170:	2200      	movs	r2, #0
 8004172:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d126      	bne.n	80041d0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	011a      	lsls	r2, r3, #4
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e017      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d113      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	4413      	add	r3, r2
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	011a      	lsls	r2, r3, #4
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	4413      	add	r3, r2
 80041f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2200      	movs	r2, #0
 80041fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f006 fb69 	bl	800a8de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 82fc 	beq.w	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004232:	82fb      	strh	r3, [r7, #22]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	8afb      	ldrh	r3, [r7, #22]
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800424c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
 8004258:	e2da      	b.n	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d021      	beq.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 82ae 	bne.w	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042bc:	441a      	add	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ca:	441a      	add	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d30b      	bcc.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	621a      	str	r2, [r3, #32]
 80042f2:	e017      	b.n	8004324 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d108      	bne.n	800430e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80042fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800430c:	e00a      	b.n	8004324 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d165      	bne.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x382>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004340:	4413      	add	r3, r2
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	011a      	lsls	r2, r3, #4
 800434a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434c:	4413      	add	r3, r2
 800434e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800435e:	b29a      	uxth	r2, r3
 8004360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004368:	2b3e      	cmp	r3, #62	@ 0x3e
 800436a:	d91d      	bls.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x332>
 800436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_PCD_EP_DB_Transmit+0x310>
 8004380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004382:	3b01      	subs	r3, #1
 8004384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29a      	uxth	r2, r3
 800438c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438e:	b29b      	uxth	r3, r3
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	b29b      	uxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	b29b      	uxth	r3, r3
 8004398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e044      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x350>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e035      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80043da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043dc:	3301      	adds	r3, #1
 80043de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e01c      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d118      	bne.n	8004432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	647b      	str	r3, [r7, #68]	@ 0x44
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440e:	b29b      	uxth	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004414:	4413      	add	r3, r2
 8004416:	647b      	str	r3, [r7, #68]	@ 0x44
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	011a      	lsls	r2, r3, #4
 800441e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004420:	4413      	add	r3, r2
 8004422:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004426:	643b      	str	r3, [r7, #64]	@ 0x40
 8004428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800442c:	b29a      	uxth	r2, r3
 800442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004430:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6959      	ldr	r1, [r3, #20]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	891a      	ldrh	r2, [r3, #8]
 800443e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004442:	b29b      	uxth	r3, r3
 8004444:	f004 fba7 	bl	8008b96 <USB_WritePMA>
 8004448:	e1e2      	b.n	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	3306      	adds	r3, #6
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004472:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800447e:	429a      	cmp	r2, r3
 8004480:	d307      	bcc.n	8004492 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	619a      	str	r2, [r3, #24]
 8004490:	e002      	b.n	8004498 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 80c0 	bne.w	8004622 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d126      	bne.n	80044f8 <HAL_PCD_EP_DB_Transmit+0x482>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044be:	4413      	add	r3, r2
 80044c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	011a      	lsls	r2, r3, #4
 80044c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044ca:	4413      	add	r3, r2
 80044cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	e01a      	b.n	800452e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d116      	bne.n	800452e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	667b      	str	r3, [r7, #100]	@ 0x64
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004514:	4413      	add	r3, r2
 8004516:	667b      	str	r3, [r7, #100]	@ 0x64
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004520:	4413      	add	r3, r2
 8004522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004526:	663b      	str	r3, [r7, #96]	@ 0x60
 8004528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800452a:	2200      	movs	r2, #0
 800452c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	677b      	str	r3, [r7, #116]	@ 0x74
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d12b      	bne.n	8004594 <HAL_PCD_EP_DB_Transmit+0x51e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004550:	4413      	add	r3, r2
 8004552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	011a      	lsls	r2, r3, #4
 800455a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455c:	4413      	add	r3, r2
 800455e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004572:	b29a      	uxth	r2, r3
 8004574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29a      	uxth	r2, r3
 800458c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e017      	b.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d113      	bne.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045aa:	4413      	add	r3, r2
 80045ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	011a      	lsls	r2, r3, #4
 80045b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b6:	4413      	add	r3, r2
 80045b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80045be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045c0:	2200      	movs	r2, #0
 80045c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f006 f987 	bl	800a8de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 811a 	bne.w	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	441a      	add	r2, r3
 8004608:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800460c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461c:	b29b      	uxth	r3, r3
 800461e:	8013      	strh	r3, [r2, #0]
 8004620:	e0f6      	b.n	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d121      	bne.n	8004670 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800465c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800466c:	b29b      	uxth	r3, r3
 800466e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004676:	2b01      	cmp	r3, #1
 8004678:	f040 80ca 	bne.w	8004810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004684:	441a      	add	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004692:	441a      	add	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d30b      	bcc.n	80046bc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	621a      	str	r2, [r3, #32]
 80046ba:	e017      	b.n	80046ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80046c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046d4:	e00a      	b.n	80046ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d165      	bne.n	80047c6 <HAL_PCD_EP_DB_Transmit+0x750>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004708:	b29b      	uxth	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800470e:	4413      	add	r3, r2
 8004710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	011a      	lsls	r2, r3, #4
 8004718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800471a:	4413      	add	r3, r2
 800471c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472c:	b29a      	uxth	r2, r3
 800472e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004736:	2b3e      	cmp	r3, #62	@ 0x3e
 8004738:	d91d      	bls.n	8004776 <HAL_PCD_EP_DB_Transmit+0x700>
 800473a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_PCD_EP_DB_Transmit+0x6de>
 800474e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004750:	3b01      	subs	r3, #1
 8004752:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29a      	uxth	r2, r3
 800475a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800475c:	b29b      	uxth	r3, r3
 800475e:	029b      	lsls	r3, r3, #10
 8004760:	b29b      	uxth	r3, r3
 8004762:	4313      	orrs	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476e:	b29a      	uxth	r2, r3
 8004770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e041      	b.n	80047fa <HAL_PCD_EP_DB_Transmit+0x784>
 8004776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_PCD_EP_DB_Transmit+0x71e>
 800477e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478c:	b29a      	uxth	r2, r3
 800478e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e032      	b.n	80047fa <HAL_PCD_EP_DB_Transmit+0x784>
 8004794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_PCD_EP_DB_Transmit+0x738>
 80047a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047aa:	3301      	adds	r3, #1
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e019      	b.n	80047fa <HAL_PCD_EP_DB_Transmit+0x784>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d115      	bne.n	80047fa <HAL_PCD_EP_DB_Transmit+0x784>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047dc:	4413      	add	r3, r2
 80047de:	657b      	str	r3, [r7, #84]	@ 0x54
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	011a      	lsls	r2, r3, #4
 80047e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6959      	ldr	r1, [r3, #20]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	895a      	ldrh	r2, [r3, #10]
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480a:	b29b      	uxth	r3, r3
 800480c:	f004 f9c3 	bl	8008b96 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800482a:	82bb      	strh	r3, [r7, #20]
 800482c:	8abb      	ldrh	r3, [r7, #20]
 800482e:	f083 0310 	eor.w	r3, r3, #16
 8004832:	82bb      	strh	r3, [r7, #20]
 8004834:	8abb      	ldrh	r3, [r7, #20]
 8004836:	f083 0320 	eor.w	r3, r3, #32
 800483a:	82bb      	strh	r3, [r7, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	8abb      	ldrh	r3, [r7, #20]
 800484c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3790      	adds	r7, #144	@ 0x90
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	817b      	strh	r3, [r7, #10]
 8004878:	4613      	mov	r3, r2
 800487a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004888:	897b      	ldrh	r3, [r7, #10]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e009      	b.n	80048b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a0:	897a      	ldrh	r2, [r7, #10]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048b4:	893b      	ldrh	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	80da      	strh	r2, [r3, #6]
 80048c8:	e00b      	b.n	80048e2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2201      	movs	r2, #1
 80048ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	0c1b      	lsrs	r3, r3, #16
 80048dc:	b29a      	uxth	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e272      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8087 	beq.w	8004a1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004910:	4b92      	ldr	r3, [pc, #584]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b04      	cmp	r3, #4
 800491a:	d00c      	beq.n	8004936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800491c:	4b8f      	ldr	r3, [pc, #572]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d112      	bne.n	800494e <HAL_RCC_OscConfig+0x5e>
 8004928:	4b8c      	ldr	r3, [pc, #560]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004934:	d10b      	bne.n	800494e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004936:	4b89      	ldr	r3, [pc, #548]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d06c      	beq.n	8004a1c <HAL_RCC_OscConfig+0x12c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d168      	bne.n	8004a1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e24c      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x76>
 8004958:	4b80      	ldr	r3, [pc, #512]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7f      	ldr	r2, [pc, #508]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e02e      	b.n	80049c4 <HAL_RCC_OscConfig+0xd4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x98>
 800496e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a7a      	ldr	r2, [pc, #488]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b78      	ldr	r3, [pc, #480]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a77      	ldr	r2, [pc, #476]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e01d      	b.n	80049c4 <HAL_RCC_OscConfig+0xd4>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0xbc>
 8004992:	4b72      	ldr	r3, [pc, #456]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a71      	ldr	r2, [pc, #452]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6e      	ldr	r2, [pc, #440]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0xd4>
 80049ac:	4b6b      	ldr	r3, [pc, #428]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	4b68      	ldr	r3, [pc, #416]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a67      	ldr	r2, [pc, #412]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fc ff88 	bl	80018e0 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fc ff84 	bl	80018e0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	@ 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e200      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0xe4>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fc ff74 	bl	80018e0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fc ff70 	bl	80018e0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	@ 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1ec      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x10c>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d063      	beq.n	8004af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a36:	4b49      	ldr	r3, [pc, #292]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d11c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x18c>
 8004a42:	4b46      	ldr	r3, [pc, #280]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d116      	bne.n	8004a7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4e:	4b43      	ldr	r3, [pc, #268]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_RCC_OscConfig+0x176>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d001      	beq.n	8004a66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e1c0      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a66:	4b3d      	ldr	r3, [pc, #244]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4939      	ldr	r1, [pc, #228]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	e03a      	b.n	8004af2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a84:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <HAL_RCC_OscConfig+0x270>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fc ff29 	bl	80018e0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fc ff25 	bl	80018e0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1a1      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4927      	ldr	r1, [pc, #156]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b26      	ldr	r3, [pc, #152]	@ (8004b60 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fc ff08 	bl	80018e0 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7fc ff04 	bl	80018e0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e180      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d03a      	beq.n	8004b74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d019      	beq.n	8004b3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b06:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f7fc fee8 	bl	80018e0 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fc fee4 	bl	80018e0 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e160      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <HAL_RCC_OscConfig+0x26c>)
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f000 face 	bl	80050d4 <RCC_Delay>
 8004b38:	e01c      	b.n	8004b74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b40:	f7fc fece 	bl	80018e0 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b46:	e00f      	b.n	8004b68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fc feca 	bl	80018e0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d908      	bls.n	8004b68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e146      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	42420000 	.word	0x42420000
 8004b64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	4b92      	ldr	r3, [pc, #584]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e9      	bne.n	8004b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a6 	beq.w	8004cce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b86:	4b8b      	ldr	r3, [pc, #556]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4a87      	ldr	r2, [pc, #540]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	61d3      	str	r3, [r2, #28]
 8004b9e:	4b85      	ldr	r3, [pc, #532]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b82      	ldr	r3, [pc, #520]	@ (8004db8 <HAL_RCC_OscConfig+0x4c8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b7f      	ldr	r3, [pc, #508]	@ (8004db8 <HAL_RCC_OscConfig+0x4c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8004db8 <HAL_RCC_OscConfig+0x4c8>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fc fe8b 	bl	80018e0 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fe87 	bl	80018e0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	@ 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e103      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b75      	ldr	r3, [pc, #468]	@ (8004db8 <HAL_RCC_OscConfig+0x4c8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x312>
 8004bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6213      	str	r3, [r2, #32]
 8004c00:	e02d      	b.n	8004c5e <HAL_RCC_OscConfig+0x36e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x334>
 8004c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4a69      	ldr	r2, [pc, #420]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	6213      	str	r3, [r2, #32]
 8004c16:	4b67      	ldr	r3, [pc, #412]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a66      	ldr	r2, [pc, #408]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	6213      	str	r3, [r2, #32]
 8004c22:	e01c      	b.n	8004c5e <HAL_RCC_OscConfig+0x36e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0x356>
 8004c2c:	4b61      	ldr	r3, [pc, #388]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a60      	ldr	r2, [pc, #384]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6213      	str	r3, [r2, #32]
 8004c38:	4b5e      	ldr	r3, [pc, #376]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6213      	str	r3, [r2, #32]
 8004c44:	e00b      	b.n	8004c5e <HAL_RCC_OscConfig+0x36e>
 8004c46:	4b5b      	ldr	r3, [pc, #364]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	4a5a      	ldr	r2, [pc, #360]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6213      	str	r3, [r2, #32]
 8004c52:	4b58      	ldr	r3, [pc, #352]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4a57      	ldr	r2, [pc, #348]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c66:	f7fc fe3b 	bl	80018e0 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fc fe37 	bl	80018e0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0b1      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b4b      	ldr	r3, [pc, #300]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCC_OscConfig+0x37e>
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c92:	f7fc fe25 	bl	80018e0 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fc fe21 	bl	80018e0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e09b      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb0:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a3b      	ldr	r2, [pc, #236]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8087 	beq.w	8004de6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd8:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d061      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d146      	bne.n	8004d7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b33      	ldr	r3, [pc, #204]	@ (8004dbc <HAL_RCC_OscConfig+0x4cc>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fdf5 	bl	80018e0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fc fdf1 	bl	80018e0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e06d      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0c:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d108      	bne.n	8004d34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4921      	ldr	r1, [pc, #132]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d34:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a19      	ldr	r1, [r3, #32]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	430b      	orrs	r3, r1
 8004d46:	491b      	ldr	r1, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <HAL_RCC_OscConfig+0x4cc>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fc fdc5 	bl	80018e0 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fc fdc1 	bl	80018e0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e03d      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x46a>
 8004d78:	e035      	b.n	8004de6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <HAL_RCC_OscConfig+0x4cc>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fc fdae 	bl	80018e0 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fc fdaa 	bl	80018e0 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e026      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x498>
 8004da6:	e01e      	b.n	8004de6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e019      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCC_OscConfig+0x500>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000

08004df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0d0      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e08:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d910      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b67      	ldr	r3, [pc, #412]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0207 	bic.w	r2, r3, #7
 8004e1e:	4965      	ldr	r1, [pc, #404]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b63      	ldr	r3, [pc, #396]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0b8      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e50:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4a58      	ldr	r2, [pc, #352]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e68:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a52      	ldr	r2, [pc, #328]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b50      	ldr	r3, [pc, #320]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	494d      	ldr	r1, [pc, #308]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d040      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b47      	ldr	r3, [pc, #284]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d115      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e073      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e06b      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed2:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4936      	ldr	r1, [pc, #216]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee4:	f7fc fcfc 	bl	80018e0 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fc fcf8 	bl	80018e0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e053      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 020c 	and.w	r2, r3, #12
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d1eb      	bne.n	8004eec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f14:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d210      	bcs.n	8004f44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 0207 	bic.w	r2, r3, #7
 8004f2a:	4922      	ldr	r1, [pc, #136]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b20      	ldr	r3, [pc, #128]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e032      	b.n	8004faa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f6e:	4b12      	ldr	r3, [pc, #72]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	490e      	ldr	r1, [pc, #56]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f82:	f000 f821 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8004f86:	4602      	mov	r2, r0
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	490a      	ldr	r1, [pc, #40]	@ (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	5ccb      	ldrb	r3, [r1, r3]
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	4a09      	ldr	r2, [pc, #36]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fc fc5a 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40022000 	.word	0x40022000
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	0800ae44 	.word	0x0800ae44
 8004fc0:	20000004 	.word	0x20000004
 8004fc4:	20000008 	.word	0x20000008

08004fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <HAL_RCC_GetSysClockFreq+0x94>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d002      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x36>
 8004ff6:	e027      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ff8:	4b19      	ldr	r3, [pc, #100]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ffa:	613b      	str	r3, [r7, #16]
      break;
 8004ffc:	e027      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	0c9b      	lsrs	r3, r3, #18
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005008:	5cd3      	ldrb	r3, [r2, r3]
 800500a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005016:	4b11      	ldr	r3, [pc, #68]	@ (800505c <HAL_RCC_GetSysClockFreq+0x94>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	0c5b      	lsrs	r3, r3, #17
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	4a11      	ldr	r2, [pc, #68]	@ (8005068 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x98>)
 800502a:	fb03 f202 	mul.w	r2, r3, r2
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e004      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0c      	ldr	r2, [pc, #48]	@ (800506c <HAL_RCC_GetSysClockFreq+0xa4>)
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	613b      	str	r3, [r7, #16]
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x98>)
 800504a:	613b      	str	r3, [r7, #16]
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	693b      	ldr	r3, [r7, #16]
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	007a1200 	.word	0x007a1200
 8005064:	0800ae5c 	.word	0x0800ae5c
 8005068:	0800ae6c 	.word	0x0800ae6c
 800506c:	003d0900 	.word	0x003d0900

08005070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b02      	ldr	r3, [pc, #8]	@ (8005080 <HAL_RCC_GetHCLKFreq+0x10>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	20000004 	.word	0x20000004

08005084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005088:	f7ff fff2 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4903      	ldr	r1, [pc, #12]	@ (80050a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0800ae54 	.word	0x0800ae54

080050ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050b0:	f7ff ffde 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	0adb      	lsrs	r3, r3, #11
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4903      	ldr	r1, [pc, #12]	@ (80050d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	0800ae54 	.word	0x0800ae54

080050d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <RCC_Delay+0x34>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <RCC_Delay+0x38>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0a5b      	lsrs	r3, r3, #9
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050f0:	bf00      	nop
  }
  while (Delay --);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f9      	bne.n	80050f0 <RCC_Delay+0x1c>
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	20000004 	.word	0x20000004
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d07d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005130:	4b4f      	ldr	r3, [pc, #316]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b4c      	ldr	r3, [pc, #304]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4a4b      	ldr	r2, [pc, #300]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005146:	61d3      	str	r3, [r2, #28]
 8005148:	4b49      	ldr	r3, [pc, #292]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b46      	ldr	r3, [pc, #280]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d118      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005164:	4b43      	ldr	r3, [pc, #268]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a42      	ldr	r2, [pc, #264]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800516e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005170:	f7fc fbb6 	bl	80018e0 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	e008      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005178:	f7fc fbb2 	bl	80018e0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	@ 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e06d      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005196:	4b36      	ldr	r3, [pc, #216]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d027      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051be:	4b2e      	ldr	r3, [pc, #184]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ca:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fc fb81 	bl	80018e0 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fc fb7d 	bl	80018e0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e036      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005204:	4b1a      	ldr	r3, [pc, #104]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4917      	ldr	r1, [pc, #92]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	4313      	orrs	r3, r2
 8005214:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	4a13      	ldr	r2, [pc, #76]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005226:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005234:	4b0e      	ldr	r3, [pc, #56]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	490b      	ldr	r1, [pc, #44]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005252:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4904      	ldr	r1, [pc, #16]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
 8005278:	42420440 	.word	0x42420440

0800527c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e041      	b.n	8005312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc f994 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f000 fa74 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e03a      	b.n	80053aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <HAL_TIM_Base_Start_IT+0x98>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x58>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d009      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x58>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x58>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <HAL_TIM_Base_Start_IT+0xa0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d111      	bne.n	8005398 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b06      	cmp	r3, #6
 8005384:	d010      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	e007      	b.n	80053a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800

080053c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d122      	bne.n	800541c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d11b      	bne.n	800541c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0202 	mvn.w	r2, #2
 80053ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9b4 	bl	8005770 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9a7 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f9b6 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d122      	bne.n	8005470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f98a 	bl	8005770 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f97d 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f98c 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b08      	cmp	r3, #8
 800547c:	d122      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d11b      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0208 	mvn.w	r2, #8
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2204      	movs	r2, #4
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f960 	bl	8005770 <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f953 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f962 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d122      	bne.n	8005518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0210 	mvn.w	r2, #16
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2208      	movs	r2, #8
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f936 	bl	8005770 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f929 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f938 	bl	8005782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0201 	mvn.w	r2, #1
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fa ff5c 	bl	80003fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554e:	2b80      	cmp	r3, #128	@ 0x80
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555c:	2b80      	cmp	r3, #128	@ 0x80
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fa7b 	bl	8005a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fc 	bl	8005794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0220 	mvn.w	r2, #32
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa46 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_ConfigClockSource+0x1c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0b4      	b.n	8005756 <HAL_TIM_ConfigClockSource+0x186>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005624:	d03e      	beq.n	80056a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562a:	f200 8087 	bhi.w	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	f000 8086 	beq.w	8005742 <HAL_TIM_ConfigClockSource+0x172>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563a:	d87f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b70      	cmp	r3, #112	@ 0x70
 800563e:	d01a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xa6>
 8005640:	2b70      	cmp	r3, #112	@ 0x70
 8005642:	d87b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b60      	cmp	r3, #96	@ 0x60
 8005646:	d050      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x11a>
 8005648:	2b60      	cmp	r3, #96	@ 0x60
 800564a:	d877      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b50      	cmp	r3, #80	@ 0x50
 800564e:	d03c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xfa>
 8005650:	2b50      	cmp	r3, #80	@ 0x50
 8005652:	d873      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d058      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x13a>
 8005658:	2b40      	cmp	r3, #64	@ 0x40
 800565a:	d86f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d064      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005660:	2b30      	cmp	r3, #48	@ 0x30
 8005662:	d86b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d060      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d867      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05c      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b10      	cmp	r3, #16
 8005672:	d05a      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	e062      	b.n	800573c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	f000 f968 	bl	800595a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
      break;
 80056a2:	e04f      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	f000 f951 	bl	800595a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056c6:	609a      	str	r2, [r3, #8]
      break;
 80056c8:	e03c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 f8c8 	bl	800586c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2150      	movs	r1, #80	@ 0x50
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f91f 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e02c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 f8e6 	bl	80058c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2160      	movs	r1, #96	@ 0x60
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f90f 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 8005708:	e01c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	461a      	mov	r2, r3
 8005718:	f000 f8a8 	bl	800586c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2140      	movs	r1, #64	@ 0x40
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f8ff 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 8005728:	e00c      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 f8f6 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 800573a:	e003      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      break;
 8005740:	e000      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a29      	ldr	r2, [pc, #164]	@ (8005860 <TIM_Base_SetConfig+0xb8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a26      	ldr	r2, [pc, #152]	@ (8005864 <TIM_Base_SetConfig+0xbc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a25      	ldr	r2, [pc, #148]	@ (8005868 <TIM_Base_SetConfig+0xc0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <TIM_Base_SetConfig+0xb8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d007      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <TIM_Base_SetConfig+0xbc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <TIM_Base_SetConfig+0xc0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a07      	ldr	r2, [pc, #28]	@ (8005860 <TIM_Base_SetConfig+0xb8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d103      	bne.n	8005850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	615a      	str	r2, [r3, #20]
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800

0800586c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 030a 	bic.w	r3, r3, #10
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0210 	bic.w	r2, r3, #16
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	031b      	lsls	r3, r3, #12
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	f043 0307 	orr.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	431a      	orrs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	609a      	str	r2, [r3, #8]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e046      	b.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fc:	d009      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a12      	ldr	r2, [pc, #72]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a10      	ldr	r2, [pc, #64]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10c      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e042      	b.n	8005b10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fdf2 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2224      	movs	r2, #36	@ 0x24
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fcd5 	bl	800646c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d112      	bne.n	8005b58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_UART_Receive_IT+0x26>
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e00b      	b.n	8005b5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fab7 	bl	80060c2 <UART_Start_Receive_IT>
 8005b54:	4603      	mov	r3, r0
 8005b56:	e000      	b.n	8005b5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0ba      	sub	sp, #232	@ 0xe8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fb93 	bl	80062ee <UART_Receive_IT>
      return;
 8005bc8:	e25b      	b.n	8006082 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80de 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
 8005bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80d1 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
 8005c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 81f2 	beq.w	8006078 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb1e 	bl	80062ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_UART_IRQHandler+0x17a>
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d04f      	beq.n	8005d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa28 	bl	8006134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d041      	beq.n	8005d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1d9      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d013      	beq.n	8005d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f44 <HAL_UART_IRQHandler+0x3e0>)
 8005d4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fc fbb8 	bl	80024c8 <HAL_DMA_Abort_IT>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	e00e      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f993 	bl	800609a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	e00a      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f98f 	bl	800609a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e006      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f98b 	bl	800609a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d8a:	e175      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	bf00      	nop
    return;
 8005d8e:	e173      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 814f 	bne.w	8006038 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8148 	beq.w	8006038 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8141 	beq.w	8006038 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80b6 	beq.w	8005f48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8145 	beq.w	800607c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	f080 813e 	bcs.w	800607c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	f000 8088 	beq.w	8005f24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1d9      	bne.n	8005e14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e1      	bne.n	8005e60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005eac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3314      	adds	r3, #20
 8005ebc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ec0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ec6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e3      	bne.n	8005e9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef4:	f023 0310 	bic.w	r3, r3, #16
 8005ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e3      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fc fa96 	bl	8002450 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8b6 	bl	80060ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f40:	e09c      	b.n	800607c <HAL_UART_IRQHandler+0x518>
 8005f42:	bf00      	nop
 8005f44:	080061f9 	.word	0x080061f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 808e 	beq.w	8006080 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8089 	beq.w	8006080 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3314      	adds	r3, #20
 8005fc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fca:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e3      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006010:	61fa      	str	r2, [r7, #28]
 8006012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e3      	bne.n	8005fec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800602a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f83b 	bl	80060ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006036:	e023      	b.n	8006080 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <HAL_UART_IRQHandler+0x4f4>
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8e5 	bl	8006220 <UART_Transmit_IT>
    return;
 8006056:	e014      	b.n	8006082 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <HAL_UART_IRQHandler+0x51e>
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f924 	bl	80062be <UART_EndTransmit_IT>
    return;
 8006076:	e004      	b.n	8006082 <HAL_UART_IRQHandler+0x51e>
    return;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_UART_IRQHandler+0x51e>
      return;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_UART_IRQHandler+0x51e>
      return;
 8006080:	bf00      	nop
  }
}
 8006082:	37e8      	adds	r7, #232	@ 0xe8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr

0800609a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr

080060ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	88fa      	ldrh	r2, [r7, #6]
 80060da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2222      	movs	r2, #34	@ 0x22
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006106:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0220 	orr.w	r2, r2, #32
 8006126:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b095      	sub	sp, #84	@ 0x54
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800615c:	643a      	str	r2, [r7, #64]	@ 0x40
 800615e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d119      	bne.n	80061e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061cc:	61ba      	str	r2, [r7, #24]
 80061ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e5      	bne.n	80061ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061ee:	bf00      	nop
 80061f0:	3754      	adds	r7, #84	@ 0x54
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff41 	bl	800609a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b21      	cmp	r3, #33	@ 0x21
 8006232:	d13e      	bne.n	80062b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623c:	d114      	bne.n	8006268 <UART_Transmit_IT+0x48>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d110      	bne.n	8006268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]
 8006266:	e008      	b.n	800627a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6211      	str	r1, [r2, #32]
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29b      	uxth	r3, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800629c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fed2 	bl	8006088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08c      	sub	sp, #48	@ 0x30
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b22      	cmp	r3, #34	@ 0x22
 8006300:	f040 80ae 	bne.w	8006460 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630c:	d117      	bne.n	800633e <UART_Receive_IT+0x50>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	b29a      	uxth	r2, r3
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28
 800633c:	e026      	b.n	800638c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006350:	d007      	beq.n	8006362 <UART_Receive_IT+0x74>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <UART_Receive_IT+0x82>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e008      	b.n	8006382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800639c:	2b00      	cmp	r3, #0
 800639e:	d15d      	bne.n	800645c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0220 	bic.w	r2, r2, #32
 80063ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d135      	bne.n	8006452 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	613b      	str	r3, [r7, #16]
   return(result);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f023 0310 	bic.w	r3, r3, #16
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640c:	623a      	str	r2, [r7, #32]
 800640e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	61bb      	str	r3, [r7, #24]
   return(result);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b10      	cmp	r3, #16
 800642c:	d10a      	bne.n	8006444 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fe2e 	bl	80060ac <HAL_UARTEx_RxEventCallback>
 8006450:	e002      	b.n	8006458 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa f83a 	bl	80004cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e002      	b.n	8006462 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3730      	adds	r7, #48	@ 0x30
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064a6:	f023 030c 	bic.w	r3, r3, #12
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006580 <UART_SetConfig+0x114>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fe fdea 	bl	80050ac <HAL_RCC_GetPCLK2Freq>
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	e002      	b.n	80064e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064dc:	f7fe fdd2 	bl	8005084 <HAL_RCC_GetPCLK1Freq>
 80064e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009a      	lsls	r2, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	4a22      	ldr	r2, [pc, #136]	@ (8006584 <UART_SetConfig+0x118>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	0119      	lsls	r1, r3, #4
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009a      	lsls	r2, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	fbb2 f2f3 	udiv	r2, r2, r3
 8006518:	4b1a      	ldr	r3, [pc, #104]	@ (8006584 <UART_SetConfig+0x118>)
 800651a:	fba3 0302 	umull	r0, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2064      	movs	r0, #100	@ 0x64
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	@ 0x32
 800652c:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <UART_SetConfig+0x118>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006538:	4419      	add	r1, r3
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006550:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <UART_SetConfig+0x118>)
 8006552:	fba3 0302 	umull	r0, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2064      	movs	r0, #100	@ 0x64
 800655a:	fb00 f303 	mul.w	r3, r0, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	@ 0x32
 8006564:	4a07      	ldr	r2, [pc, #28]	@ (8006584 <UART_SetConfig+0x118>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	440a      	add	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40013800 	.word	0x40013800
 8006584:	51eb851f 	.word	0x51eb851f

08006588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006588:	b084      	sub	sp, #16
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	f107 0014 	add.w	r0, r7, #20
 8006596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	b004      	add	sp, #16
 80065a6:	4770      	bx	lr

080065a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065b8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065dc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	43db      	mvns	r3, r3
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4013      	ands	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006620:	b084      	sub	sp, #16
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	f107 0014 	add.w	r0, r7, #20
 800662e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr

08006660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b09d      	sub	sp, #116	@ 0x74
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	78db      	ldrb	r3, [r3, #3]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d81f      	bhi.n	80066d2 <USB_ActivateEndpoint+0x72>
 8006692:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <USB_ActivateEndpoint+0x38>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066db 	.word	0x080066db
 80066a4:	080066b7 	.word	0x080066b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066b4:	e012      	b.n	80066dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066ba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066c2:	e00b      	b.n	80066dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066d0:	e004      	b.n	80066dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80066d8:	e000      	b.n	80066dc <USB_ActivateEndpoint+0x7c>
      break;
 80066da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006714:	b29b      	uxth	r3, r3
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	4313      	orrs	r3, r2
 800671c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800672e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800673a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800673e:	b29b      	uxth	r3, r3
 8006740:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	7b1b      	ldrb	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 8178 	bne.w	8006a3c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8084 	beq.w	800685e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	4413      	add	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	011a      	lsls	r2, r3, #4
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	88db      	ldrh	r3, [r3, #6]
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	b29b      	uxth	r3, r3
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	827b      	strh	r3, [r7, #18]
 8006798:	8a7b      	ldrh	r3, [r7, #18]
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <USB_ActivateEndpoint+0x17a>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b8:	823b      	strh	r3, [r7, #16]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8a3b      	ldrh	r3, [r7, #16]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	78db      	ldrb	r3, [r3, #3]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d020      	beq.n	8006824 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f8:	81bb      	strh	r3, [r7, #12]
 80067fa:	89bb      	ldrh	r3, [r7, #12]
 80067fc:	f083 0320 	eor.w	r3, r3, #32
 8006800:	81bb      	strh	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	89bb      	ldrh	r3, [r7, #12]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
 8006822:	e2d5      	b.n	8006dd0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800683a:	81fb      	strh	r3, [r7, #14]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	89fb      	ldrh	r3, [r7, #14]
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
 800685c:	e2b8      	b.n	8006dd0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	4413      	add	r3, r2
 8006870:	633b      	str	r3, [r7, #48]	@ 0x30
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	011a      	lsls	r2, r3, #4
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	4413      	add	r3, r2
 800687c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	88db      	ldrh	r3, [r3, #6]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	4413      	add	r3, r2
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	011a      	lsls	r2, r3, #4
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80068cc:	d91d      	bls.n	800690a <USB_ActivateEndpoint+0x2aa>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <USB_ActivateEndpoint+0x288>
 80068e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068e4:	3b01      	subs	r3, #1
 80068e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	029b      	lsls	r3, r3, #10
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e026      	b.n	8006958 <USB_ActivateEndpoint+0x2f8>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <USB_ActivateEndpoint+0x2c8>
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e017      	b.n	8006958 <USB_ActivateEndpoint+0x2f8>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <USB_ActivateEndpoint+0x2e2>
 800693c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800693e:	3301      	adds	r3, #1
 8006940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29a      	uxth	r2, r3
 8006948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800694a:	b29b      	uxth	r3, r3
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	b29a      	uxth	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006966:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <USB_ActivateEndpoint+0x348>
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006986:	843b      	strh	r3, [r7, #32]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	8c3b      	ldrh	r3, [r7, #32]
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d124      	bne.n	80069fa <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	83bb      	strh	r3, [r7, #28]
 80069c8:	8bbb      	ldrh	r3, [r7, #28]
 80069ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069ce:	83bb      	strh	r3, [r7, #28]
 80069d0:	8bbb      	ldrh	r3, [r7, #28]
 80069d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069d6:	83bb      	strh	r3, [r7, #28]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	8bbb      	ldrh	r3, [r7, #28]
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]
 80069f8:	e1ea      	b.n	8006dd0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a10:	83fb      	strh	r3, [r7, #30]
 8006a12:	8bfb      	ldrh	r3, [r7, #30]
 8006a14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a18:	83fb      	strh	r3, [r7, #30]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	8bfb      	ldrh	r3, [r7, #30]
 8006a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]
 8006a3a:	e1c9      	b.n	8006dd0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	78db      	ldrb	r3, [r3, #3]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11e      	bne.n	8006a82 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a74:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
 8006a80:	e01d      	b.n	8006abe <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a98:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ace:	4413      	add	r3, r2
 8006ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	891b      	ldrh	r3, [r3, #8]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b02:	4413      	add	r3, r2
 8006b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	895b      	ldrh	r3, [r3, #10]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b24:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 8093 	bne.w	8006c56 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <USB_ActivateEndpoint+0x524>
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01b      	beq.n	8006bd4 <USB_ActivateEndpoint+0x574>
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	441a      	add	r2, r3
 8006bbe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bf2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bf4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bf6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bfa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c32:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8013      	strh	r3, [r2, #0]
 8006c54:	e0bc      	b.n	8006dd0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01d      	beq.n	8006cae <USB_ActivateEndpoint+0x64e>
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c88:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006cbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01d      	beq.n	8006d06 <USB_ActivateEndpoint+0x6a6>
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	78db      	ldrb	r3, [r3, #3]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d024      	beq.n	8006d58 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d24:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d2c:	f083 0320 	eor.w	r3, r3, #32
 8006d30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
 8006d56:	e01d      	b.n	8006d94 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	441a      	add	r2, r3
 8006d7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3774      	adds	r7, #116	@ 0x74
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop

08006de0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b08d      	sub	sp, #52	@ 0x34
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	7b1b      	ldrb	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 808e 	bne.w	8006f10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d044      	beq.n	8006e86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	81bb      	strh	r3, [r7, #12]
 8006e0a:	89bb      	ldrh	r3, [r7, #12]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01b      	beq.n	8006e4c <USB_DeactivateEndpoint+0x6c>
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2a:	817b      	strh	r3, [r7, #10]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	897b      	ldrh	r3, [r7, #10]
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e62:	813b      	strh	r3, [r7, #8]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	893b      	ldrh	r3, [r7, #8]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
 8006e84:	e192      	b.n	80071ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	827b      	strh	r3, [r7, #18]
 8006e94:	8a7b      	ldrh	r3, [r7, #18]
 8006e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01b      	beq.n	8006ed6 <USB_DeactivateEndpoint+0xf6>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb4:	823b      	strh	r3, [r7, #16]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	8a3b      	ldrh	r3, [r7, #16]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eec:	81fb      	strh	r3, [r7, #14]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	89fb      	ldrh	r3, [r7, #14]
 8006efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]
 8006f0e:	e14d      	b.n	80071ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 80a5 	bne.w	8007064 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	843b      	strh	r3, [r7, #32]
 8006f28:	8c3b      	ldrh	r3, [r7, #32]
 8006f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01b      	beq.n	8006f6a <USB_DeactivateEndpoint+0x18a>
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f48:	83fb      	strh	r3, [r7, #30]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	8bfb      	ldrh	r3, [r7, #30]
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	83bb      	strh	r3, [r7, #28]
 8006f78:	8bbb      	ldrh	r3, [r7, #28]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01b      	beq.n	8006fba <USB_DeactivateEndpoint+0x1da>
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f98:	837b      	strh	r3, [r7, #26]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	8b7b      	ldrh	r3, [r7, #26]
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd0:	833b      	strh	r3, [r7, #24]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8b3b      	ldrh	r3, [r7, #24]
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007008:	82fb      	strh	r3, [r7, #22]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800703c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007040:	82bb      	strh	r3, [r7, #20]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	441a      	add	r2, r3
 800704c:	8abb      	ldrh	r3, [r7, #20]
 800704e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705e:	b29b      	uxth	r3, r3
 8007060:	8013      	strh	r3, [r2, #0]
 8007062:	e0a3      	b.n	80071ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007072:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01b      	beq.n	80070b4 <USB_DeactivateEndpoint+0x2d4>
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80070c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01b      	beq.n	8007104 <USB_DeactivateEndpoint+0x324>
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	441a      	add	r2, r3
 80070ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007100:	b29b      	uxth	r3, r3
 8007102:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007138:	b29b      	uxth	r3, r3
 800713a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800714e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007152:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800716c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	441a      	add	r2, r3
 8007196:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800719c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3734      	adds	r7, #52	@ 0x34
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b0c2      	sub	sp, #264	@ 0x108
 80071bc:	af00      	add	r7, sp, #0
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c6:	6018      	str	r0, [r3, #0]
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	f040 86b7 	bne.w	8007f52 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d908      	bls.n	8007212 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007210:	e007      	b.n	8007222 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d13a      	bne.n	80072a8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6959      	ldr	r1, [r3, #20]
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	88da      	ldrh	r2, [r3, #6]
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	b29b      	uxth	r3, r3
 8007250:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007254:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007258:	6800      	ldr	r0, [r0, #0]
 800725a:	f001 fc9c 	bl	8008b96 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007278:	b29b      	uxth	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	011a      	lsls	r2, r3, #4
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	f000 be1f 	b.w	8007ee6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	78db      	ldrb	r3, [r3, #3]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f040 8462 	bne.w	8007b7e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f240 83df 	bls.w	8007a96 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fe:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	441a      	add	r2, r3
 800731c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007328:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800732c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007330:	b29b      	uxth	r3, r3
 8007332:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 81c7 	beq.w	8007708 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d177      	bne.n	8007486 <USB_EPStartXfer+0x2ce>
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	4413      	add	r3, r2
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	011a      	lsls	r2, r3, #4
 80073c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80073e8:	d921      	bls.n	800742e <USB_EPStartXfer+0x276>
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USB_EPStartXfer+0x252>
 8007400:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007404:	3b01      	subs	r3, #1
 8007406:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007414:	b29b      	uxth	r3, r3
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	b29b      	uxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007426:	b29a      	uxth	r2, r3
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e050      	b.n	80074d0 <USB_EPStartXfer+0x318>
 800742e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <USB_EPStartXfer+0x294>
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007444:	b29a      	uxth	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e041      	b.n	80074d0 <USB_EPStartXfer+0x318>
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USB_EPStartXfer+0x2b4>
 8007462:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007466:	3301      	adds	r3, #1
 8007468:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e024      	b.n	80074d0 <USB_EPStartXfer+0x318>
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d11c      	bne.n	80074d0 <USB_EPStartXfer+0x318>
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	4413      	add	r3, r2
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	011a      	lsls	r2, r3, #4
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	4413      	add	r3, r2
 80074c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	895b      	ldrh	r3, [r3, #10]
 80074dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6959      	ldr	r1, [r3, #20]
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	f001 fb49 	bl	8008b96 <USB_WritePMA>
            ep->xfer_buff += len;
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	441a      	add	r2, r3
 8007516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d90f      	bls.n	800755e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	621a      	str	r2, [r3, #32]
 800755c:	e00e      	b.n	800757c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d177      	bne.n	800767c <USB_EPStartXfer+0x4c4>
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	4413      	add	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	011a      	lsls	r2, r3, #4
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075de:	d921      	bls.n	8007624 <USB_EPStartXfer+0x46c>
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <USB_EPStartXfer+0x448>
 80075f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075fa:	3b01      	subs	r3, #1
 80075fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29a      	uxth	r2, r3
 8007606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760a:	b29b      	uxth	r3, r3
 800760c:	029b      	lsls	r3, r3, #10
 800760e:	b29b      	uxth	r3, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	b29b      	uxth	r3, r3
 8007614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761c:	b29a      	uxth	r2, r3
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	e056      	b.n	80076d2 <USB_EPStartXfer+0x51a>
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <USB_EPStartXfer+0x48a>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763a:	b29a      	uxth	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e047      	b.n	80076d2 <USB_EPStartXfer+0x51a>
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <USB_EPStartXfer+0x4aa>
 8007658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800765c:	3301      	adds	r3, #1
 800765e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766c:	b29b      	uxth	r3, r3
 800766e:	029b      	lsls	r3, r3, #10
 8007670:	b29b      	uxth	r3, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	b29a      	uxth	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e02a      	b.n	80076d2 <USB_EPStartXfer+0x51a>
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d122      	bne.n	80076d2 <USB_EPStartXfer+0x51a>
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	623b      	str	r3, [r7, #32]
 8007698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	4413      	add	r3, r2
 80076ae:	623b      	str	r3, [r7, #32]
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	011a      	lsls	r2, r3, #4
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	891b      	ldrh	r3, [r3, #8]
 80076de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6959      	ldr	r1, [r3, #20]
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007700:	6800      	ldr	r0, [r0, #0]
 8007702:	f001 fa48 	bl	8008b96 <USB_WritePMA>
 8007706:	e3ee      	b.n	8007ee6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d177      	bne.n	8007808 <USB_EPStartXfer+0x650>
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007738:	4413      	add	r3, r2
 800773a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	011a      	lsls	r2, r3, #4
 800774a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800774c:	4413      	add	r3, r2
 800774e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007752:	647b      	str	r3, [r7, #68]	@ 0x44
 8007754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800775e:	b29a      	uxth	r2, r3
 8007760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	2b3e      	cmp	r3, #62	@ 0x3e
 800776a:	d921      	bls.n	80077b0 <USB_EPStartXfer+0x5f8>
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <USB_EPStartXfer+0x5d4>
 8007782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007786:	3b01      	subs	r3, #1
 8007788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800778c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29a      	uxth	r2, r3
 8007792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007796:	b29b      	uxth	r3, r3
 8007798:	029b      	lsls	r3, r3, #10
 800779a:	b29b      	uxth	r3, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e056      	b.n	800785e <USB_EPStartXfer+0x6a6>
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <USB_EPStartXfer+0x616>
 80077b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e047      	b.n	800785e <USB_EPStartXfer+0x6a6>
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <USB_EPStartXfer+0x636>
 80077e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077e8:	3301      	adds	r3, #1
 80077ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	029b      	lsls	r3, r3, #10
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4313      	orrs	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	e02a      	b.n	800785e <USB_EPStartXfer+0x6a6>
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d122      	bne.n	800785e <USB_EPStartXfer+0x6a6>
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	653b      	str	r3, [r7, #80]	@ 0x50
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007838:	4413      	add	r3, r2
 800783a:	653b      	str	r3, [r7, #80]	@ 0x50
 800783c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	011a      	lsls	r2, r3, #4
 800784a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784c:	4413      	add	r3, r2
 800784e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007858:	b29a      	uxth	r2, r3
 800785a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800785c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	891b      	ldrh	r3, [r3, #8]
 800786a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800786e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6959      	ldr	r1, [r3, #20]
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	b29b      	uxth	r3, r3
 8007880:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007884:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007888:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f001 f982 	bl	8008b96 <USB_WritePMA>
            ep->xfer_buff += len;
 8007892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a2:	441a      	add	r2, r3
 80078a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6a1a      	ldr	r2, [r3, #32]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d90f      	bls.n	80078ec <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	621a      	str	r2, [r3, #32]
 80078ea:	e00e      	b.n	800790a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2200      	movs	r2, #0
 8007908:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	643b      	str	r3, [r7, #64]	@ 0x40
 8007916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d177      	bne.n	8007a16 <USB_EPStartXfer+0x85e>
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	4413      	add	r3, r2
 8007948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	011a      	lsls	r2, r3, #4
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	4413      	add	r3, r2
 800795c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796c:	b29a      	uxth	r2, r3
 800796e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	2b3e      	cmp	r3, #62	@ 0x3e
 8007978:	d921      	bls.n	80079be <USB_EPStartXfer+0x806>
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USB_EPStartXfer+0x7e2>
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	3b01      	subs	r3, #1
 8007996:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800799a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	e050      	b.n	8007a60 <USB_EPStartXfer+0x8a8>
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <USB_EPStartXfer+0x824>
 80079c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e041      	b.n	8007a60 <USB_EPStartXfer+0x8a8>
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <USB_EPStartXfer+0x844>
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f6:	3301      	adds	r3, #1
 80079f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e024      	b.n	8007a60 <USB_EPStartXfer+0x8a8>
 8007a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d11c      	bne.n	8007a60 <USB_EPStartXfer+0x8a8>
 8007a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a3a:	4413      	add	r3, r2
 8007a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	011a      	lsls	r2, r3, #4
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	895b      	ldrh	r3, [r3, #10]
 8007a6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6959      	ldr	r1, [r3, #20]
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	f001 f881 	bl	8008b96 <USB_WritePMA>
 8007a94:	e227      	b.n	8007ee6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007acc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b22:	4413      	add	r3, r2
 8007b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	011a      	lsls	r2, r3, #4
 8007b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b36:	4413      	add	r3, r2
 8007b38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	891b      	ldrh	r3, [r3, #8]
 8007b54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6959      	ldr	r1, [r3, #20]
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b6e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b72:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b76:	6800      	ldr	r0, [r0, #0]
 8007b78:	f001 f80d 	bl	8008b96 <USB_WritePMA>
 8007b7c:	e1b3      	b.n	8007ee6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80c6 	beq.w	8007d50 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d177      	bne.n	8007cd0 <USB_EPStartXfer+0xb18>
 8007be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c00:	4413      	add	r3, r2
 8007c02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011a      	lsls	r2, r3, #4
 8007c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c32:	d921      	bls.n	8007c78 <USB_EPStartXfer+0xac0>
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <USB_EPStartXfer+0xa9c>
 8007c4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e050      	b.n	8007d1a <USB_EPStartXfer+0xb62>
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USB_EPStartXfer+0xade>
 8007c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e041      	b.n	8007d1a <USB_EPStartXfer+0xb62>
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <USB_EPStartXfer+0xafe>
 8007cac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	029b      	lsls	r3, r3, #10
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e024      	b.n	8007d1a <USB_EPStartXfer+0xb62>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d11c      	bne.n	8007d1a <USB_EPStartXfer+0xb62>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cf4:	4413      	add	r3, r2
 8007cf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	011a      	lsls	r2, r3, #4
 8007d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d08:	4413      	add	r3, r2
 8007d0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	895b      	ldrh	r3, [r3, #10]
 8007d26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6959      	ldr	r1, [r3, #20]
 8007d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d48:	6800      	ldr	r0, [r0, #0]
 8007d4a:	f000 ff24 	bl	8008b96 <USB_WritePMA>
 8007d4e:	e0ca      	b.n	8007ee6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d177      	bne.n	8007e50 <USB_EPStartXfer+0xc98>
 8007d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d80:	4413      	add	r3, r2
 8007d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	011a      	lsls	r2, r3, #4
 8007d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d94:	4413      	add	r3, r2
 8007d96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007daa:	801a      	strh	r2, [r3, #0]
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007db2:	d921      	bls.n	8007df8 <USB_EPStartXfer+0xc40>
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USB_EPStartXfer+0xc1c>
 8007dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	029b      	lsls	r3, r3, #10
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4313      	orrs	r3, r2
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e05c      	b.n	8007eb2 <USB_EPStartXfer+0xcfa>
 8007df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <USB_EPStartXfer+0xc5e>
 8007e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e04d      	b.n	8007eb2 <USB_EPStartXfer+0xcfa>
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <USB_EPStartXfer+0xc7e>
 8007e2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e30:	3301      	adds	r3, #1
 8007e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	029b      	lsls	r3, r3, #10
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4313      	orrs	r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e030      	b.n	8007eb2 <USB_EPStartXfer+0xcfa>
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d128      	bne.n	8007eb2 <USB_EPStartXfer+0xcfa>
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e84:	4413      	add	r3, r2
 8007e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	011a      	lsls	r2, r3, #4
 8007e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007eb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	891b      	ldrh	r3, [r3, #8]
 8007ebe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ed8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007edc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ee0:	6800      	ldr	r0, [r0, #0]
 8007ee2:	f000 fe58 	bl	8008b96 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0c:	817b      	strh	r3, [r7, #10]
 8007f0e:	897b      	ldrh	r3, [r7, #10]
 8007f10:	f083 0310 	eor.w	r3, r3, #16
 8007f14:	817b      	strh	r3, [r7, #10]
 8007f16:	897b      	ldrh	r3, [r7, #10]
 8007f18:	f083 0320 	eor.w	r3, r3, #32
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	897b      	ldrh	r3, [r7, #10]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
 8007f4e:	f000 bcde 	b.w	800890e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	7b1b      	ldrb	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f040 80bb 	bne.w	80080da <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d917      	bls.n	8007fb0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa0:	1ad2      	subs	r2, r2, r3
 8007fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	619a      	str	r2, [r3, #24]
 8007fae:	e00e      	b.n	8007fce <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800800a:	4413      	add	r3, r2
 800800c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802c:	2b3e      	cmp	r3, #62	@ 0x3e
 800802e:	d924      	bls.n	800807a <USB_EPStartXfer+0xec2>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <USB_EPStartXfer+0xe98>
 8008046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800804a:	3b01      	subs	r3, #1
 800804c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29b      	uxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b29b      	uxth	r3, r3
 8008066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	f000 bc10 	b.w	800889a <USB_EPStartXfer+0x16e2>
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10c      	bne.n	800809c <USB_EPStartXfer+0xee4>
 8008082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008092:	b29a      	uxth	r2, r3
 8008094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	e3fe      	b.n	800889a <USB_EPStartXfer+0x16e2>
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	085b      	lsrs	r3, r3, #1
 80080a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <USB_EPStartXfer+0xf04>
 80080b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080b6:	3301      	adds	r3, #1
 80080b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	029b      	lsls	r3, r3, #10
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e3df      	b.n	800889a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	78db      	ldrb	r3, [r3, #3]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	f040 8218 	bne.w	800851c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f040 809d 	bne.w	8008238 <USB_EPStartXfer+0x1080>
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811a:	b29b      	uxth	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008122:	4413      	add	r3, r2
 8008124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	011a      	lsls	r2, r3, #4
 8008136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800813a:	4413      	add	r3, r2
 800813c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008150:	b29a      	uxth	r2, r3
 8008152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b3e      	cmp	r3, #62	@ 0x3e
 8008166:	d92b      	bls.n	80081c0 <USB_EPStartXfer+0x1008>
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800817a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2b00      	cmp	r3, #0
 800818c:	d104      	bne.n	8008198 <USB_EPStartXfer+0xfe0>
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008192:	3b01      	subs	r3, #1
 8008194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	029b      	lsls	r3, r3, #10
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e070      	b.n	80082a2 <USB_EPStartXfer+0x10ea>
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10c      	bne.n	80081ea <USB_EPStartXfer+0x1032>
 80081d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	e05b      	b.n	80082a2 <USB_EPStartXfer+0x10ea>
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <USB_EPStartXfer+0x1062>
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008214:	3301      	adds	r3, #1
 8008216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800821a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008226:	b29b      	uxth	r3, r3
 8008228:	029b      	lsls	r3, r3, #10
 800822a:	b29b      	uxth	r3, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e034      	b.n	80082a2 <USB_EPStartXfer+0x10ea>
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d12c      	bne.n	80082a2 <USB_EPStartXfer+0x10ea>
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800826c:	4413      	add	r3, r2
 800826e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	011a      	lsls	r2, r3, #4
 8008280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008284:	4413      	add	r3, r2
 8008286:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800828a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 809d 	bne.w	80083fc <USB_EPStartXfer+0x1244>
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082de:	b29b      	uxth	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082e6:	4413      	add	r3, r2
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	011a      	lsls	r2, r3, #4
 80082fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082fe:	4413      	add	r3, r2
 8008300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b3e      	cmp	r3, #62	@ 0x3e
 800832a:	d92b      	bls.n	8008384 <USB_EPStartXfer+0x11cc>
 800832c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800833e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <USB_EPStartXfer+0x11a4>
 8008352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008356:	3b01      	subs	r3, #1
 8008358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800835c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29a      	uxth	r2, r3
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008368:	b29b      	uxth	r3, r3
 800836a:	029b      	lsls	r3, r3, #10
 800836c:	b29b      	uxth	r3, r3
 800836e:	4313      	orrs	r3, r2
 8008370:	b29b      	uxth	r3, r3
 8008372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837a:	b29a      	uxth	r2, r3
 800837c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	e069      	b.n	8008458 <USB_EPStartXfer+0x12a0>
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10c      	bne.n	80083ae <USB_EPStartXfer+0x11f6>
 8008394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e054      	b.n	8008458 <USB_EPStartXfer+0x12a0>
 80083ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <USB_EPStartXfer+0x1226>
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d8:	3301      	adds	r3, #1
 80083da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	e02d      	b.n	8008458 <USB_EPStartXfer+0x12a0>
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d125      	bne.n	8008458 <USB_EPStartXfer+0x12a0>
 800840c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841a:	b29b      	uxth	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008422:	4413      	add	r3, r2
 8008424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	011a      	lsls	r2, r3, #4
 8008436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800843a:	4413      	add	r3, r2
 800843c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	b29a      	uxth	r2, r3
 8008452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008456:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8218 	beq.w	800889a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800848a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800848e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <USB_EPStartXfer+0x12ea>
 8008496:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800849a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10d      	bne.n	80084be <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 81f5 	bne.w	800889a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 81ee 	bne.w	800889a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	441a      	add	r2, r3
 8008502:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800850e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008512:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]
 800851a:	e1be      	b.n	800889a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f040 81b4 	bne.w	8008896 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800852e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	429a      	cmp	r2, r3
 8008548:	d917      	bls.n	800857a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800854a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856a:	1ad2      	subs	r2, r2, r3
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	619a      	str	r2, [r3, #24]
 8008578:	e00e      	b.n	8008598 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800857a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800858a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2200      	movs	r2, #0
 8008596:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 8085 	bne.w	80086b4 <USB_EPStartXfer+0x14fc>
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ce:	4413      	add	r3, r2
 80085d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	011a      	lsls	r2, r3, #4
 80085e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008608:	2b3e      	cmp	r3, #62	@ 0x3e
 800860a:	d923      	bls.n	8008654 <USB_EPStartXfer+0x149c>
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USB_EPStartXfer+0x1474>
 8008622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008626:	3b01      	subs	r3, #1
 8008628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800862c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29a      	uxth	r2, r3
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008638:	b29b      	uxth	r3, r3
 800863a:	029b      	lsls	r3, r3, #10
 800863c:	b29b      	uxth	r3, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	b29b      	uxth	r3, r3
 8008642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864a:	b29a      	uxth	r2, r3
 800864c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	e060      	b.n	8008716 <USB_EPStartXfer+0x155e>
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10c      	bne.n	8008676 <USB_EPStartXfer+0x14be>
 800865c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e04f      	b.n	8008716 <USB_EPStartXfer+0x155e>
 8008676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867a:	085b      	lsrs	r3, r3, #1
 800867c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <USB_EPStartXfer+0x14de>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008690:	3301      	adds	r3, #1
 8008692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	029b      	lsls	r3, r3, #10
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086b0:	801a      	strh	r2, [r3, #0]
 80086b2:	e030      	b.n	8008716 <USB_EPStartXfer+0x155e>
 80086b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d128      	bne.n	8008716 <USB_EPStartXfer+0x155e>
 80086c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086e8:	4413      	add	r3, r2
 80086ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	011a      	lsls	r2, r3, #4
 80086fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008700:	4413      	add	r3, r2
 8008702:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870e:	b29a      	uxth	r2, r3
 8008710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008714:	801a      	strh	r2, [r3, #0]
 8008716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 8085 	bne.w	8008840 <USB_EPStartXfer+0x1688>
 8008736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800875a:	4413      	add	r3, r2
 800875c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	011a      	lsls	r2, r3, #4
 800876e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008772:	4413      	add	r3, r2
 8008774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800877c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008788:	b29a      	uxth	r2, r3
 800878a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008794:	2b3e      	cmp	r3, #62	@ 0x3e
 8008796:	d923      	bls.n	80087e0 <USB_EPStartXfer+0x1628>
 8008798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a6:	f003 031f 	and.w	r3, r3, #31
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <USB_EPStartXfer+0x1600>
 80087ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b2:	3b01      	subs	r3, #1
 80087b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4313      	orrs	r3, r2
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087dc:	801a      	strh	r2, [r3, #0]
 80087de:	e05c      	b.n	800889a <USB_EPStartXfer+0x16e2>
 80087e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10c      	bne.n	8008802 <USB_EPStartXfer+0x164a>
 80087e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e04b      	b.n	800889a <USB_EPStartXfer+0x16e2>
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008806:	085b      	lsrs	r3, r3, #1
 8008808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <USB_EPStartXfer+0x166a>
 8008818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800881c:	3301      	adds	r3, #1
 800881e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29a      	uxth	r2, r3
 800882a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800882e:	b29b      	uxth	r3, r3
 8008830:	029b      	lsls	r3, r3, #10
 8008832:	b29b      	uxth	r3, r3
 8008834:	4313      	orrs	r3, r2
 8008836:	b29a      	uxth	r2, r3
 8008838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e02c      	b.n	800889a <USB_EPStartXfer+0x16e2>
 8008840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d124      	bne.n	800889a <USB_EPStartXfer+0x16e2>
 8008850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800885e:	b29b      	uxth	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008866:	4413      	add	r3, r2
 8008868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800886c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	011a      	lsls	r2, r3, #4
 800887a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800887e:	4413      	add	r3, r2
 8008880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e001      	b.n	800889a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e03a      	b.n	8008910 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800889a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	441a      	add	r2, r3
 80088f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890a:	b29b      	uxth	r3, r3
 800890c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d020      	beq.n	800896e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800893e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008942:	81bb      	strh	r3, [r7, #12]
 8008944:	89bb      	ldrh	r3, [r7, #12]
 8008946:	f083 0310 	eor.w	r3, r3, #16
 800894a:	81bb      	strh	r3, [r7, #12]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	89bb      	ldrh	r3, [r7, #12]
 8008958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800895c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008968:	b29b      	uxth	r3, r3
 800896a:	8013      	strh	r3, [r2, #0]
 800896c:	e01f      	b.n	80089ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008984:	81fb      	strh	r3, [r7, #14]
 8008986:	89fb      	ldrh	r3, [r7, #14]
 8008988:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800898c:	81fb      	strh	r3, [r7, #14]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b087      	sub	sp, #28
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	7b1b      	ldrb	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f040 809d 	bne.w	8008b08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d04c      	beq.n	8008a70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	823b      	strh	r3, [r7, #16]
 80089e4:	8a3b      	ldrh	r3, [r7, #16]
 80089e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <USB_EPClearStall+0x6c>
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a04:	81fb      	strh	r3, [r7, #14]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	89fb      	ldrh	r3, [r7, #14]
 8008a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d06c      	beq.n	8008b08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a44:	81bb      	strh	r3, [r7, #12]
 8008a46:	89bb      	ldrh	r3, [r7, #12]
 8008a48:	f083 0320 	eor.w	r3, r3, #32
 8008a4c:	81bb      	strh	r3, [r7, #12]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	441a      	add	r2, r3
 8008a58:	89bb      	ldrh	r3, [r7, #12]
 8008a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	8013      	strh	r3, [r2, #0]
 8008a6e:	e04b      	b.n	8008b08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	82fb      	strh	r3, [r7, #22]
 8008a7e:	8afb      	ldrh	r3, [r7, #22]
 8008a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01b      	beq.n	8008ac0 <USB_EPClearStall+0x106>
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9e:	82bb      	strh	r3, [r7, #20]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	8abb      	ldrh	r3, [r7, #20]
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad6:	827b      	strh	r3, [r7, #18]
 8008ad8:	8a7b      	ldrh	r3, [r7, #18]
 8008ada:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ade:	827b      	strh	r3, [r7, #18]
 8008ae0:	8a7b      	ldrh	r3, [r7, #18]
 8008ae2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ae6:	827b      	strh	r3, [r7, #18]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	8a7b      	ldrh	r3, [r7, #18]
 8008af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2280      	movs	r2, #128	@ 0x80
 8008b2a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr

08008b3a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b08b      	sub	sp, #44	@ 0x2c
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	80fb      	strh	r3, [r7, #6]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bac:	88bb      	ldrh	r3, [r7, #4]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	085b      	lsrs	r3, r3, #1
 8008bb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	005a      	lsls	r2, r3, #1
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bce:	e01e      	b.n	8008c0e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	b21a      	sxth	r2, r3
 8008be0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b21b      	sxth	r3, r3
 8008be8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	8a7a      	ldrh	r2, [r7, #18]
 8008bee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	3302      	adds	r3, #2
 8008bf4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1dd      	bne.n	8008bd0 <USB_WritePMA+0x3a>
  }
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	372c      	adds	r7, #44	@ 0x2c
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b08b      	sub	sp, #44	@ 0x2c
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	460b      	mov	r3, r1
 8008c30:	80fb      	strh	r3, [r7, #6]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c36:	88bb      	ldrh	r3, [r7, #4]
 8008c38:	085b      	lsrs	r3, r3, #1
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	005a      	lsls	r2, r3, #1
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c58:	e01b      	b.n	8008c92 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	3302      	adds	r3, #2
 8008c66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	0a1b      	lsrs	r3, r3, #8
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	3302      	adds	r3, #2
 8008c8a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e0      	bne.n	8008c5a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c98:	88bb      	ldrh	r3, [r7, #4]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	701a      	strb	r2, [r3, #0]
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	372c      	adds	r7, #44	@ 0x2c
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr

08008cbe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7c1b      	ldrb	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d115      	bne.n	8008d02 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cda:	2202      	movs	r2, #2
 8008cdc:	2181      	movs	r1, #129	@ 0x81
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fee1 	bl	800aaa6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cee:	2202      	movs	r2, #2
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fed7 	bl	800aaa6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008d00:	e012      	b.n	8008d28 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d02:	2340      	movs	r3, #64	@ 0x40
 8008d04:	2202      	movs	r2, #2
 8008d06:	2181      	movs	r1, #129	@ 0x81
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 fecc 	bl	800aaa6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d14:	2340      	movs	r3, #64	@ 0x40
 8008d16:	2202      	movs	r2, #2
 8008d18:	2101      	movs	r1, #1
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fec3 	bl	800aaa6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d28:	2308      	movs	r3, #8
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	2182      	movs	r1, #130	@ 0x82
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 feb9 	bl	800aaa6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d3a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d3e:	f001 ffd9 	bl	800acf4 <USBD_static_malloc>
 8008d42:	4602      	mov	r2, r0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e026      	b.n	8008da8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d60:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	7c1b      	ldrb	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 ff79 	bl	800ac88 <USBD_LL_PrepareReceive>
 8008d96:	e007      	b.n	8008da8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d9e:	2340      	movs	r3, #64	@ 0x40
 8008da0:	2101      	movs	r1, #1
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 ff70 	bl	800ac88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dc2:	2181      	movs	r1, #129	@ 0x81
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fe94 	bl	800aaf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fe8d 	bl	800aaf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008de0:	2182      	movs	r1, #130	@ 0x82
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fe85 	bl	800aaf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00e      	beq.n	8008e16 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 ff7f 	bl	800ad0c <USBD_static_free>
    pdev->pClassData = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e30:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d039      	beq.n	8008ebe <USBD_CDC_Setup+0x9e>
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d17f      	bne.n	8008f4e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d029      	beq.n	8008eaa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da11      	bge.n	8008e84 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e6c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	88d2      	ldrh	r2, [r2, #6]
 8008e72:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e74:	6939      	ldr	r1, [r7, #16]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fa05 	bl	800a28c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e82:	e06b      	b.n	8008f5c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	785a      	ldrb	r2, [r3, #1]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e9a:	6939      	ldr	r1, [r7, #16]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fa20 	bl	800a2e8 <USBD_CtlPrepareRx>
      break;
 8008ea8:	e058      	b.n	8008f5c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	7850      	ldrb	r0, [r2, #1]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	4798      	blx	r3
      break;
 8008ebc:	e04e      	b.n	8008f5c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d02e      	beq.n	8008f24 <USBD_CDC_Setup+0x104>
 8008ec6:	2b0b      	cmp	r3, #11
 8008ec8:	dc38      	bgt.n	8008f3c <USBD_CDC_Setup+0x11c>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <USBD_CDC_Setup+0xb4>
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	d014      	beq.n	8008efc <USBD_CDC_Setup+0xdc>
 8008ed2:	e033      	b.n	8008f3c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d107      	bne.n	8008eee <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f9d0 	bl	800a28c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eec:	e02e      	b.n	8008f4c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f961 	bl	800a1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8008efa:	e027      	b.n	8008f4c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d107      	bne.n	8008f16 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f06:	f107 030f 	add.w	r3, r7, #15
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 f9bc 	bl	800a28c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f14:	e01a      	b.n	8008f4c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f94d 	bl	800a1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	75fb      	strb	r3, [r7, #23]
          break;
 8008f22:	e013      	b.n	8008f4c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d00d      	beq.n	8008f4a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f941 	bl	800a1b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f36:	2302      	movs	r3, #2
 8008f38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f3a:	e006      	b.n	8008f4a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 f93a 	bl	800a1b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	75fb      	strb	r3, [r7, #23]
          break;
 8008f48:	e000      	b.n	8008f4c <USBD_CDC_Setup+0x12c>
          break;
 8008f4a:	bf00      	nop
      }
      break;
 8008f4c:	e006      	b.n	8008f5c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f931 	bl	800a1b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f56:	2302      	movs	r3, #2
 8008f58:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5a:	bf00      	nop
  }

  return ret;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f78:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f80:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d03a      	beq.n	8009002 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	331c      	adds	r3, #28
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d029      	beq.n	8008ff6 <USBD_CDC_DataIn+0x90>
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	331c      	adds	r3, #28
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	78f9      	ldrb	r1, [r7, #3]
 8008fb6:	68b8      	ldr	r0, [r7, #8]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	4403      	add	r3, r0
 8008fc2:	3338      	adds	r3, #56	@ 0x38
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d110      	bne.n	8008ff6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	331c      	adds	r3, #28
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fe8:	78f9      	ldrb	r1, [r7, #3]
 8008fea:	2300      	movs	r3, #0
 8008fec:	2200      	movs	r2, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fe27 	bl	800ac42 <USBD_LL_Transmit>
 8008ff4:	e003      	b.n	8008ffe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	e000      	b.n	8009004 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009002:	2302      	movs	r3, #2
  }
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800901e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fe52 	bl	800acce <USBD_LL_GetRxDataSize>
 800902a:	4602      	mov	r2, r0
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009050:	4611      	mov	r1, r2
 8009052:	4798      	blx	r3

    return USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	e000      	b.n	800905a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009058:	2302      	movs	r3, #2
  }
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009070:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009078:	2b00      	cmp	r3, #0
 800907a:	d014      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x44>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009082:	2bff      	cmp	r3, #255	@ 0xff
 8009084:	d00f      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009094:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800909c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	22ff      	movs	r2, #255	@ 0xff
 80090a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2243      	movs	r2, #67	@ 0x43
 80090bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	@ (80090cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bc80      	pop	{r7}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20000098 	.word	0x20000098

080090d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	@ 0x43
 80090dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	@ (80090ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000054 	.word	0x20000054

080090f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2243      	movs	r2, #67	@ 0x43
 80090fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090fe:	4b03      	ldr	r3, [pc, #12]	@ (800910c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	200000dc 	.word	0x200000dc

08009110 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	220a      	movs	r2, #10
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	@ (800912c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000010 	.word	0x20000010

08009130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr

0800915c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009170:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr

0800918e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800919e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01c      	beq.n	8009208 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d115      	bne.n	8009204 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2181      	movs	r1, #129	@ 0x81
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fd21 	bl	800ac42 <USBD_LL_Transmit>

      return USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e002      	b.n	800920a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009208:	2302      	movs	r3, #2
  }
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009220:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d017      	beq.n	800925c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800923a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800923e:	2101      	movs	r1, #1
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fd21 	bl	800ac88 <USBD_LL_PrepareReceive>
 8009246:	e007      	b.n	8009258 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800924e:	2340      	movs	r3, #64	@ 0x40
 8009250:	2101      	movs	r1, #1
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fd18 	bl	800ac88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	e000      	b.n	800925e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800925c:	2302      	movs	r3, #2
  }
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	e01a      	b.n	80092b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	79fa      	ldrb	r2, [r7, #7]
 80092aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f001 fb85 	bl	800a9bc <USBD_LL_Init>

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	e001      	b.n	80092e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092de:	2302      	movs	r3, #2
 80092e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 fbba 	bl	800aa70 <USBD_LL_Start>

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	4611      	mov	r1, r2
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	4611      	mov	r1, r2
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	4798      	blx	r3

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fed8 	bl	800a146 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d016      	beq.n	80093e8 <USBD_LL_SetupStage+0x6a>
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d81c      	bhi.n	80093f8 <USBD_LL_SetupStage+0x7a>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <USBD_LL_SetupStage+0x4a>
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d008      	beq.n	80093d8 <USBD_LL_SetupStage+0x5a>
 80093c6:	e017      	b.n	80093f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9cb 	bl	800976c <USBD_StdDevReq>
      break;
 80093d6:	e01a      	b.n	800940e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa2d 	bl	8009840 <USBD_StdItfReq>
      break;
 80093e6:	e012      	b.n	800940e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa6d 	bl	80098d0 <USBD_StdEPReq>
      break;
 80093f6:	e00a      	b.n	800940e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009402:	b2db      	uxtb	r3, r3
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fb92 	bl	800ab30 <USBD_LL_StallEP>
      break;
 800940c:	bf00      	nop
  }

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	460b      	mov	r3, r1
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d14b      	bne.n	80094c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009432:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800943a:	2b03      	cmp	r3, #3
 800943c:	d134      	bne.n	80094a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	429a      	cmp	r2, r3
 8009448:	d919      	bls.n	800947e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009460:	429a      	cmp	r2, r3
 8009462:	d203      	bcs.n	800946c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009468:	b29b      	uxth	r3, r3
 800946a:	e002      	b.n	8009472 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009470:	b29b      	uxth	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 ff54 	bl	800a324 <USBD_CtlContinueRx>
 800947c:	e038      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009490:	2b03      	cmp	r3, #3
 8009492:	d105      	bne.n	80094a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 ff51 	bl	800a348 <USBD_CtlSendStatus>
 80094a6:	e023      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d11e      	bne.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094ba:	2100      	movs	r1, #0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 fb37 	bl	800ab30 <USBD_LL_StallEP>
 80094c2:	e015      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00d      	beq.n	80094ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d108      	bne.n	80094ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	7afa      	ldrb	r2, [r7, #11]
 80094e4:	4611      	mov	r1, r2
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	4798      	blx	r3
 80094ea:	e001      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094ec:	2302      	movs	r3, #2
 80094ee:	e000      	b.n	80094f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	460b      	mov	r3, r1
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d17f      	bne.n	800960e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3314      	adds	r3, #20
 8009512:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800951a:	2b02      	cmp	r3, #2
 800951c:	d15c      	bne.n	80095d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d915      	bls.n	8009556 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 febe 	bl	800a2c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009548:	2300      	movs	r3, #0
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f001 fb9a 	bl	800ac88 <USBD_LL_PrepareReceive>
 8009554:	e04e      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	6912      	ldr	r2, [r2, #16]
 800955e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009562:	fb01 f202 	mul.w	r2, r1, r2
 8009566:	1a9b      	subs	r3, r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11c      	bne.n	80095a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009574:	429a      	cmp	r2, r3
 8009576:	d316      	bcc.n	80095a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009582:	429a      	cmp	r2, r3
 8009584:	d20f      	bcs.n	80095a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fe9a 	bl	800a2c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 fb72 	bl	800ac88 <USBD_LL_PrepareReceive>
 80095a4:	e026      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d105      	bne.n	80095c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095c8:	2180      	movs	r1, #128	@ 0x80
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f001 fab0 	bl	800ab30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fecc 	bl	800a36e <USBD_CtlReceiveStatus>
 80095d6:	e00d      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d004      	beq.n	80095ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d103      	bne.n	80095f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095ec:	2180      	movs	r1, #128	@ 0x80
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 fa9e 	bl	800ab30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d11d      	bne.n	800963a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff fe81 	bl	8009306 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800960c:	e015      	b.n	800963a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00d      	beq.n	8009636 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009620:	2b03      	cmp	r3, #3
 8009622:	d108      	bne.n	8009636 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	7afa      	ldrb	r2, [r7, #11]
 800962e:	4611      	mov	r1, r2
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	4798      	blx	r3
 8009634:	e001      	b.n	800963a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	e000      	b.n	800963c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800964c:	2340      	movs	r3, #64	@ 0x40
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fa27 	bl	800aaa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2240      	movs	r2, #64	@ 0x40
 8009664:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009668:	2340      	movs	r3, #64	@ 0x40
 800966a:	2200      	movs	r2, #0
 800966c:	2180      	movs	r1, #128	@ 0x80
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 fa19 	bl	800aaa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2240      	movs	r2, #64	@ 0x40
 800967e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d009      	beq.n	80096bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6852      	ldr	r2, [r2, #4]
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	4611      	mov	r1, r2
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
  }

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr

080096e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2204      	movs	r2, #4
 80096fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971a:	2b04      	cmp	r3, #4
 800971c:	d105      	bne.n	800972a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009744:	2b03      	cmp	r3, #3
 8009746:	d10b      	bne.n	8009760 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009782:	2b40      	cmp	r3, #64	@ 0x40
 8009784:	d005      	beq.n	8009792 <USBD_StdDevReq+0x26>
 8009786:	2b40      	cmp	r3, #64	@ 0x40
 8009788:	d84f      	bhi.n	800982a <USBD_StdDevReq+0xbe>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <USBD_StdDevReq+0x36>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d14b      	bne.n	800982a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
      break;
 80097a0:	e048      	b.n	8009834 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d839      	bhi.n	800981e <USBD_StdDevReq+0xb2>
 80097aa:	a201      	add	r2, pc, #4	@ (adr r2, 80097b0 <USBD_StdDevReq+0x44>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	08009801 	.word	0x08009801
 80097b4:	08009815 	.word	0x08009815
 80097b8:	0800981f 	.word	0x0800981f
 80097bc:	0800980b 	.word	0x0800980b
 80097c0:	0800981f 	.word	0x0800981f
 80097c4:	080097e3 	.word	0x080097e3
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	0800981f 	.word	0x0800981f
 80097d0:	080097f7 	.word	0x080097f7
 80097d4:	080097ed 	.word	0x080097ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9dc 	bl	8009b98 <USBD_GetDescriptor>
          break;
 80097e0:	e022      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fb3f 	bl	8009e68 <USBD_SetAddress>
          break;
 80097ea:	e01d      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fb7e 	bl	8009ef0 <USBD_SetConfig>
          break;
 80097f4:	e018      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fc07 	bl	800a00c <USBD_GetConfig>
          break;
 80097fe:	e013      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc37 	bl	800a076 <USBD_GetStatus>
          break;
 8009808:	e00e      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fc65 	bl	800a0dc <USBD_SetFeature>
          break;
 8009812:	e009      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fc74 	bl	800a104 <USBD_ClrFeature>
          break;
 800981c:	e004      	b.n	8009828 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fcc9 	bl	800a1b8 <USBD_CtlError>
          break;
 8009826:	bf00      	nop
      }
      break;
 8009828:	e004      	b.n	8009834 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fcc3 	bl	800a1b8 <USBD_CtlError>
      break;
 8009832:	bf00      	nop
  }

  return ret;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop

08009840 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009856:	2b40      	cmp	r3, #64	@ 0x40
 8009858:	d005      	beq.n	8009866 <USBD_StdItfReq+0x26>
 800985a:	2b40      	cmp	r3, #64	@ 0x40
 800985c:	d82e      	bhi.n	80098bc <USBD_StdItfReq+0x7c>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <USBD_StdItfReq+0x26>
 8009862:	2b20      	cmp	r3, #32
 8009864:	d12a      	bne.n	80098bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800986c:	3b01      	subs	r3, #1
 800986e:	2b02      	cmp	r3, #2
 8009870:	d81d      	bhi.n	80098ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	889b      	ldrh	r3, [r3, #4]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	d813      	bhi.n	80098a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	88db      	ldrh	r3, [r3, #6]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d110      	bne.n	80098b8 <USBD_StdItfReq+0x78>
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10d      	bne.n	80098b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fd53 	bl	800a348 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098a2:	e009      	b.n	80098b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fc86 	bl	800a1b8 <USBD_CtlError>
          break;
 80098ac:	e004      	b.n	80098b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fc81 	bl	800a1b8 <USBD_CtlError>
          break;
 80098b6:	e000      	b.n	80098ba <USBD_StdItfReq+0x7a>
          break;
 80098b8:	bf00      	nop
      }
      break;
 80098ba:	e004      	b.n	80098c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fc7a 	bl	800a1b8 <USBD_CtlError>
      break;
 80098c4:	bf00      	nop
  }

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	889b      	ldrh	r3, [r3, #4]
 80098e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098ec:	2b40      	cmp	r3, #64	@ 0x40
 80098ee:	d007      	beq.n	8009900 <USBD_StdEPReq+0x30>
 80098f0:	2b40      	cmp	r3, #64	@ 0x40
 80098f2:	f200 8146 	bhi.w	8009b82 <USBD_StdEPReq+0x2b2>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <USBD_StdEPReq+0x40>
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	f040 8141 	bne.w	8009b82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
      break;
 800990e:	e13d      	b.n	8009b8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009918:	2b20      	cmp	r3, #32
 800991a:	d10a      	bne.n	8009932 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	e12d      	b.n	8009b8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d007      	beq.n	800994a <USBD_StdEPReq+0x7a>
 800993a:	2b03      	cmp	r3, #3
 800993c:	f300 811b 	bgt.w	8009b76 <USBD_StdEPReq+0x2a6>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d072      	beq.n	8009a2a <USBD_StdEPReq+0x15a>
 8009944:	2b01      	cmp	r3, #1
 8009946:	d03a      	beq.n	80099be <USBD_StdEPReq+0xee>
 8009948:	e115      	b.n	8009b76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009950:	2b02      	cmp	r3, #2
 8009952:	d002      	beq.n	800995a <USBD_StdEPReq+0x8a>
 8009954:	2b03      	cmp	r3, #3
 8009956:	d015      	beq.n	8009984 <USBD_StdEPReq+0xb4>
 8009958:	e02b      	b.n	80099b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00c      	beq.n	800997a <USBD_StdEPReq+0xaa>
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b80      	cmp	r3, #128	@ 0x80
 8009964:	d009      	beq.n	800997a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f8e0 	bl	800ab30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009970:	2180      	movs	r1, #128	@ 0x80
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f8dc 	bl	800ab30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009978:	e020      	b.n	80099bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc1b 	bl	800a1b8 <USBD_CtlError>
              break;
 8009982:	e01b      	b.n	80099bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	885b      	ldrh	r3, [r3, #2]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10e      	bne.n	80099aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <USBD_StdEPReq+0xda>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b80      	cmp	r3, #128	@ 0x80
 8009996:	d008      	beq.n	80099aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	88db      	ldrh	r3, [r3, #6]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f8c3 	bl	800ab30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fccc 	bl	800a348 <USBD_CtlSendStatus>

              break;
 80099b0:	e004      	b.n	80099bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fbff 	bl	800a1b8 <USBD_CtlError>
              break;
 80099ba:	bf00      	nop
          }
          break;
 80099bc:	e0e0      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d002      	beq.n	80099ce <USBD_StdEPReq+0xfe>
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d015      	beq.n	80099f8 <USBD_StdEPReq+0x128>
 80099cc:	e026      	b.n	8009a1c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <USBD_StdEPReq+0x11e>
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b80      	cmp	r3, #128	@ 0x80
 80099d8:	d009      	beq.n	80099ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f8a6 	bl	800ab30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099e4:	2180      	movs	r1, #128	@ 0x80
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f8a2 	bl	800ab30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099ec:	e01c      	b.n	8009a28 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fbe1 	bl	800a1b8 <USBD_CtlError>
              break;
 80099f6:	e017      	b.n	8009a28 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	885b      	ldrh	r3, [r3, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d112      	bne.n	8009a26 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f8ad 	bl	800ab6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc97 	bl	800a348 <USBD_CtlSendStatus>
              }
              break;
 8009a1a:	e004      	b.n	8009a26 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fbca 	bl	800a1b8 <USBD_CtlError>
              break;
 8009a24:	e000      	b.n	8009a28 <USBD_StdEPReq+0x158>
              break;
 8009a26:	bf00      	nop
          }
          break;
 8009a28:	e0aa      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d002      	beq.n	8009a3a <USBD_StdEPReq+0x16a>
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d032      	beq.n	8009a9e <USBD_StdEPReq+0x1ce>
 8009a38:	e097      	b.n	8009b6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <USBD_StdEPReq+0x180>
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b80      	cmp	r3, #128	@ 0x80
 8009a44:	d004      	beq.n	8009a50 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fbb5 	bl	800a1b8 <USBD_CtlError>
                break;
 8009a4e:	e091      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da0b      	bge.n	8009a70 <USBD_StdEPReq+0x1a0>
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	3310      	adds	r3, #16
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	e00b      	b.n	8009a88 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a70:	7bbb      	ldrb	r3, [r7, #14]
 8009a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	3304      	adds	r3, #4
 8009a88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2202      	movs	r2, #2
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fbf8 	bl	800a28c <USBD_CtlSendData>
              break;
 8009a9c:	e06a      	b.n	8009b74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da11      	bge.n	8009aca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	f003 020f 	and.w	r2, r3, #15
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	3318      	adds	r3, #24
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d117      	bne.n	8009af0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fb78 	bl	800a1b8 <USBD_CtlError>
                  break;
 8009ac8:	e054      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fb65 	bl	800a1b8 <USBD_CtlError>
                  break;
 8009aee:	e041      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	da0b      	bge.n	8009b10 <USBD_StdEPReq+0x240>
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	3310      	adds	r3, #16
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	e00b      	b.n	8009b28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	3304      	adds	r3, #4
 8009b28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <USBD_StdEPReq+0x266>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b80      	cmp	r3, #128	@ 0x80
 8009b34:	d103      	bne.n	8009b3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e00e      	b.n	8009b5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 f832 	bl	800abac <USBD_LL_IsStallEP>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e002      	b.n	8009b5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fb92 	bl	800a28c <USBD_CtlSendData>
              break;
 8009b68:	e004      	b.n	8009b74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fb23 	bl	800a1b8 <USBD_CtlError>
              break;
 8009b72:	bf00      	nop
          }
          break;
 8009b74:	e004      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fb1d 	bl	800a1b8 <USBD_CtlError>
          break;
 8009b7e:	bf00      	nop
      }
      break;
 8009b80:	e004      	b.n	8009b8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb17 	bl	800a1b8 <USBD_CtlError>
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	885b      	ldrh	r3, [r3, #2]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	f200 8128 	bhi.w	8009e0e <USBD_GetDescriptor+0x276>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <USBD_GetDescriptor+0x2c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009c39 	.word	0x08009c39
 8009bd0:	08009e0f 	.word	0x08009e0f
 8009bd4:	08009e0f 	.word	0x08009e0f
 8009bd8:	08009daf 	.word	0x08009daf
 8009bdc:	08009ddb 	.word	0x08009ddb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
      break;
 8009bf6:	e112      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7c1b      	ldrb	r3, [r3, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c08:	f107 0208 	add.w	r2, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	2202      	movs	r2, #2
 8009c18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c1a:	e100      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	f107 0208 	add.w	r2, r7, #8
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0f2      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	f200 80ac 	bhi.w	8009d9c <USBD_GetDescriptor+0x204>
 8009c44:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USBD_GetDescriptor+0xb4>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c99 	.word	0x08009c99
 8009c54:	08009ccd 	.word	0x08009ccd
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d35 	.word	0x08009d35
 8009c60:	08009d69 	.word	0x08009d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e091      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa94 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e089      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e077      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa7a 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e06f      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e05d      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa60 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e055      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e043      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa46 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e03b      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e029      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa2c 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e021      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7c12      	ldrb	r2, [r2, #16]
 8009d80:	f107 0108 	add.w	r1, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8a:	e00f      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa12 	bl	800a1b8 <USBD_CtlError>
            err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9a:	e007      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa0a 	bl	800a1b8 <USBD_CtlError>
          err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009daa:	e038      	b.n	8009e1e <USBD_GetDescriptor+0x286>
 8009dac:	e037      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	7c1b      	ldrb	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	f107 0208 	add.w	r2, r7, #8
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
 8009dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc8:	e029      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9f3 	bl	800a1b8 <USBD_CtlError>
        err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	e021      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7c1b      	ldrb	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	f107 0208 	add.w	r2, r7, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3301      	adds	r3, #1
 8009df8:	2207      	movs	r2, #7
 8009dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dfc:	e00f      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f9d9 	bl	800a1b8 <USBD_CtlError>
        err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	e007      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f9d1 	bl	800a1b8 <USBD_CtlError>
      err++;
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1c:	bf00      	nop
  }

  if (err != 0U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11c      	bne.n	8009e5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e24:	893b      	ldrh	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <USBD_GetDescriptor+0x2b6>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	88db      	ldrh	r3, [r3, #6]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00d      	beq.n	8009e4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88da      	ldrh	r2, [r3, #6]
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf28      	it	cs
 8009e3c:	4613      	movcs	r3, r2
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa1f 	bl	800a28c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa76 	bl	800a348 <USBD_CtlSendStatus>
 8009e5c:	e000      	b.n	8009e60 <USBD_GetDescriptor+0x2c8>
    return;
 8009e5e:	bf00      	nop
    }
  }
}
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop

08009e68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	889b      	ldrh	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d130      	bne.n	8009edc <USBD_SetAddress+0x74>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	88db      	ldrh	r3, [r3, #6]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d12c      	bne.n	8009edc <USBD_SetAddress+0x74>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	885b      	ldrh	r3, [r3, #2]
 8009e86:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e88:	d828      	bhi.n	8009edc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d104      	bne.n	8009eaa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f988 	bl	800a1b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea8:	e01d      	b.n	8009ee6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fea4 	bl	800ac04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa43 	bl	800a348 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed0:	e009      	b.n	8009ee6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eda:	e004      	b.n	8009ee6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f96a 	bl	800a1b8 <USBD_CtlError>
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	4b41      	ldr	r3, [pc, #260]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f04:	4b40      	ldr	r3, [pc, #256]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d904      	bls.n	8009f16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f952 	bl	800a1b8 <USBD_CtlError>
 8009f14:	e075      	b.n	800a002 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d002      	beq.n	8009f26 <USBD_SetConfig+0x36>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d023      	beq.n	8009f6c <USBD_SetConfig+0x7c>
 8009f24:	e062      	b.n	8009fec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f26:	4b38      	ldr	r3, [pc, #224]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01a      	beq.n	8009f64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f2e:	4b36      	ldr	r3, [pc, #216]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f40:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff f9e7 	bl	800931a <USBD_SetClassConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d104      	bne.n	8009f5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f92f 	bl	800a1b8 <USBD_CtlError>
            return;
 8009f5a:	e052      	b.n	800a002 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9f3 	bl	800a348 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f62:	e04e      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9ef 	bl	800a348 <USBD_CtlSendStatus>
        break;
 8009f6a:	e04a      	b.n	800a002 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f6c:	4b26      	ldr	r3, [pc, #152]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d112      	bne.n	8009f9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f7c:	4b22      	ldr	r3, [pc, #136]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f86:	4b20      	ldr	r3, [pc, #128]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff f9e3 	bl	8009358 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f9d8 	bl	800a348 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f98:	e033      	b.n	800a002 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <USBD_SetConfig+0x118>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d01d      	beq.n	8009fe4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff f9d1 	bl	8009358 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fb6:	4b14      	ldr	r3, [pc, #80]	@ (800a008 <USBD_SetConfig+0x118>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fc0:	4b11      	ldr	r3, [pc, #68]	@ (800a008 <USBD_SetConfig+0x118>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff f9a7 	bl	800931a <USBD_SetClassConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d104      	bne.n	8009fdc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8ef 	bl	800a1b8 <USBD_CtlError>
            return;
 8009fda:	e012      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9b3 	bl	800a348 <USBD_CtlSendStatus>
        break;
 8009fe2:	e00e      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9af 	bl	800a348 <USBD_CtlSendStatus>
        break;
 8009fea:	e00a      	b.n	800a002 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f8e2 	bl	800a1b8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ff4:	4b04      	ldr	r3, [pc, #16]	@ (800a008 <USBD_SetConfig+0x118>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff f9ac 	bl	8009358 <USBD_ClrClassConfig>
        break;
 800a000:	bf00      	nop
    }
  }
}
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	2000159c 	.word	0x2000159c

0800a00c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88db      	ldrh	r3, [r3, #6]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d004      	beq.n	800a028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8c9 	bl	800a1b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a026:	e022      	b.n	800a06e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a02e:	2b02      	cmp	r3, #2
 800a030:	dc02      	bgt.n	800a038 <USBD_GetConfig+0x2c>
 800a032:	2b00      	cmp	r3, #0
 800a034:	dc03      	bgt.n	800a03e <USBD_GetConfig+0x32>
 800a036:	e015      	b.n	800a064 <USBD_GetConfig+0x58>
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d00b      	beq.n	800a054 <USBD_GetConfig+0x48>
 800a03c:	e012      	b.n	800a064 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3308      	adds	r3, #8
 800a048:	2201      	movs	r2, #1
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f91d 	bl	800a28c <USBD_CtlSendData>
        break;
 800a052:	e00c      	b.n	800a06e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	2201      	movs	r2, #1
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f915 	bl	800a28c <USBD_CtlSendData>
        break;
 800a062:	e004      	b.n	800a06e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f8a6 	bl	800a1b8 <USBD_CtlError>
        break;
 800a06c:	bf00      	nop
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a086:	3b01      	subs	r3, #1
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d81e      	bhi.n	800a0ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d004      	beq.n	800a09e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f88e 	bl	800a1b8 <USBD_CtlError>
        break;
 800a09c:	e01a      	b.n	800a0d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f043 0202 	orr.w	r2, r3, #2
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8e2 	bl	800a28c <USBD_CtlSendData>
      break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f873 	bl	800a1b8 <USBD_CtlError>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d106      	bne.n	800a0fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f926 	bl	800a348 <USBD_CtlSendStatus>
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a114:	3b01      	subs	r3, #1
 800a116:	2b02      	cmp	r3, #2
 800a118:	d80b      	bhi.n	800a132 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	885b      	ldrh	r3, [r3, #2]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10c      	bne.n	800a13c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f90c 	bl	800a348 <USBD_CtlSendStatus>
      }
      break;
 800a130:	e004      	b.n	800a13c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f83f 	bl	800a1b8 <USBD_CtlError>
      break;
 800a13a:	e000      	b.n	800a13e <USBD_ClrFeature+0x3a>
      break;
 800a13c:	bf00      	nop
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	785a      	ldrb	r2, [r3, #1]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	3302      	adds	r3, #2
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	3303      	adds	r3, #3
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	b29b      	uxth	r3, r3
 800a172:	4413      	add	r3, r2
 800a174:	b29a      	uxth	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	3304      	adds	r3, #4
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	3305      	adds	r3, #5
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	4413      	add	r3, r2
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	3306      	adds	r3, #6
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	3307      	adds	r3, #7
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	80da      	strh	r2, [r3, #6]

}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr

0800a1b8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1c2:	2180      	movs	r1, #128	@ 0x80
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fcb3 	bl	800ab30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fcaf 	bl	800ab30 <USBD_LL_StallEP>
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d032      	beq.n	800a256 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f834 	bl	800a25e <USBD_GetLen>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	75fa      	strb	r2, [r7, #23]
 800a20a:	461a      	mov	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4413      	add	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7812      	ldrb	r2, [r2, #0]
 800a214:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	75fa      	strb	r2, [r7, #23]
 800a21c:	461a      	mov	r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	4413      	add	r3, r2
 800a222:	2203      	movs	r2, #3
 800a224:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a226:	e012      	b.n	800a24e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	60fa      	str	r2, [r7, #12]
 800a22e:	7dfa      	ldrb	r2, [r7, #23]
 800a230:	1c51      	adds	r1, r2, #1
 800a232:	75f9      	strb	r1, [r7, #23]
 800a234:	4611      	mov	r1, r2
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	440a      	add	r2, r1
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	75fa      	strb	r2, [r7, #23]
 800a244:	461a      	mov	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	4413      	add	r3, r2
 800a24a:	2200      	movs	r2, #0
 800a24c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e8      	bne.n	800a228 <USBD_GetString+0x4e>
    }
  }
}
 800a256:	bf00      	nop
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a26a:	e005      	b.n	800a278 <USBD_GetLen+0x1a>
  {
    len++;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	3301      	adds	r3, #1
 800a270:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3301      	adds	r3, #1
 800a276:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f5      	bne.n	800a26c <USBD_GetLen+0xe>
  }

  return len;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2202      	movs	r2, #2
 800a29e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2a2:	88fa      	ldrh	r2, [r7, #6]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fcc4 	bl	800ac42 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fcb2 	bl	800ac42 <USBD_LL_Transmit>

  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	2100      	movs	r1, #0
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 fcb7 	bl	800ac88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	4613      	mov	r3, r2
 800a330:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a332:	88fb      	ldrh	r3, [r7, #6]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	2100      	movs	r1, #0
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fca5 	bl	800ac88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2204      	movs	r2, #4
 800a354:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a358:	2300      	movs	r3, #0
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fc6f 	bl	800ac42 <USBD_LL_Transmit>

  return USBD_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2205      	movs	r2, #5
 800a37a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a37e:	2300      	movs	r3, #0
 800a380:	2200      	movs	r2, #0
 800a382:	2100      	movs	r1, #0
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fc7f 	bl	800ac88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a398:	2200      	movs	r2, #0
 800a39a:	4912      	ldr	r1, [pc, #72]	@ (800a3e4 <MX_USB_DEVICE_Init+0x50>)
 800a39c:	4812      	ldr	r0, [pc, #72]	@ (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a39e:	f7fe ff62 	bl	8009266 <USBD_Init>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3a8:	f7f7 f832 	bl	8001410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3ac:	490f      	ldr	r1, [pc, #60]	@ (800a3ec <MX_USB_DEVICE_Init+0x58>)
 800a3ae:	480e      	ldr	r0, [pc, #56]	@ (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3b0:	f7fe ff84 	bl	80092bc <USBD_RegisterClass>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3ba:	f7f7 f829 	bl	8001410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3be:	490c      	ldr	r1, [pc, #48]	@ (800a3f0 <MX_USB_DEVICE_Init+0x5c>)
 800a3c0:	4809      	ldr	r0, [pc, #36]	@ (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3c2:	f7fe feb5 	bl	8009130 <USBD_CDC_RegisterInterface>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3cc:	f7f7 f820 	bl	8001410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3d0:	4805      	ldr	r0, [pc, #20]	@ (800a3e8 <MX_USB_DEVICE_Init+0x54>)
 800a3d2:	f7fe ff8c 	bl	80092ee <USBD_Start>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3dc:	f7f7 f818 	bl	8001410 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3e0:	bf00      	nop
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000130 	.word	0x20000130
 800a3e8:	200015a0 	.word	0x200015a0
 800a3ec:	2000001c 	.word	0x2000001c
 800a3f0:	20000120 	.word	0x20000120

0800a3f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4905      	ldr	r1, [pc, #20]	@ (800a410 <CDC_Init_FS+0x1c>)
 800a3fc:	4805      	ldr	r0, [pc, #20]	@ (800a414 <CDC_Init_FS+0x20>)
 800a3fe:	f7fe fead 	bl	800915c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a402:	4905      	ldr	r1, [pc, #20]	@ (800a418 <CDC_Init_FS+0x24>)
 800a404:	4803      	ldr	r0, [pc, #12]	@ (800a414 <CDC_Init_FS+0x20>)
 800a406:	f7fe fec2 	bl	800918e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a40a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20001964 	.word	0x20001964
 800a414:	200015a0 	.word	0x200015a0
 800a418:	20001864 	.word	0x20001864

0800a41c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a422:	4618      	mov	r0, r3
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr
	...

0800a42c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
 800a438:	4613      	mov	r3, r2
 800a43a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	2b23      	cmp	r3, #35	@ 0x23
 800a440:	f200 808c 	bhi.w	800a55c <CDC_Control_FS+0x130>
 800a444:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <CDC_Control_FS+0x20>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a55d 	.word	0x0800a55d
 800a450:	0800a55d 	.word	0x0800a55d
 800a454:	0800a55d 	.word	0x0800a55d
 800a458:	0800a55d 	.word	0x0800a55d
 800a45c:	0800a55d 	.word	0x0800a55d
 800a460:	0800a55d 	.word	0x0800a55d
 800a464:	0800a55d 	.word	0x0800a55d
 800a468:	0800a55d 	.word	0x0800a55d
 800a46c:	0800a55d 	.word	0x0800a55d
 800a470:	0800a55d 	.word	0x0800a55d
 800a474:	0800a55d 	.word	0x0800a55d
 800a478:	0800a55d 	.word	0x0800a55d
 800a47c:	0800a55d 	.word	0x0800a55d
 800a480:	0800a55d 	.word	0x0800a55d
 800a484:	0800a55d 	.word	0x0800a55d
 800a488:	0800a55d 	.word	0x0800a55d
 800a48c:	0800a55d 	.word	0x0800a55d
 800a490:	0800a55d 	.word	0x0800a55d
 800a494:	0800a55d 	.word	0x0800a55d
 800a498:	0800a55d 	.word	0x0800a55d
 800a49c:	0800a55d 	.word	0x0800a55d
 800a4a0:	0800a55d 	.word	0x0800a55d
 800a4a4:	0800a55d 	.word	0x0800a55d
 800a4a8:	0800a55d 	.word	0x0800a55d
 800a4ac:	0800a55d 	.word	0x0800a55d
 800a4b0:	0800a55d 	.word	0x0800a55d
 800a4b4:	0800a55d 	.word	0x0800a55d
 800a4b8:	0800a55d 	.word	0x0800a55d
 800a4bc:	0800a55d 	.word	0x0800a55d
 800a4c0:	0800a55d 	.word	0x0800a55d
 800a4c4:	0800a55d 	.word	0x0800a55d
 800a4c8:	0800a55d 	.word	0x0800a55d
 800a4cc:	0800a4dd 	.word	0x0800a4dd
 800a4d0:	0800a517 	.word	0x0800a517
 800a4d4:	0800a55d 	.word	0x0800a55d
 800a4d8:	0800a55d 	.word	0x0800a55d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	4b22      	ldr	r3, [pc, #136]	@ (800a56c <CDC_Control_FS+0x140>)
 800a4e2:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	785a      	ldrb	r2, [r3, #1]
 800a4e8:	4b20      	ldr	r3, [pc, #128]	@ (800a56c <CDC_Control_FS+0x140>)
 800a4ea:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	789a      	ldrb	r2, [r3, #2]
 800a4f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a56c <CDC_Control_FS+0x140>)
 800a4f2:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	78da      	ldrb	r2, [r3, #3]
 800a4f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a56c <CDC_Control_FS+0x140>)
 800a4fa:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	791a      	ldrb	r2, [r3, #4]
 800a500:	4b1a      	ldr	r3, [pc, #104]	@ (800a56c <CDC_Control_FS+0x140>)
 800a502:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	795a      	ldrb	r2, [r3, #5]
 800a508:	4b18      	ldr	r3, [pc, #96]	@ (800a56c <CDC_Control_FS+0x140>)
 800a50a:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	799a      	ldrb	r2, [r3, #6]
 800a510:	4b16      	ldr	r3, [pc, #88]	@ (800a56c <CDC_Control_FS+0x140>)
 800a512:	719a      	strb	r2, [r3, #6]

    break;
 800a514:	e023      	b.n	800a55e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a516:	4b15      	ldr	r3, [pc, #84]	@ (800a56c <CDC_Control_FS+0x140>)
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	4a12      	ldr	r2, [pc, #72]	@ (800a56c <CDC_Control_FS+0x140>)
 800a524:	7852      	ldrb	r2, [r2, #1]
 800a526:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	3302      	adds	r3, #2
 800a52c:	4a0f      	ldr	r2, [pc, #60]	@ (800a56c <CDC_Control_FS+0x140>)
 800a52e:	7892      	ldrb	r2, [r2, #2]
 800a530:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	3303      	adds	r3, #3
 800a536:	4a0d      	ldr	r2, [pc, #52]	@ (800a56c <CDC_Control_FS+0x140>)
 800a538:	78d2      	ldrb	r2, [r2, #3]
 800a53a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	3304      	adds	r3, #4
 800a540:	4a0a      	ldr	r2, [pc, #40]	@ (800a56c <CDC_Control_FS+0x140>)
 800a542:	7912      	ldrb	r2, [r2, #4]
 800a544:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	3305      	adds	r3, #5
 800a54a:	4a08      	ldr	r2, [pc, #32]	@ (800a56c <CDC_Control_FS+0x140>)
 800a54c:	7952      	ldrb	r2, [r2, #5]
 800a54e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	3306      	adds	r3, #6
 800a554:	4a05      	ldr	r2, [pc, #20]	@ (800a56c <CDC_Control_FS+0x140>)
 800a556:	7992      	ldrb	r2, [r2, #6]
 800a558:	701a      	strb	r2, [r3, #0]
    break;
 800a55a:	e000      	b.n	800a55e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a55c:	bf00      	nop
  }

  return (USBD_OK);
 800a55e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	bc80      	pop	{r7}
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20001a64 	.word	0x20001a64

0800a570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a57a:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ac <CDC_Receive_FS+0x3c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a582:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <CDC_Receive_FS+0x3c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	6812      	ldr	r2, [r2, #0]
 800a58a:	b292      	uxth	r2, r2
 800a58c:	4611      	mov	r1, r2
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	4806      	ldr	r0, [pc, #24]	@ (800a5b0 <CDC_Receive_FS+0x40>)
 800a596:	f7fe fdfa 	bl	800918e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a59a:	4805      	ldr	r0, [pc, #20]	@ (800a5b0 <CDC_Receive_FS+0x40>)
 800a59c:	f7fe fe39 	bl	8009212 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a5a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20001a6c 	.word	0x20001a6c
 800a5b0:	200015a0 	.word	0x200015a0

0800a5b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a5fc <CDC_Transmit_FS+0x48>)
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e00b      	b.n	800a5f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a5da:	887b      	ldrh	r3, [r7, #2]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4806      	ldr	r0, [pc, #24]	@ (800a5fc <CDC_Transmit_FS+0x48>)
 800a5e2:	f7fe fdbb 	bl	800915c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a5e6:	4805      	ldr	r0, [pc, #20]	@ (800a5fc <CDC_Transmit_FS+0x48>)
 800a5e8:	f7fe fde4 	bl	80091b4 <USBD_CDC_TransmitPacket>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200015a0 	.word	0x200015a0

0800a600 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a608:	4a03      	ldr	r2, [pc, #12]	@ (800a618 <CDC_AttachRxData+0x18>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6013      	str	r3, [r2, #0]
}
 800a60e:	bf00      	nop
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr
 800a618:	20001a6c 	.word	0x20001a6c

0800a61c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2212      	movs	r2, #18
 800a62c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a62e:	4b03      	ldr	r3, [pc, #12]	@ (800a63c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	bc80      	pop	{r7}
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	2000014c 	.word	0x2000014c

0800a640 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2204      	movs	r2, #4
 800a650:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a652:	4b03      	ldr	r3, [pc, #12]	@ (800a660 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000160 	.word	0x20000160

0800a664 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d105      	bne.n	800a682 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	4907      	ldr	r1, [pc, #28]	@ (800a698 <USBD_FS_ProductStrDescriptor+0x34>)
 800a67a:	4808      	ldr	r0, [pc, #32]	@ (800a69c <USBD_FS_ProductStrDescriptor+0x38>)
 800a67c:	f7ff fdad 	bl	800a1da <USBD_GetString>
 800a680:	e004      	b.n	800a68c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4904      	ldr	r1, [pc, #16]	@ (800a698 <USBD_FS_ProductStrDescriptor+0x34>)
 800a686:	4805      	ldr	r0, [pc, #20]	@ (800a69c <USBD_FS_ProductStrDescriptor+0x38>)
 800a688:	f7ff fda7 	bl	800a1da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a68c:	4b02      	ldr	r3, [pc, #8]	@ (800a698 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20001a70 	.word	0x20001a70
 800a69c:	0800adfc 	.word	0x0800adfc

0800a6a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	4904      	ldr	r1, [pc, #16]	@ (800a6c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6b0:	4804      	ldr	r0, [pc, #16]	@ (800a6c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6b2:	f7ff fd92 	bl	800a1da <USBD_GetString>
  return USBD_StrDesc;
 800a6b6:	4b02      	ldr	r3, [pc, #8]	@ (800a6c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001a70 	.word	0x20001a70
 800a6c4:	0800ae14 	.word	0x0800ae14

0800a6c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	6039      	str	r1, [r7, #0]
 800a6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	221a      	movs	r2, #26
 800a6d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6da:	f000 f843 	bl	800a764 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6de:	4b02      	ldr	r3, [pc, #8]	@ (800a6e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000164 	.word	0x20000164

0800a6ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d105      	bne.n	800a70a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4907      	ldr	r1, [pc, #28]	@ (800a720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a702:	4808      	ldr	r0, [pc, #32]	@ (800a724 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a704:	f7ff fd69 	bl	800a1da <USBD_GetString>
 800a708:	e004      	b.n	800a714 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	4904      	ldr	r1, [pc, #16]	@ (800a720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a70e:	4805      	ldr	r0, [pc, #20]	@ (800a724 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a710:	f7ff fd63 	bl	800a1da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a714:	4b02      	ldr	r3, [pc, #8]	@ (800a720 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	20001a70 	.word	0x20001a70
 800a724:	0800ae28 	.word	0x0800ae28

0800a728 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	4603      	mov	r3, r0
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d105      	bne.n	800a746 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4907      	ldr	r1, [pc, #28]	@ (800a75c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a73e:	4808      	ldr	r0, [pc, #32]	@ (800a760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a740:	f7ff fd4b 	bl	800a1da <USBD_GetString>
 800a744:	e004      	b.n	800a750 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4904      	ldr	r1, [pc, #16]	@ (800a75c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a74a:	4805      	ldr	r0, [pc, #20]	@ (800a760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a74c:	f7ff fd45 	bl	800a1da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a750:	4b02      	ldr	r3, [pc, #8]	@ (800a75c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20001a70 	.word	0x20001a70
 800a760:	0800ae34 	.word	0x0800ae34

0800a764 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a76a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a8 <Get_SerialNum+0x44>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a770:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ac <Get_SerialNum+0x48>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a776:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b0 <Get_SerialNum+0x4c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4413      	add	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d009      	beq.n	800a79e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a78a:	2208      	movs	r2, #8
 800a78c:	4909      	ldr	r1, [pc, #36]	@ (800a7b4 <Get_SerialNum+0x50>)
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 f814 	bl	800a7bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a794:	2204      	movs	r2, #4
 800a796:	4908      	ldr	r1, [pc, #32]	@ (800a7b8 <Get_SerialNum+0x54>)
 800a798:	68b8      	ldr	r0, [r7, #8]
 800a79a:	f000 f80f 	bl	800a7bc <IntToUnicode>
  }
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	1ffff7e8 	.word	0x1ffff7e8
 800a7ac:	1ffff7ec 	.word	0x1ffff7ec
 800a7b0:	1ffff7f0 	.word	0x1ffff7f0
 800a7b4:	20000166 	.word	0x20000166
 800a7b8:	20000176 	.word	0x20000176

0800a7bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]
 800a7d2:	e027      	b.n	800a824 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	0f1b      	lsrs	r3, r3, #28
 800a7d8:	2b09      	cmp	r3, #9
 800a7da:	d80b      	bhi.n	800a7f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	0f1b      	lsrs	r3, r3, #28
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	440b      	add	r3, r1
 800a7ec:	3230      	adds	r2, #48	@ 0x30
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	e00a      	b.n	800a80a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	0f1b      	lsrs	r3, r3, #28
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	4619      	mov	r1, r3
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	440b      	add	r3, r1
 800a804:	3237      	adds	r2, #55	@ 0x37
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	3301      	adds	r3, #1
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	4413      	add	r3, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	3301      	adds	r3, #1
 800a822:	75fb      	strb	r3, [r7, #23]
 800a824:	7dfa      	ldrb	r2, [r7, #23]
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d3d3      	bcc.n	800a7d4 <IntToUnicode+0x18>
  }
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	371c      	adds	r7, #28
 800a832:	46bd      	mov	sp, r7
 800a834:	bc80      	pop	{r7}
 800a836:	4770      	bx	lr

0800a838 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a0d      	ldr	r2, [pc, #52]	@ (800a87c <HAL_PCD_MspInit+0x44>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d113      	bne.n	800a872 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <HAL_PCD_MspInit+0x48>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	4a0c      	ldr	r2, [pc, #48]	@ (800a880 <HAL_PCD_MspInit+0x48>)
 800a850:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a854:	61d3      	str	r3, [r2, #28]
 800a856:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <HAL_PCD_MspInit+0x48>)
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	2014      	movs	r0, #20
 800a868:	f7f7 fd01 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a86c:	2014      	movs	r0, #20
 800a86e:	f7f7 fd1a 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40005c00 	.word	0x40005c00
 800a880:	40021000 	.word	0x40021000

0800a884 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe fd6f 	bl	800937e <USBD_LL_SetupStage>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a8ba:	78fa      	ldrb	r2, [r7, #3]
 800a8bc:	6879      	ldr	r1, [r7, #4]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	78fb      	ldrb	r3, [r7, #3]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7fe fda1 	bl	8009418 <USBD_LL_DataOutStage>
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a8f0:	78fa      	ldrb	r2, [r7, #3]
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	440b      	add	r3, r1
 800a8fe:	333c      	adds	r3, #60	@ 0x3c
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	4619      	mov	r1, r3
 800a906:	f7fe fdf8 	bl	80094fa <USBD_LL_DataInStage>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a920:	4618      	mov	r0, r3
 800a922:	f7fe ff08 	bl	8009736 <USBD_LL_SOF>
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a936:	2301      	movs	r3, #1
 800a938:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d001      	beq.n	800a946 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a942:	f7f6 fd65 	bl	8001410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a94c:	7bfa      	ldrb	r2, [r7, #15]
 800a94e:	4611      	mov	r1, r2
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe feb8 	bl	80096c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe fe71 	bl	8009644 <USBD_LL_Reset>
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe feb2 	bl	80096e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a988:	4b04      	ldr	r3, [pc, #16]	@ (800a99c <HAL_PCD_SuspendCallback+0x30>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	4a03      	ldr	r2, [pc, #12]	@ (800a99c <HAL_PCD_SuspendCallback+0x30>)
 800a98e:	f043 0306 	orr.w	r3, r3, #6
 800a992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	e000ed00 	.word	0xe000ed00

0800a9a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe feac 	bl	800970c <USBD_LL_Resume>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a9c4:	4a28      	ldr	r2, [pc, #160]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a26      	ldr	r2, [pc, #152]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a9d4:	4b24      	ldr	r3, [pc, #144]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9d6:	4a25      	ldr	r2, [pc, #148]	@ (800aa6c <USBD_LL_Init+0xb0>)
 800a9d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a9da:	4b23      	ldr	r3, [pc, #140]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9dc:	2208      	movs	r2, #8
 800a9de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9e0:	4b21      	ldr	r3, [pc, #132]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9e6:	4b20      	ldr	r3, [pc, #128]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9f2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9f8:	481b      	ldr	r0, [pc, #108]	@ (800aa68 <USBD_LL_Init+0xac>)
 800a9fa:	f7f8 fa0b 	bl	8002e14 <HAL_PCD_Init>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aa04:	f7f6 fd04 	bl	8001410 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa0e:	2318      	movs	r3, #24
 800aa10:	2200      	movs	r2, #0
 800aa12:	2100      	movs	r1, #0
 800aa14:	f7f9 ff29 	bl	800486a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa1e:	2358      	movs	r3, #88	@ 0x58
 800aa20:	2200      	movs	r2, #0
 800aa22:	2180      	movs	r1, #128	@ 0x80
 800aa24:	f7f9 ff21 	bl	800486a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa2e:	23c0      	movs	r3, #192	@ 0xc0
 800aa30:	2200      	movs	r2, #0
 800aa32:	2181      	movs	r1, #129	@ 0x81
 800aa34:	f7f9 ff19 	bl	800486a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa3e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800aa42:	2200      	movs	r2, #0
 800aa44:	2101      	movs	r1, #1
 800aa46:	f7f9 ff10 	bl	800486a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa54:	2200      	movs	r2, #0
 800aa56:	2182      	movs	r1, #130	@ 0x82
 800aa58:	f7f9 ff07 	bl	800486a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20001c70 	.word	0x20001c70
 800aa6c:	40005c00 	.word	0x40005c00

0800aa70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7f8 fac3 	bl	8003012 <HAL_PCD_Start>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 f94e 	bl	800ad34 <USBD_Get_USB_Status>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	461a      	mov	r2, r3
 800aab4:	4603      	mov	r3, r0
 800aab6:	70fb      	strb	r3, [r7, #3]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70bb      	strb	r3, [r7, #2]
 800aabc:	4613      	mov	r3, r2
 800aabe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aace:	78bb      	ldrb	r3, [r7, #2]
 800aad0:	883a      	ldrh	r2, [r7, #0]
 800aad2:	78f9      	ldrb	r1, [r7, #3]
 800aad4:	f7f8 fc18 	bl	8003308 <HAL_PCD_EP_Open>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f928 	bl	800ad34 <USBD_Get_USB_Status>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	460b      	mov	r3, r1
 800aafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab0c:	78fa      	ldrb	r2, [r7, #3]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7f8 fc56 	bl	80033c2 <HAL_PCD_EP_Close>
 800ab16:	4603      	mov	r3, r0
 800ab18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 f909 	bl	800ad34 <USBD_Get_USB_Status>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab4a:	78fa      	ldrb	r2, [r7, #3]
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7f8 fcfe 	bl	8003550 <HAL_PCD_EP_SetStall>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f8ea 	bl	800ad34 <USBD_Get_USB_Status>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	460b      	mov	r3, r1
 800ab78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7f8 fd3f 	bl	8003610 <HAL_PCD_EP_ClrStall>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 f8cb 	bl	800ad34 <USBD_Get_USB_Status>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	da0c      	bge.n	800abe2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abce:	68f9      	ldr	r1, [r7, #12]
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	440b      	add	r3, r1
 800abdc:	3302      	adds	r3, #2
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	e00b      	b.n	800abfa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abe2:	78fb      	ldrb	r3, [r7, #3]
 800abe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abe8:	68f9      	ldr	r1, [r7, #12]
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800abf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr

0800ac04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f8 fb4b 	bl	80032be <HAL_PCD_SetAddress>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f880 	bl	800ad34 <USBD_Get_USB_Status>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	460b      	mov	r3, r1
 800ac50:	72fb      	strb	r3, [r7, #11]
 800ac52:	4613      	mov	r3, r2
 800ac54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac64:	893b      	ldrh	r3, [r7, #8]
 800ac66:	7af9      	ldrb	r1, [r7, #11]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	f7f8 fc3a 	bl	80034e2 <HAL_PCD_EP_Transmit>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f85d 	bl	800ad34 <USBD_Get_USB_Status>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	461a      	mov	r2, r3
 800ac94:	460b      	mov	r3, r1
 800ac96:	72fb      	strb	r3, [r7, #11]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800acaa:	893b      	ldrh	r3, [r7, #8]
 800acac:	7af9      	ldrb	r1, [r7, #11]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	f7f8 fbcf 	bl	8003452 <HAL_PCD_EP_Receive>
 800acb4:	4603      	mov	r3, r0
 800acb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 f83a 	bl	800ad34 <USBD_Get_USB_Status>
 800acc0:	4603      	mov	r3, r0
 800acc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	460b      	mov	r3, r1
 800acd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ace0:	78fa      	ldrb	r2, [r7, #3]
 800ace2:	4611      	mov	r1, r2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f8 fbe5 	bl	80034b4 <HAL_PCD_EP_GetRxCount>
 800acea:	4603      	mov	r3, r0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <USBD_static_malloc+0x14>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bc80      	pop	{r7}
 800ad06:	4770      	bx	lr
 800ad08:	20001f60 	.word	0x20001f60

0800ad0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]

}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bc80      	pop	{r7}
 800ad1c:	4770      	bx	lr

0800ad1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr

0800ad34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	d817      	bhi.n	800ad78 <USBD_Get_USB_Status+0x44>
 800ad48:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <USBD_Get_USB_Status+0x1c>)
 800ad4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4e:	bf00      	nop
 800ad50:	0800ad61 	.word	0x0800ad61
 800ad54:	0800ad67 	.word	0x0800ad67
 800ad58:	0800ad6d 	.word	0x0800ad6d
 800ad5c:	0800ad73 	.word	0x0800ad73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73fb      	strb	r3, [r7, #15]
    break;
 800ad64:	e00b      	b.n	800ad7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad66:	2302      	movs	r3, #2
 800ad68:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6a:	e008      	b.n	800ad7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad70:	e005      	b.n	800ad7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad72:	2302      	movs	r3, #2
 800ad74:	73fb      	strb	r3, [r7, #15]
    break;
 800ad76:	e002      	b.n	800ad7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad7c:	bf00      	nop
  }
  return usb_status;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop

0800ad8c <memset>:
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	4402      	add	r2, r0
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d100      	bne.n	800ad96 <memset+0xa>
 800ad94:	4770      	bx	lr
 800ad96:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9a:	e7f9      	b.n	800ad90 <memset+0x4>

0800ad9c <__libc_init_array>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	2600      	movs	r6, #0
 800ada0:	4d0c      	ldr	r5, [pc, #48]	@ (800add4 <__libc_init_array+0x38>)
 800ada2:	4c0d      	ldr	r4, [pc, #52]	@ (800add8 <__libc_init_array+0x3c>)
 800ada4:	1b64      	subs	r4, r4, r5
 800ada6:	10a4      	asrs	r4, r4, #2
 800ada8:	42a6      	cmp	r6, r4
 800adaa:	d109      	bne.n	800adc0 <__libc_init_array+0x24>
 800adac:	f000 f81a 	bl	800ade4 <_init>
 800adb0:	2600      	movs	r6, #0
 800adb2:	4d0a      	ldr	r5, [pc, #40]	@ (800addc <__libc_init_array+0x40>)
 800adb4:	4c0a      	ldr	r4, [pc, #40]	@ (800ade0 <__libc_init_array+0x44>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	42a6      	cmp	r6, r4
 800adbc:	d105      	bne.n	800adca <__libc_init_array+0x2e>
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc4:	4798      	blx	r3
 800adc6:	3601      	adds	r6, #1
 800adc8:	e7ee      	b.n	800ada8 <__libc_init_array+0xc>
 800adca:	f855 3b04 	ldr.w	r3, [r5], #4
 800adce:	4798      	blx	r3
 800add0:	3601      	adds	r6, #1
 800add2:	e7f2      	b.n	800adba <__libc_init_array+0x1e>
 800add4:	0800ae70 	.word	0x0800ae70
 800add8:	0800ae70 	.word	0x0800ae70
 800addc:	0800ae70 	.word	0x0800ae70
 800ade0:	0800ae74 	.word	0x0800ae74

0800ade4 <_init>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr

0800adf0 <_fini>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	bf00      	nop
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr
