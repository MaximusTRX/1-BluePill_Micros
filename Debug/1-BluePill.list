
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a9e0  0800a9e0  0000b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa54  0800aa54  0000c180  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa54  0800aa54  0000c180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa54  0800aa54  0000c180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa54  0800aa54  0000ba54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa58  0800aa58  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aa5c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  20000180  0800abdc  0000c180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800abdc  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019394  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  0002553d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000290f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  0002a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5c2  00000000  00000000  0002b911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2b7  00000000  00000000  00046ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096930  00000000  00000000  0006418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faaba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  000fab00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00100a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9c8 	.word	0x0800a9c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800a9c8 	.word	0x0800a9c8

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0 = bufADC[0];
 8000154:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000156:	881a      	ldrh	r2, [r3, #0]
 8000158:	4b12      	ldr	r3, [pc, #72]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800015a:	801a      	strh	r2, [r3, #0]
	ir.sensor1 = bufADC[1];
 800015c:	4b10      	ldr	r3, [pc, #64]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800015e:	885a      	ldrh	r2, [r3, #2]
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000162:	805a      	strh	r2, [r3, #2]
	ir.sensor2 = bufADC[2];
 8000164:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000166:	889a      	ldrh	r2, [r3, #4]
 8000168:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800016a:	809a      	strh	r2, [r3, #4]
	ir.sensor3 = bufADC[3];
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800016e:	88da      	ldrh	r2, [r3, #6]
 8000170:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000172:	80da      	strh	r2, [r3, #6]
	ir.sensor4 = bufADC[4];
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000176:	891a      	ldrh	r2, [r3, #8]
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800017a:	811a      	strh	r2, [r3, #8]
	ir.sensor5 = bufADC[5];
 800017c:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800017e:	895a      	ldrh	r2, [r3, #10]
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000182:	815a      	strh	r2, [r3, #10]
	ir.sensor6 = bufADC[6];
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000186:	899a      	ldrh	r2, [r3, #12]
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800018a:	819a      	strh	r2, [r3, #12]
	ir.sensor7 = bufADC[7];
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000192:	81da      	strh	r2, [r3, #14]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000564 	.word	0x20000564
 80001a4:	200003ac 	.word	0x200003ac

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {	//Entra cada 250us, 1ms= x4, 10ms= x40, 100ms= x400
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a21      	ldr	r2, [pc, #132]	@ (800023c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d13a      	bne.n	8000230 <HAL_TIM_PeriodElapsedCallback+0x88>
		flags1.F250US = 1;
 80001ba:	4a21      	ldr	r2, [pc, #132]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80001bc:	7813      	ldrb	r3, [r2, #0]
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	7013      	strb	r3, [r2, #0]

		t10ms--;
 80001c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	3b01      	subs	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80001ce:	701a      	strb	r2, [r3, #0]

		if(t10ms == 0){
 80001d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d113      	bne.n	8000200 <HAL_TIM_PeriodElapsedCallback+0x58>
			flags1.F10MS = 1;
 80001d8:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80001da:	7813      	ldrb	r3, [r2, #0]
 80001dc:	f043 0302 	orr.w	r3, r3, #2
 80001e0:	7013      	strb	r3, [r2, #0]
			t10ms = TIME10ms;
 80001e2:	4b18      	ldr	r3, [pc, #96]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80001e4:	2228      	movs	r2, #40	@ 0x28
 80001e6:	701a      	strb	r2, [r3, #0]

			t100ms--;
 80001e8:	4b17      	ldr	r3, [pc, #92]	@ (8000248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3b01      	subs	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b15      	ldr	r3, [pc, #84]	@ (8000248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001f2:	701a      	strb	r2, [r3, #0]
			t500ms--;
 80001f4:	4b15      	ldr	r3, [pc, #84]	@ (800024c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b13      	ldr	r3, [pc, #76]	@ (800024c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001fe:	701a      	strb	r2, [r3, #0]
		}

		if(t100ms == 0){
 8000200:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d107      	bne.n	8000218 <HAL_TIM_PeriodElapsedCallback+0x70>
			flags1.F100MS = 1;
 8000208:	4a0d      	ldr	r2, [pc, #52]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800020a:	7813      	ldrb	r3, [r2, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	7013      	strb	r3, [r2, #0]
			t100ms=TIME100ms;
 8000212:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000214:	220a      	movs	r2, #10
 8000216:	701a      	strb	r2, [r3, #0]
		}

		if(t500ms == 0){
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d107      	bne.n	8000230 <HAL_TIM_PeriodElapsedCallback+0x88>
			flags1.F500MS = 1;
 8000220:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000222:	7813      	ldrb	r3, [r2, #0]
 8000224:	f043 0308 	orr.w	r3, r3, #8
 8000228:	7013      	strb	r3, [r2, #0]
			t500ms=TIME500ms;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800022c:	2232      	movs	r2, #50	@ 0x32
 800022e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40012c00 	.word	0x40012c00
 8000240:	200003a8 	.word	0x200003a8
 8000244:	20000000 	.word	0x20000000
 8000248:	20000001 	.word	0x20000001
 800024c:	20000002 	.word	0x20000002

08000250 <HAL_UART_RxCpltCallback>:

/*=============>Recepción de datos desde USART<=============
 * Interrupción que es llamada cuando se produce una recepción de datos.
 * Cargo los datos recibidos al Buffer de Recepción
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <HAL_UART_RxCpltCallback+0x38>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d10d      	bne.n	800027e <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 8000262:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <HAL_UART_RxCpltCallback+0x3c>)
 8000264:	791b      	ldrb	r3, [r3, #4]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	b2d1      	uxtb	r1, r2
 800026a:	4a08      	ldr	r2, [pc, #32]	@ (800028c <HAL_UART_RxCpltCallback+0x3c>)
 800026c:	7111      	strb	r1, [r2, #4]
 800026e:	3308      	adds	r3, #8
 8000270:	4a06      	ldr	r2, [pc, #24]	@ (800028c <HAL_UART_RxCpltCallback+0x3c>)
 8000272:	4413      	add	r3, r2
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	4805      	ldr	r0, [pc, #20]	@ (8000290 <HAL_UART_RxCpltCallback+0x40>)
 800027a:	f005 fa3f 	bl	80056fc <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40013800 	.word	0x40013800
 800028c:	200001a0 	.word	0x200001a0
 8000290:	2000051c 	.word	0x2000051c

08000294 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e00c      	b.n	80002c0 <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4413      	add	r3, r2
 80002ac:	4a09      	ldr	r2, [pc, #36]	@ (80002d4 <USBReceive+0x40>)
 80002ae:	7912      	ldrb	r2, [r2, #4]
 80002b0:	4611      	mov	r1, r2
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <USBReceive+0x40>)
 80002b6:	440b      	add	r3, r1
 80002b8:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	dbee      	blt.n	80002a6 <USBReceive+0x12>
	}


}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	200001a0 	.word	0x200001a0

080002d8 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80002e0:	e0e3      	b.n	80004aa <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 80002e2:	4b78      	ldr	r3, [pc, #480]	@ (80004c4 <decodeProtocol+0x1ec>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b06      	cmp	r3, #6
 80002e8:	f200 80d8 	bhi.w	800049c <decodeProtocol+0x1c4>
 80002ec:	a201      	add	r2, pc, #4	@ (adr r2, 80002f4 <decodeProtocol+0x1c>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	08000311 	.word	0x08000311
 80002f8:	08000339 	.word	0x08000339
 80002fc:	0800036d 	.word	0x0800036d
 8000300:	080003a1 	.word	0x080003a1
 8000304:	080003d5 	.word	0x080003d5
 8000308:	080003fd 	.word	0x080003fd
 800030c:	0800043f 	.word	0x0800043f
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795b      	ldrb	r3, [r3, #5]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7151      	strb	r1, [r2, #5]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	7a1b      	ldrb	r3, [r3, #8]
 8000324:	2b55      	cmp	r3, #85	@ 0x55
 8000326:	f040 80bd 	bne.w	80004a4 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 800032a:	4b66      	ldr	r3, [pc, #408]	@ (80004c4 <decodeProtocol+0x1ec>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000336:	e0b5      	b.n	80004a4 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	2b4e      	cmp	r3, #78	@ 0x4e
 800034e:	d103      	bne.n	8000358 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 8000350:	4b5c      	ldr	r3, [pc, #368]	@ (80004c4 <decodeProtocol+0x1ec>)
 8000352:	2202      	movs	r2, #2
 8000354:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000356:	e0a8      	b.n	80004aa <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	3b01      	subs	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000364:	4b57      	ldr	r3, [pc, #348]	@ (80004c4 <decodeProtocol+0x1ec>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
			break;
 800036a:	e09e      	b.n	80004aa <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	b2d1      	uxtb	r1, r2
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7151      	strb	r1, [r2, #5]
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	7a1b      	ldrb	r3, [r3, #8]
 8000380:	2b45      	cmp	r3, #69	@ 0x45
 8000382:	d103      	bne.n	800038c <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000384:	4b4f      	ldr	r3, [pc, #316]	@ (80004c4 <decodeProtocol+0x1ec>)
 8000386:	2203      	movs	r2, #3
 8000388:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800038a:	e08e      	b.n	80004aa <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	3b01      	subs	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000398:	4b4a      	ldr	r3, [pc, #296]	@ (80004c4 <decodeProtocol+0x1ec>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			break;
 800039e:	e084      	b.n	80004aa <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	b2d1      	uxtb	r1, r2
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7151      	strb	r1, [r2, #5]
 80003ac:	461a      	mov	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	7a1b      	ldrb	r3, [r3, #8]
 80003b4:	2b52      	cmp	r3, #82	@ 0x52
 80003b6:	d103      	bne.n	80003c0 <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 80003b8:	4b42      	ldr	r3, [pc, #264]	@ (80004c4 <decodeProtocol+0x1ec>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 80003be:	e074      	b.n	80004aa <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 80003cc:	4b3d      	ldr	r3, [pc, #244]	@ (80004c4 <decodeProtocol+0x1ec>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
			break;
 80003d2:	e06a      	b.n	80004aa <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795a      	ldrb	r2, [r3, #5]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	b2d1      	uxtb	r1, r2
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7151      	strb	r1, [r2, #5]
 80003e8:	461a      	mov	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	7a1a      	ldrb	r2, [r3, #8]
 80003f0:	4b35      	ldr	r3, [pc, #212]	@ (80004c8 <decodeProtocol+0x1f0>)
 80003f2:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 80003f4:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <decodeProtocol+0x1ec>)
 80003f6:	2205      	movs	r2, #5
 80003f8:	701a      	strb	r2, [r3, #0]
			break;
 80003fa:	e056      	b.n	80004aa <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	b2d1      	uxtb	r1, r2
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7151      	strb	r1, [r2, #5]
 8000408:	461a      	mov	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	7a1b      	ldrb	r3, [r3, #8]
 8000410:	2b3a      	cmp	r3, #58	@ 0x3a
 8000412:	d10a      	bne.n	800042a <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 8000414:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <decodeProtocol+0x1ec>)
 8000416:	2206      	movs	r2, #6
 8000418:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <decodeProtocol+0x1f0>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000422:	b2da      	uxtb	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000428:	e03f      	b.n	80004aa <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	3b01      	subs	r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000436:	4b23      	ldr	r3, [pc, #140]	@ (80004c4 <decodeProtocol+0x1ec>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
			break;
 800043c:	e035      	b.n	80004aa <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <decodeProtocol+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d90f      	bls.n	8000466 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795b      	ldrb	r3, [r3, #5]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	b2d1      	uxtb	r1, r2
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7151      	strb	r1, [r2, #5]
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	7a1a      	ldrb	r2, [r3, #8]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	4053      	eors	r3, r2
 8000460:	b2da      	uxtb	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 8000466:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <decodeProtocol+0x1f0>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3b01      	subs	r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <decodeProtocol+0x1f0>)
 8000470:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8000472:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <decodeProtocol+0x1f0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d116      	bne.n	80004a8 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <decodeProtocol+0x1ec>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	789a      	ldrb	r2, [r3, #2]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	4619      	mov	r1, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	440b      	add	r3, r1
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	429a      	cmp	r2, r3
 8000492:	d109      	bne.n	80004a8 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f819 	bl	80004cc <decodeData>
				}
			}
			break;
 800049a:	e005      	b.n	80004a8 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <decodeProtocol+0x1ec>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
			break;
 80004a2:	e002      	b.n	80004aa <decodeProtocol+0x1d2>
			break;
 80004a4:	bf00      	nop
 80004a6:	e000      	b.n	80004aa <decodeProtocol+0x1d2>
			break;
 80004a8:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795a      	ldrb	r2, [r3, #5]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	f47f af15 	bne.w	80002e2 <decodeProtocol+0xa>
		}
	}

}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000019c 	.word	0x2000019c
 80004c8:	20000574 	.word	0x20000574

080004cc <decodeData>:

void decodeData(_sDato *datosCom){
 80004cc:	b480      	push	{r7}
 80004ce:	b091      	sub	sp, #68	@ 0x44
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80004da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004e4:	3340      	adds	r3, #64	@ 0x40
 80004e6:	443b      	add	r3, r7
 80004e8:	2255      	movs	r2, #85	@ 0x55
 80004ea:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80004ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004f8:	3340      	adds	r3, #64	@ 0x40
 80004fa:	443b      	add	r3, r7
 80004fc:	224e      	movs	r2, #78	@ 0x4e
 80004fe:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000502:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800050c:	3340      	adds	r3, #64	@ 0x40
 800050e:	443b      	add	r3, r7
 8000510:	2245      	movs	r2, #69	@ 0x45
 8000512:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000516:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000520:	3340      	adds	r3, #64	@ 0x40
 8000522:	443b      	add	r3, r7
 8000524:	2252      	movs	r2, #82	@ 0x52
 8000526:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 800052a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000534:	3340      	adds	r3, #64	@ 0x40
 8000536:	443b      	add	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 800053e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000548:	3340      	adds	r3, #64	@ 0x40
 800054a:	443b      	add	r3, r7
 800054c:	223a      	movs	r2, #58	@ 0x3a
 800054e:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	3302      	adds	r3, #2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	7a1b      	ldrb	r3, [r3, #8]
 800055e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000560:	d116      	bne.n	8000590 <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 8000562:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800056c:	3340      	adds	r3, #64	@ 0x40
 800056e:	443b      	add	r3, r7
 8000570:	22f0      	movs	r2, #240	@ 0xf0
 8000572:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 8000576:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000580:	3340      	adds	r3, #64	@ 0x40
 8000582:	443b      	add	r3, r7
 8000584:	220d      	movs	r2, #13
 8000586:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 800058a:	2303      	movs	r3, #3
 800058c:	733b      	strb	r3, [r7, #12]
			break;
 800058e:	e00c      	b.n	80005aa <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000590:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000594:	1c5a      	adds	r2, r3, #1
 8000596:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800059a:	3340      	adds	r3, #64	@ 0x40
 800059c:	443b      	add	r3, r7
 800059e:	22dd      	movs	r2, #221	@ 0xdd
 80005a0:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 80005a4:	2302      	movs	r3, #2
 80005a6:	733b      	strb	r3, [r7, #12]
			break;
 80005a8:	bf00      	nop
	}

	cheksum=0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005b6:	e021      	b.n	80005fc <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 80005b8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005bc:	3340      	adds	r3, #64	@ 0x40
 80005be:	443b      	add	r3, r7
 80005c0:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80005c8:	4053      	eors	r3, r2
 80005ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80005ce:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <decodeData+0x160>)
 80005d4:	799b      	ldrb	r3, [r3, #6]
 80005d6:	1c59      	adds	r1, r3, #1
 80005d8:	b2c8      	uxtb	r0, r1
 80005da:	4914      	ldr	r1, [pc, #80]	@ (800062c <decodeData+0x160>)
 80005dc:	7188      	strb	r0, [r1, #6]
 80005de:	4619      	mov	r1, r3
 80005e0:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80005e4:	443b      	add	r3, r7
 80005e6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	440b      	add	r3, r1
 80005ee:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005f2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005f6:	3301      	adds	r3, #1
 80005f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005fc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000604:	429a      	cmp	r2, r3
 8000606:	d3d7      	bcc.n	80005b8 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <decodeData+0x160>)
 800060a:	799b      	ldrb	r3, [r3, #6]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	b2d1      	uxtb	r1, r2
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <decodeData+0x160>)
 8000612:	7191      	strb	r1, [r2, #6]
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800061e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 8000622:	bf00      	nop
 8000624:	3744      	adds	r7, #68	@ 0x44
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200001a0 	.word	0x200001a0

08000630 <encodeData>:

void encodeData(uint8_t id){
 8000630:	b480      	push	{r7}
 8000632:	b091      	sub	sp, #68	@ 0x44
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 8000640:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800064a:	3340      	adds	r3, #64	@ 0x40
 800064c:	443b      	add	r3, r7
 800064e:	2255      	movs	r2, #85	@ 0x55
 8000650:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000654:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800065e:	3340      	adds	r3, #64	@ 0x40
 8000660:	443b      	add	r3, r7
 8000662:	224e      	movs	r2, #78	@ 0x4e
 8000664:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000668:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000672:	3340      	adds	r3, #64	@ 0x40
 8000674:	443b      	add	r3, r7
 8000676:	2245      	movs	r2, #69	@ 0x45
 8000678:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 800067c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000686:	3340      	adds	r3, #64	@ 0x40
 8000688:	443b      	add	r3, r7
 800068a:	2252      	movs	r2, #82	@ 0x52
 800068c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 8000690:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800069a:	3340      	adds	r3, #64	@ 0x40
 800069c:	443b      	add	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 80006a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006ae:	3340      	adds	r3, #64	@ 0x40
 80006b0:	443b      	add	r3, r7
 80006b2:	223a      	movs	r2, #58	@ 0x3a
 80006b4:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80006bc:	f040 80fd 	bne.w	80008ba <encodeData+0x28a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 80006c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006ca:	3340      	adds	r3, #64	@ 0x40
 80006cc:	443b      	add	r3, r7
 80006ce:	22a0      	movs	r2, #160	@ 0xa0
 80006d0:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 80006d4:	2312      	movs	r3, #18
 80006d6:	733b      	strb	r3, [r7, #12]

		myWord.ui16[0] = ir.sensor0;
 80006d8:	4b9f      	ldr	r3, [pc, #636]	@ (8000958 <encodeData+0x328>)
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	4b9f      	ldr	r3, [pc, #636]	@ (800095c <encodeData+0x32c>)
 80006de:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor0;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006ea:	4619      	mov	r1, r3
 80006ec:	4b9b      	ldr	r3, [pc, #620]	@ (800095c <encodeData+0x32c>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006f4:	443b      	add	r3, r7
 80006f6:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80006fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000704:	4619      	mov	r1, r3
 8000706:	4b95      	ldr	r3, [pc, #596]	@ (800095c <encodeData+0x32c>)
 8000708:	785a      	ldrb	r2, [r3, #1]
 800070a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800070e:	443b      	add	r3, r7
 8000710:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor1;
 8000714:	4b90      	ldr	r3, [pc, #576]	@ (8000958 <encodeData+0x328>)
 8000716:	885a      	ldrh	r2, [r3, #2]
 8000718:	4b90      	ldr	r3, [pc, #576]	@ (800095c <encodeData+0x32c>)
 800071a:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor1;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800071c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000726:	4619      	mov	r1, r3
 8000728:	4b8c      	ldr	r3, [pc, #560]	@ (800095c <encodeData+0x32c>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000730:	443b      	add	r3, r7
 8000732:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000736:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000740:	4619      	mov	r1, r3
 8000742:	4b86      	ldr	r3, [pc, #536]	@ (800095c <encodeData+0x32c>)
 8000744:	785a      	ldrb	r2, [r3, #1]
 8000746:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800074a:	443b      	add	r3, r7
 800074c:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor2;
 8000750:	4b81      	ldr	r3, [pc, #516]	@ (8000958 <encodeData+0x328>)
 8000752:	889a      	ldrh	r2, [r3, #4]
 8000754:	4b81      	ldr	r3, [pc, #516]	@ (800095c <encodeData+0x32c>)
 8000756:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor2;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000758:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000762:	4619      	mov	r1, r3
 8000764:	4b7d      	ldr	r3, [pc, #500]	@ (800095c <encodeData+0x32c>)
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800076c:	443b      	add	r3, r7
 800076e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000772:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800077c:	4619      	mov	r1, r3
 800077e:	4b77      	ldr	r3, [pc, #476]	@ (800095c <encodeData+0x32c>)
 8000780:	785a      	ldrb	r2, [r3, #1]
 8000782:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000786:	443b      	add	r3, r7
 8000788:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor3;
 800078c:	4b72      	ldr	r3, [pc, #456]	@ (8000958 <encodeData+0x328>)
 800078e:	88da      	ldrh	r2, [r3, #6]
 8000790:	4b72      	ldr	r3, [pc, #456]	@ (800095c <encodeData+0x32c>)
 8000792:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor3;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000794:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800079e:	4619      	mov	r1, r3
 80007a0:	4b6e      	ldr	r3, [pc, #440]	@ (800095c <encodeData+0x32c>)
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007a8:	443b      	add	r3, r7
 80007aa:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007b8:	4619      	mov	r1, r3
 80007ba:	4b68      	ldr	r3, [pc, #416]	@ (800095c <encodeData+0x32c>)
 80007bc:	785a      	ldrb	r2, [r3, #1]
 80007be:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007c2:	443b      	add	r3, r7
 80007c4:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor4;
 80007c8:	4b63      	ldr	r3, [pc, #396]	@ (8000958 <encodeData+0x328>)
 80007ca:	891a      	ldrh	r2, [r3, #8]
 80007cc:	4b63      	ldr	r3, [pc, #396]	@ (800095c <encodeData+0x32c>)
 80007ce:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor4;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007da:	4619      	mov	r1, r3
 80007dc:	4b5f      	ldr	r3, [pc, #380]	@ (800095c <encodeData+0x32c>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007e4:	443b      	add	r3, r7
 80007e6:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007f4:	4619      	mov	r1, r3
 80007f6:	4b59      	ldr	r3, [pc, #356]	@ (800095c <encodeData+0x32c>)
 80007f8:	785a      	ldrb	r2, [r3, #1]
 80007fa:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007fe:	443b      	add	r3, r7
 8000800:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor5;
 8000804:	4b54      	ldr	r3, [pc, #336]	@ (8000958 <encodeData+0x328>)
 8000806:	895a      	ldrh	r2, [r3, #10]
 8000808:	4b54      	ldr	r3, [pc, #336]	@ (800095c <encodeData+0x32c>)
 800080a:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor5;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800080c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000816:	4619      	mov	r1, r3
 8000818:	4b50      	ldr	r3, [pc, #320]	@ (800095c <encodeData+0x32c>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000820:	443b      	add	r3, r7
 8000822:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000826:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000830:	4619      	mov	r1, r3
 8000832:	4b4a      	ldr	r3, [pc, #296]	@ (800095c <encodeData+0x32c>)
 8000834:	785a      	ldrb	r2, [r3, #1]
 8000836:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800083a:	443b      	add	r3, r7
 800083c:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor6;
 8000840:	4b45      	ldr	r3, [pc, #276]	@ (8000958 <encodeData+0x328>)
 8000842:	899a      	ldrh	r2, [r3, #12]
 8000844:	4b45      	ldr	r3, [pc, #276]	@ (800095c <encodeData+0x32c>)
 8000846:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor6;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000848:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000852:	4619      	mov	r1, r3
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <encodeData+0x32c>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800085c:	443b      	add	r3, r7
 800085e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000862:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800086c:	4619      	mov	r1, r3
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <encodeData+0x32c>)
 8000870:	785a      	ldrb	r2, [r3, #1]
 8000872:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000876:	443b      	add	r3, r7
 8000878:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor7;
 800087c:	4b36      	ldr	r3, [pc, #216]	@ (8000958 <encodeData+0x328>)
 800087e:	89da      	ldrh	r2, [r3, #14]
 8000880:	4b36      	ldr	r3, [pc, #216]	@ (800095c <encodeData+0x32c>)
 8000882:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor7;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000884:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800088e:	4619      	mov	r1, r3
 8000890:	4b32      	ldr	r3, [pc, #200]	@ (800095c <encodeData+0x32c>)
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000898:	443b      	add	r3, r7
 800089a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800089e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008a8:	4619      	mov	r1, r3
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <encodeData+0x32c>)
 80008ac:	785a      	ldrb	r2, [r3, #1]
 80008ae:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008b2:	443b      	add	r3, r7
 80008b4:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 80008b8:	e00c      	b.n	80008d4 <encodeData+0x2a4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 80008ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008c4:	3340      	adds	r3, #64	@ 0x40
 80008c6:	443b      	add	r3, r7
 80008c8:	22dd      	movs	r2, #221	@ 0xdd
 80008ca:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 80008ce:	2302      	movs	r3, #2
 80008d0:	733b      	strb	r3, [r7, #12]
			break;
 80008d2:	bf00      	nop
	}
	cheksum=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008e0:	e021      	b.n	8000926 <encodeData+0x2f6>
	{
		cheksum ^= auxBuffTx[a];
 80008e2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008e6:	3340      	adds	r3, #64	@ 0x40
 80008e8:	443b      	add	r3, r7
 80008ea:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008ee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80008f2:	4053      	eors	r3, r2
 80008f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80008f8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <encodeData+0x330>)
 80008fe:	799b      	ldrb	r3, [r3, #6]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	b2c8      	uxtb	r0, r1
 8000904:	4916      	ldr	r1, [pc, #88]	@ (8000960 <encodeData+0x330>)
 8000906:	7188      	strb	r0, [r1, #6]
 8000908:	4619      	mov	r1, r3
 800090a:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800090e:	443b      	add	r3, r7
 8000910:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <encodeData+0x330>)
 8000916:	440b      	add	r3, r1
 8000918:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800091c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000920:	3301      	adds	r3, #1
 8000922:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000926:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800092a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800092e:	429a      	cmp	r2, r3
 8000930:	d3d7      	bcc.n	80008e2 <encodeData+0x2b2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <encodeData+0x330>)
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	b2d1      	uxtb	r1, r2
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <encodeData+0x330>)
 800093c:	7191      	strb	r1, [r2, #6]
 800093e:	461a      	mov	r2, r3
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <encodeData+0x330>)
 8000942:	4413      	add	r3, r2
 8000944:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000948:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 800094c:	bf00      	nop
 800094e:	3744      	adds	r7, #68	@ 0x44
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200003ac 	.word	0x200003ac
 800095c:	200003c0 	.word	0x200003c0
 8000960:	200001a0 	.word	0x200001a0

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fd53 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f8d1 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 fae3 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 fac3 	bl	8000f00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800097a:	f000 fa97 	bl	8000eac <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800097e:	f009 fafb 	bl	8009f78 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000982:	f000 f925 	bl	8000bd0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000986:	f000 f9c5 	bl	8000d14 <MX_I2C2_Init>
  MX_TIM4_Init();
 800098a:	f000 fa41 	bl	8000e10 <MX_TIM4_Init>
  MX_TIM1_Init();
 800098e:	f000 f9ef 	bl	8000d70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000992:	4858      	ldr	r0, [pc, #352]	@ (8000af4 <main+0x190>)
 8000994:	f004 fab4 	bl	8004f00 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000998:	4857      	ldr	r0, [pc, #348]	@ (8000af8 <main+0x194>)
 800099a:	f009 fc23 	bl	800a1e4 <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepión del Buffer de Recepción
 800099e:	4b57      	ldr	r3, [pc, #348]	@ (8000afc <main+0x198>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepción
 80009a4:	4b55      	ldr	r3, [pc, #340]	@ (8000afc <main+0x198>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 80009aa:	4b54      	ldr	r3, [pc, #336]	@ (8000afc <main+0x198>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 80009b0:	4b52      	ldr	r3, [pc, #328]	@ (8000afc <main+0x198>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 80009b6:	4b51      	ldr	r3, [pc, #324]	@ (8000afc <main+0x198>)
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	3308      	adds	r3, #8
 80009bc:	4a4f      	ldr	r2, [pc, #316]	@ (8000afc <main+0x198>)
 80009be:	4413      	add	r3, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	484e      	ldr	r0, [pc, #312]	@ (8000b00 <main+0x19c>)
 80009c6:	f004 fe99 	bl	80056fc <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 80009ca:	2208      	movs	r2, #8
 80009cc:	494d      	ldr	r1, [pc, #308]	@ (8000b04 <main+0x1a0>)
 80009ce:	484e      	ldr	r0, [pc, #312]	@ (8000b08 <main+0x1a4>)
 80009d0:	f000 fe7e 	bl	80016d0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009da:	484c      	ldr	r0, [pc, #304]	@ (8000b0c <main+0x1a8>)
 80009dc:	f001 fe96 	bl	800270c <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009e4:	f000 fd78 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4847      	ldr	r0, [pc, #284]	@ (8000b0c <main+0x1a8>)
 80009f0:	f001 fe8c 	bl	800270c <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009f8:	f000 fd6e 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	4842      	ldr	r0, [pc, #264]	@ (8000b0c <main+0x1a8>)
 8000a04:	f001 fe82 	bl	800270c <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a08:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a0c:	f000 fd64 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a16:	483d      	ldr	r0, [pc, #244]	@ (8000b0c <main+0x1a8>)
 8000a18:	f001 fe78 	bl	800270c <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a20:	f000 fd5a 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	4838      	ldr	r0, [pc, #224]	@ (8000b0c <main+0x1a8>)
 8000a2c:	f001 fe6e 	bl	800270c <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a34:	f000 fd50 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3e:	4833      	ldr	r0, [pc, #204]	@ (8000b0c <main+0x1a8>)
 8000a40:	f001 fe64 	bl	800270c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flags1.F250US == 1){
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <main+0x1ac>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <main+0xf8>
		  flags1.F250US = 0;
 8000a52:	4a2f      	ldr	r2, [pc, #188]	@ (8000b10 <main+0x1ac>)
 8000a54:	7813      	ldrb	r3, [r2, #0]
 8000a56:	f36f 0300 	bfc	r3, #0, #1
 8000a5a:	7013      	strb	r3, [r2, #0]
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if(flags1.F100MS==1){
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <main+0x1ac>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <main+0x110>
		  flags1.F100MS = 0;
 8000a6a:	4a29      	ldr	r2, [pc, #164]	@ (8000b10 <main+0x1ac>)
 8000a6c:	7813      	ldrb	r3, [r2, #0]
 8000a6e:	f36f 0382 	bfc	r3, #2, #1
 8000a72:	7013      	strb	r3, [r2, #0]
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS == 1) {
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <main+0x1ac>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00c      	beq.n	8000a9c <main+0x138>
		  flags1.F500MS = 0;
 8000a82:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <main+0x1ac>)
 8000a84:	7813      	ldrb	r3, [r2, #0]
 8000a86:	f36f 03c3 	bfc	r3, #3, #1
 8000a8a:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a90:	481e      	ldr	r0, [pc, #120]	@ (8000b0c <main+0x1a8>)
 8000a92:	f001 fe53 	bl	800273c <HAL_GPIO_TogglePin>
		  encodeData(IR_SENSOR);
 8000a96:	20a0      	movs	r0, #160	@ 0xa0
 8000a98:	f7ff fdca 	bl	8000630 <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <main+0x198>)
 8000a9e:	795a      	ldrb	r2, [r3, #5]
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <main+0x198>)
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d002      	beq.n	8000aae <main+0x14a>
		  decodeProtocol(&datosComProtocol);
 8000aa8:	4814      	ldr	r0, [pc, #80]	@ (8000afc <main+0x198>)
 8000aaa:	f7ff fc15 	bl	80002d8 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <main+0x198>)
 8000ab0:	79da      	ldrb	r2, [r3, #7]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <main+0x198>)
 8000ab4:	799b      	ldrb	r3, [r3, #6]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d0c4      	beq.n	8000a44 <main+0xe0>
		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <main+0x198>)
 8000abc:	799a      	ldrb	r2, [r3, #6]
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <main+0x198>)
 8000ac0:	79db      	ldrb	r3, [r3, #7]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	71fb      	strb	r3, [r7, #7]
		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK))
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <main+0x198>)
 8000ac8:	79db      	ldrb	r3, [r3, #7]
 8000aca:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000ace:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <main+0x198>)
 8000ad0:	4413      	add	r3, r2
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	b292      	uxth	r2, r2
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f009 fb5d 	bl	800a198 <CDC_Transmit_FS>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1af      	bne.n	8000a44 <main+0xe0>
			  datosComProtocol.indexReadTx++;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <main+0x198>)
 8000ae6:	79db      	ldrb	r3, [r3, #7]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <main+0x198>)
 8000aee:	71da      	strb	r2, [r3, #7]
	  if (flags1.F250US == 1){
 8000af0:	e7a8      	b.n	8000a44 <main+0xe0>
 8000af2:	bf00      	nop
 8000af4:	2000048c 	.word	0x2000048c
 8000af8:	08000295 	.word	0x08000295
 8000afc:	200001a0 	.word	0x200001a0
 8000b00:	2000051c 	.word	0x2000051c
 8000b04:	20000564 	.word	0x20000564
 8000b08:	200003c4 	.word	0x200003c4
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	200003a8 	.word	0x200003a8

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1e:	2228      	movs	r2, #40	@ 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f009 ff24 	bl	800a970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b60:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fcb2 	bl	80044d4 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b76:	f000 fa5f 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 ff1e 	bl	80049d8 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ba2:	f000 fa49 	bl	8001038 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 f89c 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bc2:	f000 fa39 	bl	8001038 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3750      	adds	r7, #80	@ 0x50
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000be2:	4a4b      	ldr	r2, [pc, #300]	@ (8000d10 <MX_ADC1_Init+0x140>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be6:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bee:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfa:	4b44      	ldr	r3, [pc, #272]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000bfc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c02:	4b42      	ldr	r3, [pc, #264]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000c08:	4b40      	ldr	r3, [pc, #256]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	483f      	ldr	r0, [pc, #252]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c10:	f000 fc86 	bl	8001520 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1a:	f000 fa0d 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4837      	ldr	r0, [pc, #220]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c30:	f000 fe3e 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f9fd 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4830      	ldr	r0, [pc, #192]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c4c:	f000 fe30 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c56:	f000 f9ef 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4829      	ldr	r0, [pc, #164]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c68:	f000 fe22 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c72:	f000 f9e1 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c76:	2303      	movs	r3, #3
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000c84:	f000 fe14 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c8e:	f000 f9d3 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c96:	2305      	movs	r3, #5
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000ca0:	f000 fe06 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000caa:	f000 f9c5 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4814      	ldr	r0, [pc, #80]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000cbc:	f000 fdf8 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000cc6:	f000 f9b7 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000cd8:	f000 fdea 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000ce2:	f000 f9a9 	bl	8001038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000cea:	2308      	movs	r3, #8
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_ADC1_Init+0x13c>)
 8000cf4:	f000 fddc 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000cfe:	f000 f99b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200003c4 	.word	0x200003c4
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	@ (8000d68 <MX_I2C2_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <MX_I2C2_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_I2C2_Init+0x50>)
 8000d52:	f001 fd0d 	bl	8002770 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f96c 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000438 	.word	0x20000438
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e0c <MX_TIM1_Init+0x9c>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000d94:	2247      	movs	r2, #71	@ 0x47
 8000d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000da0:	22f9      	movs	r2, #249	@ 0xf9
 8000da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000db8:	f004 f852 	bl	8004e60 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f000 f939 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000dd4:	f004 f9ee 	bl	80051b4 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000dde:	f000 f92b 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_TIM1_Init+0x98>)
 8000df0:	f004 fbc4 	bl	800557c <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000dfa:	f000 f91d 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000048c 	.word	0x2000048c
 8000e0c:	40012c00 	.word	0x40012c00

08000e10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <MX_TIM4_Init+0x98>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e54:	f004 f804 	bl	8004e60 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f000 f8eb 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e70:	f004 f9a0 	bl	80051b4 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f8dd 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_TIM4_Init+0x94>)
 8000e8c:	f004 fb76 	bl	800557c <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 f8cf 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200004d4 	.word	0x200004d4
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART1_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f004 fbba 	bl	800565c <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f8a3 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000051c 	.word	0x2000051c
 8000efc:	40013800 	.word	0x40013800

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_DMA_Init+0x38>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <MX_DMA_Init+0x38>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_DMA_Init+0x38>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200b      	movs	r0, #11
 8000f24:	f000 ff95 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f28:	200b      	movs	r0, #11
 8000f2a:	f000 ffae 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a34      	ldr	r2, [pc, #208]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f6e:	f043 0320 	orr.w	r3, r3, #32
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a28      	ldr	r2, [pc, #160]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb6:	481d      	ldr	r0, [pc, #116]	@ (800102c <MX_GPIO_Init+0xf0>)
 8000fb8:	f001 fba8 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc2:	481b      	ldr	r0, [pc, #108]	@ (8001030 <MX_GPIO_Init+0xf4>)
 8000fc4:	f001 fba2 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <MX_GPIO_Init+0xf0>)
 8000fe2:	f001 fa0f 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <MX_GPIO_Init+0xf8>)
 8000ffc:	f001 fa02 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001000:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_GPIO_Init+0xf4>)
 800101a:	f001 f9f3 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	40011000 	.word	0x40011000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_MspInit+0x60>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_MspInit+0x60>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <HAL_ADC_MspInit+0xbc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d149      	bne.n	800115c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a20      	ldr	r2, [pc, #128]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_ADC_MspInit+0xc0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010f8:	23ff      	movs	r3, #255	@ 0xff
 80010fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4819      	ldr	r0, [pc, #100]	@ (800116c <HAL_ADC_MspInit+0xc4>)
 8001108:	f001 f97c 	bl	8002404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_ADC_MspInit+0xcc>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 800112e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001132:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001140:	480b      	ldr	r0, [pc, #44]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001142:	f000 febd 	bl	8001ec0 <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800114c:	f7ff ff74 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001154:	621a      	str	r2, [r3, #32]
 8001156:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_ADC_MspInit+0xc8>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40012400 	.word	0x40012400
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	200003f4 	.word	0x200003f4
 8001174:	40020008 	.word	0x40020008

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a16      	ldr	r2, [pc, #88]	@ (80011ec <HAL_I2C_MspInit+0x74>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d124      	bne.n	80011e2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b6:	2312      	movs	r3, #18
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <HAL_I2C_MspInit+0x7c>)
 80011c6:	f001 f91d 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 80011d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_I2C_MspInit+0x78>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40005800 	.word	0x40005800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a16      	ldr	r2, [pc, #88]	@ (8001260 <HAL_TIM_Base_MspInit+0x68>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d114      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 8001210:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2019      	movs	r0, #25
 8001228:	f000 fe13 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800122c:	2019      	movs	r0, #25
 800122e:	f000 fe2c 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001232:	e010      	b.n	8001256 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_TIM_Base_MspInit+0x70>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10b      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_TIM_Base_MspInit+0x6c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012c00 	.word	0x40012c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40000800 	.word	0x40000800

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a20      	ldr	r2, [pc, #128]	@ (8001308 <HAL_UART_MspInit+0x9c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d139      	bne.n	8001300 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_UART_MspInit+0xa0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a1e      	ldr	r2, [pc, #120]	@ (800130c <HAL_UART_MspInit+0xa0>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_UART_MspInit+0xa0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_UART_MspInit+0xa0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a18      	ldr	r2, [pc, #96]	@ (800130c <HAL_UART_MspInit+0xa0>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_UART_MspInit+0xa0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480f      	ldr	r0, [pc, #60]	@ (8001310 <HAL_UART_MspInit+0xa4>)
 80012d2:	f001 f897 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <HAL_UART_MspInit+0xa4>)
 80012ec:	f001 f88a 	bl	8002404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2025      	movs	r0, #37	@ 0x25
 80012f6:	f000 fdac 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fa:	2025      	movs	r0, #37	@ 0x25
 80012fc:	f000 fdc5 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013800 	.word	0x40013800
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f89c 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <DMA1_Channel1_IRQHandler+0x10>)
 8001372:	f000 ff13 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003f4 	.word	0x200003f4

08001380 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001386:	f001 fc5c 	bl	8002c42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000c50 	.word	0x20000c50

08001394 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <TIM1_UP_IRQHandler+0x10>)
 800139a:	f003 fe03 	bl	8004fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000048c 	.word	0x2000048c

080013a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <USART1_IRQHandler+0x10>)
 80013ae:	f004 f9cb 	bl	8005748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000051c 	.word	0x2000051c

080013bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c8:	f7ff fff8 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013cc:	480b      	ldr	r0, [pc, #44]	@ (80013fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ce:	490c      	ldr	r1, [pc, #48]	@ (8001400 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e4:	4c09      	ldr	r4, [pc, #36]	@ (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f009 fac5 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f6:	f7ff fab5 	bl	8000964 <main>
  bx lr
 80013fa:	4770      	bx	lr
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001404:	0800aa5c 	.word	0x0800aa5c
  ldr r2, =_sbss
 8001408:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800140c:	20001160 	.word	0x20001160

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 fd09 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fe08 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fd21 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 fce9 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000004 	.word	0x20000004
 8001498:	2000000c 	.word	0x2000000c
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x1c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_IncTick+0x20>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a03      	ldr	r2, [pc, #12]	@ (80014c0 <HAL_IncTick+0x20>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000578 	.word	0x20000578

080014c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <HAL_GetTick+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000578 	.word	0x20000578

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff fff0 	bl	80014c4 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffe0 	bl	80014c4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000000c 	.word	0x2000000c

08001520 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0be      	b.n	80016c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fda2 	bl	80010a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 faf5 	bl	8001b54 <ADC_ConversionStop_Disable>
 800156a:	4603      	mov	r3, r0
 800156c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 8099 	bne.w	80016ae <HAL_ADC_Init+0x18e>
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 8095 	bne.w	80016ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800158c:	f023 0302 	bic.w	r3, r3, #2
 8001590:	f043 0202 	orr.w	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7b1b      	ldrb	r3, [r3, #12]
 80015a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b8:	d003      	beq.n	80015c2 <HAL_ADC_Init+0xa2>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d102      	bne.n	80015c8 <HAL_ADC_Init+0xa8>
 80015c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c6:	e000      	b.n	80015ca <HAL_ADC_Init+0xaa>
 80015c8:	2300      	movs	r3, #0
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7d1b      	ldrb	r3, [r3, #20]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d119      	bne.n	800160c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7b1b      	ldrb	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	035a      	lsls	r2, r3, #13
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e00b      	b.n	800160c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	f043 0220 	orr.w	r2, r3, #32
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <HAL_ADC_Init+0x1a8>)
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800163c:	d003      	beq.n	8001646 <HAL_ADC_Init+0x126>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d104      	bne.n	8001650 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	3b01      	subs	r3, #1
 800164c:	051b      	lsls	r3, r3, #20
 800164e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001656:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	430a      	orrs	r2, r1
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_ADC_Init+0x1ac>)
 800166c:	4013      	ands	r3, r2
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d10b      	bne.n	800168c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800168a:	e018      	b.n	80016be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	f023 0312 	bic.w	r3, r3, #18
 8001694:	f043 0210 	orr.w	r2, r3, #16
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ac:	e007      	b.n	80016be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	ffe1f7fd 	.word	0xffe1f7fd
 80016cc:	ff1f0efe 	.word	0xff1f0efe

080016d0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a64      	ldr	r2, [pc, #400]	@ (8001878 <HAL_ADC_Start_DMA+0x1a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Start_DMA+0x24>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a63      	ldr	r2, [pc, #396]	@ (800187c <HAL_ADC_Start_DMA+0x1ac>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start_DMA+0x32>
 80016f4:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <HAL_ADC_Start_DMA+0x1a8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 80b3 	bne.w	8001868 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ADC_Start_DMA+0x40>
 800170c:	2302      	movs	r3, #2
 800170e:	e0ae      	b.n	800186e <HAL_ADC_Start_DMA+0x19e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f9c1 	bl	8001aa0 <ADC_Enable>
 800171e:	4603      	mov	r3, r0
 8001720:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 809a 	bne.w	800185e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a4e      	ldr	r2, [pc, #312]	@ (800187c <HAL_ADC_Start_DMA+0x1ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Start_DMA+0x84>
 8001748:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_ADC_Start_DMA+0x1a8>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176a:	2b00      	cmp	r3, #0
 800176c:	d026      	beq.n	80017bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001772:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001776:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800177e:	e01d      	b.n	80017bc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <HAL_ADC_Start_DMA+0x1a8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d004      	beq.n	80017a0 <HAL_ADC_Start_DMA+0xd0>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a38      	ldr	r2, [pc, #224]	@ (800187c <HAL_ADC_Start_DMA+0x1ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d10d      	bne.n	80017bc <HAL_ADC_Start_DMA+0xec>
 80017a0:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <HAL_ADC_Start_DMA+0x1a8>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	f023 0206 	bic.w	r2, r3, #6
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017d4:	e002      	b.n	80017dc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a25      	ldr	r2, [pc, #148]	@ (8001880 <HAL_ADC_Start_DMA+0x1b0>)
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a24      	ldr	r2, [pc, #144]	@ (8001884 <HAL_ADC_Start_DMA+0x1b4>)
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a23      	ldr	r2, [pc, #140]	@ (8001888 <HAL_ADC_Start_DMA+0x1b8>)
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0202 	mvn.w	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001814:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a18      	ldr	r0, [r3, #32]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	334c      	adds	r3, #76	@ 0x4c
 8001820:	4619      	mov	r1, r3
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f000 fba5 	bl	8001f74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001834:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001838:	d108      	bne.n	800184c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001848:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800184a:	e00f      	b.n	800186c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800185a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800185c:	e006      	b.n	800186c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001866:	e001      	b.n	800186c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186c:	7dfb      	ldrb	r3, [r7, #23]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40012400 	.word	0x40012400
 800187c:	40012800 	.word	0x40012800
 8001880:	08001bd7 	.word	0x08001bd7
 8001884:	08001c53 	.word	0x08001c53
 8001888:	08001c6f 	.word	0x08001c6f

0800188c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x20>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e0dc      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1da>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d81c      	bhi.n	800191a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3b05      	subs	r3, #5
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
 8001918:	e03c      	b.n	8001994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d81c      	bhi.n	800195c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	@ 0x23
 8001934:	221f      	movs	r2, #31
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	4019      	ands	r1, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b23      	subs	r3, #35	@ 0x23
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	@ 0x30
 800195a:	e01b      	b.n	8001994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b41      	subs	r3, #65	@ 0x41
 800196e:	221f      	movs	r2, #31
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b41      	subs	r3, #65	@ 0x41
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d91c      	bls.n	80019d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	3b1e      	subs	r3, #30
 80019ae:	2207      	movs	r2, #7
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4019      	ands	r1, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	e019      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6919      	ldr	r1, [r3, #16]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d003      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a16:	2b11      	cmp	r3, #17
 8001a18:	d132      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d125      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d126      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d11a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <HAL_ADC_ConfigChannel+0x1ec>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9a      	lsrs	r2, r3, #18
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x1b2>
 8001a6e:	e007      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40012400 	.word	0x40012400
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d040      	beq.n	8001b40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <ADC_Enable+0xac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <ADC_Enable+0xb0>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001adc:	e002      	b.n	8001ae4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aea:	f7ff fceb 	bl	80014c4 <HAL_GetTick>
 8001aee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001af0:	e01f      	b.n	8001b32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001af2:	f7ff fce7 	bl	80014c4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d918      	bls.n	8001b32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d011      	beq.n	8001b32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	f043 0210 	orr.w	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e007      	b.n	8001b42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d1d8      	bne.n	8001af2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d12e      	bne.n	8001bcc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b7e:	f7ff fca1 	bl	80014c4 <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b84:	e01b      	b.n	8001bbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b86:	f7ff fc9d 	bl	80014c4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d914      	bls.n	8001bbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d10d      	bne.n	8001bbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0dc      	beq.n	8001b86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d127      	bne.n	8001c40 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c0a:	d115      	bne.n	8001c38 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d111      	bne.n	8001c38 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7fe fa87 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c3e:	e004      	b.n	8001c4a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fe13 	bl	800188c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fe02 	bl	800189e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4906      	ldr	r1, [pc, #24]	@ (8001d3c <__NVIC_EnableIRQ+0x34>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	@ (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	@ (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff90 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff2d 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff42 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff35 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e043      	b.n	8001f5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <HAL_DMA_Init+0xa8>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_DMA_Init+0xac>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	009a      	lsls	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_DMA_Init+0xb0>)
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	bffdfff8 	.word	0xbffdfff8
 8001f6c:	cccccccd 	.word	0xcccccccd
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_DMA_Start_IT+0x20>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e04b      	b.n	800202c <HAL_DMA_Start_IT+0xb8>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d13a      	bne.n	800201e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f9eb 	bl	80023a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 020e 	orr.w	r2, r2, #14
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00f      	b.n	800200c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0204 	bic.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 020a 	orr.w	r2, r2, #10
 800200a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e005      	b.n	800202a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d008      	beq.n	800205e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2204      	movs	r2, #4
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e020      	b.n	80020a0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020e 	bic.w	r2, r2, #14
 800206c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d005      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e051      	b.n	8002174 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020e 	bic.w	r2, r2, #14
 80020de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a22      	ldr	r2, [pc, #136]	@ (8002180 <HAL_DMA_Abort_IT+0xd4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d029      	beq.n	800214e <HAL_DMA_Abort_IT+0xa2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	@ (8002184 <HAL_DMA_Abort_IT+0xd8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_DMA_Abort_IT+0x9e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <HAL_DMA_Abort_IT+0xdc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01a      	beq.n	8002144 <HAL_DMA_Abort_IT+0x98>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_DMA_Abort_IT+0xe0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d012      	beq.n	800213e <HAL_DMA_Abort_IT+0x92>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <HAL_DMA_Abort_IT+0xe4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00a      	beq.n	8002138 <HAL_DMA_Abort_IT+0x8c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_DMA_Abort_IT+0xe8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_DMA_Abort_IT+0x86>
 800212c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002130:	e00e      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002136:	e00b      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213c:	e008      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800213e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002142:	e005      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	e002      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800214a:	2310      	movs	r3, #16
 800214c:	e000      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800214e:	2301      	movs	r3, #1
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_DMA_Abort_IT+0xec>)
 8002152:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
    } 
  }
  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020008 	.word	0x40020008
 8002184:	4002001c 	.word	0x4002001c
 8002188:	40020030 	.word	0x40020030
 800218c:	40020044 	.word	0x40020044
 8002190:	40020058 	.word	0x40020058
 8002194:	4002006c 	.word	0x4002006c
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	2204      	movs	r2, #4
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04f      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	@ (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d029      	beq.n	800224a <HAL_DMA_IRQHandler+0xae>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0xaa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	@ (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0xa4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a62      	ldr	r2, [pc, #392]	@ (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0x9e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a60      	ldr	r2, [pc, #384]	@ (800239c <HAL_DMA_IRQHandler+0x200>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x98>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	@ (80023a0 <HAL_DMA_IRQHandler+0x204>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_DMA_IRQHandler+0x92>
 8002228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800222c:	e00e      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800222e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002232:	e00b      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002234:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002238:	e008      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800223a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800223e:	e005      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002244:	e002      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002246:	2340      	movs	r3, #64	@ 0x40
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800224a:	2304      	movs	r3, #4
 800224c:	4a55      	ldr	r2, [pc, #340]	@ (80023a4 <HAL_DMA_IRQHandler+0x208>)
 800224e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8094 	beq.w	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002262:	e08e      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	2202      	movs	r2, #2
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d056      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d051      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020a 	bic.w	r2, r2, #10
 800229a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a38      	ldr	r2, [pc, #224]	@ (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d029      	beq.n	8002302 <HAL_DMA_IRQHandler+0x166>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a37      	ldr	r2, [pc, #220]	@ (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0x162>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x15c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a34      	ldr	r2, [pc, #208]	@ (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d012      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x156>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a32      	ldr	r2, [pc, #200]	@ (800239c <HAL_DMA_IRQHandler+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x150>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <HAL_DMA_IRQHandler+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x14a>
 80022e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022e4:	e00e      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ea:	e00b      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f0:	e008      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f6:	e005      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fc:	e002      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022fe:	2320      	movs	r3, #32
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 8002302:	2302      	movs	r3, #2
 8002304:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <HAL_DMA_IRQHandler+0x208>)
 8002306:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d034      	beq.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002320:	e02f      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 020e 	bic.w	r2, r2, #14
 800234a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
    }
  }
  return;
 8002382:	bf00      	nop
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020008 	.word	0x40020008
 8002390:	4002001c 	.word	0x4002001c
 8002394:	40020030 	.word	0x40020030
 8002398:	40020044 	.word	0x40020044
 800239c:	40020058 	.word	0x40020058
 80023a0:	4002006c 	.word	0x4002006c
 80023a4:	40020000 	.word	0x40020000

080023a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d108      	bne.n	80023e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023e6:	e007      	b.n	80023f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
	...

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b08b      	sub	sp, #44	@ 0x2c
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002416:	e169      	b.n	80026ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002418:	2201      	movs	r2, #1
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 8158 	bne.w	80026e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a9a      	ldr	r2, [pc, #616]	@ (80026a4 <HAL_GPIO_Init+0x2a0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05e      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002440:	4a98      	ldr	r2, [pc, #608]	@ (80026a4 <HAL_GPIO_Init+0x2a0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d875      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002446:	4a98      	ldr	r2, [pc, #608]	@ (80026a8 <HAL_GPIO_Init+0x2a4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d058      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 800244c:	4a96      	ldr	r2, [pc, #600]	@ (80026a8 <HAL_GPIO_Init+0x2a4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d86f      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002452:	4a96      	ldr	r2, [pc, #600]	@ (80026ac <HAL_GPIO_Init+0x2a8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d052      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002458:	4a94      	ldr	r2, [pc, #592]	@ (80026ac <HAL_GPIO_Init+0x2a8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d869      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800245e:	4a94      	ldr	r2, [pc, #592]	@ (80026b0 <HAL_GPIO_Init+0x2ac>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d04c      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002464:	4a92      	ldr	r2, [pc, #584]	@ (80026b0 <HAL_GPIO_Init+0x2ac>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d863      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800246a:	4a92      	ldr	r2, [pc, #584]	@ (80026b4 <HAL_GPIO_Init+0x2b0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d046      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
 8002470:	4a90      	ldr	r2, [pc, #576]	@ (80026b4 <HAL_GPIO_Init+0x2b0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d85d      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 8002476:	2b12      	cmp	r3, #18
 8002478:	d82a      	bhi.n	80024d0 <HAL_GPIO_Init+0xcc>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d859      	bhi.n	8002532 <HAL_GPIO_Init+0x12e>
 800247e:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <HAL_GPIO_Init+0x80>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	080024ff 	.word	0x080024ff
 8002488:	080024d9 	.word	0x080024d9
 800248c:	080024eb 	.word	0x080024eb
 8002490:	0800252d 	.word	0x0800252d
 8002494:	08002533 	.word	0x08002533
 8002498:	08002533 	.word	0x08002533
 800249c:	08002533 	.word	0x08002533
 80024a0:	08002533 	.word	0x08002533
 80024a4:	08002533 	.word	0x08002533
 80024a8:	08002533 	.word	0x08002533
 80024ac:	08002533 	.word	0x08002533
 80024b0:	08002533 	.word	0x08002533
 80024b4:	08002533 	.word	0x08002533
 80024b8:	08002533 	.word	0x08002533
 80024bc:	08002533 	.word	0x08002533
 80024c0:	08002533 	.word	0x08002533
 80024c4:	08002533 	.word	0x08002533
 80024c8:	080024e1 	.word	0x080024e1
 80024cc:	080024f5 	.word	0x080024f5
 80024d0:	4a79      	ldr	r2, [pc, #484]	@ (80026b8 <HAL_GPIO_Init+0x2b4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024d6:	e02c      	b.n	8002532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e029      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e024      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	3308      	adds	r3, #8
 80024f0:	623b      	str	r3, [r7, #32]
          break;
 80024f2:	e01f      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	330c      	adds	r3, #12
 80024fa:	623b      	str	r3, [r7, #32]
          break;
 80024fc:	e01a      	b.n	8002534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002506:	2304      	movs	r3, #4
 8002508:	623b      	str	r3, [r7, #32]
          break;
 800250a:	e013      	b.n	8002534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002514:	2308      	movs	r3, #8
 8002516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	611a      	str	r2, [r3, #16]
          break;
 800251e:	e009      	b.n	8002534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	615a      	str	r2, [r3, #20]
          break;
 800252a:	e003      	b.n	8002534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x130>
          break;
 8002532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2bff      	cmp	r3, #255	@ 0xff
 8002538:	d801      	bhi.n	800253e <HAL_GPIO_Init+0x13a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	e001      	b.n	8002542 <HAL_GPIO_Init+0x13e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2bff      	cmp	r3, #255	@ 0xff
 8002548:	d802      	bhi.n	8002550 <HAL_GPIO_Init+0x14c>
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x152>
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	3b08      	subs	r3, #8
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	210f      	movs	r1, #15
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	6a39      	ldr	r1, [r7, #32]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80b1 	beq.w	80026e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002584:	4b4d      	ldr	r3, [pc, #308]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a4c      	ldr	r2, [pc, #304]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <HAL_GPIO_Init+0x2b8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800259c:	4a48      	ldr	r2, [pc, #288]	@ (80026c0 <HAL_GPIO_Init+0x2bc>)
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a40      	ldr	r2, [pc, #256]	@ (80026c4 <HAL_GPIO_Init+0x2c0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_Init+0x1ec>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3f      	ldr	r2, [pc, #252]	@ (80026c8 <HAL_GPIO_Init+0x2c4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_Init+0x1e8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3e      	ldr	r2, [pc, #248]	@ (80026cc <HAL_GPIO_Init+0x2c8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_Init+0x1e4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3d      	ldr	r2, [pc, #244]	@ (80026d0 <HAL_GPIO_Init+0x2cc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_Init+0x1e0>
 80025e0:	2303      	movs	r3, #3
 80025e2:	e006      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025e4:	2304      	movs	r3, #4
 80025e6:	e004      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_GPIO_Init+0x1ee>
 80025f0:	2300      	movs	r3, #0
 80025f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4093      	lsls	r3, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002602:	492f      	ldr	r1, [pc, #188]	@ (80026c0 <HAL_GPIO_Init+0x2bc>)
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800261c:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	492c      	ldr	r1, [pc, #176]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800262a:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	4928      	ldr	r1, [pc, #160]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002634:	4013      	ands	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002644:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4922      	ldr	r1, [pc, #136]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	43db      	mvns	r3, r3
 800265a:	491e      	ldr	r1, [pc, #120]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800265c:	4013      	ands	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4918      	ldr	r1, [pc, #96]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800267a:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	43db      	mvns	r3, r3
 8002682:	4914      	ldr	r1, [pc, #80]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002684:	4013      	ands	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d021      	beq.n	80026d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002694:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <HAL_GPIO_Init+0x2d0>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	e021      	b.n	80026e6 <HAL_GPIO_Init+0x2e2>
 80026a2:	bf00      	nop
 80026a4:	10320000 	.word	0x10320000
 80026a8:	10310000 	.word	0x10310000
 80026ac:	10220000 	.word	0x10220000
 80026b0:	10210000 	.word	0x10210000
 80026b4:	10120000 	.word	0x10120000
 80026b8:	10110000 	.word	0x10110000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40010800 	.word	0x40010800
 80026c8:	40010c00 	.word	0x40010c00
 80026cc:	40011000 	.word	0x40011000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	43db      	mvns	r3, r3
 80026e0:	4909      	ldr	r1, [pc, #36]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	3301      	adds	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f47f ae8e 	bne.w	8002418 <HAL_GPIO_Init+0x14>
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	372c      	adds	r7, #44	@ 0x2c
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43d9      	mvns	r1, r3
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	400b      	ands	r3, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fcee 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	@ 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f002 fa48 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	@ (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	@ (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	@ (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	@ (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	@ (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	@ (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b08b      	sub	sp, #44	@ 0x2c
 80029fc:	af06      	add	r7, sp, #24
 80029fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0f1      	b.n	8002bee <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f007 fcfc 	bl	800a41c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fbc1 	bl	80061b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	687e      	ldr	r6, [r7, #4]
 8002a3e:	466d      	mov	r5, sp
 8002a40:	f106 0410 	add.w	r4, r6, #16
 8002a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	602b      	str	r3, [r5, #0]
 8002a4c:	1d33      	adds	r3, r6, #4
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f003 fb8b 	bl	800616c <USB_CoreInit>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0c2      	b.n	8002bee <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fbbc 	bl	80061ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e040      	b.n	8002afc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3338      	adds	r3, #56	@ 0x38
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	333c      	adds	r3, #60	@ 0x3c
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	3340      	adds	r3, #64	@ 0x40
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	3301      	adds	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d3b9      	bcc.n	8002a7a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e044      	b.n	8002b96 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3b5      	bcc.n	8002b0c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	687e      	ldr	r6, [r7, #4]
 8002ba8:	466d      	mov	r5, sp
 8002baa:	f106 0410 	add.w	r4, r6, #16
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	1d33      	adds	r3, r6, #4
 8002bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	f003 fb22 	bl	8006204 <USB_DevInit>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00d      	b.n	8002bee <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f005 fda3 	bl	8008732 <USB_DevDisconnect>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_PCD_Start+0x16>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e016      	b.n	8002c3a <HAL_PCD_Start+0x44>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fab7 	bl	800618c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f007 fe6e 	bl	800a902 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 fd77 	bl	800871e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b088      	sub	sp, #32
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f005 fd79 	bl	8008746 <USB_ReadInterrupts>
 8002c54:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb1b 	bl	800329c <PCD_EP_ISR_Handler>

    return;
 8002c66:	e119      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c84:	b292      	uxth	r2, r2
 8002c86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f007 fc41 	bl	800a512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c90:	2100      	movs	r1, #0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f905 	bl	8002ea2 <HAL_PCD_SetAddress>

    return;
 8002c98:	e100      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cbc:	e0ee      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ce0:	e0dc      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d027      	beq.n	8002d3c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	b292      	uxth	r2, r2
 8002d18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f007 fc31 	bl	800a584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d34:	b292      	uxth	r2, r2
 8002d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d3a:	e0af      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8083 	beq.w	8002e4e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e010      	b.n	8002d70 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3320      	adds	r3, #32
 8002d64:	443b      	add	r3, r7
 8002d66:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	d9eb      	bls.n	8002d4e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002da6:	bf00      	nop
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f6      	beq.n	8002da8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e00f      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
 8002de0:	7ffa      	ldrb	r2, [r7, #31]
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	440a      	add	r2, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3320      	adds	r3, #32
 8002dea:	443b      	add	r3, r7
 8002dec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002df0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	3301      	adds	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d9ec      	bls.n	8002dd8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0208 	orr.w	r2, r2, #8
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0204 	orr.w	r2, r2, #4
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f007 fb82 	bl	800a550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e4c:	e026      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f007 fb40 	bl	800a4f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e76:	e011      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9a:	bf00      	nop
  }
}
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_SetAddress+0x1a>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e013      	b.n	8002ee4 <HAL_PCD_SetAddress+0x42>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 fc0f 	bl	80086f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	70fb      	strb	r3, [r7, #3]
 8002efe:	460b      	mov	r3, r1
 8002f00:	803b      	strh	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0e      	bge.n	8002f30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00e      	b.n	8002f4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 0207 	and.w	r2, r3, #7
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f5a:	883a      	ldrh	r2, [r7, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	78ba      	ldrb	r2, [r7, #2]
 8002f64:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_EP_Open+0x94>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e00e      	b.n	8002f9e <HAL_PCD_EP_Open+0xb2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 f958 	bl	8006244 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0e      	bge.n	8002fd8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00e      	b.n	8002ff6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_PCD_EP_Close+0x6a>
 800300c:	2302      	movs	r3, #2
 800300e:	e00e      	b.n	800302e <HAL_PCD_EP_Close+0x88>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68f9      	ldr	r1, [r7, #12]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fcd0 	bl	80069c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	b2da      	uxtb	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fe87 	bl	8006d9c <USB_EPStartXfer>

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6979      	ldr	r1, [r7, #20]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fe39 	bl	8006d9c <USB_EPStartXfer>

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d901      	bls.n	8003152 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e04c      	b.n	80031ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da0e      	bge.n	8003178 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	705a      	strb	r2, [r3, #1]
 8003176:	e00c      	b.n	8003192 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_EP_SetStall+0x7e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e01c      	b.n	80031ec <HAL_PCD_EP_SetStall+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f005 f99c 	bl	80084fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f005 fac1 	bl	8008764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d901      	bls.n	8003212 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e040      	b.n	8003294 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0e      	bge.n	8003238 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	705a      	strb	r2, [r3, #1]
 8003236:	e00e      	b.n	8003256 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_PCD_EP_ClrStall+0x82>
 8003272:	2302      	movs	r3, #2
 8003274:	e00e      	b.n	8003294 <HAL_PCD_EP_ClrStall+0xa0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68f9      	ldr	r1, [r7, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f005 f98a 	bl	800859e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b096      	sub	sp, #88	@ 0x58
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a4:	e3be      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80032c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8178 	bne.w	80035ba <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d151      	bne.n	800337a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	81fb      	strh	r3, [r7, #14]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3328      	adds	r3, #40	@ 0x28
 80032fe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	3302      	adds	r3, #2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800332c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	441a      	add	r2, r3
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800333a:	2100      	movs	r1, #0
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f007 f8c0 	bl	800a4c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 836a 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x788>
 8003350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 8365 	bne.w	8003a24 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003366:	b2da      	uxtb	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003378:	e354      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003380:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800338c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d034      	beq.n	8003402 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	3306      	adds	r3, #6
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f005 fa14 	bl	8008804 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033e8:	4013      	ands	r3, r2
 80033ea:	823b      	strh	r3, [r7, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	8a3a      	ldrh	r2, [r7, #16]
 80033f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033f6:	b292      	uxth	r2, r2
 80033f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f007 f834 	bl	800a468 <HAL_PCD_SetupStageCallback>
 8003400:	e310      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003402:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003406:	2b00      	cmp	r3, #0
 8003408:	f280 830c 	bge.w	8003a24 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003418:	4013      	ands	r3, r2
 800341a:	83fb      	strh	r3, [r7, #30]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	8bfa      	ldrh	r2, [r7, #30]
 8003422:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	3306      	adds	r3, #6
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d019      	beq.n	8003492 <PCD_EP_ISR_Handler+0x1f6>
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	6959      	ldr	r1, [r3, #20]
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003474:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003476:	b29b      	uxth	r3, r3
 8003478:	f005 f9c4 	bl	8008804 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	441a      	add	r2, r3
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800348a:	2100      	movs	r1, #0
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f006 fffd 	bl	800a48c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800349c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 82bd 	bne.w	8003a24 <PCD_EP_ISR_Handler+0x788>
 80034aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034b6:	f000 82b5 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80034f0:	d91d      	bls.n	800352e <PCD_EP_ISR_Handler+0x292>
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <PCD_EP_ISR_Handler+0x270>
 8003506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003508:	3b01      	subs	r3, #1
 800350a:	647b      	str	r3, [r7, #68]	@ 0x44
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29a      	uxth	r2, r3
 8003512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003514:	b29b      	uxth	r3, r3
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	b29b      	uxth	r3, r3
 800351a:	4313      	orrs	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003526:	b29a      	uxth	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	e026      	b.n	800357c <PCD_EP_ISR_Handler+0x2e0>
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <PCD_EP_ISR_Handler+0x2b0>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	e017      	b.n	800357c <PCD_EP_ISR_Handler+0x2e0>
 800354c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	647b      	str	r3, [r7, #68]	@ 0x44
 8003554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <PCD_EP_ISR_Handler+0x2ca>
 8003560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003562:	3301      	adds	r3, #1
 8003564:	647b      	str	r3, [r7, #68]	@ 0x44
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29a      	uxth	r2, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356e:	b29b      	uxth	r3, r3
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	b29b      	uxth	r3, r3
 8003574:	4313      	orrs	r3, r2
 8003576:	b29a      	uxth	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358c:	827b      	strh	r3, [r7, #18]
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003594:	827b      	strh	r3, [r7, #18]
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800359c:	827b      	strh	r3, [r7, #18]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
 80035b8:	e234      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f280 80fc 	bge.w	80037d0 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035ee:	4013      	ands	r3, r2
 80035f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800360e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003626:	7b1b      	ldrb	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d125      	bne.n	8003678 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	3306      	adds	r3, #6
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8092 	beq.w	8003786 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	6959      	ldr	r1, [r3, #20]
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	88da      	ldrh	r2, [r3, #6]
 800366e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003672:	f005 f8c7 	bl	8008804 <USB_ReadPMA>
 8003676:	e086      	b.n	8003786 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d10a      	bne.n	8003696 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003684:	461a      	mov	r2, r3
 8003686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9d9 	bl	8003a40 <HAL_PCD_EP_DB_Receive>
 800368e:	4603      	mov	r3, r0
 8003690:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003694:	e077      	b.n	8003786 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d024      	beq.n	800373e <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	3302      	adds	r3, #2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02e      	beq.n	8003786 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	891a      	ldrh	r2, [r3, #8]
 8003734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003738:	f005 f864 	bl	8008804 <USB_ReadPMA>
 800373c:	e023      	b.n	8003786 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	3306      	adds	r3, #6
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003766:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800376a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	6959      	ldr	r1, [r3, #20]
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	895a      	ldrh	r2, [r3, #10]
 800377e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003782:	f005 f83f 	bl	8008804 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800378e:	441a      	add	r2, r3
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800379c:	441a      	add	r2, r3
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <PCD_EP_ISR_Handler+0x51a>
 80037aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d206      	bcs.n	80037c4 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f006 fe65 	bl	800a48c <HAL_PCD_DataOutStageCallback>
 80037c2:	e005      	b.n	80037d0 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fae6 	bl	8006d9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8123 	beq.w	8003a24 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80037de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	78db      	ldrb	r3, [r3, #3]
 8003832:	2b01      	cmp	r3, #1
 8003834:	f040 80a2 	bne.w	800397c <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	7b1b      	ldrb	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8093 	beq.w	800396e <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d126      	bne.n	80038aa <PCD_EP_ISR_Handler+0x60e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386a:	b29b      	uxth	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	4413      	add	r3, r2
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	011a      	lsls	r2, r3, #4
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	4413      	add	r3, r2
 800387e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	b29a      	uxth	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	e061      	b.n	800396e <PCD_EP_ISR_Handler+0x6d2>
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d15d      	bne.n	800396e <PCD_EP_ISR_Handler+0x6d2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	4413      	add	r3, r2
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	011a      	lsls	r2, r3, #4
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e045      	b.n	800396e <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d126      	bne.n	800393e <PCD_EP_ISR_Handler+0x6a2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003904:	4413      	add	r3, r2
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
 8003908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	011a      	lsls	r2, r3, #4
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	4413      	add	r3, r2
 8003912:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003922:	b29a      	uxth	r2, r3
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003936:	b29a      	uxth	r2, r3
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	e017      	b.n	800396e <PCD_EP_ISR_Handler+0x6d2>
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d113      	bne.n	800396e <PCD_EP_ISR_Handler+0x6d2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003954:	4413      	add	r3, r2
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003960:	4413      	add	r3, r2
 8003962:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2200      	movs	r2, #0
 800396c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f006 fda4 	bl	800a4c2 <HAL_PCD_DataInStageCallback>
 800397a:	e053      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800397c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d146      	bne.n	8003a16 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	3302      	adds	r3, #2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039bc:	429a      	cmp	r2, r3
 80039be:	d907      	bls.n	80039d0 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80039c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039cc:	619a      	str	r2, [r3, #24]
 80039ce:	e002      	b.n	80039d6 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f006 fd6c 	bl	800a4c2 <HAL_PCD_DataInStageCallback>
 80039ea:	e01b      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039f4:	441a      	add	r2, r3
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a02:	441a      	add	r2, r3
 8003a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a06:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 f9c4 	bl	8006d9c <USB_EPStartXfer>
 8003a14:	e006      	b.n	8003a24 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f91b 	bl	8003c5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f6ff ac38 	blt.w	80032a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3758      	adds	r7, #88	@ 0x58
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d07e      	beq.n	8003b56 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	8b7b      	ldrh	r3, [r7, #26]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d306      	bcc.n	8003a9a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	e002      	b.n	8003aa0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d123      	bne.n	8003af0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	833b      	strh	r3, [r7, #24]
 8003ac4:	8b3b      	ldrh	r3, [r7, #24]
 8003ac6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aca:	833b      	strh	r3, [r7, #24]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	8b3b      	ldrh	r3, [r7, #24]
 8003adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01f      	beq.n	8003b3a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b14:	82fb      	strh	r3, [r7, #22]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	441a      	add	r2, r3
 8003b24:	8afb      	ldrh	r3, [r7, #22]
 8003b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8087 	beq.w	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	6959      	ldr	r1, [r3, #20]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	891a      	ldrh	r2, [r3, #8]
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	f004 fe58 	bl	8008804 <USB_ReadPMA>
 8003b54:	e07c      	b.n	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	8b7b      	ldrh	r3, [r7, #26]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d306      	bcc.n	8003b98 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	619a      	str	r2, [r3, #24]
 8003b96:	e002      	b.n	8003b9e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d123      	bne.n	8003bee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc0:	83fb      	strh	r3, [r7, #30]
 8003bc2:	8bfb      	ldrh	r3, [r7, #30]
 8003bc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bc8:	83fb      	strh	r3, [r7, #30]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11f      	bne.n	8003c38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c12:	83bb      	strh	r3, [r7, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	8bbb      	ldrh	r3, [r7, #28]
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6959      	ldr	r1, [r3, #20]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	895a      	ldrh	r2, [r3, #10]
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	f004 fdda 	bl	8008804 <USB_ReadPMA>
    }
  }

  return count;
 8003c50:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b0a4      	sub	sp, #144	@ 0x90
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 81dd 	beq.w	800402e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d907      	bls.n	8003cbc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cb4:	1ad2      	subs	r2, r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e002      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 80b9 	bne.w	8003e3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d126      	bne.n	8003d22 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	4413      	add	r3, r2
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	e01a      	b.n	8003d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d116      	bne.n	8003d58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3e:	4413      	add	r3, r2
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	011a      	lsls	r2, r3, #4
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d126      	bne.n	8003db4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	011a      	lsls	r2, r3, #4
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e017      	b.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d113      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	4413      	add	r3, r2
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	011a      	lsls	r2, r3, #4
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	2200      	movs	r2, #0
 8003de2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	4619      	mov	r1, r3
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f006 fb69 	bl	800a4c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 82fc 	beq.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	82fb      	strh	r3, [r7, #22]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	8afb      	ldrh	r3, [r7, #22]
 8003e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8013      	strh	r3, [r2, #0]
 8003e3c:	e2da      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	f040 82ae 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003eae:	441a      	add	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d30b      	bcc.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	621a      	str	r2, [r3, #32]
 8003ed6:	e017      	b.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ee0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ee4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ef0:	e00a      	b.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d165      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x382>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f24:	4413      	add	r3, r2
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f4e:	d91d      	bls.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x332>
 8003f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x310>
 8003f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f66:	3b01      	subs	r3, #1
 8003f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	029b      	lsls	r3, r3, #10
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e044      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <HAL_PCD_EP_DB_Transmit+0x350>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e035      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e01c      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d118      	bne.n	8004016 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	4413      	add	r3, r2
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	011a      	lsls	r2, r3, #4
 8004002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004004:	4413      	add	r3, r2
 8004006:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
 800400c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004010:	b29a      	uxth	r2, r3
 8004012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004014:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6959      	ldr	r1, [r3, #20]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	891a      	ldrh	r2, [r3, #8]
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004026:	b29b      	uxth	r3, r3
 8004028:	f004 fba7 	bl	800877a <USB_WritePMA>
 800402c:	e1e2      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	3306      	adds	r3, #6
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004056:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004062:	429a      	cmp	r2, r3
 8004064:	d307      	bcc.n	8004076 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e002      	b.n	800407c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 80c0 	bne.w	8004206 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d126      	bne.n	80040dc <HAL_PCD_EP_DB_Transmit+0x482>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a2:	4413      	add	r3, r2
 80040a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	011a      	lsls	r2, r3, #4
 80040ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040ae:	4413      	add	r3, r2
 80040b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e01a      	b.n	8004112 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d116      	bne.n	8004112 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f8:	4413      	add	r3, r2
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	011a      	lsls	r2, r3, #4
 8004102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004104:	4413      	add	r3, r2
 8004106:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800410a:	663b      	str	r3, [r7, #96]	@ 0x60
 800410c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800410e:	2200      	movs	r2, #0
 8004110:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	677b      	str	r3, [r7, #116]	@ 0x74
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12b      	bne.n	8004178 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004134:	4413      	add	r3, r2
 8004136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004140:	4413      	add	r3, r2
 8004142:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800414a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	b29a      	uxth	r2, r3
 8004158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e017      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d113      	bne.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418e:	4413      	add	r3, r2
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	011a      	lsls	r2, r3, #4
 8004198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800419a:	4413      	add	r3, r2
 800419c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041a4:	2200      	movs	r2, #0
 80041a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f006 f987 	bl	800a4c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 811a 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]
 8004204:	e0f6      	b.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d121      	bne.n	8004254 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004248:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800424c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 80ca 	bne.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004268:	441a      	add	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004276:	441a      	add	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d30b      	bcc.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e017      	b.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d108      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042b8:	e00a      	b.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d165      	bne.n	80043aa <HAL_PCD_EP_DB_Transmit+0x750>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f2:	4413      	add	r3, r2
 80042f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	011a      	lsls	r2, r3, #4
 80042fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042fe:	4413      	add	r3, r2
 8004300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004310:	b29a      	uxth	r2, r3
 8004312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431a:	2b3e      	cmp	r3, #62	@ 0x3e
 800431c:	d91d      	bls.n	800435a <HAL_PCD_EP_DB_Transmit+0x700>
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004334:	3b01      	subs	r3, #1
 8004336:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29a      	uxth	r2, r3
 800433e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004340:	b29b      	uxth	r3, r3
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	b29b      	uxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004352:	b29a      	uxth	r2, r3
 8004354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	e041      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004370:	b29a      	uxth	r2, r3
 8004372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e032      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_PCD_EP_DB_Transmit+0x738>
 800438c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800438e:	3301      	adds	r3, #1
 8004390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29a      	uxth	r2, r3
 8004398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800439a:	b29b      	uxth	r3, r3
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4313      	orrs	r3, r2
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e019      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d115      	bne.n	80043de <HAL_PCD_EP_DB_Transmit+0x784>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c0:	4413      	add	r3, r2
 80043c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	4413      	add	r3, r2
 80043ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6959      	ldr	r1, [r3, #20]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	895a      	ldrh	r2, [r3, #10]
 80043ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f004 f9c3 	bl	800877a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440e:	82bb      	strh	r3, [r7, #20]
 8004410:	8abb      	ldrh	r3, [r7, #20]
 8004412:	f083 0310 	eor.w	r3, r3, #16
 8004416:	82bb      	strh	r3, [r7, #20]
 8004418:	8abb      	ldrh	r3, [r7, #20]
 800441a:	f083 0320 	eor.w	r3, r3, #32
 800441e:	82bb      	strh	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	8abb      	ldrh	r3, [r7, #20]
 8004430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004440:	b29b      	uxth	r3, r3
 8004442:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3790      	adds	r7, #144	@ 0x90
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	817b      	strh	r3, [r7, #10]
 800445c:	4613      	mov	r3, r2
 800445e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004460:	897b      	ldrh	r3, [r7, #10]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e009      	b.n	8004498 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004484:	897a      	ldrh	r2, [r7, #10]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d107      	bne.n	80044ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	80da      	strh	r2, [r3, #6]
 80044ac:	e00b      	b.n	80044c6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2201      	movs	r2, #1
 80044b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e272      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8087 	beq.w	8004602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f4:	4b92      	ldr	r3, [pc, #584]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d00c      	beq.n	800451a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004500:	4b8f      	ldr	r3, [pc, #572]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d112      	bne.n	8004532 <HAL_RCC_OscConfig+0x5e>
 800450c:	4b8c      	ldr	r3, [pc, #560]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d10b      	bne.n	8004532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451a:	4b89      	ldr	r3, [pc, #548]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d06c      	beq.n	8004600 <HAL_RCC_OscConfig+0x12c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d168      	bne.n	8004600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e24c      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x76>
 800453c:	4b80      	ldr	r3, [pc, #512]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a7f      	ldr	r2, [pc, #508]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	e02e      	b.n	80045a8 <HAL_RCC_OscConfig+0xd4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x98>
 8004552:	4b7b      	ldr	r3, [pc, #492]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a7a      	ldr	r2, [pc, #488]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b78      	ldr	r3, [pc, #480]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a77      	ldr	r2, [pc, #476]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e01d      	b.n	80045a8 <HAL_RCC_OscConfig+0xd4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0xbc>
 8004576:	4b72      	ldr	r3, [pc, #456]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a71      	ldr	r2, [pc, #452]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b6f      	ldr	r3, [pc, #444]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6e      	ldr	r2, [pc, #440]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0xd4>
 8004590:	4b6b      	ldr	r3, [pc, #428]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6a      	ldr	r2, [pc, #424]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b68      	ldr	r3, [pc, #416]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a67      	ldr	r2, [pc, #412]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fc ff88 	bl	80014c4 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fc ff84 	bl	80014c4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e200      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0xe4>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fc ff74 	bl	80014c4 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fc ff70 	bl	80014c4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	@ 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1ec      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x10c>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d063      	beq.n	80046d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460e:	4b4c      	ldr	r3, [pc, #304]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800461a:	4b49      	ldr	r3, [pc, #292]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11c      	bne.n	8004660 <HAL_RCC_OscConfig+0x18c>
 8004626:	4b46      	ldr	r3, [pc, #280]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b43      	ldr	r3, [pc, #268]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x176>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e1c0      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	4b3d      	ldr	r3, [pc, #244]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4939      	ldr	r1, [pc, #228]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e03a      	b.n	80046d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b36      	ldr	r3, [pc, #216]	@ (8004744 <HAL_RCC_OscConfig+0x270>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fc ff29 	bl	80014c4 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fc ff25 	bl	80014c4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1a1      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b2a      	ldr	r3, [pc, #168]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4927      	ldr	r1, [pc, #156]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b26      	ldr	r3, [pc, #152]	@ (8004744 <HAL_RCC_OscConfig+0x270>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fc ff08 	bl	80014c4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fc ff04 	bl	80014c4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e180      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03a      	beq.n	8004758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d019      	beq.n	800471e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b17      	ldr	r3, [pc, #92]	@ (8004748 <HAL_RCC_OscConfig+0x274>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fc fee8 	bl	80014c4 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fc fee4 	bl	80014c4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e160      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <HAL_RCC_OscConfig+0x26c>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004716:	2001      	movs	r0, #1
 8004718:	f000 face 	bl	8004cb8 <RCC_Delay>
 800471c:	e01c      	b.n	8004758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <HAL_RCC_OscConfig+0x274>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004724:	f7fc fece 	bl	80014c4 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472a:	e00f      	b.n	800474c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fc feca 	bl	80014c4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d908      	bls.n	800474c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e146      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	42420000 	.word	0x42420000
 8004748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b92      	ldr	r3, [pc, #584]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e9      	bne.n	800472c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80a6 	beq.w	80048b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b8b      	ldr	r3, [pc, #556]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b88      	ldr	r3, [pc, #544]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4a87      	ldr	r2, [pc, #540]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004780:	61d3      	str	r3, [r2, #28]
 8004782:	4b85      	ldr	r3, [pc, #532]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004792:	4b82      	ldr	r3, [pc, #520]	@ (800499c <HAL_RCC_OscConfig+0x4c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCC_OscConfig+0x4c8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7e      	ldr	r2, [pc, #504]	@ (800499c <HAL_RCC_OscConfig+0x4c8>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047aa:	f7fc fe8b 	bl	80014c4 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fc fe87 	bl	80014c4 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	@ 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e103      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c4:	4b75      	ldr	r3, [pc, #468]	@ (800499c <HAL_RCC_OscConfig+0x4c8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x312>
 80047d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6213      	str	r3, [r2, #32]
 80047e4:	e02d      	b.n	8004842 <HAL_RCC_OscConfig+0x36e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x334>
 80047ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4a69      	ldr	r2, [pc, #420]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6213      	str	r3, [r2, #32]
 80047fa:	4b67      	ldr	r3, [pc, #412]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	4a66      	ldr	r2, [pc, #408]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6213      	str	r3, [r2, #32]
 8004806:	e01c      	b.n	8004842 <HAL_RCC_OscConfig+0x36e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0x356>
 8004810:	4b61      	ldr	r3, [pc, #388]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4a60      	ldr	r2, [pc, #384]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6213      	str	r3, [r2, #32]
 800481c:	4b5e      	ldr	r3, [pc, #376]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4a5d      	ldr	r2, [pc, #372]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6213      	str	r3, [r2, #32]
 8004828:	e00b      	b.n	8004842 <HAL_RCC_OscConfig+0x36e>
 800482a:	4b5b      	ldr	r3, [pc, #364]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4a5a      	ldr	r2, [pc, #360]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6213      	str	r3, [r2, #32]
 8004836:	4b58      	ldr	r3, [pc, #352]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a57      	ldr	r2, [pc, #348]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fc fe3b 	bl	80014c4 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fc fe37 	bl	80014c4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0b1      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b4b      	ldr	r3, [pc, #300]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCC_OscConfig+0x37e>
 8004874:	e014      	b.n	80048a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004876:	f7fc fe25 	bl	80014c4 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fc fe21 	bl	80014c4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e09b      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	4b40      	ldr	r3, [pc, #256]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8087 	beq.w	80049ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d061      	beq.n	800498c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d146      	bne.n	800495e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d0:	4b33      	ldr	r3, [pc, #204]	@ (80049a0 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fc fdf5 	bl	80014c4 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fc fdf1 	bl	80014c4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e06d      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f0:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d108      	bne.n	8004918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4921      	ldr	r1, [pc, #132]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a19      	ldr	r1, [r3, #32]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	430b      	orrs	r3, r1
 800492a:	491b      	ldr	r1, [pc, #108]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x4cc>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fc fdc5 	bl	80014c4 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493e:	f7fc fdc1 	bl	80014c4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e03d      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x46a>
 800495c:	e035      	b.n	80049ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	@ (80049a0 <HAL_RCC_OscConfig+0x4cc>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fc fdae 	bl	80014c4 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fc fdaa 	bl	80014c4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e026      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x498>
 800498a:	e01e      	b.n	80049ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e019      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
 80049a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCC_OscConfig+0x500>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000

080049d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0d0      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d910      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b67      	ldr	r3, [pc, #412]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 0207 	bic.w	r2, r3, #7
 8004a02:	4965      	ldr	r1, [pc, #404]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0b8      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a34:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a58      	ldr	r2, [pc, #352]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a4c:	4b53      	ldr	r3, [pc, #332]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a52      	ldr	r2, [pc, #328]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b50      	ldr	r3, [pc, #320]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	494d      	ldr	r1, [pc, #308]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d040      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d115      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a96:	4b41      	ldr	r3, [pc, #260]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e073      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e06b      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab6:	4b39      	ldr	r3, [pc, #228]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f023 0203 	bic.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4936      	ldr	r1, [pc, #216]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac8:	f7fc fcfc 	bl	80014c4 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fc fcf8 	bl	80014c4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e053      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 020c 	and.w	r2, r3, #12
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d1eb      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af8:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d210      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 0207 	bic.w	r2, r3, #7
 8004b0e:	4922      	ldr	r1, [pc, #136]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e032      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4916      	ldr	r1, [pc, #88]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b52:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	490e      	ldr	r1, [pc, #56]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b66:	f000 f821 	bl	8004bac <HAL_RCC_GetSysClockFreq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	490a      	ldr	r1, [pc, #40]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b82:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc fc5a 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40022000 	.word	0x40022000
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	0800aa28 	.word	0x0800aa28
 8004ba4:	20000004 	.word	0x20000004
 8004ba8:	20000008 	.word	0x20000008

08004bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d002      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x30>
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x36>
 8004bda:	e027      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bde:	613b      	str	r3, [r7, #16]
      break;
 8004be0:	e027      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	0c9b      	lsrs	r3, r3, #18
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	4a17      	ldr	r2, [pc, #92]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bec:	5cd3      	ldrb	r3, [r2, r3]
 8004bee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0c5b      	lsrs	r3, r3, #17
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	4a11      	ldr	r2, [pc, #68]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c06:	5cd3      	ldrb	r3, [r2, r3]
 8004c08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c0e:	fb03 f202 	mul.w	r2, r3, r2
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e004      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c20:	fb02 f303 	mul.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	613b      	str	r3, [r7, #16]
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c2e:	613b      	str	r3, [r7, #16]
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	693b      	ldr	r3, [r7, #16]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	0800aa40 	.word	0x0800aa40
 8004c4c:	0800aa50 	.word	0x0800aa50
 8004c50:	003d0900 	.word	0x003d0900

08004c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c58:	4b02      	ldr	r3, [pc, #8]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	20000004 	.word	0x20000004

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c6c:	f7ff fff2 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800aa38 	.word	0x0800aa38

08004c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c94:	f7ff ffde 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	0adb      	lsrs	r3, r3, #11
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	@ (8004cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	0800aa38 	.word	0x0800aa38

08004cb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cec <RCC_Delay+0x34>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <RCC_Delay+0x38>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	0a5b      	lsrs	r3, r3, #9
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cd4:	bf00      	nop
  }
  while (Delay --);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	60fa      	str	r2, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f9      	bne.n	8004cd4 <RCC_Delay+0x1c>
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	20000004 	.word	0x20000004
 8004cf0:	10624dd3 	.word	0x10624dd3

08004cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d07d      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d14:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	4b4c      	ldr	r3, [pc, #304]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4a4b      	ldr	r2, [pc, #300]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	61d3      	str	r3, [r2, #28]
 8004d2c:	4b49      	ldr	r3, [pc, #292]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	4b46      	ldr	r3, [pc, #280]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d118      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d48:	4b43      	ldr	r3, [pc, #268]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a42      	ldr	r2, [pc, #264]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d54:	f7fc fbb6 	bl	80014c4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	e008      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5c:	f7fc fbb2 	bl	80014c4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e06d      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d7a:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02e      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d027      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d98:	4b2e      	ldr	r3, [pc, #184]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dae:	4a29      	ldr	r2, [pc, #164]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d014      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fc fb81 	bl	80014c4 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fc fb7d 	bl	80014c4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e036      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ee      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4917      	ldr	r1, [pc, #92]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e00:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4a13      	ldr	r2, [pc, #76]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	490b      	ldr	r1, [pc, #44]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	4904      	ldr	r1, [pc, #16]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42420440 	.word	0x42420440

08004e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e041      	b.n	8004ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc f9b6 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f000 fa74 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e03a      	b.n	8004f8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a18      	ldr	r2, [pc, #96]	@ (8004f98 <HAL_TIM_Base_Start_IT+0x98>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00e      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x58>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d009      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x58>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x58>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a13      	ldr	r2, [pc, #76]	@ (8004fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d111      	bne.n	8004f7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d010      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	e007      	b.n	8004f8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800

08004fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0202 	mvn.w	r2, #2
 8004fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9b4 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9a7 	bl	8005342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9b6 	bl	8005366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0204 	mvn.w	r2, #4
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f98a 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f97d 	bl	8005342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f98c 	bl	8005366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0208 	mvn.w	r2, #8
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2204      	movs	r2, #4
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f960 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f953 	bl	8005342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f962 	bl	8005366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0210 	mvn.w	r2, #16
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2208      	movs	r2, #8
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f936 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f929 	bl	8005342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f938 	bl	8005366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0201 	mvn.w	r2, #1
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb f840 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b80      	cmp	r3, #128	@ 0x80
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa7b 	bl	800564a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515e:	2b40      	cmp	r3, #64	@ 0x40
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8fc 	bl	8005378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b20      	cmp	r3, #32
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b20      	cmp	r3, #32
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0220 	mvn.w	r2, #32
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa46 	bl	8005638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_ConfigClockSource+0x1c>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e0b4      	b.n	800533a <HAL_TIM_ConfigClockSource+0x186>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005208:	d03e      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0xd4>
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520e:	f200 8087 	bhi.w	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005216:	f000 8086 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x172>
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521e:	d87f      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b70      	cmp	r3, #112	@ 0x70
 8005222:	d01a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xa6>
 8005224:	2b70      	cmp	r3, #112	@ 0x70
 8005226:	d87b      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b60      	cmp	r3, #96	@ 0x60
 800522a:	d050      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x11a>
 800522c:	2b60      	cmp	r3, #96	@ 0x60
 800522e:	d877      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b50      	cmp	r3, #80	@ 0x50
 8005232:	d03c      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0xfa>
 8005234:	2b50      	cmp	r3, #80	@ 0x50
 8005236:	d873      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d058      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x13a>
 800523c:	2b40      	cmp	r3, #64	@ 0x40
 800523e:	d86f      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b30      	cmp	r3, #48	@ 0x30
 8005242:	d064      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b30      	cmp	r3, #48	@ 0x30
 8005246:	d86b      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b20      	cmp	r3, #32
 800524a:	d060      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d867      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05c      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b10      	cmp	r3, #16
 8005256:	d05a      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	e062      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800526a:	f000 f968 	bl	800553e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800527c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
      break;
 8005286:	e04f      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005298:	f000 f951 	bl	800553e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052aa:	609a      	str	r2, [r3, #8]
      break;
 80052ac:	e03c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f8c8 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2150      	movs	r1, #80	@ 0x50
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f91f 	bl	800550a <TIM_ITRx_SetConfig>
      break;
 80052cc:	e02c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052da:	461a      	mov	r2, r3
 80052dc:	f000 f8e6 	bl	80054ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2160      	movs	r1, #96	@ 0x60
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f90f 	bl	800550a <TIM_ITRx_SetConfig>
      break;
 80052ec:	e01c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 f8a8 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2140      	movs	r1, #64	@ 0x40
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f8ff 	bl	800550a <TIM_ITRx_SetConfig>
      break;
 800530c:	e00c      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 f8f6 	bl	800550a <TIM_ITRx_SetConfig>
      break;
 800531e:	e003      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      break;
 8005324:	e000      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
	...

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <TIM_Base_SetConfig+0xb8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x30>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x30>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <TIM_Base_SetConfig+0xbc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x30>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <TIM_Base_SetConfig+0xc0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d108      	bne.n	80053ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005444 <TIM_Base_SetConfig+0xb8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0x62>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0x62>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <TIM_Base_SetConfig+0xbc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0x62>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <TIM_Base_SetConfig+0xc0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <TIM_Base_SetConfig+0xb8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800

08005450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800547a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 030a 	bic.w	r3, r3, #10
 800548c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0210 	bic.w	r2, r3, #16
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	031b      	lsls	r3, r3, #12
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	f043 0307 	orr.w	r3, r3, #7
 800552c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	609a      	str	r2, [r3, #8]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	021a      	lsls	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	431a      	orrs	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	609a      	str	r2, [r3, #8]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005590:	2302      	movs	r3, #2
 8005592:	e046      	b.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a16      	ldr	r2, [pc, #88]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e0:	d009      	beq.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a12      	ldr	r2, [pc, #72]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a10      	ldr	r2, [pc, #64]	@ (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10c      	bne.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4313      	orrs	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800

08005638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e042      	b.n	80056f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb fdf2 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	@ 0x24
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800569e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fcd5 	bl	8006050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	d112      	bne.n	800573c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_Receive_IT+0x26>
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e00b      	b.n	800573e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	461a      	mov	r2, r3
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fab7 	bl	8005ca6 <UART_Start_Receive_IT>
 8005738:	4603      	mov	r3, r0
 800573a:	e000      	b.n	800573e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b0ba      	sub	sp, #232	@ 0xe8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005774:	2300      	movs	r3, #0
 8005776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <HAL_UART_IRQHandler+0x66>
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fb93 	bl	8005ed2 <UART_Receive_IT>
      return;
 80057ac:	e25b      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80de 	beq.w	8005974 <HAL_UART_IRQHandler+0x22c>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80d1 	beq.w	8005974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0xae>
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
 8005802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xf6>
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d011      	beq.n	800586e <HAL_UART_IRQHandler+0x126>
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d105      	bne.n	8005862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 81f2 	beq.w	8005c5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x14e>
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb1e 	bl	8005ed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_UART_IRQHandler+0x17a>
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04f      	beq.n	8005962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa28 	bl	8005d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d041      	beq.n	800595a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005902:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800590e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800591a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1d9      	bne.n	80058d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b28 <HAL_UART_IRQHandler+0x3e0>)
 8005930:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005936:	4618      	mov	r0, r3
 8005938:	f7fc fbb8 	bl	80020ac <HAL_DMA_Abort_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800594c:	4610      	mov	r0, r2
 800594e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e00e      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f993 	bl	8005c7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	e00a      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f98f 	bl	8005c7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	e006      	b.n	8005970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f98b 	bl	8005c7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800596e:	e175      	b.n	8005c5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	bf00      	nop
    return;
 8005972:	e173      	b.n	8005c5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	f040 814f 	bne.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8148 	beq.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8141 	beq.w	8005c1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80b6 	beq.w	8005b2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8145 	beq.w	8005c60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059de:	429a      	cmp	r2, r3
 80059e0:	f080 813e 	bcs.w	8005c60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	f000 8088 	beq.w	8005b08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1d9      	bne.n	80059f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e1      	bne.n	8005a44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005aaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e3      	bne.n	8005a80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad8:	f023 0310 	bic.w	r3, r3, #16
 8005adc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e3      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fc fa96 	bl	8002034 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8b6 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b24:	e09c      	b.n	8005c60 <HAL_UART_IRQHandler+0x518>
 8005b26:	bf00      	nop
 8005b28:	08005ddd 	.word	0x08005ddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 808e 	beq.w	8005c64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8089 	beq.w	8005c64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b76:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e3      	bne.n	8005b52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bae:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bf4:	61fa      	str	r2, [r7, #28]
 8005bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	617b      	str	r3, [r7, #20]
   return(result);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f83b 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c1a:	e023      	b.n	8005c64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <HAL_UART_IRQHandler+0x4f4>
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8e5 	bl	8005e04 <UART_Transmit_IT>
    return;
 8005c3a:	e014      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <HAL_UART_IRQHandler+0x51e>
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f924 	bl	8005ea2 <UART_EndTransmit_IT>
    return;
 8005c5a:	e004      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c5c:	bf00      	nop
 8005c5e:	e002      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c64:	bf00      	nop
  }
}
 8005c66:	37e8      	adds	r7, #232	@ 0xe8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2222      	movs	r2, #34	@ 0x22
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0220 	orr.w	r2, r2, #32
 8005d0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b095      	sub	sp, #84	@ 0x54
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d40:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d119      	bne.n	8005dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db0:	61ba      	str	r2, [r7, #24]
 8005db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6979      	ldr	r1, [r7, #20]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dd2:	bf00      	nop
 8005dd4:	3754      	adds	r7, #84	@ 0x54
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff ff41 	bl	8005c7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b21      	cmp	r3, #33	@ 0x21
 8005e16:	d13e      	bne.n	8005e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e20:	d114      	bne.n	8005e4c <UART_Transmit_IT+0x48>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d110      	bne.n	8005e4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]
 8005e4a:	e008      	b.n	8005e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6211      	str	r1, [r2, #32]
 8005e56:	781a      	ldrb	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
  }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fed2 	bl	8005c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b08c      	sub	sp, #48	@ 0x30
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b22      	cmp	r3, #34	@ 0x22
 8005ee4:	f040 80ae 	bne.w	8006044 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef0:	d117      	bne.n	8005f22 <UART_Receive_IT+0x50>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d113      	bne.n	8005f22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f20:	e026      	b.n	8005f70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f34:	d007      	beq.n	8005f46 <UART_Receive_IT+0x74>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <UART_Receive_IT+0x82>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e008      	b.n	8005f66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d15d      	bne.n	8006040 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0220 	bic.w	r2, r2, #32
 8005f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695a      	ldr	r2, [r3, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d135      	bne.n	8006036 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 0310 	bic.w	r3, r3, #16
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff0:	623a      	str	r2, [r7, #32]
 8005ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b10      	cmp	r3, #16
 8006010:	d10a      	bne.n	8006028 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe2e 	bl	8005c90 <HAL_UARTEx_RxEventCallback>
 8006034:	e002      	b.n	800603c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fa f90a 	bl	8000250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e002      	b.n	8006046 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3730      	adds	r7, #48	@ 0x30
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800608a:	f023 030c 	bic.w	r3, r3, #12
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	430b      	orrs	r3, r1
 8006096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <UART_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d103      	bne.n	80060c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060b8:	f7fe fdea 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	e002      	b.n	80060c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060c0:	f7fe fdd2 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 80060c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009a      	lsls	r2, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	4a22      	ldr	r2, [pc, #136]	@ (8006168 <UART_SetConfig+0x118>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	0119      	lsls	r1, r3, #4
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009a      	lsls	r2, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <UART_SetConfig+0x118>)
 80060fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2064      	movs	r0, #100	@ 0x64
 8006106:	fb00 f303 	mul.w	r3, r0, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	3332      	adds	r3, #50	@ 0x32
 8006110:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <UART_SetConfig+0x118>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800611c:	4419      	add	r1, r3
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009a      	lsls	r2, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	fbb2 f2f3 	udiv	r2, r2, r3
 8006134:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <UART_SetConfig+0x118>)
 8006136:	fba3 0302 	umull	r0, r3, r3, r2
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	2064      	movs	r0, #100	@ 0x64
 800613e:	fb00 f303 	mul.w	r3, r0, r3
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	3332      	adds	r3, #50	@ 0x32
 8006148:	4a07      	ldr	r2, [pc, #28]	@ (8006168 <UART_SetConfig+0x118>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	440a      	add	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40013800 	.word	0x40013800
 8006168:	51eb851f 	.word	0x51eb851f

0800616c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800616c:	b084      	sub	sp, #16
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	f107 0014 	add.w	r0, r7, #20
 800617a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	b004      	add	sp, #16
 800618a:	4770      	bx	lr

0800618c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800619c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061c0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4013      	ands	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 0014 	add.w	r0, r7, #20
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	b004      	add	sp, #16
 8006242:	4770      	bx	lr

08006244 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006244:	b480      	push	{r7}
 8006246:	b09d      	sub	sp, #116	@ 0x74
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d81f      	bhi.n	80062b6 <USB_ActivateEndpoint+0x72>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <USB_ActivateEndpoint+0x38>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	0800628d 	.word	0x0800628d
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062bf 	.word	0x080062bf
 8006288:	0800629b 	.word	0x0800629b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800628c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006294:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006298:	e012      	b.n	80062c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800629a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800629e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80062a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062a6:	e00b      	b.n	80062c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062b4:	e004      	b.n	80062c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80062bc:	e000      	b.n	80062c0 <USB_ActivateEndpoint+0x7c>
      break;
 80062be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	7b1b      	ldrb	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 8178 	bne.w	8006620 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8084 	beq.w	8006442 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	4413      	add	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	011a      	lsls	r2, r3, #4
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	88db      	ldrh	r3, [r3, #6]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	827b      	strh	r3, [r7, #18]
 800637c:	8a7b      	ldrh	r3, [r7, #18]
 800637e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01b      	beq.n	80063be <USB_ActivateEndpoint+0x17a>
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	823b      	strh	r3, [r7, #16]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	8a3b      	ldrh	r3, [r7, #16]
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	78db      	ldrb	r3, [r3, #3]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d020      	beq.n	8006408 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	81bb      	strh	r3, [r7, #12]
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	f083 0320 	eor.w	r3, r3, #32
 80063e4:	81bb      	strh	r3, [r7, #12]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	89bb      	ldrh	r3, [r7, #12]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
 8006406:	e2d5      	b.n	80069b4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641e:	81fb      	strh	r3, [r7, #14]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]
 8006440:	e2b8      	b.n	80069b4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	633b      	str	r3, [r7, #48]	@ 0x30
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	4413      	add	r3, r2
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	4413      	add	r3, r2
 8006460:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	4413      	add	r3, r2
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	011a      	lsls	r2, r3, #4
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	4413      	add	r3, r2
 8006494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80064b0:	d91d      	bls.n	80064ee <USB_ActivateEndpoint+0x2aa>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <USB_ActivateEndpoint+0x288>
 80064c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064c8:	3b01      	subs	r3, #1
 80064ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	029b      	lsls	r3, r3, #10
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e026      	b.n	800653c <USB_ActivateEndpoint+0x2f8>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <USB_ActivateEndpoint+0x2c8>
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e017      	b.n	800653c <USB_ActivateEndpoint+0x2f8>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <USB_ActivateEndpoint+0x2e2>
 8006520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006522:	3301      	adds	r3, #1
 8006524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800652e:	b29b      	uxth	r3, r3
 8006530:	029b      	lsls	r3, r3, #10
 8006532:	b29b      	uxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b29a      	uxth	r2, r3
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	847b      	strh	r3, [r7, #34]	@ 0x22
 800654a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800654c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <USB_ActivateEndpoint+0x348>
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	843b      	strh	r3, [r7, #32]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	8c3b      	ldrh	r3, [r7, #32]
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d124      	bne.n	80065de <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	83bb      	strh	r3, [r7, #28]
 80065ac:	8bbb      	ldrh	r3, [r7, #28]
 80065ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065b2:	83bb      	strh	r3, [r7, #28]
 80065b4:	8bbb      	ldrh	r3, [r7, #28]
 80065b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065ba:	83bb      	strh	r3, [r7, #28]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	8bbb      	ldrh	r3, [r7, #28]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
 80065dc:	e1ea      	b.n	80069b4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f4:	83fb      	strh	r3, [r7, #30]
 80065f6:	8bfb      	ldrh	r3, [r7, #30]
 80065f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065fc:	83fb      	strh	r3, [r7, #30]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
 800661e:	e1c9      	b.n	80069b4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	78db      	ldrb	r3, [r3, #3]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d11e      	bne.n	8006666 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006658:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]
 8006664:	e01d      	b.n	80066a2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b2:	4413      	add	r3, r2
 80066b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	011a      	lsls	r2, r3, #4
 80066bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	891b      	ldrh	r3, [r3, #8]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e6:	4413      	add	r3, r2
 80066e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	011a      	lsls	r2, r3, #4
 80066f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80066f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	895b      	ldrh	r3, [r3, #10]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	b29b      	uxth	r3, r3
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006708:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8093 	bne.w	800683a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01b      	beq.n	8006768 <USB_ActivateEndpoint+0x524>
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006746:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800675c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006776:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01b      	beq.n	80067b8 <USB_ActivateEndpoint+0x574>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80067a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ce:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067d6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067de:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006816:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800682c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006834:	b29b      	uxth	r3, r3
 8006836:	8013      	strh	r3, [r2, #0]
 8006838:	e0bc      	b.n	80069b4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800684a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800684e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01d      	beq.n	8006892 <USB_ActivateEndpoint+0x64e>
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800688a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80068a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01d      	beq.n	80068ea <USB_ActivateEndpoint+0x6a6>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d024      	beq.n	800693c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800690c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006910:	f083 0320 	eor.w	r3, r3, #32
 8006914:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]
 800693a:	e01d      	b.n	8006978 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006952:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3774      	adds	r7, #116	@ 0x74
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b08d      	sub	sp, #52	@ 0x34
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	7b1b      	ldrb	r3, [r3, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 808e 	bne.w	8006af4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d044      	beq.n	8006a6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	81bb      	strh	r3, [r7, #12]
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <USB_DeactivateEndpoint+0x6c>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0e:	817b      	strh	r3, [r7, #10]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a46:	813b      	strh	r3, [r7, #8]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
 8006a68:	e192      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	827b      	strh	r3, [r7, #18]
 8006a78:	8a7b      	ldrh	r3, [r7, #18]
 8006a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01b      	beq.n	8006aba <USB_DeactivateEndpoint+0xf6>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a98:	823b      	strh	r3, [r7, #16]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	8a3b      	ldrh	r3, [r7, #16]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad0:	81fb      	strh	r3, [r7, #14]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
 8006af2:	e14d      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 80a5 	bne.w	8006c48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	843b      	strh	r3, [r7, #32]
 8006b0c:	8c3b      	ldrh	r3, [r7, #32]
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01b      	beq.n	8006b4e <USB_DeactivateEndpoint+0x18a>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2c:	83fb      	strh	r3, [r7, #30]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8bfb      	ldrh	r3, [r7, #30]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	83bb      	strh	r3, [r7, #28]
 8006b5c:	8bbb      	ldrh	r3, [r7, #28]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01b      	beq.n	8006b9e <USB_DeactivateEndpoint+0x1da>
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7c:	837b      	strh	r3, [r7, #26]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8b7b      	ldrh	r3, [r7, #26]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb4:	833b      	strh	r3, [r7, #24]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	8b3b      	ldrh	r3, [r7, #24]
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bec:	82fb      	strh	r3, [r7, #22]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c24:	82bb      	strh	r3, [r7, #20]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	8abb      	ldrh	r3, [r7, #20]
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]
 8006c46:	e0a3      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01b      	beq.n	8006c98 <USB_DeactivateEndpoint+0x2d4>
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006ca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01b      	beq.n	8006ce8 <USB_DeactivateEndpoint+0x324>
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3734      	adds	r7, #52	@ 0x34
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b0c2      	sub	sp, #264	@ 0x108
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006daa:	6018      	str	r0, [r3, #0]
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	f040 86b7 	bne.w	8007b36 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d908      	bls.n	8006df6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006df4:	e007      	b.n	8006e06 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	7b1b      	ldrb	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d13a      	bne.n	8006e8c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6959      	ldr	r1, [r3, #20]
 8006e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	88da      	ldrh	r2, [r3, #6]
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f001 fc9c 	bl	800877a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	011a      	lsls	r2, r3, #4
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	f000 be1f 	b.w	8007aca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	78db      	ldrb	r3, [r3, #3]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f040 8462 	bne.w	8007762 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	f240 83df 	bls.w	800767a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	441a      	add	r2, r3
 8006f00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f0c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 81c7 	beq.w	80072ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d177      	bne.n	800706a <USB_EPStartXfer+0x2ce>
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	4413      	add	r3, r2
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	011a      	lsls	r2, r3, #4
 8006fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fca:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fcc:	d921      	bls.n	8007012 <USB_EPStartXfer+0x276>
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <USB_EPStartXfer+0x252>
 8006fe4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	029b      	lsls	r3, r3, #10
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700a:	b29a      	uxth	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e050      	b.n	80070b4 <USB_EPStartXfer+0x318>
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <USB_EPStartXfer+0x294>
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e041      	b.n	80070b4 <USB_EPStartXfer+0x318>
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <USB_EPStartXfer+0x2b4>
 8007046:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800704a:	3301      	adds	r3, #1
 800704c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800705a:	b29b      	uxth	r3, r3
 800705c:	029b      	lsls	r3, r3, #10
 800705e:	b29b      	uxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e024      	b.n	80070b4 <USB_EPStartXfer+0x318>
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d11c      	bne.n	80070b4 <USB_EPStartXfer+0x318>
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	4413      	add	r3, r2
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	011a      	lsls	r2, r3, #4
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	4413      	add	r3, r2
 80070a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	895b      	ldrh	r3, [r3, #10]
 80070c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6959      	ldr	r1, [r3, #20]
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070e2:	6800      	ldr	r0, [r0, #0]
 80070e4:	f001 fb49 	bl	800877a <USB_WritePMA>
            ep->xfer_buff += len;
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695a      	ldr	r2, [r3, #20]
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f8:	441a      	add	r2, r3
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	429a      	cmp	r2, r3
 8007120:	d90f      	bls.n	8007142 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007132:	1ad2      	subs	r2, r2, r3
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	621a      	str	r2, [r3, #32]
 8007140:	e00e      	b.n	8007160 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d177      	bne.n	8007260 <USB_EPStartXfer+0x4c4>
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	4413      	add	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	011a      	lsls	r2, r3, #4
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80071c2:	d921      	bls.n	8007208 <USB_EPStartXfer+0x46c>
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <USB_EPStartXfer+0x448>
 80071da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071de:	3b01      	subs	r3, #1
 80071e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	029b      	lsls	r3, r3, #10
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007200:	b29a      	uxth	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	e056      	b.n	80072b6 <USB_EPStartXfer+0x51a>
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <USB_EPStartXfer+0x48a>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721e:	b29a      	uxth	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e047      	b.n	80072b6 <USB_EPStartXfer+0x51a>
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <USB_EPStartXfer+0x4aa>
 800723c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007240:	3301      	adds	r3, #1
 8007242:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007250:	b29b      	uxth	r3, r3
 8007252:	029b      	lsls	r3, r3, #10
 8007254:	b29b      	uxth	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	e02a      	b.n	80072b6 <USB_EPStartXfer+0x51a>
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d122      	bne.n	80072b6 <USB_EPStartXfer+0x51a>
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	4413      	add	r3, r2
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	011a      	lsls	r2, r3, #4
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	891b      	ldrh	r3, [r3, #8]
 80072c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6959      	ldr	r1, [r3, #20]
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072e4:	6800      	ldr	r0, [r0, #0]
 80072e6:	f001 fa48 	bl	800877a <USB_WritePMA>
 80072ea:	e3ee      	b.n	8007aca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d177      	bne.n	80073ec <USB_EPStartXfer+0x650>
 80072fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800731c:	4413      	add	r3, r2
 800731e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	011a      	lsls	r2, r3, #4
 800732e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007330:	4413      	add	r3, r2
 8007332:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007336:	647b      	str	r3, [r7, #68]	@ 0x44
 8007338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007342:	b29a      	uxth	r2, r3
 8007344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	2b3e      	cmp	r3, #62	@ 0x3e
 800734e:	d921      	bls.n	8007394 <USB_EPStartXfer+0x5f8>
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <USB_EPStartXfer+0x5d4>
 8007366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800736a:	3b01      	subs	r3, #1
 800736c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29b      	uxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738c:	b29a      	uxth	r2, r3
 800738e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e056      	b.n	8007442 <USB_EPStartXfer+0x6a6>
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <USB_EPStartXfer+0x616>
 800739c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	e047      	b.n	8007442 <USB_EPStartXfer+0x6a6>
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <USB_EPStartXfer+0x636>
 80073c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073cc:	3301      	adds	r3, #1
 80073ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073dc:	b29b      	uxth	r3, r3
 80073de:	029b      	lsls	r3, r3, #10
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4313      	orrs	r3, r2
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e02a      	b.n	8007442 <USB_EPStartXfer+0x6a6>
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d122      	bne.n	8007442 <USB_EPStartXfer+0x6a6>
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	653b      	str	r3, [r7, #80]	@ 0x50
 8007408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800741c:	4413      	add	r3, r2
 800741e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	011a      	lsls	r2, r3, #4
 800742e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007430:	4413      	add	r3, r2
 8007432:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	b29a      	uxth	r2, r3
 800743e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007440:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	891b      	ldrh	r3, [r3, #8]
 800744e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6959      	ldr	r1, [r3, #20]
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	b29b      	uxth	r3, r3
 8007464:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007468:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800746c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007470:	6800      	ldr	r0, [r0, #0]
 8007472:	f001 f982 	bl	800877a <USB_WritePMA>
            ep->xfer_buff += len;
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	441a      	add	r2, r3
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d90f      	bls.n	80074d0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	621a      	str	r2, [r3, #32]
 80074ce:	e00e      	b.n	80074ee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d177      	bne.n	80075fa <USB_EPStartXfer+0x85e>
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	4413      	add	r3, r2
 800752c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	011a      	lsls	r2, r3, #4
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	4413      	add	r3, r2
 8007540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
 8007546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007550:	b29a      	uxth	r2, r3
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	2b3e      	cmp	r3, #62	@ 0x3e
 800755c:	d921      	bls.n	80075a2 <USB_EPStartXfer+0x806>
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <USB_EPStartXfer+0x7e2>
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007578:	3b01      	subs	r3, #1
 800757a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29a      	uxth	r2, r3
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	b29b      	uxth	r3, r3
 800758a:	029b      	lsls	r3, r3, #10
 800758c:	b29b      	uxth	r3, r3
 800758e:	4313      	orrs	r3, r2
 8007590:	b29b      	uxth	r3, r3
 8007592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759a:	b29a      	uxth	r2, r3
 800759c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e050      	b.n	8007644 <USB_EPStartXfer+0x8a8>
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <USB_EPStartXfer+0x824>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e041      	b.n	8007644 <USB_EPStartXfer+0x8a8>
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <USB_EPStartXfer+0x844>
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	3301      	adds	r3, #1
 80075dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	029b      	lsls	r3, r3, #10
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e024      	b.n	8007644 <USB_EPStartXfer+0x8a8>
 80075fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d11c      	bne.n	8007644 <USB_EPStartXfer+0x8a8>
 800760a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761e:	4413      	add	r3, r2
 8007620:	643b      	str	r3, [r7, #64]	@ 0x40
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	011a      	lsls	r2, r3, #4
 8007630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007632:	4413      	add	r3, r2
 8007634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763e:	b29a      	uxth	r2, r3
 8007640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007642:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	895b      	ldrh	r3, [r3, #10]
 8007650:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6959      	ldr	r1, [r3, #20]
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	b29b      	uxth	r3, r3
 8007666:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800766a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800766e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	f001 f881 	bl	800877a <USB_WritePMA>
 8007678:	e227      	b.n	8007aca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	441a      	add	r2, r3
 80076ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007700:	b29b      	uxth	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007706:	4413      	add	r3, r2
 8007708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	011a      	lsls	r2, r3, #4
 8007718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800771a:	4413      	add	r3, r2
 800771c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	b29a      	uxth	r2, r3
 8007728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800772a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	891b      	ldrh	r3, [r3, #8]
 8007738:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6959      	ldr	r1, [r3, #20]
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	b29b      	uxth	r3, r3
 800774e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007752:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007756:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	f001 f80d 	bl	800877a <USB_WritePMA>
 8007760:	e1b3      	b.n	8007aca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80c6 	beq.w	8007934 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d177      	bne.n	80078b4 <USB_EPStartXfer+0xb18>
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077de:	b29b      	uxth	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077e4:	4413      	add	r3, r2
 80077e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	011a      	lsls	r2, r3, #4
 80077f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077f8:	4413      	add	r3, r2
 80077fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800780a:	b29a      	uxth	r2, r3
 800780c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007814:	2b3e      	cmp	r3, #62	@ 0x3e
 8007816:	d921      	bls.n	800785c <USB_EPStartXfer+0xac0>
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <USB_EPStartXfer+0xa9c>
 800782e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007832:	3b01      	subs	r3, #1
 8007834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007842:	b29b      	uxth	r3, r3
 8007844:	029b      	lsls	r3, r3, #10
 8007846:	b29b      	uxth	r3, r3
 8007848:	4313      	orrs	r3, r2
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	e050      	b.n	80078fe <USB_EPStartXfer+0xb62>
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <USB_EPStartXfer+0xade>
 8007864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007872:	b29a      	uxth	r2, r3
 8007874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	e041      	b.n	80078fe <USB_EPStartXfer+0xb62>
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <USB_EPStartXfer+0xafe>
 8007890:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007894:	3301      	adds	r3, #1
 8007896:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800789a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4313      	orrs	r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	e024      	b.n	80078fe <USB_EPStartXfer+0xb62>
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d11c      	bne.n	80078fe <USB_EPStartXfer+0xb62>
 80078c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078d8:	4413      	add	r3, r2
 80078da:	673b      	str	r3, [r7, #112]	@ 0x70
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	011a      	lsls	r2, r3, #4
 80078ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078ec:	4413      	add	r3, r2
 80078ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	895b      	ldrh	r3, [r3, #10]
 800790a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800790e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6959      	ldr	r1, [r3, #20]
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	b29b      	uxth	r3, r3
 8007920:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007924:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007928:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f000 ff24 	bl	800877a <USB_WritePMA>
 8007932:	e0ca      	b.n	8007aca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d177      	bne.n	8007a34 <USB_EPStartXfer+0xc98>
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007964:	4413      	add	r3, r2
 8007966:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	011a      	lsls	r2, r3, #4
 8007976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007978:	4413      	add	r3, r2
 800797a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800797e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798a:	b29a      	uxth	r2, r3
 800798c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	2b3e      	cmp	r3, #62	@ 0x3e
 8007996:	d921      	bls.n	80079dc <USB_EPStartXfer+0xc40>
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USB_EPStartXfer+0xc1c>
 80079ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	029b      	lsls	r3, r3, #10
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4313      	orrs	r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e05c      	b.n	8007a96 <USB_EPStartXfer+0xcfa>
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <USB_EPStartXfer+0xc5e>
 80079e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	e04d      	b.n	8007a96 <USB_EPStartXfer+0xcfa>
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <USB_EPStartXfer+0xc7e>
 8007a10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a14:	3301      	adds	r3, #1
 8007a16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	029b      	lsls	r3, r3, #10
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e030      	b.n	8007a96 <USB_EPStartXfer+0xcfa>
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d128      	bne.n	8007a96 <USB_EPStartXfer+0xcfa>
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a68:	4413      	add	r3, r2
 8007a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	011a      	lsls	r2, r3, #4
 8007a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a80:	4413      	add	r3, r2
 8007a82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	891b      	ldrh	r3, [r3, #8]
 8007aa2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6959      	ldr	r1, [r3, #20]
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007abc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ac0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ac4:	6800      	ldr	r0, [r0, #0]
 8007ac6:	f000 fe58 	bl	800877a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af0:	817b      	strh	r3, [r7, #10]
 8007af2:	897b      	ldrh	r3, [r7, #10]
 8007af4:	f083 0310 	eor.w	r3, r3, #16
 8007af8:	817b      	strh	r3, [r7, #10]
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	f083 0320 	eor.w	r3, r3, #32
 8007b00:	817b      	strh	r3, [r7, #10]
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	441a      	add	r2, r3
 8007b1c:	897b      	ldrh	r3, [r7, #10]
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]
 8007b32:	f000 bcde 	b.w	80084f2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	7b1b      	ldrb	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 80bb 	bne.w	8007cbe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d917      	bls.n	8007b94 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	619a      	str	r2, [r3, #24]
 8007b92:	e00e      	b.n	8007bb2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	011a      	lsls	r2, r3, #4
 8007bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bee:	4413      	add	r3, r2
 8007bf0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c10:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c12:	d924      	bls.n	8007c5e <USB_EPStartXfer+0xec2>
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <USB_EPStartXfer+0xe98>
 8007c2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	029b      	lsls	r3, r3, #10
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	f000 bc10 	b.w	800847e <USB_EPStartXfer+0x16e2>
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10c      	bne.n	8007c80 <USB_EPStartXfer+0xee4>
 8007c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e3fe      	b.n	800847e <USB_EPStartXfer+0x16e2>
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <USB_EPStartXfer+0xf04>
 8007c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	029b      	lsls	r3, r3, #10
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e3df      	b.n	800847e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	78db      	ldrb	r3, [r3, #3]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	f040 8218 	bne.w	8008100 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 809d 	bne.w	8007e1c <USB_EPStartXfer+0x1080>
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d06:	4413      	add	r3, r2
 8007d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	011a      	lsls	r2, r3, #4
 8007d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d1e:	4413      	add	r3, r2
 8007d20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d4a:	d92b      	bls.n	8007da4 <USB_EPStartXfer+0x1008>
 8007d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d104      	bne.n	8007d7c <USB_EPStartXfer+0xfe0>
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d76:	3b01      	subs	r3, #1
 8007d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	029b      	lsls	r3, r3, #10
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	e070      	b.n	8007e86 <USB_EPStartXfer+0x10ea>
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10c      	bne.n	8007dce <USB_EPStartXfer+0x1032>
 8007db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e05b      	b.n	8007e86 <USB_EPStartXfer+0x10ea>
 8007dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	085b      	lsrs	r3, r3, #1
 8007ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <USB_EPStartXfer+0x1062>
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	029b      	lsls	r3, r3, #10
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e034      	b.n	8007e86 <USB_EPStartXfer+0x10ea>
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d12c      	bne.n	8007e86 <USB_EPStartXfer+0x10ea>
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e50:	4413      	add	r3, r2
 8007e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	011a      	lsls	r2, r3, #4
 8007e64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e84:	801a      	strh	r2, [r3, #0]
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f040 809d 	bne.w	8007fe0 <USB_EPStartXfer+0x1244>
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007eca:	4413      	add	r3, r2
 8007ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	011a      	lsls	r2, r3, #4
 8007ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f0e:	d92b      	bls.n	8007f68 <USB_EPStartXfer+0x11cc>
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	095b      	lsrs	r3, r3, #5
 8007f1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <USB_EPStartXfer+0x11a4>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	029b      	lsls	r3, r3, #10
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4313      	orrs	r3, r2
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e069      	b.n	800803c <USB_EPStartXfer+0x12a0>
 8007f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10c      	bne.n	8007f92 <USB_EPStartXfer+0x11f6>
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e054      	b.n	800803c <USB_EPStartXfer+0x12a0>
 8007f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d004      	beq.n	8007fc2 <USB_EPStartXfer+0x1226>
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	029b      	lsls	r3, r3, #10
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e02d      	b.n	800803c <USB_EPStartXfer+0x12a0>
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d125      	bne.n	800803c <USB_EPStartXfer+0x12a0>
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008006:	4413      	add	r3, r2
 8008008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800800c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	011a      	lsls	r2, r3, #4
 800801a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800801e:	4413      	add	r3, r2
 8008020:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	b29a      	uxth	r2, r3
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800803a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800803c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8218 	beq.w	800847e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800804e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800806e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <USB_EPStartXfer+0x12ea>
 800807a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800807e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008086:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800808a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800808e:	2b00      	cmp	r3, #0
 8008090:	f040 81f5 	bne.w	800847e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008094:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 81ee 	bne.w	800847e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80080cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]
 80080fe:	e1be      	b.n	800847e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	78db      	ldrb	r3, [r3, #3]
 800810c:	2b01      	cmp	r3, #1
 800810e:	f040 81b4 	bne.w	800847a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d917      	bls.n	800815e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800812e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800813e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	619a      	str	r2, [r3, #24]
 800815c:	e00e      	b.n	800817c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2200      	movs	r2, #0
 800817a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800817c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 8085 	bne.w	8008298 <USB_EPStartXfer+0x14fc>
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081b2:	4413      	add	r3, r2
 80081b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	011a      	lsls	r2, r3, #4
 80081c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081ca:	4413      	add	r3, r2
 80081cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80081ee:	d923      	bls.n	8008238 <USB_EPStartXfer+0x149c>
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <USB_EPStartXfer+0x1474>
 8008206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820a:	3b01      	subs	r3, #1
 800820c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821c:	b29b      	uxth	r3, r3
 800821e:	029b      	lsls	r3, r3, #10
 8008220:	b29b      	uxth	r3, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	b29b      	uxth	r3, r3
 8008226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e060      	b.n	80082fa <USB_EPStartXfer+0x155e>
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10c      	bne.n	800825a <USB_EPStartXfer+0x14be>
 8008240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e04f      	b.n	80082fa <USB_EPStartXfer+0x155e>
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <USB_EPStartXfer+0x14de>
 8008270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800827a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	e030      	b.n	80082fa <USB_EPStartXfer+0x155e>
 8008298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d128      	bne.n	80082fa <USB_EPStartXfer+0x155e>
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082cc:	4413      	add	r3, r2
 80082ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	011a      	lsls	r2, r3, #4
 80082e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082e4:	4413      	add	r3, r2
 80082e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 8085 	bne.w	8008424 <USB_EPStartXfer+0x1688>
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008336:	b29b      	uxth	r3, r3
 8008338:	461a      	mov	r2, r3
 800833a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800833e:	4413      	add	r3, r2
 8008340:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	011a      	lsls	r2, r3, #4
 8008352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008356:	4413      	add	r3, r2
 8008358:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800835c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800836c:	b29a      	uxth	r2, r3
 800836e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008378:	2b3e      	cmp	r3, #62	@ 0x3e
 800837a:	d923      	bls.n	80083c4 <USB_EPStartXfer+0x1628>
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	2b00      	cmp	r3, #0
 8008390:	d104      	bne.n	800839c <USB_EPStartXfer+0x1600>
 8008392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008396:	3b01      	subs	r3, #1
 8008398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800839c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	029b      	lsls	r3, r3, #10
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e05c      	b.n	800847e <USB_EPStartXfer+0x16e2>
 80083c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10c      	bne.n	80083e6 <USB_EPStartXfer+0x164a>
 80083cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083dc:	b29a      	uxth	r2, r3
 80083de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	e04b      	b.n	800847e <USB_EPStartXfer+0x16e2>
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	085b      	lsrs	r3, r3, #1
 80083ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <USB_EPStartXfer+0x166a>
 80083fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008400:	3301      	adds	r3, #1
 8008402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29a      	uxth	r2, r3
 800840e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29b      	uxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b29a      	uxth	r2, r3
 800841c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e02c      	b.n	800847e <USB_EPStartXfer+0x16e2>
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d124      	bne.n	800847e <USB_EPStartXfer+0x16e2>
 8008434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800844a:	4413      	add	r3, r2
 800844c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	011a      	lsls	r2, r3, #4
 800845e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008462:	4413      	add	r3, r2
 8008464:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	b29a      	uxth	r2, r3
 8008472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e001      	b.n	800847e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e03a      	b.n	80084f4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800847e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d020      	beq.n	8008552 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008526:	81bb      	strh	r3, [r7, #12]
 8008528:	89bb      	ldrh	r3, [r7, #12]
 800852a:	f083 0310 	eor.w	r3, r3, #16
 800852e:	81bb      	strh	r3, [r7, #12]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	441a      	add	r2, r3
 800853a:	89bb      	ldrh	r3, [r7, #12]
 800853c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854c:	b29b      	uxth	r3, r3
 800854e:	8013      	strh	r3, [r2, #0]
 8008550:	e01f      	b.n	8008592 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008568:	81fb      	strh	r3, [r7, #14]
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008570:	81fb      	strh	r3, [r7, #14]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	441a      	add	r2, r3
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800858a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800859e:	b480      	push	{r7}
 80085a0:	b087      	sub	sp, #28
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	7b1b      	ldrb	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 809d 	bne.w	80086ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d04c      	beq.n	8008654 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	823b      	strh	r3, [r7, #16]
 80085c8:	8a3b      	ldrh	r3, [r7, #16]
 80085ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01b      	beq.n	800860a <USB_EPClearStall+0x6c>
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e8:	81fb      	strh	r3, [r7, #14]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	441a      	add	r2, r3
 80085f4:	89fb      	ldrh	r3, [r7, #14]
 80085f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d06c      	beq.n	80086ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008628:	81bb      	strh	r3, [r7, #12]
 800862a:	89bb      	ldrh	r3, [r7, #12]
 800862c:	f083 0320 	eor.w	r3, r3, #32
 8008630:	81bb      	strh	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	441a      	add	r2, r3
 800863c:	89bb      	ldrh	r3, [r7, #12]
 800863e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864e:	b29b      	uxth	r3, r3
 8008650:	8013      	strh	r3, [r2, #0]
 8008652:	e04b      	b.n	80086ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	82fb      	strh	r3, [r7, #22]
 8008662:	8afb      	ldrh	r3, [r7, #22]
 8008664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <USB_EPClearStall+0x106>
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800867e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008682:	82bb      	strh	r3, [r7, #20]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	8abb      	ldrh	r3, [r7, #20]
 8008690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800869c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ba:	827b      	strh	r3, [r7, #18]
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086c2:	827b      	strh	r3, [r7, #18]
 80086c4:	8a7b      	ldrh	r3, [r7, #18]
 80086c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80086ca:	827b      	strh	r3, [r7, #18]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	8a7b      	ldrh	r3, [r7, #18]
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2280      	movs	r2, #128	@ 0x80
 800870e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr

0800871e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr

08008746 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008754:	b29b      	uxth	r3, r3
 8008756:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800877a:	b480      	push	{r7}
 800877c:	b08b      	sub	sp, #44	@ 0x2c
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
 8008788:	460b      	mov	r3, r1
 800878a:	80fb      	strh	r3, [r7, #6]
 800878c:	4613      	mov	r3, r2
 800878e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008790:	88bb      	ldrh	r3, [r7, #4]
 8008792:	3301      	adds	r3, #1
 8008794:	085b      	lsrs	r3, r3, #1
 8008796:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	005a      	lsls	r2, r3, #1
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087b2:	e01e      	b.n	80087f2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	3301      	adds	r3, #1
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	b21a      	sxth	r2, r3
 80087c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b21b      	sxth	r3, r3
 80087cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	8a7a      	ldrh	r2, [r7, #18]
 80087d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	3302      	adds	r3, #2
 80087d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	3302      	adds	r3, #2
 80087de:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	3301      	adds	r3, #1
 80087e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3301      	adds	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ee:	3b01      	subs	r3, #1
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1dd      	bne.n	80087b4 <USB_WritePMA+0x3a>
  }
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	372c      	adds	r7, #44	@ 0x2c
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr

08008804 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008804:	b480      	push	{r7}
 8008806:	b08b      	sub	sp, #44	@ 0x2c
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	460b      	mov	r3, r1
 8008814:	80fb      	strh	r3, [r7, #6]
 8008816:	4613      	mov	r3, r2
 8008818:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800881a:	88bb      	ldrh	r3, [r7, #4]
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	b29b      	uxth	r3, r3
 8008820:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	005a      	lsls	r2, r3, #1
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008836:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	627b      	str	r3, [r7, #36]	@ 0x24
 800883c:	e01b      	b.n	8008876 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	3302      	adds	r3, #2
 800884a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	b2da      	uxtb	r2, r3
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	0a1b      	lsrs	r3, r3, #8
 800885e:	b2da      	uxtb	r2, r3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	3301      	adds	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	3302      	adds	r3, #2
 800886e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	3b01      	subs	r3, #1
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e0      	bne.n	800883e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800887c:	88bb      	ldrh	r3, [r7, #4]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	b2da      	uxtb	r2, r3
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	701a      	strb	r2, [r3, #0]
  }
}
 8008898:	bf00      	nop
 800889a:	372c      	adds	r7, #44	@ 0x2c
 800889c:	46bd      	mov	sp, r7
 800889e:	bc80      	pop	{r7}
 80088a0:	4770      	bx	lr

080088a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7c1b      	ldrb	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d115      	bne.n	80088e6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088be:	2202      	movs	r2, #2
 80088c0:	2181      	movs	r1, #129	@ 0x81
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 fee1 	bl	800a68a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d2:	2202      	movs	r2, #2
 80088d4:	2101      	movs	r1, #1
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fed7 	bl	800a68a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80088e4:	e012      	b.n	800890c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	2202      	movs	r2, #2
 80088ea:	2181      	movs	r1, #129	@ 0x81
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fecc 	bl	800a68a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088f8:	2340      	movs	r3, #64	@ 0x40
 80088fa:	2202      	movs	r2, #2
 80088fc:	2101      	movs	r1, #1
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 fec3 	bl	800a68a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800890c:	2308      	movs	r3, #8
 800890e:	2203      	movs	r2, #3
 8008910:	2182      	movs	r1, #130	@ 0x82
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 feb9 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800891e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008922:	f001 ffd9 	bl	800a8d8 <USBD_static_malloc>
 8008926:	4602      	mov	r2, r0
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008938:	2301      	movs	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	e026      	b.n	800898c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008944:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7c1b      	ldrb	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800896e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008972:	2101      	movs	r1, #1
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 ff79 	bl	800a86c <USBD_LL_PrepareReceive>
 800897a:	e007      	b.n	800898c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008982:	2340      	movs	r3, #64	@ 0x40
 8008984:	2101      	movs	r1, #1
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 ff70 	bl	800a86c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089a6:	2181      	movs	r1, #129	@ 0x81
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fe94 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089b4:	2101      	movs	r1, #1
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fe8d 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089c4:	2182      	movs	r1, #130	@ 0x82
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fe85 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 ff7f 	bl	800a8f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d039      	beq.n	8008aa2 <USBD_CDC_Setup+0x9e>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d17f      	bne.n	8008b32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	88db      	ldrh	r3, [r3, #6]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d029      	beq.n	8008a8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	da11      	bge.n	8008a68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	88d2      	ldrh	r2, [r2, #6]
 8008a56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a58:	6939      	ldr	r1, [r7, #16]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	88db      	ldrh	r3, [r3, #6]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 fa05 	bl	8009e70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a66:	e06b      	b.n	8008b40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	785a      	ldrb	r2, [r3, #1]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a7e:	6939      	ldr	r1, [r7, #16]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fa20 	bl	8009ecc <USBD_CtlPrepareRx>
      break;
 8008a8c:	e058      	b.n	8008b40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	7850      	ldrb	r0, [r2, #1]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	4798      	blx	r3
      break;
 8008aa0:	e04e      	b.n	8008b40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b0b      	cmp	r3, #11
 8008aa8:	d02e      	beq.n	8008b08 <USBD_CDC_Setup+0x104>
 8008aaa:	2b0b      	cmp	r3, #11
 8008aac:	dc38      	bgt.n	8008b20 <USBD_CDC_Setup+0x11c>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <USBD_CDC_Setup+0xb4>
 8008ab2:	2b0a      	cmp	r3, #10
 8008ab4:	d014      	beq.n	8008ae0 <USBD_CDC_Setup+0xdc>
 8008ab6:	e033      	b.n	8008b20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d107      	bne.n	8008ad2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ac2:	f107 030c 	add.w	r3, r7, #12
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f9d0 	bl	8009e70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ad0:	e02e      	b.n	8008b30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 f961 	bl	8009d9c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ade:	e027      	b.n	8008b30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d107      	bne.n	8008afa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aea:	f107 030f 	add.w	r3, r7, #15
 8008aee:	2201      	movs	r2, #1
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 f9bc 	bl	8009e70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008af8:	e01a      	b.n	8008b30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f94d 	bl	8009d9c <USBD_CtlError>
            ret = USBD_FAIL;
 8008b02:	2302      	movs	r3, #2
 8008b04:	75fb      	strb	r3, [r7, #23]
          break;
 8008b06:	e013      	b.n	8008b30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d00d      	beq.n	8008b2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f941 	bl	8009d9c <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b1e:	e006      	b.n	8008b2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f93a 	bl	8009d9c <USBD_CtlError>
          ret = USBD_FAIL;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b2c:	e000      	b.n	8008b30 <USBD_CDC_Setup+0x12c>
          break;
 8008b2e:	bf00      	nop
      }
      break;
 8008b30:	e006      	b.n	8008b40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f931 	bl	8009d9c <USBD_CtlError>
      ret = USBD_FAIL;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3e:	bf00      	nop
  }

  return ret;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d03a      	beq.n	8008be6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	331c      	adds	r3, #28
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d029      	beq.n	8008bda <USBD_CDC_DataIn+0x90>
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	331c      	adds	r3, #28
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	78f9      	ldrb	r1, [r7, #3]
 8008b9a:	68b8      	ldr	r0, [r7, #8]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	4403      	add	r3, r0
 8008ba6:	3338      	adds	r3, #56	@ 0x38
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bae:	fb01 f303 	mul.w	r3, r1, r3
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d110      	bne.n	8008bda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	331c      	adds	r3, #28
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bcc:	78f9      	ldrb	r1, [r7, #3]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fe27 	bl	800a826 <USBD_LL_Transmit>
 8008bd8:	e003      	b.n	8008be2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e000      	b.n	8008be8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008be6:	2302      	movs	r3, #2
  }
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fe52 	bl	800a8b2 <USBD_LL_GetRxDataSize>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c34:	4611      	mov	r1, r2
 8008c36:	4798      	blx	r3

    return USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c3c:	2302      	movs	r3, #2
  }
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d014      	beq.n	8008c8a <USBD_CDC_EP0_RxReady+0x44>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c66:	2bff      	cmp	r3, #255	@ 0xff
 8008c68:	d00f      	beq.n	8008c8a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	22ff      	movs	r2, #255	@ 0xff
 8008c86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2243      	movs	r2, #67	@ 0x43
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	@ (8008cb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	20000098 	.word	0x20000098

08008cb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2243      	movs	r2, #67	@ 0x43
 8008cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008cc2:	4b03      	ldr	r3, [pc, #12]	@ (8008cd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000054 	.word	0x20000054

08008cd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2243      	movs	r2, #67	@ 0x43
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	@ (8008cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc80      	pop	{r7}
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	200000dc 	.word	0x200000dc

08008cf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	220a      	movs	r2, #10
 8008d00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d02:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20000010 	.word	0x20000010

08008d14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008d5e:	88fa      	ldrh	r2, [r7, #6]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr

08008d72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01c      	beq.n	8008dec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d115      	bne.n	8008de8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2181      	movs	r1, #129	@ 0x81
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fd21 	bl	800a826 <USBD_LL_Transmit>

      return USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e002      	b.n	8008dee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e000      	b.n	8008dee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008dec:	2302      	movs	r3, #2
  }
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d017      	beq.n	8008e40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	7c1b      	ldrb	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d109      	bne.n	8008e2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e22:	2101      	movs	r1, #1
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 fd21 	bl	800a86c <USBD_LL_PrepareReceive>
 8008e2a:	e007      	b.n	8008e3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e32:	2340      	movs	r3, #64	@ 0x40
 8008e34:	2101      	movs	r1, #1
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fd18 	bl	800a86c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e000      	b.n	8008e42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e40:	2302      	movs	r3, #2
  }
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e01a      	b.n	8008e98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	79fa      	ldrb	r2, [r7, #7]
 8008e8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f001 fb85 	bl	800a5a0 <USBD_LL_Init>

  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d006      	beq.n	8008ec2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
 8008ec0:	e001      	b.n	8008ec6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc80      	pop	{r7}
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fbba 	bl	800a654 <USBD_LL_Start>

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	4611      	mov	r1, r2
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	4611      	mov	r1, r2
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3

  return USBD_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fed8 	bl	8009d2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f88:	461a      	mov	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f96:	f003 031f 	and.w	r3, r3, #31
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d016      	beq.n	8008fcc <USBD_LL_SetupStage+0x6a>
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d81c      	bhi.n	8008fdc <USBD_LL_SetupStage+0x7a>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <USBD_LL_SetupStage+0x4a>
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d008      	beq.n	8008fbc <USBD_LL_SetupStage+0x5a>
 8008faa:	e017      	b.n	8008fdc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f9cb 	bl	8009350 <USBD_StdDevReq>
      break;
 8008fba:	e01a      	b.n	8008ff2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fa2d 	bl	8009424 <USBD_StdItfReq>
      break;
 8008fca:	e012      	b.n	8008ff2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa6d 	bl	80094b4 <USBD_StdEPReq>
      break;
 8008fda:	e00a      	b.n	8008ff2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008fe2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fb92 	bl	800a714 <USBD_LL_StallEP>
      break;
 8008ff0:	bf00      	nop
  }

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	460b      	mov	r3, r1
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d14b      	bne.n	80090a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009016:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800901e:	2b03      	cmp	r3, #3
 8009020:	d134      	bne.n	800908c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d919      	bls.n	8009062 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009044:	429a      	cmp	r2, r3
 8009046:	d203      	bcs.n	8009050 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800904c:	b29b      	uxth	r3, r3
 800904e:	e002      	b.n	8009056 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009054:	b29b      	uxth	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 ff54 	bl	8009f08 <USBD_CtlContinueRx>
 8009060:	e038      	b.n	80090d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009074:	2b03      	cmp	r3, #3
 8009076:	d105      	bne.n	8009084 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 ff51 	bl	8009f2c <USBD_CtlSendStatus>
 800908a:	e023      	b.n	80090d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009092:	2b05      	cmp	r3, #5
 8009094:	d11e      	bne.n	80090d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fb37 	bl	800a714 <USBD_LL_StallEP>
 80090a6:	e015      	b.n	80090d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00d      	beq.n	80090d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d108      	bne.n	80090d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	7afa      	ldrb	r2, [r7, #11]
 80090c8:	4611      	mov	r1, r2
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	4798      	blx	r3
 80090ce:	e001      	b.n	80090d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090d0:	2302      	movs	r3, #2
 80090d2:	e000      	b.n	80090d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	460b      	mov	r3, r1
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d17f      	bne.n	80091f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3314      	adds	r3, #20
 80090f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d15c      	bne.n	80091bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	429a      	cmp	r2, r3
 800910c:	d915      	bls.n	800913a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	b29b      	uxth	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 febe 	bl	8009ea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800912c:	2300      	movs	r3, #0
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f001 fb9a 	bl	800a86c <USBD_LL_PrepareReceive>
 8009138:	e04e      	b.n	80091d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	6912      	ldr	r2, [r2, #16]
 8009142:	fbb3 f1f2 	udiv	r1, r3, r2
 8009146:	fb01 f202 	mul.w	r2, r1, r2
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11c      	bne.n	800918a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009158:	429a      	cmp	r2, r3
 800915a:	d316      	bcc.n	800918a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009166:	429a      	cmp	r2, r3
 8009168:	d20f      	bcs.n	800918a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fe9a 	bl	8009ea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917c:	2300      	movs	r3, #0
 800917e:	2200      	movs	r2, #0
 8009180:	2100      	movs	r1, #0
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f001 fb72 	bl	800a86c <USBD_LL_PrepareReceive>
 8009188:	e026      	b.n	80091d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800919c:	2b03      	cmp	r3, #3
 800919e:	d105      	bne.n	80091ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091ac:	2180      	movs	r1, #128	@ 0x80
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f001 fab0 	bl	800a714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fecc 	bl	8009f52 <USBD_CtlReceiveStatus>
 80091ba:	e00d      	b.n	80091d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d004      	beq.n	80091d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091d0:	2180      	movs	r1, #128	@ 0x80
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f001 fa9e 	bl	800a714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d11d      	bne.n	800921e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff fe81 	bl	8008eea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80091f0:	e015      	b.n	800921e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00d      	beq.n	800921a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009204:	2b03      	cmp	r3, #3
 8009206:	d108      	bne.n	800921a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	7afa      	ldrb	r2, [r7, #11]
 8009212:	4611      	mov	r1, r2
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	4798      	blx	r3
 8009218:	e001      	b.n	800921e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800921a:	2302      	movs	r3, #2
 800921c:	e000      	b.n	8009220 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009230:	2340      	movs	r3, #64	@ 0x40
 8009232:	2200      	movs	r2, #0
 8009234:	2100      	movs	r1, #0
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fa27 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2240      	movs	r2, #64	@ 0x40
 8009248:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800924c:	2340      	movs	r3, #64	@ 0x40
 800924e:	2200      	movs	r2, #0
 8009250:	2180      	movs	r1, #128	@ 0x80
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fa19 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2240      	movs	r2, #64	@ 0x40
 8009262:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	4611      	mov	r1, r2
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
  }

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2204      	movs	r2, #4
 80092e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d105      	bne.n	800930e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009328:	2b03      	cmp	r3, #3
 800932a:	d10b      	bne.n	8009344 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d005      	beq.n	8009376 <USBD_StdDevReq+0x26>
 800936a:	2b40      	cmp	r3, #64	@ 0x40
 800936c:	d84f      	bhi.n	800940e <USBD_StdDevReq+0xbe>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <USBD_StdDevReq+0x36>
 8009372:	2b20      	cmp	r3, #32
 8009374:	d14b      	bne.n	800940e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
      break;
 8009384:	e048      	b.n	8009418 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b09      	cmp	r3, #9
 800938c:	d839      	bhi.n	8009402 <USBD_StdDevReq+0xb2>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <USBD_StdDevReq+0x44>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093f9 	.word	0x080093f9
 800939c:	08009403 	.word	0x08009403
 80093a0:	080093ef 	.word	0x080093ef
 80093a4:	08009403 	.word	0x08009403
 80093a8:	080093c7 	.word	0x080093c7
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	08009403 	.word	0x08009403
 80093b4:	080093db 	.word	0x080093db
 80093b8:	080093d1 	.word	0x080093d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9dc 	bl	800977c <USBD_GetDescriptor>
          break;
 80093c4:	e022      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fb3f 	bl	8009a4c <USBD_SetAddress>
          break;
 80093ce:	e01d      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fb7e 	bl	8009ad4 <USBD_SetConfig>
          break;
 80093d8:	e018      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc07 	bl	8009bf0 <USBD_GetConfig>
          break;
 80093e2:	e013      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fc37 	bl	8009c5a <USBD_GetStatus>
          break;
 80093ec:	e00e      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fc65 	bl	8009cc0 <USBD_SetFeature>
          break;
 80093f6:	e009      	b.n	800940c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fc74 	bl	8009ce8 <USBD_ClrFeature>
          break;
 8009400:	e004      	b.n	800940c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fcc9 	bl	8009d9c <USBD_CtlError>
          break;
 800940a:	bf00      	nop
      }
      break;
 800940c:	e004      	b.n	8009418 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fcc3 	bl	8009d9c <USBD_CtlError>
      break;
 8009416:	bf00      	nop
  }

  return ret;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop

08009424 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800943a:	2b40      	cmp	r3, #64	@ 0x40
 800943c:	d005      	beq.n	800944a <USBD_StdItfReq+0x26>
 800943e:	2b40      	cmp	r3, #64	@ 0x40
 8009440:	d82e      	bhi.n	80094a0 <USBD_StdItfReq+0x7c>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <USBD_StdItfReq+0x26>
 8009446:	2b20      	cmp	r3, #32
 8009448:	d12a      	bne.n	80094a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009450:	3b01      	subs	r3, #1
 8009452:	2b02      	cmp	r3, #2
 8009454:	d81d      	bhi.n	8009492 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	889b      	ldrh	r3, [r3, #4]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b01      	cmp	r3, #1
 800945e:	d813      	bhi.n	8009488 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	88db      	ldrh	r3, [r3, #6]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d110      	bne.n	800949c <USBD_StdItfReq+0x78>
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10d      	bne.n	800949c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fd53 	bl	8009f2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009486:	e009      	b.n	800949c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fc86 	bl	8009d9c <USBD_CtlError>
          break;
 8009490:	e004      	b.n	800949c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc81 	bl	8009d9c <USBD_CtlError>
          break;
 800949a:	e000      	b.n	800949e <USBD_StdItfReq+0x7a>
          break;
 800949c:	bf00      	nop
      }
      break;
 800949e:	e004      	b.n	80094aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fc7a 	bl	8009d9c <USBD_CtlError>
      break;
 80094a8:	bf00      	nop
  }

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	889b      	ldrh	r3, [r3, #4]
 80094c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094d0:	2b40      	cmp	r3, #64	@ 0x40
 80094d2:	d007      	beq.n	80094e4 <USBD_StdEPReq+0x30>
 80094d4:	2b40      	cmp	r3, #64	@ 0x40
 80094d6:	f200 8146 	bhi.w	8009766 <USBD_StdEPReq+0x2b2>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <USBD_StdEPReq+0x40>
 80094de:	2b20      	cmp	r3, #32
 80094e0:	f040 8141 	bne.w	8009766 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
      break;
 80094f2:	e13d      	b.n	8009770 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094fc:	2b20      	cmp	r3, #32
 80094fe:	d10a      	bne.n	8009516 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	e12d      	b.n	8009772 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b03      	cmp	r3, #3
 800951c:	d007      	beq.n	800952e <USBD_StdEPReq+0x7a>
 800951e:	2b03      	cmp	r3, #3
 8009520:	f300 811b 	bgt.w	800975a <USBD_StdEPReq+0x2a6>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d072      	beq.n	800960e <USBD_StdEPReq+0x15a>
 8009528:	2b01      	cmp	r3, #1
 800952a:	d03a      	beq.n	80095a2 <USBD_StdEPReq+0xee>
 800952c:	e115      	b.n	800975a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009534:	2b02      	cmp	r3, #2
 8009536:	d002      	beq.n	800953e <USBD_StdEPReq+0x8a>
 8009538:	2b03      	cmp	r3, #3
 800953a:	d015      	beq.n	8009568 <USBD_StdEPReq+0xb4>
 800953c:	e02b      	b.n	8009596 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00c      	beq.n	800955e <USBD_StdEPReq+0xaa>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b80      	cmp	r3, #128	@ 0x80
 8009548:	d009      	beq.n	800955e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 f8e0 	bl	800a714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009554:	2180      	movs	r1, #128	@ 0x80
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 f8dc 	bl	800a714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800955c:	e020      	b.n	80095a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc1b 	bl	8009d9c <USBD_CtlError>
              break;
 8009566:	e01b      	b.n	80095a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10e      	bne.n	800958e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <USBD_StdEPReq+0xda>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b80      	cmp	r3, #128	@ 0x80
 800957a:	d008      	beq.n	800958e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	88db      	ldrh	r3, [r3, #6]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 f8c3 	bl	800a714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fccc 	bl	8009f2c <USBD_CtlSendStatus>

              break;
 8009594:	e004      	b.n	80095a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fbff 	bl	8009d9c <USBD_CtlError>
              break;
 800959e:	bf00      	nop
          }
          break;
 80095a0:	e0e0      	b.n	8009764 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d002      	beq.n	80095b2 <USBD_StdEPReq+0xfe>
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d015      	beq.n	80095dc <USBD_StdEPReq+0x128>
 80095b0:	e026      	b.n	8009600 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00c      	beq.n	80095d2 <USBD_StdEPReq+0x11e>
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	2b80      	cmp	r3, #128	@ 0x80
 80095bc:	d009      	beq.n	80095d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f8a6 	bl	800a714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095c8:	2180      	movs	r1, #128	@ 0x80
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f8a2 	bl	800a714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095d0:	e01c      	b.n	800960c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fbe1 	bl	8009d9c <USBD_CtlError>
              break;
 80095da:	e017      	b.n	800960c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 f8ad 	bl	800a752 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc97 	bl	8009f2c <USBD_CtlSendStatus>
              }
              break;
 80095fe:	e004      	b.n	800960a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fbca 	bl	8009d9c <USBD_CtlError>
              break;
 8009608:	e000      	b.n	800960c <USBD_StdEPReq+0x158>
              break;
 800960a:	bf00      	nop
          }
          break;
 800960c:	e0aa      	b.n	8009764 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009614:	2b02      	cmp	r3, #2
 8009616:	d002      	beq.n	800961e <USBD_StdEPReq+0x16a>
 8009618:	2b03      	cmp	r3, #3
 800961a:	d032      	beq.n	8009682 <USBD_StdEPReq+0x1ce>
 800961c:	e097      	b.n	800974e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <USBD_StdEPReq+0x180>
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b80      	cmp	r3, #128	@ 0x80
 8009628:	d004      	beq.n	8009634 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fbb5 	bl	8009d9c <USBD_CtlError>
                break;
 8009632:	e091      	b.n	8009758 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_StdEPReq+0x1a0>
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	3310      	adds	r3, #16
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	e00b      	b.n	800966c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	3304      	adds	r3, #4
 800966c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2202      	movs	r2, #2
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fbf8 	bl	8009e70 <USBD_CtlSendData>
              break;
 8009680:	e06a      	b.n	8009758 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009686:	2b00      	cmp	r3, #0
 8009688:	da11      	bge.n	80096ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	f003 020f 	and.w	r2, r3, #15
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3318      	adds	r3, #24
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d117      	bne.n	80096d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb78 	bl	8009d9c <USBD_CtlError>
                  break;
 80096ac:	e054      	b.n	8009758 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	f003 020f 	and.w	r2, r3, #15
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb65 	bl	8009d9c <USBD_CtlError>
                  break;
 80096d2:	e041      	b.n	8009758 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da0b      	bge.n	80096f4 <USBD_StdEPReq+0x240>
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	3310      	adds	r3, #16
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4413      	add	r3, r2
 80096f0:	3304      	adds	r3, #4
 80096f2:	e00b      	b.n	800970c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	3304      	adds	r3, #4
 800970c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <USBD_StdEPReq+0x266>
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b80      	cmp	r3, #128	@ 0x80
 8009718:	d103      	bne.n	8009722 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e00e      	b.n	8009740 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f832 	bl	800a790 <USBD_LL_IsStallEP>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	e002      	b.n	8009740 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2202      	movs	r2, #2
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb92 	bl	8009e70 <USBD_CtlSendData>
              break;
 800974c:	e004      	b.n	8009758 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb23 	bl	8009d9c <USBD_CtlError>
              break;
 8009756:	bf00      	nop
          }
          break;
 8009758:	e004      	b.n	8009764 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fb1d 	bl	8009d9c <USBD_CtlError>
          break;
 8009762:	bf00      	nop
      }
      break;
 8009764:	e004      	b.n	8009770 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb17 	bl	8009d9c <USBD_CtlError>
      break;
 800976e:	bf00      	nop
  }

  return ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	885b      	ldrh	r3, [r3, #2]
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	2b06      	cmp	r3, #6
 800979e:	f200 8128 	bhi.w	80099f2 <USBD_GetDescriptor+0x276>
 80097a2:	a201      	add	r2, pc, #4	@ (adr r2, 80097a8 <USBD_GetDescriptor+0x2c>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	0800981d 	.word	0x0800981d
 80097b4:	080099f3 	.word	0x080099f3
 80097b8:	080099f3 	.word	0x080099f3
 80097bc:	08009993 	.word	0x08009993
 80097c0:	080099bf 	.word	0x080099bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
      break;
 80097da:	e112      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	7c1b      	ldrb	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10d      	bne.n	8009800 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ec:	f107 0208 	add.w	r2, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	2202      	movs	r2, #2
 80097fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097fe:	e100      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	f107 0208 	add.w	r2, r7, #8
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	2202      	movs	r2, #2
 8009818:	701a      	strb	r2, [r3, #0]
      break;
 800981a:	e0f2      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	885b      	ldrh	r3, [r3, #2]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b05      	cmp	r3, #5
 8009824:	f200 80ac 	bhi.w	8009980 <USBD_GetDescriptor+0x204>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <USBD_GetDescriptor+0xb4>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009849 	.word	0x08009849
 8009834:	0800987d 	.word	0x0800987d
 8009838:	080098b1 	.word	0x080098b1
 800983c:	080098e5 	.word	0x080098e5
 8009840:	08009919 	.word	0x08009919
 8009844:	0800994d 	.word	0x0800994d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7c12      	ldrb	r2, [r2, #16]
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
 8009868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986a:	e091      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa94 	bl	8009d9c <USBD_CtlError>
            err++;
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3301      	adds	r3, #1
 8009878:	72fb      	strb	r3, [r7, #11]
          break;
 800987a:	e089      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7c12      	ldrb	r2, [r2, #16]
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
 800989c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989e:	e077      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa7a 	bl	8009d9c <USBD_CtlError>
            err++;
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	3301      	adds	r3, #1
 80098ac:	72fb      	strb	r3, [r7, #11]
          break;
 80098ae:	e06f      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	7c12      	ldrb	r2, [r2, #16]
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d2:	e05d      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa60 	bl	8009d9c <USBD_CtlError>
            err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
          break;
 80098e2:	e055      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	7c12      	ldrb	r2, [r2, #16]
 80098fc:	f107 0108 	add.w	r1, r7, #8
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
 8009904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009906:	e043      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa46 	bl	8009d9c <USBD_CtlError>
            err++;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	3301      	adds	r3, #1
 8009914:	72fb      	strb	r3, [r7, #11]
          break;
 8009916:	e03b      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	7c12      	ldrb	r2, [r2, #16]
 8009930:	f107 0108 	add.w	r1, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993a:	e029      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa2c 	bl	8009d9c <USBD_CtlError>
            err++;
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	3301      	adds	r3, #1
 8009948:	72fb      	strb	r3, [r7, #11]
          break;
 800994a:	e021      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7c12      	ldrb	r2, [r2, #16]
 8009964:	f107 0108 	add.w	r1, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800996e:	e00f      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa12 	bl	8009d9c <USBD_CtlError>
            err++;
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	3301      	adds	r3, #1
 800997c:	72fb      	strb	r3, [r7, #11]
          break;
 800997e:	e007      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa0a 	bl	8009d9c <USBD_CtlError>
          err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800998e:	e038      	b.n	8009a02 <USBD_GetDescriptor+0x286>
 8009990:	e037      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7c1b      	ldrb	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a2:	f107 0208 	add.w	r2, r7, #8
 80099a6:	4610      	mov	r0, r2
 80099a8:	4798      	blx	r3
 80099aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099ac:	e029      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f9f3 	bl	8009d9c <USBD_CtlError>
        err++;
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	3301      	adds	r3, #1
 80099ba:	72fb      	strb	r3, [r7, #11]
      break;
 80099bc:	e021      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7c1b      	ldrb	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ce:	f107 0208 	add.w	r2, r7, #8
 80099d2:	4610      	mov	r0, r2
 80099d4:	4798      	blx	r3
 80099d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	2207      	movs	r2, #7
 80099de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099e0:	e00f      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f9d9 	bl	8009d9c <USBD_CtlError>
        err++;
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	3301      	adds	r3, #1
 80099ee:	72fb      	strb	r3, [r7, #11]
      break;
 80099f0:	e007      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9d1 	bl	8009d9c <USBD_CtlError>
      err++;
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	3301      	adds	r3, #1
 80099fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009a00:	bf00      	nop
  }

  if (err != 0U)
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d11c      	bne.n	8009a42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <USBD_GetDescriptor+0x2b6>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	88db      	ldrh	r3, [r3, #6]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88da      	ldrh	r2, [r3, #6]
 8009a1a:	893b      	ldrh	r3, [r7, #8]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bf28      	it	cs
 8009a20:	4613      	movcs	r3, r2
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a26:	893b      	ldrh	r3, [r7, #8]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa1f 	bl	8009e70 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	88db      	ldrh	r3, [r3, #6]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d104      	bne.n	8009a44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa76 	bl	8009f2c <USBD_CtlSendStatus>
 8009a40:	e000      	b.n	8009a44 <USBD_GetDescriptor+0x2c8>
    return;
 8009a42:	bf00      	nop
    }
  }
}
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop

08009a4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	889b      	ldrh	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d130      	bne.n	8009ac0 <USBD_SetAddress+0x74>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d12c      	bne.n	8009ac0 <USBD_SetAddress+0x74>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	885b      	ldrh	r3, [r3, #2]
 8009a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a6c:	d828      	bhi.n	8009ac0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d104      	bne.n	8009a8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f988 	bl	8009d9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8c:	e01d      	b.n	8009aca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fea4 	bl	800a7e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa43 	bl	8009f2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab4:	e009      	b.n	8009aca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	e004      	b.n	8009aca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f96a 	bl	8009d9c <USBD_CtlError>
  }
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	885b      	ldrh	r3, [r3, #2]
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	4b41      	ldr	r3, [pc, #260]	@ (8009bec <USBD_SetConfig+0x118>)
 8009ae6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ae8:	4b40      	ldr	r3, [pc, #256]	@ (8009bec <USBD_SetConfig+0x118>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d904      	bls.n	8009afa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f952 	bl	8009d9c <USBD_CtlError>
 8009af8:	e075      	b.n	8009be6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d002      	beq.n	8009b0a <USBD_SetConfig+0x36>
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d023      	beq.n	8009b50 <USBD_SetConfig+0x7c>
 8009b08:	e062      	b.n	8009bd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b0a:	4b38      	ldr	r3, [pc, #224]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d01a      	beq.n	8009b48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b12:	4b36      	ldr	r3, [pc, #216]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2203      	movs	r2, #3
 8009b20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b24:	4b31      	ldr	r3, [pc, #196]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff f9e7 	bl	8008efe <USBD_SetClassConfig>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d104      	bne.n	8009b40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f92f 	bl	8009d9c <USBD_CtlError>
            return;
 8009b3e:	e052      	b.n	8009be6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9f3 	bl	8009f2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b46:	e04e      	b.n	8009be6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9ef 	bl	8009f2c <USBD_CtlSendStatus>
        break;
 8009b4e:	e04a      	b.n	8009be6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b50:	4b26      	ldr	r3, [pc, #152]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d112      	bne.n	8009b7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009b60:	4b22      	ldr	r3, [pc, #136]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b6a:	4b20      	ldr	r3, [pc, #128]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff f9e3 	bl	8008f3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f9d8 	bl	8009f2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b7c:	e033      	b.n	8009be6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d01d      	beq.n	8009bc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff f9d1 	bl	8008f3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b9a:	4b14      	ldr	r3, [pc, #80]	@ (8009bec <USBD_SetConfig+0x118>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ba4:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <USBD_SetConfig+0x118>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff f9a7 	bl	8008efe <USBD_SetClassConfig>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d104      	bne.n	8009bc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f8ef 	bl	8009d9c <USBD_CtlError>
            return;
 8009bbe:	e012      	b.n	8009be6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f9b3 	bl	8009f2c <USBD_CtlSendStatus>
        break;
 8009bc6:	e00e      	b.n	8009be6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f9af 	bl	8009f2c <USBD_CtlSendStatus>
        break;
 8009bce:	e00a      	b.n	8009be6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f8e2 	bl	8009d9c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bd8:	4b04      	ldr	r3, [pc, #16]	@ (8009bec <USBD_SetConfig+0x118>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff f9ac 	bl	8008f3c <USBD_ClrClassConfig>
        break;
 8009be4:	bf00      	nop
    }
  }
}
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	2000057c 	.word	0x2000057c

08009bf0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	88db      	ldrh	r3, [r3, #6]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d004      	beq.n	8009c0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8c9 	bl	8009d9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c0a:	e022      	b.n	8009c52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dc02      	bgt.n	8009c1c <USBD_GetConfig+0x2c>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dc03      	bgt.n	8009c22 <USBD_GetConfig+0x32>
 8009c1a:	e015      	b.n	8009c48 <USBD_GetConfig+0x58>
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d00b      	beq.n	8009c38 <USBD_GetConfig+0x48>
 8009c20:	e012      	b.n	8009c48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f91d 	bl	8009e70 <USBD_CtlSendData>
        break;
 8009c36:	e00c      	b.n	8009c52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f915 	bl	8009e70 <USBD_CtlSendData>
        break;
 8009c46:	e004      	b.n	8009c52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8a6 	bl	8009d9c <USBD_CtlError>
        break;
 8009c50:	bf00      	nop
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d81e      	bhi.n	8009cae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	88db      	ldrh	r3, [r3, #6]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d004      	beq.n	8009c82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f88e 	bl	8009d9c <USBD_CtlError>
        break;
 8009c80:	e01a      	b.n	8009cb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f043 0202 	orr.w	r2, r3, #2
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f8e2 	bl	8009e70 <USBD_CtlSendData>
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f873 	bl	8009d9c <USBD_CtlError>
      break;
 8009cb6:	bf00      	nop
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	885b      	ldrh	r3, [r3, #2]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d106      	bne.n	8009ce0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f926 	bl	8009f2c <USBD_CtlSendStatus>
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d80b      	bhi.n	8009d16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d10c      	bne.n	8009d20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f90c 	bl	8009f2c <USBD_CtlSendStatus>
      }
      break;
 8009d14:	e004      	b.n	8009d20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f83f 	bl	8009d9c <USBD_CtlError>
      break;
 8009d1e:	e000      	b.n	8009d22 <USBD_ClrFeature+0x3a>
      break;
 8009d20:	bf00      	nop
  }
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781a      	ldrb	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	785a      	ldrb	r2, [r3, #1]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	3302      	adds	r3, #2
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	3303      	adds	r3, #3
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	021b      	lsls	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4413      	add	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	3304      	adds	r3, #4
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	461a      	mov	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3305      	adds	r3, #5
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4413      	add	r3, r2
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	3306      	adds	r3, #6
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	3307      	adds	r3, #7
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4413      	add	r3, r2
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	80da      	strh	r2, [r3, #6]

}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009da6:	2180      	movs	r1, #128	@ 0x80
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fcb3 	bl	800a714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fcaf 	bl	800a714 <USBD_LL_StallEP>
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d032      	beq.n	8009e3a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 f834 	bl	8009e42 <USBD_GetLen>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	3301      	adds	r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	75fa      	strb	r2, [r7, #23]
 8009dee:	461a      	mov	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	75fa      	strb	r2, [r7, #23]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	2203      	movs	r2, #3
 8009e08:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e0a:	e012      	b.n	8009e32 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	60fa      	str	r2, [r7, #12]
 8009e12:	7dfa      	ldrb	r2, [r7, #23]
 8009e14:	1c51      	adds	r1, r2, #1
 8009e16:	75f9      	strb	r1, [r7, #23]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	75fa      	strb	r2, [r7, #23]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e8      	bne.n	8009e0c <USBD_GetString+0x4e>
    }
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e4e:	e005      	b.n	8009e5c <USBD_GetLen+0x1a>
  {
    len++;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	3301      	adds	r3, #1
 8009e54:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1f5      	bne.n	8009e50 <USBD_GetLen+0xe>
  }

  return len;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr

08009e70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e8c:	88fa      	ldrh	r2, [r7, #6]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e92:	88fb      	ldrh	r3, [r7, #6]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	2100      	movs	r1, #0
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fcc4 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	2100      	movs	r1, #0
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 fcb2 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2203      	movs	r2, #3
 8009ede:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009ee2:	88fa      	ldrh	r2, [r7, #6]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009eea:	88fa      	ldrh	r2, [r7, #6]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ef2:	88fb      	ldrh	r3, [r7, #6]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 fcb7 	bl	800a86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fca5 	bl	800a86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2204      	movs	r2, #4
 8009f38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fc6f 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2205      	movs	r2, #5
 8009f5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f62:	2300      	movs	r3, #0
 8009f64:	2200      	movs	r2, #0
 8009f66:	2100      	movs	r1, #0
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fc7f 	bl	800a86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4912      	ldr	r1, [pc, #72]	@ (8009fc8 <MX_USB_DEVICE_Init+0x50>)
 8009f80:	4812      	ldr	r0, [pc, #72]	@ (8009fcc <MX_USB_DEVICE_Init+0x54>)
 8009f82:	f7fe ff62 	bl	8008e4a <USBD_Init>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f8c:	f7f7 f854 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f90:	490f      	ldr	r1, [pc, #60]	@ (8009fd0 <MX_USB_DEVICE_Init+0x58>)
 8009f92:	480e      	ldr	r0, [pc, #56]	@ (8009fcc <MX_USB_DEVICE_Init+0x54>)
 8009f94:	f7fe ff84 	bl	8008ea0 <USBD_RegisterClass>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f9e:	f7f7 f84b 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fa2:	490c      	ldr	r1, [pc, #48]	@ (8009fd4 <MX_USB_DEVICE_Init+0x5c>)
 8009fa4:	4809      	ldr	r0, [pc, #36]	@ (8009fcc <MX_USB_DEVICE_Init+0x54>)
 8009fa6:	f7fe feb5 	bl	8008d14 <USBD_CDC_RegisterInterface>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fb0:	f7f7 f842 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fb4:	4805      	ldr	r0, [pc, #20]	@ (8009fcc <MX_USB_DEVICE_Init+0x54>)
 8009fb6:	f7fe ff8c 	bl	8008ed2 <USBD_Start>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fc0:	f7f7 f83a 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fc4:	bf00      	nop
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20000130 	.word	0x20000130
 8009fcc:	20000580 	.word	0x20000580
 8009fd0:	2000001c 	.word	0x2000001c
 8009fd4:	20000120 	.word	0x20000120

08009fd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fdc:	2200      	movs	r2, #0
 8009fde:	4905      	ldr	r1, [pc, #20]	@ (8009ff4 <CDC_Init_FS+0x1c>)
 8009fe0:	4805      	ldr	r0, [pc, #20]	@ (8009ff8 <CDC_Init_FS+0x20>)
 8009fe2:	f7fe fead 	bl	8008d40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fe6:	4905      	ldr	r1, [pc, #20]	@ (8009ffc <CDC_Init_FS+0x24>)
 8009fe8:	4803      	ldr	r0, [pc, #12]	@ (8009ff8 <CDC_Init_FS+0x20>)
 8009fea:	f7fe fec2 	bl	8008d72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000944 	.word	0x20000944
 8009ff8:	20000580 	.word	0x20000580
 8009ffc:	20000844 	.word	0x20000844

0800a000 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a004:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a006:	4618      	mov	r0, r3
 800a008:	46bd      	mov	sp, r7
 800a00a:	bc80      	pop	{r7}
 800a00c:	4770      	bx	lr
	...

0800a010 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
 800a01c:	4613      	mov	r3, r2
 800a01e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	2b23      	cmp	r3, #35	@ 0x23
 800a024:	f200 808c 	bhi.w	800a140 <CDC_Control_FS+0x130>
 800a028:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <CDC_Control_FS+0x20>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a141 	.word	0x0800a141
 800a034:	0800a141 	.word	0x0800a141
 800a038:	0800a141 	.word	0x0800a141
 800a03c:	0800a141 	.word	0x0800a141
 800a040:	0800a141 	.word	0x0800a141
 800a044:	0800a141 	.word	0x0800a141
 800a048:	0800a141 	.word	0x0800a141
 800a04c:	0800a141 	.word	0x0800a141
 800a050:	0800a141 	.word	0x0800a141
 800a054:	0800a141 	.word	0x0800a141
 800a058:	0800a141 	.word	0x0800a141
 800a05c:	0800a141 	.word	0x0800a141
 800a060:	0800a141 	.word	0x0800a141
 800a064:	0800a141 	.word	0x0800a141
 800a068:	0800a141 	.word	0x0800a141
 800a06c:	0800a141 	.word	0x0800a141
 800a070:	0800a141 	.word	0x0800a141
 800a074:	0800a141 	.word	0x0800a141
 800a078:	0800a141 	.word	0x0800a141
 800a07c:	0800a141 	.word	0x0800a141
 800a080:	0800a141 	.word	0x0800a141
 800a084:	0800a141 	.word	0x0800a141
 800a088:	0800a141 	.word	0x0800a141
 800a08c:	0800a141 	.word	0x0800a141
 800a090:	0800a141 	.word	0x0800a141
 800a094:	0800a141 	.word	0x0800a141
 800a098:	0800a141 	.word	0x0800a141
 800a09c:	0800a141 	.word	0x0800a141
 800a0a0:	0800a141 	.word	0x0800a141
 800a0a4:	0800a141 	.word	0x0800a141
 800a0a8:	0800a141 	.word	0x0800a141
 800a0ac:	0800a141 	.word	0x0800a141
 800a0b0:	0800a0c1 	.word	0x0800a0c1
 800a0b4:	0800a0fb 	.word	0x0800a0fb
 800a0b8:	0800a141 	.word	0x0800a141
 800a0bc:	0800a141 	.word	0x0800a141
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781a      	ldrb	r2, [r3, #0]
 800a0c4:	4b22      	ldr	r3, [pc, #136]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0c6:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	785a      	ldrb	r2, [r3, #1]
 800a0cc:	4b20      	ldr	r3, [pc, #128]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0ce:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	789a      	ldrb	r2, [r3, #2]
 800a0d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0d6:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	78da      	ldrb	r2, [r3, #3]
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0de:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	791a      	ldrb	r2, [r3, #4]
 800a0e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0e6:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	795a      	ldrb	r2, [r3, #5]
 800a0ec:	4b18      	ldr	r3, [pc, #96]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0ee:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	799a      	ldrb	r2, [r3, #6]
 800a0f4:	4b16      	ldr	r3, [pc, #88]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0f6:	719a      	strb	r2, [r3, #6]

    break;
 800a0f8:	e023      	b.n	800a142 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a0fa:	4b15      	ldr	r3, [pc, #84]	@ (800a150 <CDC_Control_FS+0x140>)
 800a0fc:	781a      	ldrb	r2, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a12      	ldr	r2, [pc, #72]	@ (800a150 <CDC_Control_FS+0x140>)
 800a108:	7852      	ldrb	r2, [r2, #1]
 800a10a:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	3302      	adds	r3, #2
 800a110:	4a0f      	ldr	r2, [pc, #60]	@ (800a150 <CDC_Control_FS+0x140>)
 800a112:	7892      	ldrb	r2, [r2, #2]
 800a114:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	3303      	adds	r3, #3
 800a11a:	4a0d      	ldr	r2, [pc, #52]	@ (800a150 <CDC_Control_FS+0x140>)
 800a11c:	78d2      	ldrb	r2, [r2, #3]
 800a11e:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3304      	adds	r3, #4
 800a124:	4a0a      	ldr	r2, [pc, #40]	@ (800a150 <CDC_Control_FS+0x140>)
 800a126:	7912      	ldrb	r2, [r2, #4]
 800a128:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	3305      	adds	r3, #5
 800a12e:	4a08      	ldr	r2, [pc, #32]	@ (800a150 <CDC_Control_FS+0x140>)
 800a130:	7952      	ldrb	r2, [r2, #5]
 800a132:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	3306      	adds	r3, #6
 800a138:	4a05      	ldr	r2, [pc, #20]	@ (800a150 <CDC_Control_FS+0x140>)
 800a13a:	7992      	ldrb	r2, [r2, #6]
 800a13c:	701a      	strb	r2, [r3, #0]
    break;
 800a13e:	e000      	b.n	800a142 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a140:	bf00      	nop
  }

  return (USBD_OK);
 800a142:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20000a44 	.word	0x20000a44

0800a154 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a15e:	4b0c      	ldr	r3, [pc, #48]	@ (800a190 <CDC_Receive_FS+0x3c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d007      	beq.n	800a176 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a166:	4b0a      	ldr	r3, [pc, #40]	@ (800a190 <CDC_Receive_FS+0x3c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	b292      	uxth	r2, r2
 800a170:	4611      	mov	r1, r2
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	4806      	ldr	r0, [pc, #24]	@ (800a194 <CDC_Receive_FS+0x40>)
 800a17a:	f7fe fdfa 	bl	8008d72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a17e:	4805      	ldr	r0, [pc, #20]	@ (800a194 <CDC_Receive_FS+0x40>)
 800a180:	f7fe fe39 	bl	8008df6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a184:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000a4c 	.word	0x20000a4c
 800a194:	20000580 	.word	0x20000580

0800a198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <CDC_Transmit_FS+0x48>)
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e00b      	b.n	800a1d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1be:	887b      	ldrh	r3, [r7, #2]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4806      	ldr	r0, [pc, #24]	@ (800a1e0 <CDC_Transmit_FS+0x48>)
 800a1c6:	f7fe fdbb 	bl	8008d40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1ca:	4805      	ldr	r0, [pc, #20]	@ (800a1e0 <CDC_Transmit_FS+0x48>)
 800a1cc:	f7fe fde4 	bl	8008d98 <USBD_CDC_TransmitPacket>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000580 	.word	0x20000580

0800a1e4 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a1ec:	4a03      	ldr	r2, [pc, #12]	@ (800a1fc <CDC_AttachRxData+0x18>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6013      	str	r3, [r2, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bc80      	pop	{r7}
 800a1fa:	4770      	bx	lr
 800a1fc:	20000a4c 	.word	0x20000a4c

0800a200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2212      	movs	r2, #18
 800a210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a212:	4b03      	ldr	r3, [pc, #12]	@ (800a220 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	bc80      	pop	{r7}
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	2000014c 	.word	0x2000014c

0800a224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	6039      	str	r1, [r7, #0]
 800a22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2204      	movs	r2, #4
 800a234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a236:	4b03      	ldr	r3, [pc, #12]	@ (800a244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000160 	.word	0x20000160

0800a248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4907      	ldr	r1, [pc, #28]	@ (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
 800a25e:	4808      	ldr	r0, [pc, #32]	@ (800a280 <USBD_FS_ProductStrDescriptor+0x38>)
 800a260:	f7ff fdad 	bl	8009dbe <USBD_GetString>
 800a264:	e004      	b.n	800a270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4904      	ldr	r1, [pc, #16]	@ (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
 800a26a:	4805      	ldr	r0, [pc, #20]	@ (800a280 <USBD_FS_ProductStrDescriptor+0x38>)
 800a26c:	f7ff fda7 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	@ (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000a50 	.word	0x20000a50
 800a280:	0800a9e0 	.word	0x0800a9e0

0800a284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	4904      	ldr	r1, [pc, #16]	@ (800a2a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a294:	4804      	ldr	r0, [pc, #16]	@ (800a2a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a296:	f7ff fd92 	bl	8009dbe <USBD_GetString>
  return USBD_StrDesc;
 800a29a:	4b02      	ldr	r3, [pc, #8]	@ (800a2a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000a50 	.word	0x20000a50
 800a2a8:	0800a9f8 	.word	0x0800a9f8

0800a2ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	221a      	movs	r2, #26
 800a2bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2be:	f000 f843 	bl	800a348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2c2:	4b02      	ldr	r3, [pc, #8]	@ (800a2cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20000164 	.word	0x20000164

0800a2d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4907      	ldr	r1, [pc, #28]	@ (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2e6:	4808      	ldr	r0, [pc, #32]	@ (800a308 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e8:	f7ff fd69 	bl	8009dbe <USBD_GetString>
 800a2ec:	e004      	b.n	800a2f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4904      	ldr	r1, [pc, #16]	@ (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2f2:	4805      	ldr	r0, [pc, #20]	@ (800a308 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2f4:	f7ff fd63 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	@ (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000a50 	.word	0x20000a50
 800a308:	0800aa0c 	.word	0x0800aa0c

0800a30c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4907      	ldr	r1, [pc, #28]	@ (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a322:	4808      	ldr	r0, [pc, #32]	@ (800a344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a324:	f7ff fd4b 	bl	8009dbe <USBD_GetString>
 800a328:	e004      	b.n	800a334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4904      	ldr	r1, [pc, #16]	@ (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a32e:	4805      	ldr	r0, [pc, #20]	@ (800a344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a330:	f7ff fd45 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000a50 	.word	0x20000a50
 800a344:	0800aa18 	.word	0x0800aa18

0800a348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a34e:	4b0f      	ldr	r3, [pc, #60]	@ (800a38c <Get_SerialNum+0x44>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a354:	4b0e      	ldr	r3, [pc, #56]	@ (800a390 <Get_SerialNum+0x48>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a35a:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <Get_SerialNum+0x4c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4413      	add	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a36e:	2208      	movs	r2, #8
 800a370:	4909      	ldr	r1, [pc, #36]	@ (800a398 <Get_SerialNum+0x50>)
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f814 	bl	800a3a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a378:	2204      	movs	r2, #4
 800a37a:	4908      	ldr	r1, [pc, #32]	@ (800a39c <Get_SerialNum+0x54>)
 800a37c:	68b8      	ldr	r0, [r7, #8]
 800a37e:	f000 f80f 	bl	800a3a0 <IntToUnicode>
  }
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	1ffff7e8 	.word	0x1ffff7e8
 800a390:	1ffff7ec 	.word	0x1ffff7ec
 800a394:	1ffff7f0 	.word	0x1ffff7f0
 800a398:	20000166 	.word	0x20000166
 800a39c:	20000176 	.word	0x20000176

0800a3a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]
 800a3b6:	e027      	b.n	800a408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	0f1b      	lsrs	r3, r3, #28
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	d80b      	bhi.n	800a3d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	0f1b      	lsrs	r3, r3, #28
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3230      	adds	r2, #48	@ 0x30
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	e00a      	b.n	800a3ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	0f1b      	lsrs	r3, r3, #28
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	440b      	add	r3, r1
 800a3e8:	3237      	adds	r2, #55	@ 0x37
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	011b      	lsls	r3, r3, #4
 800a3f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	3301      	adds	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]
 800a408:	7dfa      	ldrb	r2, [r7, #23]
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d3d3      	bcc.n	800a3b8 <IntToUnicode+0x18>
  }
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr

0800a41c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a0d      	ldr	r2, [pc, #52]	@ (800a460 <HAL_PCD_MspInit+0x44>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d113      	bne.n	800a456 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a42e:	4b0d      	ldr	r3, [pc, #52]	@ (800a464 <HAL_PCD_MspInit+0x48>)
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	4a0c      	ldr	r2, [pc, #48]	@ (800a464 <HAL_PCD_MspInit+0x48>)
 800a434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a438:	61d3      	str	r3, [r2, #28]
 800a43a:	4b0a      	ldr	r3, [pc, #40]	@ (800a464 <HAL_PCD_MspInit+0x48>)
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	2014      	movs	r0, #20
 800a44c:	f7f7 fd01 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a450:	2014      	movs	r0, #20
 800a452:	f7f7 fd1a 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	40005c00 	.word	0x40005c00
 800a464:	40021000 	.word	0x40021000

0800a468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fe fd6f 	bl	8008f62 <USBD_LL_SetupStage>
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f7fe fda1 	bl	8008ffc <USBD_LL_DataOutStage>
}
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	440b      	add	r3, r1
 800a4e2:	333c      	adds	r3, #60	@ 0x3c
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f7fe fdf8 	bl	80090de <USBD_LL_DataInStage>
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe ff08 	bl	800931a <USBD_LL_SOF>
}
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a51a:	2301      	movs	r3, #1
 800a51c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d001      	beq.n	800a52a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a526:	f7f6 fd87 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a530:	7bfa      	ldrb	r2, [r7, #15]
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe feb8 	bl	80092aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fe71 	bl	8009228 <USBD_LL_Reset>
}
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe feb2 	bl	80092c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a56c:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <HAL_PCD_SuspendCallback+0x30>)
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	4a03      	ldr	r2, [pc, #12]	@ (800a580 <HAL_PCD_SuspendCallback+0x30>)
 800a572:	f043 0306 	orr.w	r3, r3, #6
 800a576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	e000ed00 	.word	0xe000ed00

0800a584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe feac 	bl	80092f0 <USBD_LL_Resume>
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5a8:	4a28      	ldr	r2, [pc, #160]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a26      	ldr	r2, [pc, #152]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a5b8:	4b24      	ldr	r3, [pc, #144]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5ba:	4a25      	ldr	r2, [pc, #148]	@ (800a650 <USBD_LL_Init+0xb0>)
 800a5bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a5be:	4b23      	ldr	r3, [pc, #140]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a5c4:	4b21      	ldr	r3, [pc, #132]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a5ca:	4b20      	ldr	r3, [pc, #128]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a5d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a5dc:	481b      	ldr	r0, [pc, #108]	@ (800a64c <USBD_LL_Init+0xac>)
 800a5de:	f7f8 fa0b 	bl	80029f8 <HAL_PCD_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a5e8:	f7f6 fd26 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5f2:	2318      	movs	r3, #24
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	f7f9 ff29 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a602:	2358      	movs	r3, #88	@ 0x58
 800a604:	2200      	movs	r2, #0
 800a606:	2180      	movs	r1, #128	@ 0x80
 800a608:	f7f9 ff21 	bl	800444e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a612:	23c0      	movs	r3, #192	@ 0xc0
 800a614:	2200      	movs	r2, #0
 800a616:	2181      	movs	r1, #129	@ 0x81
 800a618:	f7f9 ff19 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a622:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a626:	2200      	movs	r2, #0
 800a628:	2101      	movs	r1, #1
 800a62a:	f7f9 ff10 	bl	800444e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a638:	2200      	movs	r2, #0
 800a63a:	2182      	movs	r1, #130	@ 0x82
 800a63c:	f7f9 ff07 	bl	800444e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000c50 	.word	0x20000c50
 800a650:	40005c00 	.word	0x40005c00

0800a654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f8 fac3 	bl	8002bf6 <HAL_PCD_Start>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f94e 	bl	800a918 <USBD_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	4608      	mov	r0, r1
 800a694:	4611      	mov	r1, r2
 800a696:	461a      	mov	r2, r3
 800a698:	4603      	mov	r3, r0
 800a69a:	70fb      	strb	r3, [r7, #3]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70bb      	strb	r3, [r7, #2]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6b2:	78bb      	ldrb	r3, [r7, #2]
 800a6b4:	883a      	ldrh	r2, [r7, #0]
 800a6b6:	78f9      	ldrb	r1, [r7, #3]
 800a6b8:	f7f8 fc18 	bl	8002eec <HAL_PCD_EP_Open>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f928 	bl	800a918 <USBD_Get_USB_Status>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f8 fc56 	bl	8002fa6 <HAL_PCD_EP_Close>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f909 	bl	800a918 <USBD_Get_USB_Status>
 800a706:	4603      	mov	r3, r0
 800a708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7f8 fcfe 	bl	8003134 <HAL_PCD_EP_SetStall>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f8ea 	bl	800a918 <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a748:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f7f8 fd3f 	bl	80031f4 <HAL_PCD_EP_ClrStall>
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f8cb 	bl	800a918 <USBD_Get_USB_Status>
 800a782:	4603      	mov	r3, r0
 800a784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a786:	7bbb      	ldrb	r3, [r7, #14]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da0c      	bge.n	800a7c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	440b      	add	r3, r1
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	e00b      	b.n	800a7de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7cc:	68f9      	ldr	r1, [r7, #12]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a7dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bc80      	pop	{r7}
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f8 fb4b 	bl	8002ea2 <HAL_PCD_SetAddress>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f880 	bl	800a918 <USBD_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	461a      	mov	r2, r3
 800a832:	460b      	mov	r3, r1
 800a834:	72fb      	strb	r3, [r7, #11]
 800a836:	4613      	mov	r3, r2
 800a838:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a848:	893b      	ldrh	r3, [r7, #8]
 800a84a:	7af9      	ldrb	r1, [r7, #11]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	f7f8 fc3a 	bl	80030c6 <HAL_PCD_EP_Transmit>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 f85d 	bl	800a918 <USBD_Get_USB_Status>
 800a85e:	4603      	mov	r3, r0
 800a860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a862:	7dbb      	ldrb	r3, [r7, #22]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	607a      	str	r2, [r7, #4]
 800a876:	461a      	mov	r2, r3
 800a878:	460b      	mov	r3, r1
 800a87a:	72fb      	strb	r3, [r7, #11]
 800a87c:	4613      	mov	r3, r2
 800a87e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a88e:	893b      	ldrh	r3, [r7, #8]
 800a890:	7af9      	ldrb	r1, [r7, #11]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	f7f8 fbcf 	bl	8003036 <HAL_PCD_EP_Receive>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f83a 	bl	800a918 <USBD_Get_USB_Status>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8c4:	78fa      	ldrb	r2, [r7, #3]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f8 fbe5 	bl	8003098 <HAL_PCD_EP_GetRxCount>
 800a8ce:	4603      	mov	r3, r0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8e0:	4b02      	ldr	r3, [pc, #8]	@ (800a8ec <USBD_static_malloc+0x14>)
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	20000f40 	.word	0x20000f40

0800a8f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]

}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bc80      	pop	{r7}
 800a900:	4770      	bx	lr

0800a902 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr

0800a918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d817      	bhi.n	800a95c <USBD_Get_USB_Status+0x44>
 800a92c:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <USBD_Get_USB_Status+0x1c>)
 800a92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a932:	bf00      	nop
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a94b 	.word	0x0800a94b
 800a93c:	0800a951 	.word	0x0800a951
 800a940:	0800a957 	.word	0x0800a957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]
    break;
 800a948:	e00b      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a94a:	2302      	movs	r3, #2
 800a94c:	73fb      	strb	r3, [r7, #15]
    break;
 800a94e:	e008      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a950:	2301      	movs	r3, #1
 800a952:	73fb      	strb	r3, [r7, #15]
    break;
 800a954:	e005      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a956:	2302      	movs	r3, #2
 800a958:	73fb      	strb	r3, [r7, #15]
    break;
 800a95a:	e002      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a95c:	2302      	movs	r3, #2
 800a95e:	73fb      	strb	r3, [r7, #15]
    break;
 800a960:	bf00      	nop
  }
  return usb_status;
 800a962:	7bfb      	ldrb	r3, [r7, #15]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	bc80      	pop	{r7}
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop

0800a970 <memset>:
 800a970:	4603      	mov	r3, r0
 800a972:	4402      	add	r2, r0
 800a974:	4293      	cmp	r3, r2
 800a976:	d100      	bne.n	800a97a <memset+0xa>
 800a978:	4770      	bx	lr
 800a97a:	f803 1b01 	strb.w	r1, [r3], #1
 800a97e:	e7f9      	b.n	800a974 <memset+0x4>

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	2600      	movs	r6, #0
 800a984:	4d0c      	ldr	r5, [pc, #48]	@ (800a9b8 <__libc_init_array+0x38>)
 800a986:	4c0d      	ldr	r4, [pc, #52]	@ (800a9bc <__libc_init_array+0x3c>)
 800a988:	1b64      	subs	r4, r4, r5
 800a98a:	10a4      	asrs	r4, r4, #2
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	f000 f81a 	bl	800a9c8 <_init>
 800a994:	2600      	movs	r6, #0
 800a996:	4d0a      	ldr	r5, [pc, #40]	@ (800a9c0 <__libc_init_array+0x40>)
 800a998:	4c0a      	ldr	r4, [pc, #40]	@ (800a9c4 <__libc_init_array+0x44>)
 800a99a:	1b64      	subs	r4, r4, r5
 800a99c:	10a4      	asrs	r4, r4, #2
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a8:	4798      	blx	r3
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b2:	4798      	blx	r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	0800aa54 	.word	0x0800aa54
 800a9bc:	0800aa54 	.word	0x0800aa54
 800a9c0:	0800aa54 	.word	0x0800aa54
 800a9c4:	0800aa58 	.word	0x0800aa58

0800a9c8 <_init>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr

0800a9d4 <_fini>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	bf00      	nop
 800a9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	469e      	mov	lr, r3
 800a9de:	4770      	bx	lr
