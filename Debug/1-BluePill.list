
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009000  08009000  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009000  08009000  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009000  08009000  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d9c  2000017c  08009184  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f18  08009184  00020f18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001523e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000363f  00000000  00000000  00035426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00038a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5e  00000000  00000000  00039d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5be  00000000  00000000  0003ab76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175b3  00000000  00000000  00055134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f275  00000000  00000000  0006c6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d5c  00000000  00000000  000fb95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001006b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f74 	.word	0x08008f74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008f74 	.word	0x08008f74

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d105      	bne.n	800016a <HAL_TIM_PeriodElapsedCallback+0x1e>
		T100ms--;
 800015e:	4b0a      	ldr	r3, [pc, #40]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	3b01      	subs	r3, #1
 8000164:	b2da      	uxtb	r2, r3
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000168:	701a      	strb	r2, [r3, #0]
	}if(T100ms==0){
 800016a:	4b07      	ldr	r3, [pc, #28]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d102      	bne.n	8000178 <HAL_TIM_PeriodElapsedCallback+0x2c>
		T100ms=10;
 8000172:	4b05      	ldr	r3, [pc, #20]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000174:	220a      	movs	r2, #10
 8000176:	701a      	strb	r2, [r3, #0]
	}
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	40012c00 	.word	0x40012c00
 8000188:	20000228 	.word	0x20000228

0800018c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	if(huart ->Instance ==USART1){
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a0b      	ldr	r2, [pc, #44]	; (80001c8 <HAL_UART_RxCpltCallback+0x3c>)
 800019a:	4293      	cmp	r3, r2
 800019c:	d10f      	bne.n	80001be <HAL_UART_RxCpltCallback+0x32>
		iw++;
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <HAL_UART_RxCpltCallback+0x40>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	3301      	adds	r3, #1
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	4b09      	ldr	r3, [pc, #36]	; (80001cc <HAL_UART_RxCpltCallback+0x40>)
 80001a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
 80001aa:	4b08      	ldr	r3, [pc, #32]	; (80001cc <HAL_UART_RxCpltCallback+0x40>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <HAL_UART_RxCpltCallback+0x44>)
 80001b2:	4413      	add	r3, r2
 80001b4:	2201      	movs	r2, #1
 80001b6:	4619      	mov	r1, r3
 80001b8:	4806      	ldr	r0, [pc, #24]	; (80001d4 <HAL_UART_RxCpltCallback+0x48>)
 80001ba:	f003 fd6f 	bl	8003c9c <HAL_UART_Receive_IT>
//		while (pcCom.readable())
//		{
//			datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++]=pcCom.getc();
//		}
	}
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40013800 	.word	0x40013800
 80001cc:	2000032d 	.word	0x2000032d
 80001d0:	2000022c 	.word	0x2000022c
 80001d4:	200001e0 	.word	0x200001e0

080001d8 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	807b      	strh	r3, [r7, #2]
	rxUSBData = buf[0];
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781a      	ldrb	r2, [r3, #0]
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <USBReceive+0x24>)
 80001ea:	701a      	strb	r2, [r3, #0]
	newData = 1;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <USBReceive+0x28>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	2000032e 	.word	0x2000032e
 8000200:	2000032f 	.word	0x2000032f

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 faca 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f86a 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f93c 	bl	800048c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000214:	f000 f910 	bl	8000438 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000218:	f000 f8be 	bl	8000398 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800021c:	f008 f982 	bl	8008524 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000220:	4827      	ldr	r0, [pc, #156]	; (80002c0 <main+0xbc>)
 8000222:	f003 f93d 	bl	80034a0 <HAL_TIM_Base_Start_IT>

  ir=0,iw=0;
 8000226:	4b27      	ldr	r3, [pc, #156]	; (80002c4 <main+0xc0>)
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <main+0xc4>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
 8000232:	4b25      	ldr	r3, [pc, #148]	; (80002c8 <main+0xc4>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <main+0xc8>)
 800023a:	4413      	add	r3, r2
 800023c:	2201      	movs	r2, #1
 800023e:	4619      	mov	r1, r3
 8000240:	4823      	ldr	r0, [pc, #140]	; (80002d0 <main+0xcc>)
 8000242:	f003 fd2b 	bl	8003c9c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4822      	ldr	r0, [pc, #136]	; (80002d4 <main+0xd0>)
 800024c:	f000 fe8a 	bl	8000f64 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f000 fb07 	bl	8000864 <HAL_Delay>
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0xd0>)
 800025c:	f000 fe82 	bl	8000f64 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8000260:	2064      	movs	r0, #100	; 0x64
 8000262:	f000 faff 	bl	8000864 <HAL_Delay>
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	481a      	ldr	r0, [pc, #104]	; (80002d4 <main+0xd0>)
 800026c:	f000 fe7a 	bl	8000f64 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8000270:	2064      	movs	r0, #100	; 0x64
 8000272:	f000 faf7 	bl	8000864 <HAL_Delay>
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <main+0xd0>)
 800027c:	f000 fe72 	bl	8000f64 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <main+0xd0>)
 8000286:	f000 fe6d 	bl	8000f64 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	; 0x64
 800028c:	f000 faea 	bl	8000864 <HAL_Delay>
  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000294:	480f      	ldr	r0, [pc, #60]	; (80002d4 <main+0xd0>)
 8000296:	f000 fe65 	bl	8000f64 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	  CDC_AttachRxData(USBReceive);
 800029a:	480f      	ldr	r0, [pc, #60]	; (80002d8 <main+0xd4>)
 800029c:	f008 fa78 	bl	8008790 <CDC_AttachRxData>

	  if(newData){
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0xd8>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f8      	beq.n	800029a <main+0x96>
		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
 80002a8:	2101      	movs	r1, #1
 80002aa:	480d      	ldr	r0, [pc, #52]	; (80002e0 <main+0xdc>)
 80002ac:	f008 fa4a 	bl	8008744 <CDC_Transmit_FS>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f1      	bne.n	800029a <main+0x96>
			  newData = 0;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <main+0xd8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
	  CDC_AttachRxData(USBReceive);
 80002bc:	e7ed      	b.n	800029a <main+0x96>
 80002be:	bf00      	nop
 80002c0:	20000198 	.word	0x20000198
 80002c4:	2000032c 	.word	0x2000032c
 80002c8:	2000032d 	.word	0x2000032d
 80002cc:	2000022c 	.word	0x2000022c
 80002d0:	200001e0 	.word	0x200001e0
 80002d4:	40011000 	.word	0x40011000
 80002d8:	080001d9 	.word	0x080001d9
 80002dc:	2000032f 	.word	0x2000032f
 80002e0:	2000032e 	.word	0x2000032e

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b094      	sub	sp, #80	; 0x50
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f008 fe12 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	f107 0314 	add.w	r3, r7, #20
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000314:	2301      	movs	r3, #1
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fb9a 	bl	8002a74 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000346:	f000 f907 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fe06 	bl	8002f78 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000372:	f000 f8f1 	bl	8000558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000376:	2310      	movs	r3, #16
 8000378:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f002 ff87 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800038c:	f000 f8e4 	bl	8000558 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3750      	adds	r7, #80	; 0x50
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	463b      	mov	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <MX_TIM1_Init+0x98>)
 80003b6:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <MX_TIM1_Init+0x98>)
 80003bc:	2247      	movs	r2, #71	; 0x47
 80003be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_TIM1_Init+0x98>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_TIM1_Init+0x98>)
 80003c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_TIM1_Init+0x98>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_TIM1_Init+0x98>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_TIM1_Init+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e0:	4813      	ldr	r0, [pc, #76]	; (8000430 <MX_TIM1_Init+0x98>)
 80003e2:	f003 f80d 	bl	8003400 <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003ec:	f000 f8b4 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	4619      	mov	r1, r3
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_TIM1_Init+0x98>)
 80003fe:	f003 f9a9 	bl	8003754 <HAL_TIM_ConfigClockSource>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000408:	f000 f8a6 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_TIM1_Init+0x98>)
 800041a:	f003 fb7f 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000424:	f000 f898 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

/* USER CODE END TIM1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000198 	.word	0x20000198
 8000434:	40012c00 	.word	0x40012c00

08000438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <MX_USART1_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART1_UART_Init+0x4c>)
 8000470:	f003 fbc4 	bl	8003bfc <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f000 f86d 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200001e0 	.word	0x200001e0
 8000488:	40013800 	.word	0x40013800

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a29      	ldr	r2, [pc, #164]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_GPIO_Init+0xc0>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b8:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_GPIO_Init+0xc0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a23      	ldr	r2, [pc, #140]	; (800054c <MX_GPIO_Init+0xc0>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_GPIO_Init+0xc0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0320 	and.w	r3, r3, #32
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1d      	ldr	r2, [pc, #116]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0xc0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_GPIO_Init+0xc0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <MX_GPIO_Init+0xc0>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0xc0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0xc4>)
 8000508:	f000 fd14 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480a      	ldr	r0, [pc, #40]	; (8000550 <MX_GPIO_Init+0xc4>)
 8000526:	f000 fb81 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_GPIO_Init+0xc8>)
 8000540:	f000 fb74 	bl	8000c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	40011000 	.word	0x40011000
 8000554:	40010c00 	.word	0x40010c00

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <HAL_TIM_Base_MspInit+0x44>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d113      	bne.n	8000602 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_TIM_Base_MspInit+0x48>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <HAL_TIM_Base_MspInit+0x48>)
 80005e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_TIM_Base_MspInit+0x48>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2019      	movs	r0, #25
 80005f8:	f000 fa2f 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005fc:	2019      	movs	r0, #25
 80005fe:	f000 fa48 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40012c00 	.word	0x40012c00
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <HAL_UART_MspInit+0x9c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d139      	bne.n	80006a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_UART_MspInit+0xa0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <HAL_UART_MspInit+0xa4>)
 800067a:	f000 fad7 	bl	8000c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <HAL_UART_MspInit+0xa4>)
 8000694:	f000 faca 	bl	8000c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2025      	movs	r0, #37	; 0x25
 800069e:	f000 f9dc 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a2:	2025      	movs	r0, #37	; 0x25
 80006a4:	f000 f9f5 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40013800 	.word	0x40013800
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010800 	.word	0x40010800

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f893 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000712:	f000 fd65 	bl	80011e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000a08 	.word	0x20000a08

08000720 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <TIM1_UP_IRQHandler+0x10>)
 8000726:	f002 ff0d 	bl	8003544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000198 	.word	0x20000198

08000734 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <USART1_IRQHandler+0x10>)
 800073a:	f003 fad5 	bl	8003ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001e0 	.word	0x200001e0

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff fff8 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075a:	490c      	ldr	r1, [pc, #48]	; (800078c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000770:	4c09      	ldr	r4, [pc, #36]	; (8000798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f008 fbd5 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fd3f 	bl	8000204 <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000790:	08009008 	.word	0x08009008
  ldr r2, =_sbss
 8000794:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000798:	20000f18 	.word	0x20000f18

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f947 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fed2 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f95f 	bl	8000aae <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f927 	bl	8000a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000008 	.word	0x20000008
 800084c:	20000330 	.word	0x20000330

08000850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000330 	.word	0x20000330

08000864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff fff0 	bl	8000850 <HAL_GetTick>
 8000870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087c:	d005      	beq.n	800088a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_Delay+0x44>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088a:	bf00      	nop
 800088c:	f7ff ffe0 	bl	8000850 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	429a      	cmp	r2, r3
 800089a:	d8f7      	bhi.n	800088c <HAL_Delay+0x28>
  {
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0b      	blt.n	800093a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <__NVIC_EnableIRQ+0x34>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f7ff ff90 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff2d 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff42 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff90 	bl	800099c <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5f 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff35 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffa2 	bl	8000a00 <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d008      	beq.n	8000af0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e020      	b.n	8000b32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 020e 	bic.w	r2, r2, #14
 8000afe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0201 	bic.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d005      	beq.n	8000b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2204      	movs	r2, #4
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e051      	b.n	8000c04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 020e 	bic.w	r2, r2, #14
 8000b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0201 	bic.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_DMA_Abort_IT+0xd4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d029      	beq.n	8000bde <HAL_DMA_Abort_IT+0xa2>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_DMA_Abort_IT+0xd8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d022      	beq.n	8000bda <HAL_DMA_Abort_IT+0x9e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_DMA_Abort_IT+0xdc>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d01a      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x98>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <HAL_DMA_Abort_IT+0xe0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d012      	beq.n	8000bce <HAL_DMA_Abort_IT+0x92>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_DMA_Abort_IT+0xe4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00a      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0x8c>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_DMA_Abort_IT+0xe8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d102      	bne.n	8000bc2 <HAL_DMA_Abort_IT+0x86>
 8000bbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bc0:	e00e      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bc6:	e00b      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	e008      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	e005      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd8:	e002      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bda:	2310      	movs	r3, #16
 8000bdc:	e000      	b.n	8000be0 <HAL_DMA_Abort_IT+0xa4>
 8000bde:	2301      	movs	r3, #1
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_DMA_Abort_IT+0xec>)
 8000be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
    } 
  }
  return status;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020008 	.word	0x40020008
 8000c14:	4002001c 	.word	0x4002001c
 8000c18:	40020030 	.word	0x40020030
 8000c1c:	40020044 	.word	0x40020044
 8000c20:	40020058 	.word	0x40020058
 8000c24:	4002006c 	.word	0x4002006c
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e169      	b.n	8000f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c40:	2201      	movs	r2, #1
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f040 8158 	bne.w	8000f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a9a      	ldr	r2, [pc, #616]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d05e      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c68:	4a98      	ldr	r2, [pc, #608]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d875      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c6e:	4a98      	ldr	r2, [pc, #608]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d058      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c74:	4a96      	ldr	r2, [pc, #600]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d86f      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c7a:	4a96      	ldr	r2, [pc, #600]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d052      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c80:	4a94      	ldr	r2, [pc, #592]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d869      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c86:	4a94      	ldr	r2, [pc, #592]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d04c      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c8c:	4a92      	ldr	r2, [pc, #584]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d863      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c92:	4a92      	ldr	r2, [pc, #584]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d046      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c98:	4a90      	ldr	r2, [pc, #576]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d85d      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d82a      	bhi.n	8000cf8 <HAL_GPIO_Init+0xcc>
 8000ca2:	2b12      	cmp	r3, #18
 8000ca4:	d859      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <HAL_GPIO_Init+0x80>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000d01 	.word	0x08000d01
 8000cb4:	08000d13 	.word	0x08000d13
 8000cb8:	08000d55 	.word	0x08000d55
 8000cbc:	08000d5b 	.word	0x08000d5b
 8000cc0:	08000d5b 	.word	0x08000d5b
 8000cc4:	08000d5b 	.word	0x08000d5b
 8000cc8:	08000d5b 	.word	0x08000d5b
 8000ccc:	08000d5b 	.word	0x08000d5b
 8000cd0:	08000d5b 	.word	0x08000d5b
 8000cd4:	08000d5b 	.word	0x08000d5b
 8000cd8:	08000d5b 	.word	0x08000d5b
 8000cdc:	08000d5b 	.word	0x08000d5b
 8000ce0:	08000d5b 	.word	0x08000d5b
 8000ce4:	08000d5b 	.word	0x08000d5b
 8000ce8:	08000d5b 	.word	0x08000d5b
 8000cec:	08000d5b 	.word	0x08000d5b
 8000cf0:	08000d09 	.word	0x08000d09
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	4a79      	ldr	r2, [pc, #484]	; (8000ee0 <HAL_GPIO_Init+0x2b4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cfe:	e02c      	b.n	8000d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e029      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e024      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	3308      	adds	r3, #8
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e01f      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	330c      	adds	r3, #12
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e01a      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e013      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d105      	bne.n	8000d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	611a      	str	r2, [r3, #16]
          break;
 8000d46:	e009      	b.n	8000d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	615a      	str	r2, [r3, #20]
          break;
 8000d52:	e003      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          break;
 8000d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d801      	bhi.n	8000d66 <HAL_GPIO_Init+0x13a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	e001      	b.n	8000d6a <HAL_GPIO_Init+0x13e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d802      	bhi.n	8000d78 <HAL_GPIO_Init+0x14c>
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	3b08      	subs	r3, #8
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	210f      	movs	r1, #15
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	6a39      	ldr	r1, [r7, #32]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_GPIO_Init+0x2c4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3e      	ldr	r2, [pc, #248]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1e0>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e2a:	492f      	ldr	r1, [pc, #188]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	492c      	ldr	r1, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	608b      	str	r3, [r1, #8]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4928      	ldr	r1, [pc, #160]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	4922      	ldr	r1, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60cb      	str	r3, [r1, #12]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	491e      	ldr	r1, [pc, #120]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	4918      	ldr	r1, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4914      	ldr	r1, [pc, #80]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d021      	beq.n	8000f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
 8000ec8:	e021      	b.n	8000f0e <HAL_GPIO_Init+0x2e2>
 8000eca:	bf00      	nop
 8000ecc:	10320000 	.word	0x10320000
 8000ed0:	10310000 	.word	0x10310000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	10210000 	.word	0x10210000
 8000edc:	10120000 	.word	0x10120000
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4909      	ldr	r1, [pc, #36]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f ae8e 	bne.w	8000c40 <HAL_GPIO_Init+0x14>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	372c      	adds	r7, #44	; 0x2c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43d9      	mvns	r1, r3
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	400b      	ands	r3, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f98:	b08b      	sub	sp, #44	; 0x2c
 8000f9a:	af06      	add	r7, sp, #24
 8000f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0f1      	b.n	800118c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d106      	bne.n	8000fc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f007 fd03 	bl	80089c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fbc2 	bl	8004758 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	687e      	ldr	r6, [r7, #4]
 8000fdc:	466d      	mov	r5, sp
 8000fde:	f106 0410 	add.w	r4, r6, #16
 8000fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	602b      	str	r3, [r5, #0]
 8000fea:	1d33      	adds	r3, r6, #4
 8000fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f003 fb8c 	bl	800470c <USB_CoreInit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0c2      	b.n	800118c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fbbd 	bl	800478c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e040      	b.n	800109a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3301      	adds	r3, #1
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3303      	adds	r3, #3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3338      	adds	r3, #56	; 0x38
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	333c      	adds	r3, #60	; 0x3c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3340      	adds	r3, #64	; 0x40
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	3301      	adds	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3b9      	bcc.n	8001018 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e044      	b.n	8001134 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3b5      	bcc.n	80010aa <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	687e      	ldr	r6, [r7, #4]
 8001146:	466d      	mov	r5, sp
 8001148:	f106 0410 	add.w	r4, r6, #16
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	602b      	str	r3, [r5, #0]
 8001154:	1d33      	adds	r3, r6, #4
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f003 fb23 	bl	80047a4 <USB_DevInit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e00d      	b.n	800118c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fda4 	bl	8006cd2 <USB_DevDisconnect>

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001194 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_Start+0x16>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e016      	b.n	80011d8 <HAL_PCD_Start+0x44>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fab8 	bl	800472c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011bc:	2101      	movs	r1, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f007 fe75 	bl	8008eae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fd78 	bl	8006cbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fd7a 	bl	8006ce6 <USB_ReadInterrupts>
 80011f2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fb1b 	bl	800183a <PCD_EP_ISR_Handler>

    return;
 8001204:	e119      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001222:	b292      	uxth	r2, r2
 8001224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f007 fc48 	bl	8008abe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800122e:	2100      	movs	r1, #0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f905 	bl	8001440 <HAL_PCD_SetAddress>

    return;
 8001236:	e100      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00c      	beq.n	800125c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001254:	b292      	uxth	r2, r2
 8001256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800125a:	e0ee      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00c      	beq.n	8001280 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001278:	b292      	uxth	r2, r2
 800127a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800127e:	e0dc      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d027      	beq.n	80012da <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0204 	bic.w	r2, r2, #4
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0208 	bic.w	r2, r2, #8
 80012b4:	b292      	uxth	r2, r2
 80012b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f007 fc38 	bl	8008b30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012d2:	b292      	uxth	r2, r2
 80012d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012d8:	e0af      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8083 	beq.w	80013ec <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	77fb      	strb	r3, [r7, #31]
 80012ea:	e010      	b.n	800130e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	441a      	add	r2, r3
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	b292      	uxth	r2, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	3320      	adds	r3, #32
 8001302:	443b      	add	r3, r7
 8001304:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	3301      	adds	r3, #1
 800130c:	77fb      	strb	r3, [r7, #31]
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b07      	cmp	r3, #7
 8001312:	d9eb      	bls.n	80012ec <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	b292      	uxth	r2, r2
 8001340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001344:	bf00      	nop
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29b      	uxth	r3, r3
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f6      	beq.n	8001346 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	e00f      	b.n	8001396 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4611      	mov	r1, r2
 800137e:	7ffa      	ldrb	r2, [r7, #31]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	440a      	add	r2, r1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	3320      	adds	r3, #32
 8001388:	443b      	add	r3, r7
 800138a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800138e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	3301      	adds	r3, #1
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	2b07      	cmp	r3, #7
 800139a:	d9ec      	bls.n	8001376 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c6:	b292      	uxth	r2, r2
 80013c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	b292      	uxth	r2, r2
 80013e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f007 fb89 	bl	8008afc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013ea:	e026      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00f      	beq.n	8001416 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f007 fb47 	bl	8008aa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001414:	e011      	b.n	800143a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001432:	b292      	uxth	r2, r2
 8001434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001438:	bf00      	nop
  }
}
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_PCD_SetAddress+0x1a>
 8001456:	2302      	movs	r3, #2
 8001458:	e013      	b.n	8001482 <HAL_PCD_SetAddress+0x42>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	78fa      	ldrb	r2, [r7, #3]
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fc10 	bl	8006c98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	4608      	mov	r0, r1
 8001494:	4611      	mov	r1, r2
 8001496:	461a      	mov	r2, r3
 8001498:	4603      	mov	r3, r0
 800149a:	70fb      	strb	r3, [r7, #3]
 800149c:	460b      	mov	r3, r1
 800149e:	803b      	strh	r3, [r7, #0]
 80014a0:	4613      	mov	r3, r2
 80014a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da0e      	bge.n	80014ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	705a      	strb	r2, [r3, #1]
 80014cc:	e00e      	b.n	80014ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0207 	and.w	r2, r3, #7
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014f8:	883a      	ldrh	r2, [r7, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	78ba      	ldrb	r2, [r7, #2]
 8001502:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001504:	78bb      	ldrb	r3, [r7, #2]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d102      	bne.n	8001510 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_PCD_EP_Open+0x94>
 800151a:	2302      	movs	r3, #2
 800151c:	e00e      	b.n	800153c <HAL_PCD_EP_Open+0xb2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f959 	bl	80047e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800153a:	7afb      	ldrb	r3, [r7, #11]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da0e      	bge.n	8001576 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	705a      	strb	r2, [r3, #1]
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	b2da      	uxtb	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_PCD_EP_Close+0x6a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e00e      	b.n	80015cc <HAL_PCD_EP_Close+0x88>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fcd1 	bl	8004f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	460b      	mov	r3, r1
 80015e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	f003 0207 	and.w	r2, r3, #7
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	b2da      	uxtb	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fe88 	bl	800533c <USB_EPStartXfer>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0207 	and.w	r2, r3, #7
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001658:	681b      	ldr	r3, [r3, #0]
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	460b      	mov	r3, r1
 8001672:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2201      	movs	r2, #1
 80016ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b0:	7afb      	ldrb	r3, [r7, #11]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6979      	ldr	r1, [r7, #20]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fe3a 	bl	800533c <USB_EPStartXfer>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0207 	and.w	r2, r3, #7
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d901      	bls.n	80016f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e04c      	b.n	800178a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da0e      	bge.n	8001716 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	705a      	strb	r2, [r3, #1]
 8001714:	e00c      	b.n	8001730 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_PCD_EP_SetStall+0x7e>
 800174c:	2302      	movs	r3, #2
 800174e:	e01c      	b.n	800178a <HAL_PCD_EP_SetStall+0xb8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f005 f99d 	bl	8006a9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	2b00      	cmp	r3, #0
 800176c:	d108      	bne.n	8001780 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f005 fac2 	bl	8006d04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 020f 	and.w	r2, r3, #15
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d901      	bls.n	80017b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e040      	b.n	8001832 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da0e      	bge.n	80017d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	705a      	strb	r2, [r3, #1]
 80017d4:	e00e      	b.n	80017f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	f003 0207 	and.w	r2, r3, #7
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_PCD_EP_ClrStall+0x82>
 8001810:	2302      	movs	r3, #2
 8001812:	e00e      	b.n	8001832 <HAL_PCD_EP_ClrStall+0xa0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f98b 	bl	8006b3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b096      	sub	sp, #88	; 0x58
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001842:	e3bf      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001850:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800185e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8179 	bne.w	8001b5a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	d152      	bne.n	800191a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001884:	81fb      	strh	r3, [r7, #14]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001894:	b29b      	uxth	r3, r3
 8001896:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3328      	adds	r3, #40	; 0x28
 800189c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	3302      	adds	r3, #2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	441a      	add	r2, r3
 80018d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018d8:	2100      	movs	r1, #0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 f8c7 	bl	8008a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 836b 	beq.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
 80018ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8366 	bne.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b292      	uxth	r2, r2
 800190c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001918:	e354      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800192c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001934:	2b00      	cmp	r3, #0
 8001936:	d034      	beq.n	80019a2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001940:	b29b      	uxth	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	3306      	adds	r3, #6
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001962:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001974:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001976:	b29b      	uxth	r3, r3
 8001978:	f005 fa14 	bl	8006da4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29a      	uxth	r2, r3
 8001984:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001988:	4013      	ands	r3, r2
 800198a:	823b      	strh	r3, [r7, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	8a3a      	ldrh	r2, [r7, #16]
 8001992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001996:	b292      	uxth	r2, r2
 8001998:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f007 f83a 	bl	8008a14 <HAL_PCD_SetupStageCallback>
 80019a0:	e310      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f280 830c 	bge.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019b8:	4013      	ands	r3, r2
 80019ba:	83fb      	strh	r3, [r7, #30]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	8bfa      	ldrh	r2, [r7, #30]
 80019c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c6:	b292      	uxth	r2, r2
 80019c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	3306      	adds	r3, #6
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <PCD_EP_ISR_Handler+0x1f8>
 80019fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	6959      	ldr	r1, [r3, #20]
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f005 f9c4 	bl	8006da4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	441a      	add	r2, r3
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f007 f803 	bl	8008a38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 82bd 	bne.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
 8001a4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a56:	f000 82b5 	beq.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4413      	add	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	801a      	strh	r2, [r3, #0]
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a90:	d91d      	bls.n	8001ace <PCD_EP_ISR_Handler+0x294>
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <PCD_EP_ISR_Handler+0x272>
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	e026      	b.n	8001b1c <PCD_EP_ISR_Handler+0x2e2>
 8001ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <PCD_EP_ISR_Handler+0x2b2>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	e017      	b.n	8001b1c <PCD_EP_ISR_Handler+0x2e2>
 8001aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <PCD_EP_ISR_Handler+0x2cc>
 8001b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b02:	3301      	adds	r3, #1
 8001b04:	647b      	str	r3, [r7, #68]	; 0x44
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2c:	827b      	strh	r3, [r7, #18]
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b34:	827b      	strh	r3, [r7, #18]
 8001b36:	8a7b      	ldrh	r3, [r7, #18]
 8001b38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b3c:	827b      	strh	r3, [r7, #18]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	8a7b      	ldrh	r3, [r7, #18]
 8001b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	8013      	strh	r3, [r2, #0]
 8001b58:	e234      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b6e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f280 80fc 	bge.w	8001d70 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b8e:	4013      	ands	r3, r2
 8001b90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001baa:	b292      	uxth	r2, r2
 8001bac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bae:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	7b1b      	ldrb	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d125      	bne.n	8001c18 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	3306      	adds	r3, #6
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8092 	beq.w	8001d26 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	88da      	ldrh	r2, [r3, #6]
 8001c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c12:	f005 f8c7 	bl	8006da4 <USB_ReadPMA>
 8001c16:	e086      	b.n	8001d26 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d10a      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c24:	461a      	mov	r2, r3
 8001c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f9d9 	bl	8001fe0 <HAL_PCD_EP_DB_Receive>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c34:	e077      	b.n	8001d26 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	441a      	add	r2, r3
 8001c62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d024      	beq.n	8001cde <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cbc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02e      	beq.n	8001d26 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	6959      	ldr	r1, [r3, #20]
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	891a      	ldrh	r2, [r3, #8]
 8001cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cd8:	f005 f864 	bl	8006da4 <USB_ReadPMA>
 8001cdc:	e023      	b.n	8001d26 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d06:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	6959      	ldr	r1, [r3, #20]
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	895a      	ldrh	r2, [r3, #10]
 8001d1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d22:	f005 f83f 	bl	8006da4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d2e:	441a      	add	r2, r3
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d3c:	441a      	add	r2, r3
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <PCD_EP_ISR_Handler+0x51c>
 8001d4a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d206      	bcs.n	8001d64 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fe6b 	bl	8008a38 <HAL_PCD_DataOutStageCallback>
 8001d62:	e005      	b.n	8001d70 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fae6 	bl	800533c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8123 	beq.w	8001fc4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	441a      	add	r2, r3
 8001dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 80a2 	bne.w	8001f1c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	7b1b      	ldrb	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8093 	beq.w	8001f0e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d046      	beq.n	8001e82 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d126      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x610>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	4413      	add	r3, r2
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e061      	b.n	8001f0e <PCD_EP_ISR_Handler+0x6d4>
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d15d      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x6d4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	4413      	add	r3, r2
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	011a      	lsls	r2, r3, #4
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	4413      	add	r3, r2
 8001e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e045      	b.n	8001f0e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d126      	bne.n	8001ede <PCD_EP_ISR_Handler+0x6a4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	4413      	add	r3, r2
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	011a      	lsls	r2, r3, #4
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	e017      	b.n	8001f0e <PCD_EP_ISR_Handler+0x6d4>
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d113      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x6d4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef4:	4413      	add	r3, r2
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	011a      	lsls	r2, r3, #4
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	4413      	add	r3, r2
 8001f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f006 fdaa 	bl	8008a6e <HAL_PCD_DataInStageCallback>
 8001f1a:	e053      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d146      	bne.n	8001fb6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d907      	bls.n	8001f70 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	619a      	str	r2, [r3, #24]
 8001f6e:	e002      	b.n	8001f76 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f006 fd72 	bl	8008a6e <HAL_PCD_DataInStageCallback>
 8001f8a:	e01b      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f94:	441a      	add	r2, r3
 8001f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f98:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fa2:	441a      	add	r2, r3
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f9c4 	bl	800533c <USB_EPStartXfer>
 8001fb4:	e006      	b.n	8001fc4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f91b 	bl	80021fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f6ff ac37 	blt.w	8001844 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3758      	adds	r7, #88	; 0x58
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d07e      	beq.n	80020f6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	3302      	adds	r3, #2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002020:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	8b7b      	ldrh	r3, [r7, #26]
 8002028:	429a      	cmp	r2, r3
 800202a:	d306      	bcc.n	800203a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	8b7b      	ldrh	r3, [r7, #26]
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	619a      	str	r2, [r3, #24]
 8002038:	e002      	b.n	8002040 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d123      	bne.n	8002090 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	833b      	strh	r3, [r7, #24]
 8002064:	8b3b      	ldrh	r3, [r7, #24]
 8002066:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800206a:	833b      	strh	r3, [r7, #24]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	8b3b      	ldrh	r3, [r7, #24]
 800207c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	b29b      	uxth	r3, r3
 800208e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01f      	beq.n	80020da <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b4:	82fb      	strh	r3, [r7, #22]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	441a      	add	r2, r3
 80020c4:	8afb      	ldrh	r3, [r7, #22]
 80020c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020da:	8b7b      	ldrh	r3, [r7, #26]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8087 	beq.w	80021f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6959      	ldr	r1, [r3, #20]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	891a      	ldrh	r2, [r3, #8]
 80020ee:	8b7b      	ldrh	r3, [r7, #26]
 80020f0:	f004 fe58 	bl	8006da4 <USB_ReadPMA>
 80020f4:	e07c      	b.n	80021f0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	3306      	adds	r3, #6
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	429a      	cmp	r2, r3
 8002128:	d306      	bcc.n	8002138 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	8b7b      	ldrh	r3, [r7, #26]
 8002130:	1ad2      	subs	r2, r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	619a      	str	r2, [r3, #24]
 8002136:	e002      	b.n	800213e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d123      	bne.n	800218e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	83fb      	strh	r3, [r7, #30]
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002168:	83fb      	strh	r3, [r7, #30]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800217e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218a:	b29b      	uxth	r3, r3
 800218c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d11f      	bne.n	80021d8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	83bb      	strh	r3, [r7, #28]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	8bbb      	ldrh	r3, [r7, #28]
 80021c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021d8:	8b7b      	ldrh	r3, [r7, #26]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6959      	ldr	r1, [r3, #20]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	895a      	ldrh	r2, [r3, #10]
 80021ea:	8b7b      	ldrh	r3, [r7, #26]
 80021ec:	f004 fdda 	bl	8006da4 <USB_ReadPMA>
    }
  }

  return count;
 80021f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b0a4      	sub	sp, #144	; 0x90
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 81dd 	beq.w	80025ce <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	3302      	adds	r3, #2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002248:	429a      	cmp	r2, r3
 800224a:	d907      	bls.n	800225c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	619a      	str	r2, [r3, #24]
 800225a:	e002      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 80b9 	bne.w	80023de <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d126      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	4413      	add	r3, r2
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	011a      	lsls	r2, r3, #4
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	4413      	add	r3, r2
 8002296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	e01a      	b.n	80022f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d116      	bne.n	80022f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	4413      	add	r3, r2
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	011a      	lsls	r2, r3, #4
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	4413      	add	r3, r2
 80022ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	2200      	movs	r2, #0
 80022f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d126      	bne.n	8002354 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	011a      	lsls	r2, r3, #4
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	b29a      	uxth	r2, r3
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e017      	b.n	8002384 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d113      	bne.n	8002384 <HAL_PCD_EP_DB_Transmit+0x18a>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	4413      	add	r3, r2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	011a      	lsls	r2, r3, #4
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	4413      	add	r3, r2
 8002378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2200      	movs	r2, #0
 8002382:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f006 fb6f 	bl	8008a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 82fc 	beq.w	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	82fb      	strh	r3, [r7, #22]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	8afb      	ldrh	r3, [r7, #22]
 80023c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]
 80023dc:	e2da      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d021      	beq.n	800242c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	b29b      	uxth	r3, r3
 800242a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002432:	2b01      	cmp	r3, #1
 8002434:	f040 82ae 	bne.w	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002440:	441a      	add	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800244e:	441a      	add	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d30b      	bcc.n	8002478 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	621a      	str	r2, [r3, #32]
 8002476:	e017      	b.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002490:	e00a      	b.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d165      	bne.n	800257c <HAL_PCD_EP_DB_Transmit+0x382>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	4413      	add	r3, r2
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	011a      	lsls	r2, r3, #4
 80024ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ec:	2b3e      	cmp	r3, #62	; 0x3e
 80024ee:	d91d      	bls.n	800252c <HAL_PCD_EP_DB_Transmit+0x332>
 80024f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_PCD_EP_DB_Transmit+0x310>
 8002504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002506:	3b01      	subs	r3, #1
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29a      	uxth	r2, r3
 8002510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002512:	b29b      	uxth	r3, r3
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	b29b      	uxth	r3, r3
 8002518:	4313      	orrs	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002524:	b29a      	uxth	r2, r3
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	e044      	b.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800252c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_PCD_EP_DB_Transmit+0x350>
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29a      	uxth	r2, r3
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	e035      	b.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800254a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	64bb      	str	r3, [r7, #72]	; 0x48
 8002552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_PCD_EP_DB_Transmit+0x36a>
 800255e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002560:	3301      	adds	r3, #1
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	b29b      	uxth	r3, r3
 800256e:	029b      	lsls	r3, r3, #10
 8002570:	b29b      	uxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b29a      	uxth	r2, r3
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e01c      	b.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d118      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	4413      	add	r3, r2
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
 80025ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6959      	ldr	r1, [r3, #20]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	891a      	ldrh	r2, [r3, #8]
 80025c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f004 fba7 	bl	8006d1a <USB_WritePMA>
 80025cc:	e1e2      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	3306      	adds	r3, #6
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002602:	429a      	cmp	r2, r3
 8002604:	d307      	bcc.n	8002616 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	619a      	str	r2, [r3, #24]
 8002614:	e002      	b.n	800261c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 80c0 	bne.w	80027a6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d126      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x482>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002642:	4413      	add	r3, r2
 8002644:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	011a      	lsls	r2, r3, #4
 800264c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800264e:	4413      	add	r3, r2
 8002650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002654:	67bb      	str	r3, [r7, #120]	; 0x78
 8002656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002660:	b29a      	uxth	r2, r3
 8002662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002674:	b29a      	uxth	r2, r3
 8002676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e01a      	b.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d116      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	667b      	str	r3, [r7, #100]	; 0x64
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002698:	4413      	add	r3, r2
 800269a:	667b      	str	r3, [r7, #100]	; 0x64
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	011a      	lsls	r2, r3, #4
 80026a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a4:	4413      	add	r3, r2
 80026a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026aa:	663b      	str	r3, [r7, #96]	; 0x60
 80026ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ae:	2200      	movs	r2, #0
 80026b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	677b      	str	r3, [r7, #116]	; 0x74
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d12b      	bne.n	8002718 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	4413      	add	r3, r2
 80026d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	011a      	lsls	r2, r3, #4
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	4413      	add	r3, r2
 80026e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026fc:	801a      	strh	r2, [r3, #0]
 80026fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270e:	b29a      	uxth	r2, r3
 8002710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	e017      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d113      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272e:	4413      	add	r3, r2
 8002730:	677b      	str	r3, [r7, #116]	; 0x74
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	011a      	lsls	r2, r3, #4
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	4413      	add	r3, r2
 800273c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002740:	673b      	str	r3, [r7, #112]	; 0x70
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f006 f98d 	bl	8008a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 811a 	bne.w	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]
 80027a4:	e0f6      	b.n	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d121      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 80ca 	bne.w	8002994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002808:	441a      	add	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002816:	441a      	add	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d30b      	bcc.n	8002840 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	621a      	str	r2, [r3, #32]
 800283e:	e017      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002848:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800284c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002858:	e00a      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	657b      	str	r3, [r7, #84]	; 0x54
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d165      	bne.n	800294a <HAL_PCD_EP_DB_Transmit+0x750>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002892:	4413      	add	r3, r2
 8002894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	011a      	lsls	r2, r3, #4
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	4413      	add	r3, r2
 80028a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ba:	2b3e      	cmp	r3, #62	; 0x3e
 80028bc:	d91d      	bls.n	80028fa <HAL_PCD_EP_DB_Transmit+0x700>
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80028d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d4:	3b01      	subs	r3, #1
 80028d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	e041      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x784>
 80028fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002910:	b29a      	uxth	r2, r3
 8002912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	e032      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x784>
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_PCD_EP_DB_Transmit+0x738>
 800292c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292e:	3301      	adds	r3, #1
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29a      	uxth	r2, r3
 8002938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800293a:	b29b      	uxth	r3, r3
 800293c:	029b      	lsls	r3, r3, #10
 800293e:	b29b      	uxth	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b29a      	uxth	r2, r3
 8002944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	e019      	b.n	800297e <HAL_PCD_EP_DB_Transmit+0x784>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	785b      	ldrb	r3, [r3, #1]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d115      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x784>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002960:	4413      	add	r3, r2
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	011a      	lsls	r2, r3, #4
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	4413      	add	r3, r2
 800296e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002972:	653b      	str	r3, [r7, #80]	; 0x50
 8002974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002978:	b29a      	uxth	r2, r3
 800297a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6959      	ldr	r1, [r3, #20]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	895a      	ldrh	r2, [r3, #10]
 800298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298e:	b29b      	uxth	r3, r3
 8002990:	f004 f9c3 	bl	8006d1a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ae:	82bb      	strh	r3, [r7, #20]
 80029b0:	8abb      	ldrh	r3, [r7, #20]
 80029b2:	f083 0310 	eor.w	r3, r3, #16
 80029b6:	82bb      	strh	r3, [r7, #20]
 80029b8:	8abb      	ldrh	r3, [r7, #20]
 80029ba:	f083 0320 	eor.w	r3, r3, #32
 80029be:	82bb      	strh	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8abb      	ldrh	r3, [r7, #20]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3790      	adds	r7, #144	; 0x90
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	817b      	strh	r3, [r7, #10]
 80029fc:	4613      	mov	r3, r2
 80029fe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e009      	b.n	8002a38 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a24:	897a      	ldrh	r2, [r7, #10]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	80da      	strh	r2, [r3, #6]
 8002a4c:	e00b      	b.n	8002a66 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2201      	movs	r2, #1
 8002a52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e272      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8087 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d00c      	beq.n	8002aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa0:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d112      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
 8002aac:	4b8c      	ldr	r3, [pc, #560]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d168      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e24c      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x76>
 8002adc:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e02e      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x98>
 8002af2:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a77      	ldr	r2, [pc, #476]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0xbc>
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a71      	ldr	r2, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xd4>
 8002b30:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a67      	ldr	r2, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fd fe7e 	bl	8000850 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fd fe7a 	bl	8000850 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e200      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe4>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fd fe6a 	bl	8000850 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fd fe66 	bl	8000850 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1ec      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x10c>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1c0      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4939      	ldr	r1, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fd fe1f 	bl	8000850 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fd fe1b 	bl	8000850 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1a1      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd fdfe 	bl	8000850 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fd fdfa 	bl	8000850 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e180      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d03a      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fd fdde 	bl	8000850 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fd fdda 	bl	8000850 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e160      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f000 face 	bl	8003258 <RCC_Delay>
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7fd fdc4 	bl	8000850 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7fd fdc0 	bl	8000850 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e146      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	42420000 	.word	0x42420000
 8002ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e9      	bne.n	8002ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a6 	beq.w	8002e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7e      	ldr	r2, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7fd fd81 	bl	8000850 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fd fd7d 	bl	8000850 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e103      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x4c8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x312>
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	e02d      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x334>
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a69      	ldr	r2, [pc, #420]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a66      	ldr	r2, [pc, #408]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	e01c      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x356>
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	4b5e      	ldr	r3, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x36e>
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fd fd31 	bl	8000850 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fd fd2d 	bl	8000850 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0b1      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ee      	beq.n	8002df2 <HAL_RCC_OscConfig+0x37e>
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fd fd1b 	bl	8000850 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fd fd17 	bl	8000850 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e09b      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8087 	beq.w	8002f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d061      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d146      	bne.n	8002efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fd fceb 	bl	8000850 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fd fce7 	bl	8000850 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e06d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4921      	ldr	r1, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a19      	ldr	r1, [r3, #32]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	491b      	ldr	r1, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fd fcbb 	bl	8000850 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fd fcb7 	bl	8000850 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e03d      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x46a>
 8002efc:	e035      	b.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd fca4 	bl	8000850 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fd fca0 	bl	8000850 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e026      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x498>
 8002f2a:	e01e      	b.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e019      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x500>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d0      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7fd fbf2 	bl	8000850 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fd fbee 	bl	8000850 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e053      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fb50 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	08008fd4 	.word	0x08008fd4
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b04      	cmp	r3, #4
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x30>
 8003176:	2b08      	cmp	r3, #8
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x36>
 800317a:	e027      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	e027      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	fb03 f202 	mul.w	r2, r3, r2
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e004      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ce:	613b      	str	r3, [r7, #16]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	693b      	ldr	r3, [r7, #16]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	08008fec 	.word	0x08008fec
 80031ec:	08008ffc 	.word	0x08008ffc
 80031f0:	003d0900 	.word	0x003d0900

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_RCC_GetHCLKFreq+0x10>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff2 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08008fe4 	.word	0x08008fe4

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffde 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0adb      	lsrs	r3, r3, #11
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08008fe4 	.word	0x08008fe4

08003258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <RCC_Delay+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <RCC_Delay+0x38>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0a5b      	lsrs	r3, r3, #9
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003274:	bf00      	nop
  }
  while (Delay --);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	60fa      	str	r2, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <RCC_Delay+0x1c>
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000000 	.word	0x20000000
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d07d      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b4:	4b4f      	ldr	r3, [pc, #316]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	61d3      	str	r3, [r2, #28]
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d118      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e8:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f4:	f7fd faac 	bl	8000850 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	e008      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fd faa8 	bl	8000850 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e06d      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02e      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d027      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d014      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fa77 	bl	8000850 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fd fa73 	bl	8000850 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e036      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4917      	ldr	r1, [pc, #92]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	4313      	orrs	r3, r2
 8003398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42420440 	.word	0x42420440

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e041      	b.n	8003496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd f8ce 	bl	80005c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 fa74 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e03a      	b.n	800352e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_TIM_Base_Start_IT+0x98>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x58>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d009      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x58>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <HAL_TIM_Base_Start_IT+0x9c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_TIM_Base_Start_IT+0xa0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b06      	cmp	r3, #6
 8003508:	d010      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	e007      	b.n	800352c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800

08003544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0202 	mvn.w	r2, #2
 8003570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9b4 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9a7 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f9b6 	bl	8003906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0204 	mvn.w	r2, #4
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f98a 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f97d 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f98c 	bl	8003906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f960 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f953 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f962 	bl	8003906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0210 	mvn.w	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2208      	movs	r2, #8
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f936 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f929 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f938 	bl	8003906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0201 	mvn.w	r2, #1
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fc fd42 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa7b 	bl	8003bea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8fc 	bl	8003918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b20      	cmp	r3, #32
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0220 	mvn.w	r2, #32
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa46 	bl	8003bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIM_ConfigClockSource+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e0b4      	b.n	80038da <HAL_TIM_ConfigClockSource+0x186>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a8:	d03e      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0xd4>
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	f200 8087 	bhi.w	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	f000 8086 	beq.w	80038c6 <HAL_TIM_ConfigClockSource+0x172>
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037be:	d87f      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d01a      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xa6>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d87b      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d050      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x11a>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d877      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b50      	cmp	r3, #80	; 0x50
 80037d2:	d03c      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xfa>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d873      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d058      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x13a>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d86f      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b30      	cmp	r3, #48	; 0x30
 80037e2:	d064      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d86b      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d060      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x15a>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d867      	bhi.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d05c      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x15a>
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d05a      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	e062      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	f000 f968 	bl	8003ade <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800381c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
      break;
 8003826:	e04f      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003838:	f000 f951 	bl	8003ade <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384a:	609a      	str	r2, [r3, #8]
      break;
 800384c:	e03c      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	461a      	mov	r2, r3
 800385c:	f000 f8c8 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2150      	movs	r1, #80	; 0x50
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f91f 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 800386c:	e02c      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f8e6 	bl	8003a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2160      	movs	r1, #96	; 0x60
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f90f 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 800388c:	e01c      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	f000 f8a8 	bl	80039f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f8ff 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 80038ac:	e00c      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f000 f8f6 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 80038be:	e003      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e000      	b.n	80038c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
	...

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x30>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <TIM_Base_SetConfig+0xbc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	; (80039ec <TIM_Base_SetConfig+0xc0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <TIM_Base_SetConfig+0xb8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800

080039f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 030a 	bic.w	r3, r3, #10
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	031b      	lsls	r3, r3, #12
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f043 0307 	orr.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e046      	b.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d009      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10c      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800

08003bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc fcf6 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fcd5 	bl	80045f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d112      	bne.n	8003cdc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_UART_Receive_IT+0x26>
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00b      	b.n	8003cde <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fab7 	bl	8004246 <UART_Start_Receive_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	e000      	b.n	8003cde <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b0ba      	sub	sp, #232	; 0xe8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_UART_IRQHandler+0x66>
 8003d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fb93 	bl	8004472 <UART_Receive_IT>
      return;
 8003d4c:	e25b      	b.n	8004206 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80de 	beq.w	8003f14 <HAL_UART_IRQHandler+0x22c>
 8003d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80d1 	beq.w	8003f14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_UART_IRQHandler+0xae>
 8003d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_UART_IRQHandler+0xd2>
 8003da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_UART_IRQHandler+0xf6>
 8003dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d011      	beq.n	8003e0e <HAL_UART_IRQHandler+0x126>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f043 0208 	orr.w	r2, r3, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 81f2 	beq.w	80041fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_UART_IRQHandler+0x14e>
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fb1e 	bl	8004472 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_UART_IRQHandler+0x17a>
 8003e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04f      	beq.n	8003f02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa28 	bl	80042b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d041      	beq.n	8003efa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d9      	bne.n	8003e76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	4a7e      	ldr	r2, [pc, #504]	; (80040c8 <HAL_UART_IRQHandler+0x3e0>)
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc fe30 	bl	8000b3c <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00e      	b.n	8003f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f993 	bl	800421e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00a      	b.n	8003f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f98f 	bl	800421e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e006      	b.n	8003f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f98b 	bl	800421e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f0e:	e175      	b.n	80041fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	bf00      	nop
    return;
 8003f12:	e173      	b.n	80041fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 814f 	bne.w	80041bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8148 	beq.w	80041bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8141 	beq.w	80041bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80b6 	beq.w	80040cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8145 	beq.w	8004200 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	f080 813e 	bcs.w	8004200 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f000 8088 	beq.w	80040a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fc4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1d9      	bne.n	8003f98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004008:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004010:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e1      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004044:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800404a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e3      	bne.n	8004020 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800408a:	65ba      	str	r2, [r7, #88]	; 0x58
 800408c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e3      	bne.n	8004066 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fd0f 	bl	8000ac6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8b6 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c4:	e09c      	b.n	8004200 <HAL_UART_IRQHandler+0x518>
 80040c6:	bf00      	nop
 80040c8:	0800437d 	.word	0x0800437d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 808e 	beq.w	8004204 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8089 	beq.w	8004204 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004116:	647a      	str	r2, [r7, #68]	; 0x44
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	623b      	str	r3, [r7, #32]
   return(result);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800414e:	633a      	str	r2, [r7, #48]	; 0x30
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e3      	bne.n	800412a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e3      	bne.n	8004170 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f83b 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ba:	e023      	b.n	8004204 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_UART_IRQHandler+0x4f4>
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8e5 	bl	80043a4 <UART_Transmit_IT>
    return;
 80041da:	e014      	b.n	8004206 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <HAL_UART_IRQHandler+0x51e>
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f924 	bl	8004442 <UART_EndTransmit_IT>
    return;
 80041fa:	e004      	b.n	8004206 <HAL_UART_IRQHandler+0x51e>
    return;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_UART_IRQHandler+0x51e>
      return;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_UART_IRQHandler+0x51e>
      return;
 8004204:	bf00      	nop
  }
}
 8004206:	37e8      	adds	r7, #232	; 0xe8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2222      	movs	r2, #34	; 0x22
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b095      	sub	sp, #84	; 0x54
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042e0:	643a      	str	r2, [r7, #64]	; 0x40
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	61fb      	str	r3, [r7, #28]
   return(result);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	2b01      	cmp	r3, #1
 800432e:	d119      	bne.n	8004364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004350:	61ba      	str	r2, [r7, #24]
 8004352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	613b      	str	r3, [r7, #16]
   return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004372:	bf00      	nop
 8004374:	3754      	adds	r7, #84	; 0x54
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff41 	bl	800421e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b21      	cmp	r3, #33	; 0x21
 80043b6:	d13e      	bne.n	8004436 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d114      	bne.n	80043ec <UART_Transmit_IT+0x48>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d110      	bne.n	80043ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]
 80043ea:	e008      	b.n	80043fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6211      	str	r1, [r2, #32]
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4619      	mov	r1, r3
 800440c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004420:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004430:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fed2 	bl	800420c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08c      	sub	sp, #48	; 0x30
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b22      	cmp	r3, #34	; 0x22
 8004484:	f040 80ae 	bne.w	80045e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d117      	bne.n	80044c2 <UART_Receive_IT+0x50>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
 80044c0:	e026      	b.n	8004510 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d007      	beq.n	80044e6 <UART_Receive_IT+0x74>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <UART_Receive_IT+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e008      	b.n	8004506 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004500:	b2da      	uxtb	r2, r3
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29b      	uxth	r3, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4619      	mov	r1, r3
 800451e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004520:	2b00      	cmp	r3, #0
 8004522:	d15d      	bne.n	80045e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0220 	bic.w	r2, r2, #32
 8004532:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	2b01      	cmp	r3, #1
 8004568:	d135      	bne.n	80045d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	613b      	str	r3, [r7, #16]
   return(result);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	623a      	str	r2, [r7, #32]
 8004592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	61bb      	str	r3, [r7, #24]
   return(result);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d10a      	bne.n	80045c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fe2e 	bl	8004230 <HAL_UARTEx_RxEventCallback>
 80045d4:	e002      	b.n	80045dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fb fdd8 	bl	800018c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e002      	b.n	80045e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3730      	adds	r7, #48	; 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800462a:	f023 030c 	bic.w	r3, r3, #12
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	430b      	orrs	r3, r1
 8004636:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <UART_SetConfig+0x114>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fdea 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	e002      	b.n	8004666 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fe fdd2 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004664:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	0119      	lsls	r1, r3, #4
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	fbb2 f2f3 	udiv	r2, r2, r3
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <UART_SetConfig+0x118>)
 800469e:	fba3 0302 	umull	r0, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2064      	movs	r0, #100	; 0x64
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	4419      	add	r1, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <UART_SetConfig+0x118>)
 80046d6:	fba3 0302 	umull	r0, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2064      	movs	r0, #100	; 0x64
 80046de:	fb00 f303 	mul.w	r3, r0, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <UART_SetConfig+0x118>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	440a      	add	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40013800 	.word	0x40013800
 8004708:	51eb851f 	.word	0x51eb851f

0800470c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800470c:	b084      	sub	sp, #16
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	f107 0014 	add.w	r0, r7, #20
 800471a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	b004      	add	sp, #16
 800472a:	4770      	bx	lr

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800473c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004740:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004760:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004764:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	b29b      	uxth	r3, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	b29b      	uxth	r3, r3
 8004776:	4013      	ands	r3, r2
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047a4:	b084      	sub	sp, #16
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	f107 0014 	add.w	r0, r7, #20
 80047b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	b004      	add	sp, #16
 80047e2:	4770      	bx	lr

080047e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b09d      	sub	sp, #116	; 0x74
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	78db      	ldrb	r3, [r3, #3]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d81f      	bhi.n	8004856 <USB_ActivateEndpoint+0x72>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <USB_ActivateEndpoint+0x38>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800482d 	.word	0x0800482d
 8004820:	08004849 	.word	0x08004849
 8004824:	0800485f 	.word	0x0800485f
 8004828:	0800483b 	.word	0x0800483b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800482c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004834:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004838:	e012      	b.n	8004860 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800483a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800483e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004842:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004846:	e00b      	b.n	8004860 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004848:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800484c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004850:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004854:	e004      	b.n	8004860 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800485c:	e000      	b.n	8004860 <USB_ActivateEndpoint+0x7c>
      break;
 800485e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	b29a      	uxth	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	7b1b      	ldrb	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 8178 	bne.w	8004bc2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8084 	beq.w	80049e4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	88db      	ldrh	r3, [r3, #6]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	827b      	strh	r3, [r7, #18]
 800491e:	8a7b      	ldrh	r3, [r7, #18]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <USB_ActivateEndpoint+0x17c>
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	823b      	strh	r3, [r7, #16]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	8a3b      	ldrh	r3, [r7, #16]
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d020      	beq.n	80049aa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	81bb      	strh	r3, [r7, #12]
 8004980:	89bb      	ldrh	r3, [r7, #12]
 8004982:	f083 0320 	eor.w	r3, r3, #32
 8004986:	81bb      	strh	r3, [r7, #12]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	89bb      	ldrh	r3, [r7, #12]
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
 80049a8:	e2d5      	b.n	8004f56 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	81fb      	strh	r3, [r7, #14]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
 80049e2:	e2b8      	b.n	8004f56 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	4413      	add	r3, r2
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	88db      	ldrh	r3, [r3, #6]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	4413      	add	r3, r2
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	011a      	lsls	r2, r3, #4
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b3e      	cmp	r3, #62	; 0x3e
 8004a52:	d91d      	bls.n	8004a90 <USB_ActivateEndpoint+0x2ac>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <USB_ActivateEndpoint+0x28a>
 8004a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e026      	b.n	8004ade <USB_ActivateEndpoint+0x2fa>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <USB_ActivateEndpoint+0x2ca>
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	e017      	b.n	8004ade <USB_ActivateEndpoint+0x2fa>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <USB_ActivateEndpoint+0x2e4>
 8004ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	847b      	strh	r3, [r7, #34]	; 0x22
 8004aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01b      	beq.n	8004b2e <USB_ActivateEndpoint+0x34a>
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	843b      	strh	r3, [r7, #32]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8c3b      	ldrh	r3, [r7, #32]
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d124      	bne.n	8004b80 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	83bb      	strh	r3, [r7, #28]
 8004b4e:	8bbb      	ldrh	r3, [r7, #28]
 8004b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b54:	83bb      	strh	r3, [r7, #28]
 8004b56:	8bbb      	ldrh	r3, [r7, #28]
 8004b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b5c:	83bb      	strh	r3, [r7, #28]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8bbb      	ldrh	r3, [r7, #28]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
 8004b7e:	e1ea      	b.n	8004f56 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	83fb      	strh	r3, [r7, #30]
 8004b98:	8bfb      	ldrh	r3, [r7, #30]
 8004b9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b9e:	83fb      	strh	r3, [r7, #30]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	8bfb      	ldrh	r3, [r7, #30]
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
 8004bc0:	e1c9      	b.n	8004f56 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d11e      	bne.n	8004c08 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c54:	4413      	add	r3, r2
 8004c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	011a      	lsls	r2, r3, #4
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	891b      	ldrh	r3, [r3, #8]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	4413      	add	r3, r2
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011a      	lsls	r2, r3, #4
 8004c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	895b      	ldrh	r3, [r3, #10]
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004caa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8093 	bne.w	8004ddc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01b      	beq.n	8004d0a <USB_ActivateEndpoint+0x526>
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01b      	beq.n	8004d5a <USB_ActivateEndpoint+0x576>
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d78:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d80:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
 8004dda:	e0bc      	b.n	8004f56 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01d      	beq.n	8004e34 <USB_ActivateEndpoint+0x650>
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01d      	beq.n	8004e8c <USB_ActivateEndpoint+0x6a8>
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d024      	beq.n	8004ede <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004eb2:	f083 0320 	eor.w	r3, r3, #32
 8004eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	8013      	strh	r3, [r2, #0]
 8004edc:	e01d      	b.n	8004f1a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3774      	adds	r7, #116	; 0x74
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b08d      	sub	sp, #52	; 0x34
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	7b1b      	ldrb	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 808e 	bne.w	8005094 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d044      	beq.n	800500a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	81bb      	strh	r3, [r7, #12]
 8004f8e:	89bb      	ldrh	r3, [r7, #12]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <USB_DeactivateEndpoint+0x6c>
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	817b      	strh	r3, [r7, #10]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe6:	813b      	strh	r3, [r7, #8]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	893b      	ldrh	r3, [r7, #8]
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]
 8005008:	e192      	b.n	8005330 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	827b      	strh	r3, [r7, #18]
 8005018:	8a7b      	ldrh	r3, [r7, #18]
 800501a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <USB_DeactivateEndpoint+0xf6>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	823b      	strh	r3, [r7, #16]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8a3b      	ldrh	r3, [r7, #16]
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	81fb      	strh	r3, [r7, #14]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
 8005092:	e14d      	b.n	8005330 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 80a5 	bne.w	80051e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	843b      	strh	r3, [r7, #32]
 80050ac:	8c3b      	ldrh	r3, [r7, #32]
 80050ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <USB_DeactivateEndpoint+0x18a>
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050cc:	83fb      	strh	r3, [r7, #30]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	8bfb      	ldrh	r3, [r7, #30]
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	83bb      	strh	r3, [r7, #28]
 80050fc:	8bbb      	ldrh	r3, [r7, #28]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01b      	beq.n	800513e <USB_DeactivateEndpoint+0x1da>
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	837b      	strh	r3, [r7, #26]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	8b7b      	ldrh	r3, [r7, #26]
 800512a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	833b      	strh	r3, [r7, #24]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	8b3b      	ldrh	r3, [r7, #24]
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	82fb      	strh	r3, [r7, #22]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	8afb      	ldrh	r3, [r7, #22]
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c4:	82bb      	strh	r3, [r7, #20]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	8abb      	ldrh	r3, [r7, #20]
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]
 80051e6:	e0a3      	b.n	8005330 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <USB_DeactivateEndpoint+0x2d4>
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <USB_DeactivateEndpoint+0x324>
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	853b      	strh	r3, [r7, #40]	; 0x28
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3734      	adds	r7, #52	; 0x34
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b0c2      	sub	sp, #264	; 0x108
 8005340:	af00      	add	r7, sp, #0
 8005342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800534a:	6018      	str	r0, [r3, #0]
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005354:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	f040 86b7 	bne.w	80060d6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d908      	bls.n	8005396 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005394:	e007      	b.n	80053a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	7b1b      	ldrb	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d13a      	bne.n	800542c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	88da      	ldrh	r2, [r3, #6]
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f001 fc9c 	bl	8006d1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	011a      	lsls	r2, r3, #4
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	f000 be1f 	b.w	800606a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800542c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b02      	cmp	r3, #2
 800543a:	f040 8462 	bne.w	8005d02 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800543e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	f240 83df 	bls.w	8005c1a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800545c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 81c7 	beq.w	800588c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
 800550a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d177      	bne.n	800560a <USB_EPStartXfer+0x2ce>
 800551a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
 8005526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005534:	b29b      	uxth	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	4413      	add	r3, r2
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	4413      	add	r3, r2
 8005550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005560:	b29a      	uxth	r2, r3
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556a:	2b3e      	cmp	r3, #62	; 0x3e
 800556c:	d921      	bls.n	80055b2 <USB_EPStartXfer+0x276>
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <USB_EPStartXfer+0x252>
 8005584:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005588:	3b01      	subs	r3, #1
 800558a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29a      	uxth	r2, r3
 8005594:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005598:	b29b      	uxth	r3, r3
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	b29b      	uxth	r3, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	e050      	b.n	8005654 <USB_EPStartXfer+0x318>
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <USB_EPStartXfer+0x294>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	e041      	b.n	8005654 <USB_EPStartXfer+0x318>
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <USB_EPStartXfer+0x2b4>
 80055e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055ea:	3301      	adds	r3, #1
 80055ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4313      	orrs	r3, r2
 8005602:	b29a      	uxth	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e024      	b.n	8005654 <USB_EPStartXfer+0x318>
 800560a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d11c      	bne.n	8005654 <USB_EPStartXfer+0x318>
 800561a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	4413      	add	r3, r2
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
 8005632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	011a      	lsls	r2, r3, #4
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	4413      	add	r3, r2
 8005644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	b29a      	uxth	r2, r3
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	895b      	ldrh	r3, [r3, #10]
 8005660:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005674:	b29b      	uxth	r3, r3
 8005676:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800567a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800567e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	f001 fb49 	bl	8006d1a <USB_WritePMA>
            ep->xfer_buff += len;
 8005688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	441a      	add	r2, r3
 800569a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a1a      	ldr	r2, [r3, #32]
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d90f      	bls.n	80056e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	621a      	str	r2, [r3, #32]
 80056e0:	e00e      	b.n	8005700 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80056e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d177      	bne.n	8005800 <USB_EPStartXfer+0x4c4>
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4413      	add	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	011a      	lsls	r2, r3, #4
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	4413      	add	r3, r2
 8005746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005756:	b29a      	uxth	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	2b3e      	cmp	r3, #62	; 0x3e
 8005762:	d921      	bls.n	80057a8 <USB_EPStartXfer+0x46c>
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <USB_EPStartXfer+0x448>
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577e:	3b01      	subs	r3, #1
 8005780:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29a      	uxth	r2, r3
 800578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800578e:	b29b      	uxth	r3, r3
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	b29b      	uxth	r3, r3
 8005794:	4313      	orrs	r3, r2
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e056      	b.n	8005856 <USB_EPStartXfer+0x51a>
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <USB_EPStartXfer+0x48a>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057be:	b29a      	uxth	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	e047      	b.n	8005856 <USB_EPStartXfer+0x51a>
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <USB_EPStartXfer+0x4aa>
 80057dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	029b      	lsls	r3, r3, #10
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4313      	orrs	r3, r2
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e02a      	b.n	8005856 <USB_EPStartXfer+0x51a>
 8005800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d122      	bne.n	8005856 <USB_EPStartXfer+0x51a>
 8005810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	4413      	add	r3, r2
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	4413      	add	r3, r2
 8005846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	b29a      	uxth	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	891b      	ldrh	r3, [r3, #8]
 8005862:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	b29b      	uxth	r3, r3
 8005878:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800587c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005880:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	f001 fa48 	bl	8006d1a <USB_WritePMA>
 800588a:	e3ee      	b.n	800606a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800588c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d177      	bne.n	800598c <USB_EPStartXfer+0x650>
 800589c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058bc:	4413      	add	r3, r2
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44
 80058d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d921      	bls.n	8005934 <USB_EPStartXfer+0x5f8>
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <USB_EPStartXfer+0x5d4>
 8005906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800590a:	3b01      	subs	r3, #1
 800590c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e056      	b.n	80059e2 <USB_EPStartXfer+0x6a6>
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <USB_EPStartXfer+0x616>
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594a:	b29a      	uxth	r2, r3
 800594c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e047      	b.n	80059e2 <USB_EPStartXfer+0x6a6>
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <USB_EPStartXfer+0x636>
 8005968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800596c:	3301      	adds	r3, #1
 800596e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29b      	uxth	r3, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	b29a      	uxth	r2, r3
 8005986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e02a      	b.n	80059e2 <USB_EPStartXfer+0x6a6>
 800598c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d122      	bne.n	80059e2 <USB_EPStartXfer+0x6a6>
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	653b      	str	r3, [r7, #80]	; 0x50
 80059a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059bc:	4413      	add	r3, r2
 80059be:	653b      	str	r3, [r7, #80]	; 0x50
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	4413      	add	r3, r2
 80059d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	891b      	ldrh	r3, [r3, #8]
 80059ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6959      	ldr	r1, [r3, #20]
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a10:	6800      	ldr	r0, [r0, #0]
 8005a12:	f001 f982 	bl	8006d1a <USB_WritePMA>
            ep->xfer_buff += len;
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a26:	441a      	add	r2, r3
 8005a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d90f      	bls.n	8005a70 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	621a      	str	r2, [r3, #32]
 8005a6e:	e00e      	b.n	8005a8e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d177      	bne.n	8005b9a <USB_EPStartXfer+0x85e>
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	4413      	add	r3, r2
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afa:	2b3e      	cmp	r3, #62	; 0x3e
 8005afc:	d921      	bls.n	8005b42 <USB_EPStartXfer+0x806>
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <USB_EPStartXfer+0x7e2>
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e050      	b.n	8005be4 <USB_EPStartXfer+0x8a8>
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <USB_EPStartXfer+0x824>
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e041      	b.n	8005be4 <USB_EPStartXfer+0x8a8>
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <USB_EPStartXfer+0x844>
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e024      	b.n	8005be4 <USB_EPStartXfer+0x8a8>
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11c      	bne.n	8005be4 <USB_EPStartXfer+0x8a8>
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	4413      	add	r3, r2
 8005bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	f001 f881 	bl	8006d1a <USB_WritePMA>
 8005c18:	e227      	b.n	800606a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	891b      	ldrh	r3, [r3, #8]
 8005cd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6959      	ldr	r1, [r3, #20]
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cf2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cf6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	f001 f80d 	bl	8006d1a <USB_WritePMA>
 8005d00:	e1b3      	b.n	800606a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80c6 	beq.w	8005ed4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	673b      	str	r3, [r7, #112]	; 0x70
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d177      	bne.n	8005e54 <USB_EPStartXfer+0xb18>
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d84:	4413      	add	r3, r2
 8005d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	011a      	lsls	r2, r3, #4
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	4413      	add	r3, r2
 8005d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db4:	2b3e      	cmp	r3, #62	; 0x3e
 8005db6:	d921      	bls.n	8005dfc <USB_EPStartXfer+0xac0>
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <USB_EPStartXfer+0xa9c>
 8005dce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e050      	b.n	8005e9e <USB_EPStartXfer+0xb62>
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <USB_EPStartXfer+0xade>
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e041      	b.n	8005e9e <USB_EPStartXfer+0xb62>
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <USB_EPStartXfer+0xafe>
 8005e30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e34:	3301      	adds	r3, #1
 8005e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e024      	b.n	8005e9e <USB_EPStartXfer+0xb62>
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d11c      	bne.n	8005e9e <USB_EPStartXfer+0xb62>
 8005e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e78:	4413      	add	r3, r2
 8005e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	011a      	lsls	r2, r3, #4
 8005e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	895b      	ldrh	r3, [r3, #10]
 8005eaa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6959      	ldr	r1, [r3, #20]
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ec4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ec8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f000 ff24 	bl	8006d1a <USB_WritePMA>
 8005ed2:	e0ca      	b.n	800606a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d177      	bne.n	8005fd4 <USB_EPStartXfer+0xc98>
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f04:	4413      	add	r3, r2
 8005f06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	011a      	lsls	r2, r3, #4
 8005f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f18:	4413      	add	r3, r2
 8005f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	2b3e      	cmp	r3, #62	; 0x3e
 8005f36:	d921      	bls.n	8005f7c <USB_EPStartXfer+0xc40>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <USB_EPStartXfer+0xc1c>
 8005f4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f52:	3b01      	subs	r3, #1
 8005f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	e05c      	b.n	8006036 <USB_EPStartXfer+0xcfa>
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <USB_EPStartXfer+0xc5e>
 8005f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e04d      	b.n	8006036 <USB_EPStartXfer+0xcfa>
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <USB_EPStartXfer+0xc7e>
 8005fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e030      	b.n	8006036 <USB_EPStartXfer+0xcfa>
 8005fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d128      	bne.n	8006036 <USB_EPStartXfer+0xcfa>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006008:	4413      	add	r3, r2
 800600a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	011a      	lsls	r2, r3, #4
 800601c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006020:	4413      	add	r3, r2
 8006022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006034:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	891b      	ldrh	r3, [r3, #8]
 8006042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6959      	ldr	r1, [r3, #20]
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006056:	b29b      	uxth	r3, r3
 8006058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800605c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006060:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006064:	6800      	ldr	r0, [r0, #0]
 8006066:	f000 fe58 	bl	8006d1a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	f083 0310 	eor.w	r3, r3, #16
 8006098:	817b      	strh	r3, [r7, #10]
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	f083 0320 	eor.w	r3, r3, #32
 80060a0:	817b      	strh	r3, [r7, #10]
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	897b      	ldrh	r3, [r7, #10]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
 80060d2:	f000 bcde 	b.w	8006a92 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	7b1b      	ldrb	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 80bb 	bne.w	800625e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d917      	bls.n	8006134 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	1ad2      	subs	r2, r2, r3
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	619a      	str	r2, [r3, #24]
 8006132:	e00e      	b.n	8006152 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006176:	4413      	add	r3, r2
 8006178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	011a      	lsls	r2, r3, #4
 800618a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800618e:	4413      	add	r3, r2
 8006190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	2b3e      	cmp	r3, #62	; 0x3e
 80061b2:	d924      	bls.n	80061fe <USB_EPStartXfer+0xec2>
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <USB_EPStartXfer+0xe98>
 80061ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061ce:	3b01      	subs	r3, #1
 80061d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	029b      	lsls	r3, r3, #10
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	f000 bc10 	b.w	8006a1e <USB_EPStartXfer+0x16e2>
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <USB_EPStartXfer+0xee4>
 8006206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	e3fe      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <USB_EPStartXfer+0xf04>
 8006236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800623a:	3301      	adds	r3, #1
 800623c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800624c:	b29b      	uxth	r3, r3
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	b29b      	uxth	r3, r3
 8006252:	4313      	orrs	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e3df      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	78db      	ldrb	r3, [r3, #3]
 800626a:	2b02      	cmp	r3, #2
 800626c:	f040 8218 	bne.w	80066a0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 809d 	bne.w	80063bc <USB_EPStartXfer+0x1080>
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a6:	4413      	add	r3, r2
 80062a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	011a      	lsls	r2, r3, #4
 80062ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062be:	4413      	add	r3, r2
 80062c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ea:	d92b      	bls.n	8006344 <USB_EPStartXfer+0x1008>
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_EPStartXfer+0xfe0>
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006316:	3b01      	subs	r3, #1
 8006318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800631c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e070      	b.n	8006426 <USB_EPStartXfer+0x10ea>
 8006344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <USB_EPStartXfer+0x1032>
 8006354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e05b      	b.n	8006426 <USB_EPStartXfer+0x10ea>
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <USB_EPStartXfer+0x1062>
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	3301      	adds	r3, #1
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800639e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e034      	b.n	8006426 <USB_EPStartXfer+0x10ea>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d12c      	bne.n	8006426 <USB_EPStartXfer+0x10ea>
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063f0:	4413      	add	r3, r2
 80063f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	011a      	lsls	r2, r3, #4
 8006404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006408:	4413      	add	r3, r2
 800640a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800640e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	b29a      	uxth	r2, r3
 8006420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 809d 	bne.w	8006580 <USB_EPStartXfer+0x1244>
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800646a:	4413      	add	r3, r2
 800646c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	011a      	lsls	r2, r3, #4
 800647e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006482:	4413      	add	r3, r2
 8006484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800648c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b3e      	cmp	r3, #62	; 0x3e
 80064ae:	d92b      	bls.n	8006508 <USB_EPStartXfer+0x11cc>
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <USB_EPStartXfer+0x11a4>
 80064d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064da:	3b01      	subs	r3, #1
 80064dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	e069      	b.n	80065dc <USB_EPStartXfer+0x12a0>
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10c      	bne.n	8006532 <USB_EPStartXfer+0x11f6>
 8006518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e054      	b.n	80065dc <USB_EPStartXfer+0x12a0>
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <USB_EPStartXfer+0x1226>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	3301      	adds	r3, #1
 800655e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29a      	uxth	r2, r3
 8006578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	e02d      	b.n	80065dc <USB_EPStartXfer+0x12a0>
 8006580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d125      	bne.n	80065dc <USB_EPStartXfer+0x12a0>
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065a6:	4413      	add	r3, r2
 80065a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065be:	4413      	add	r3, r2
 80065c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8218 	beq.w	8006a1e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800660e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <USB_EPStartXfer+0x12ea>
 800661a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10d      	bne.n	8006642 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006626:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 81f5 	bne.w	8006a1e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006634:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 81ee 	bne.w	8006a1e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006696:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
 800669e:	e1be      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	f040 81b4 	bne.w	8006a1a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d917      	bls.n	80066fe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	619a      	str	r2, [r3, #24]
 80066fc:	e00e      	b.n	800671c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800671c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 8085 	bne.w	8006838 <USB_EPStartXfer+0x14fc>
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800676a:	4413      	add	r3, r2
 800676c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d923      	bls.n	80067d8 <USB_EPStartXfer+0x149c>
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <USB_EPStartXfer+0x1474>
 80067a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067aa:	3b01      	subs	r3, #1
 80067ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	b29b      	uxth	r3, r3
 80067be:	029b      	lsls	r3, r3, #10
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e060      	b.n	800689a <USB_EPStartXfer+0x155e>
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10c      	bne.n	80067fa <USB_EPStartXfer+0x14be>
 80067e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e04f      	b.n	800689a <USB_EPStartXfer+0x155e>
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <USB_EPStartXfer+0x14de>
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006814:	3301      	adds	r3, #1
 8006816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800681a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29b      	uxth	r3, r3
 800682c:	4313      	orrs	r3, r2
 800682e:	b29a      	uxth	r2, r3
 8006830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	e030      	b.n	800689a <USB_EPStartXfer+0x155e>
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <USB_EPStartXfer+0x155e>
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800686c:	4413      	add	r3, r2
 800686e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	011a      	lsls	r2, r3, #4
 8006880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006884:	4413      	add	r3, r2
 8006886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800688a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 8085 	bne.w	80069c4 <USB_EPStartXfer+0x1688>
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068de:	4413      	add	r3, r2
 80068e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068f6:	4413      	add	r3, r2
 80068f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800690c:	b29a      	uxth	r2, r3
 800690e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	2b3e      	cmp	r3, #62	; 0x3e
 800691a:	d923      	bls.n	8006964 <USB_EPStartXfer+0x1628>
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <USB_EPStartXfer+0x1600>
 8006932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006936:	3b01      	subs	r3, #1
 8006938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800693c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29a      	uxth	r2, r3
 8006944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006948:	b29b      	uxth	r3, r3
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	b29b      	uxth	r3, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	b29b      	uxth	r3, r3
 8006952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	e05c      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10c      	bne.n	8006986 <USB_EPStartXfer+0x164a>
 800696c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697c:	b29a      	uxth	r2, r3
 800697e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	e04b      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <USB_EPStartXfer+0x166a>
 800699c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a0:	3301      	adds	r3, #1
 80069a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4313      	orrs	r3, r2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e02c      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
 80069c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d124      	bne.n	8006a1e <USB_EPStartXfer+0x16e2>
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069ea:	4413      	add	r3, r2
 80069ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e001      	b.n	8006a1e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e03a      	b.n	8006a94 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d020      	beq.n	8006af2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac6:	81bb      	strh	r3, [r7, #12]
 8006ac8:	89bb      	ldrh	r3, [r7, #12]
 8006aca:	f083 0310 	eor.w	r3, r3, #16
 8006ace:	81bb      	strh	r3, [r7, #12]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	89bb      	ldrh	r3, [r7, #12]
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]
 8006af0:	e01f      	b.n	8006b32 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	81fb      	strh	r3, [r7, #14]
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b10:	81fb      	strh	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	7b1b      	ldrb	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 809d 	bne.w	8006c8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d04c      	beq.n	8006bf4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	823b      	strh	r3, [r7, #16]
 8006b68:	8a3b      	ldrh	r3, [r7, #16]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01b      	beq.n	8006baa <USB_EPClearStall+0x6c>
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	81fb      	strh	r3, [r7, #14]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d06c      	beq.n	8006c8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc8:	81bb      	strh	r3, [r7, #12]
 8006bca:	89bb      	ldrh	r3, [r7, #12]
 8006bcc:	f083 0320 	eor.w	r3, r3, #32
 8006bd0:	81bb      	strh	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	89bb      	ldrh	r3, [r7, #12]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
 8006bf2:	e04b      	b.n	8006c8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	82fb      	strh	r3, [r7, #22]
 8006c02:	8afb      	ldrh	r3, [r7, #22]
 8006c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01b      	beq.n	8006c44 <USB_EPClearStall+0x106>
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	82bb      	strh	r3, [r7, #20]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	8abb      	ldrh	r3, [r7, #20]
 8006c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	827b      	strh	r3, [r7, #18]
 8006c5c:	8a7b      	ldrh	r3, [r7, #18]
 8006c5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c62:	827b      	strh	r3, [r7, #18]
 8006c64:	8a7b      	ldrh	r3, [r7, #18]
 8006c66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c6a:	827b      	strh	r3, [r7, #18]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	8a7b      	ldrh	r3, [r7, #18]
 8006c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2280      	movs	r2, #128	; 0x80
 8006cae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b08b      	sub	sp, #44	; 0x2c
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	4611      	mov	r1, r2
 8006d26:	461a      	mov	r2, r3
 8006d28:	460b      	mov	r3, r1
 8006d2a:	80fb      	strh	r3, [r7, #6]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d30:	88bb      	ldrh	r3, [r7, #4]
 8006d32:	3301      	adds	r3, #1
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	005a      	lsls	r2, r3, #1
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
 8006d52:	e01e      	b.n	8006d92 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b21a      	sxth	r2, r3
 8006d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	8a7a      	ldrh	r2, [r7, #18]
 8006d72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	3302      	adds	r3, #2
 8006d78:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1dd      	bne.n	8006d54 <USB_WritePMA+0x3a>
  }
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	372c      	adds	r7, #44	; 0x2c
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b08b      	sub	sp, #44	; 0x2c
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	460b      	mov	r3, r1
 8006db4:	80fb      	strh	r3, [r7, #6]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dba:	88bb      	ldrh	r3, [r7, #4]
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	005a      	lsls	r2, r3, #1
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	e01b      	b.n	8006e16 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	3302      	adds	r3, #2
 8006dea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	3301      	adds	r3, #1
 8006df8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	3b01      	subs	r3, #1
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e0      	bne.n	8006dde <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006e1c:	88bb      	ldrh	r3, [r7, #4]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	701a      	strb	r2, [r3, #0]
  }
}
 8006e38:	bf00      	nop
 8006e3a:	372c      	adds	r7, #44	; 0x2c
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7c1b      	ldrb	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d115      	bne.n	8006e86 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5e:	2202      	movs	r2, #2
 8006e60:	2181      	movs	r1, #129	; 0x81
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fee7 	bl	8008c36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e72:	2202      	movs	r2, #2
 8006e74:	2101      	movs	r1, #1
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fedd 	bl	8008c36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e84:	e012      	b.n	8006eac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	2202      	movs	r2, #2
 8006e8a:	2181      	movs	r1, #129	; 0x81
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 fed2 	bl	8008c36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fec9 	bl	8008c36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eac:	2308      	movs	r3, #8
 8006eae:	2203      	movs	r2, #3
 8006eb0:	2182      	movs	r1, #130	; 0x82
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 febf 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ebe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ec2:	f001 ffdf 	bl	8008e84 <USBD_static_malloc>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	e026      	b.n	8006f2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7c1b      	ldrb	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f12:	2101      	movs	r1, #1
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ff7f 	bl	8008e18 <USBD_LL_PrepareReceive>
 8006f1a:	e007      	b.n	8006f2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 ff76 	bl	8008e18 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f46:	2181      	movs	r1, #129	; 0x81
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fe9a 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f54:	2101      	movs	r1, #1
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fe93 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f64:	2182      	movs	r1, #130	; 0x82
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fe8b 	bl	8008c82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 ff85 	bl	8008e9c <USBD_static_free>
    pdev->pClassData = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d039      	beq.n	8007042 <USBD_CDC_Setup+0x9e>
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d17f      	bne.n	80070d2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88db      	ldrh	r3, [r3, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d029      	beq.n	800702e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b25b      	sxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	da11      	bge.n	8007008 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ff0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	88d2      	ldrh	r2, [r2, #6]
 8006ff6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ff8:	6939      	ldr	r1, [r7, #16]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fa0a 	bl	800841a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007006:	e06b      	b.n	80070e0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785a      	ldrb	r2, [r3, #1]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800701e:	6939      	ldr	r1, [r7, #16]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	88db      	ldrh	r3, [r3, #6]
 8007024:	461a      	mov	r2, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa25 	bl	8008476 <USBD_CtlPrepareRx>
      break;
 800702c:	e058      	b.n	80070e0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	7850      	ldrb	r0, [r2, #1]
 800703a:	2200      	movs	r2, #0
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	4798      	blx	r3
      break;
 8007040:	e04e      	b.n	80070e0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	2b0b      	cmp	r3, #11
 8007048:	d02e      	beq.n	80070a8 <USBD_CDC_Setup+0x104>
 800704a:	2b0b      	cmp	r3, #11
 800704c:	dc38      	bgt.n	80070c0 <USBD_CDC_Setup+0x11c>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <USBD_CDC_Setup+0xb4>
 8007052:	2b0a      	cmp	r3, #10
 8007054:	d014      	beq.n	8007080 <USBD_CDC_Setup+0xdc>
 8007056:	e033      	b.n	80070c0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705e:	2b03      	cmp	r3, #3
 8007060:	d107      	bne.n	8007072 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007062:	f107 030c 	add.w	r3, r7, #12
 8007066:	2202      	movs	r2, #2
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 f9d5 	bl	800841a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007070:	e02e      	b.n	80070d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f966 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 800707a:	2302      	movs	r3, #2
 800707c:	75fb      	strb	r3, [r7, #23]
          break;
 800707e:	e027      	b.n	80070d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800708a:	f107 030f 	add.w	r3, r7, #15
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 f9c1 	bl	800841a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007098:	e01a      	b.n	80070d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f952 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 80070a2:	2302      	movs	r3, #2
 80070a4:	75fb      	strb	r3, [r7, #23]
          break;
 80070a6:	e013      	b.n	80070d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d00d      	beq.n	80070ce <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f946 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070be:	e006      	b.n	80070ce <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f93f 	bl	8008346 <USBD_CtlError>
          ret = USBD_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	75fb      	strb	r3, [r7, #23]
          break;
 80070cc:	e000      	b.n	80070d0 <USBD_CDC_Setup+0x12c>
          break;
 80070ce:	bf00      	nop
      }
      break;
 80070d0:	e006      	b.n	80070e0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 f936 	bl	8008346 <USBD_CtlError>
      ret = USBD_FAIL;
 80070da:	2302      	movs	r3, #2
 80070dc:	75fb      	strb	r3, [r7, #23]
      break;
 80070de:	bf00      	nop
  }

  return ret;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007104:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d03a      	beq.n	8007186 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	331c      	adds	r3, #28
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d029      	beq.n	800717a <USBD_CDC_DataIn+0x90>
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	331c      	adds	r3, #28
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	78f9      	ldrb	r1, [r7, #3]
 800713a:	68b8      	ldr	r0, [r7, #8]
 800713c:	460b      	mov	r3, r1
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4403      	add	r3, r0
 8007146:	3338      	adds	r3, #56	; 0x38
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	fbb2 f1f3 	udiv	r1, r2, r3
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	331c      	adds	r3, #28
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800716c:	78f9      	ldrb	r1, [r7, #3]
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fe2d 	bl	8008dd2 <USBD_LL_Transmit>
 8007178:	e003      	b.n	8007182 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 fe58 	bl	8008e5e <USBD_LL_GetRxDataSize>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071d4:	4611      	mov	r1, r2
 80071d6:	4798      	blx	r3

    return USBD_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e000      	b.n	80071de <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071dc:	2302      	movs	r3, #2
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <USBD_CDC_EP0_RxReady+0x46>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007206:	2bff      	cmp	r3, #255	; 0xff
 8007208:	d010      	beq.n	800722c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007218:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007220:	b292      	uxth	r2, r2
 8007222:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2243      	movs	r2, #67	; 0x43
 8007244:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007246:	4b03      	ldr	r3, [pc, #12]	; (8007254 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000094 	.word	0x20000094

08007258 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2243      	movs	r2, #67	; 0x43
 8007264:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007266:	4b03      	ldr	r3, [pc, #12]	; (8007274 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000050 	.word	0x20000050

08007278 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2243      	movs	r2, #67	; 0x43
 8007284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	200000d8 	.word	0x200000d8

08007298 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	220a      	movs	r2, #10
 80072a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80072a6:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80072c2:	2302      	movs	r3, #2
 80072c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007326:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01c      	beq.n	8007390 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800735c:	2b00      	cmp	r3, #0
 800735e:	d115      	bne.n	800738c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800737e:	b29b      	uxth	r3, r3
 8007380:	2181      	movs	r1, #129	; 0x81
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fd25 	bl	8008dd2 <USBD_LL_Transmit>

      return USBD_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e002      	b.n	8007392 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d017      	beq.n	80073e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7c1b      	ldrb	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d109      	bne.n	80073d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c6:	2101      	movs	r1, #1
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fd25 	bl	8008e18 <USBD_LL_PrepareReceive>
 80073ce:	e007      	b.n	80073e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	2101      	movs	r1, #1
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fd1c 	bl	8008e18 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007402:	2302      	movs	r3, #2
 8007404:	e01a      	b.n	800743c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	79fa      	ldrb	r2, [r7, #7]
 8007432:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fb89 	bl	8008b4c <USBD_LL_Init>

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e001      	b.n	800746a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fbbe 	bl	8008c00 <USBD_LL_Start>

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr

080074a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074ae:	2302      	movs	r3, #2
 80074b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	4611      	mov	r1, r2
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fed8 	bl	80082ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800752c:	461a      	mov	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2b02      	cmp	r3, #2
 8007540:	d016      	beq.n	8007570 <USBD_LL_SetupStage+0x6a>
 8007542:	2b02      	cmp	r3, #2
 8007544:	d81c      	bhi.n	8007580 <USBD_LL_SetupStage+0x7a>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <USBD_LL_SetupStage+0x4a>
 800754a:	2b01      	cmp	r3, #1
 800754c:	d008      	beq.n	8007560 <USBD_LL_SetupStage+0x5a>
 800754e:	e017      	b.n	8007580 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f9cb 	bl	80078f4 <USBD_StdDevReq>
      break;
 800755e:	e01a      	b.n	8007596 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa2d 	bl	80079c8 <USBD_StdItfReq>
      break;
 800756e:	e012      	b.n	8007596 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa6d 	bl	8007a58 <USBD_StdEPReq>
      break;
 800757e:	e00a      	b.n	8007596 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800758a:	b2db      	uxtb	r3, r3
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fb96 	bl	8008cc0 <USBD_LL_StallEP>
      break;
 8007594:	bf00      	nop
  }

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	460b      	mov	r3, r1
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d14b      	bne.n	800764c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d134      	bne.n	8007630 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d919      	bls.n	8007606 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d203      	bcs.n	80075f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	e002      	b.n	80075fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 ff57 	bl	80084b2 <USBD_CtlContinueRx>
 8007604:	e038      	b.n	8007678 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007618:	2b03      	cmp	r3, #3
 800761a:	d105      	bne.n	8007628 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 ff54 	bl	80084d6 <USBD_CtlSendStatus>
 800762e:	e023      	b.n	8007678 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007636:	2b05      	cmp	r3, #5
 8007638:	d11e      	bne.n	8007678 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007642:	2100      	movs	r1, #0
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 fb3b 	bl	8008cc0 <USBD_LL_StallEP>
 800764a:	e015      	b.n	8007678 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800765e:	2b03      	cmp	r3, #3
 8007660:	d108      	bne.n	8007674 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	7afa      	ldrb	r2, [r7, #11]
 800766c:	4611      	mov	r1, r2
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	4798      	blx	r3
 8007672:	e001      	b.n	8007678 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	e000      	b.n	800767a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	460b      	mov	r3, r1
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d17f      	bne.n	8007796 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3314      	adds	r3, #20
 800769a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d15c      	bne.n	8007760 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d915      	bls.n	80076de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fec1 	bl	8008452 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d0:	2300      	movs	r3, #0
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f001 fb9e 	bl	8008e18 <USBD_LL_PrepareReceive>
 80076dc:	e04e      	b.n	800777c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	6912      	ldr	r2, [r2, #16]
 80076e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ea:	fb01 f202 	mul.w	r2, r1, r2
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11c      	bne.n	800772e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d316      	bcc.n	800772e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800770a:	429a      	cmp	r2, r3
 800770c:	d20f      	bcs.n	800772e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fe9d 	bl	8008452 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007720:	2300      	movs	r3, #0
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f001 fb76 	bl	8008e18 <USBD_LL_PrepareReceive>
 800772c:	e026      	b.n	800777c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007740:	2b03      	cmp	r3, #3
 8007742:	d105      	bne.n	8007750 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 fab4 	bl	8008cc0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fecf 	bl	80084fc <USBD_CtlReceiveStatus>
 800775e:	e00d      	b.n	800777c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007766:	2b04      	cmp	r3, #4
 8007768:	d004      	beq.n	8007774 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007774:	2180      	movs	r1, #128	; 0x80
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f001 faa2 	bl	8008cc0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007782:	2b01      	cmp	r3, #1
 8007784:	d11d      	bne.n	80077c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff fe81 	bl	800748e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007794:	e015      	b.n	80077c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00d      	beq.n	80077be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d108      	bne.n	80077be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	7afa      	ldrb	r2, [r7, #11]
 80077b6:	4611      	mov	r1, r2
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	4798      	blx	r3
 80077bc:	e001      	b.n	80077c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	e000      	b.n	80077c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fa2b 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077f0:	2340      	movs	r3, #64	; 0x40
 80077f2:	2200      	movs	r2, #0
 80077f4:	2180      	movs	r1, #128	; 0x80
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fa1d 	bl	8008c36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2240      	movs	r2, #64	; 0x40
 8007806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6852      	ldr	r2, [r2, #4]
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	4611      	mov	r1, r2
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
  }

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2204      	movs	r2, #4
 8007884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d105      	bne.n	80078b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d10b      	bne.n	80078e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d005      	beq.n	800791a <USBD_StdDevReq+0x26>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d84f      	bhi.n	80079b2 <USBD_StdDevReq+0xbe>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <USBD_StdDevReq+0x36>
 8007916:	2b20      	cmp	r3, #32
 8007918:	d14b      	bne.n	80079b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
      break;
 8007928:	e048      	b.n	80079bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b09      	cmp	r3, #9
 8007930:	d839      	bhi.n	80079a6 <USBD_StdDevReq+0xb2>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <USBD_StdDevReq+0x44>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007989 	.word	0x08007989
 800793c:	0800799d 	.word	0x0800799d
 8007940:	080079a7 	.word	0x080079a7
 8007944:	08007993 	.word	0x08007993
 8007948:	080079a7 	.word	0x080079a7
 800794c:	0800796b 	.word	0x0800796b
 8007950:	08007961 	.word	0x08007961
 8007954:	080079a7 	.word	0x080079a7
 8007958:	0800797f 	.word	0x0800797f
 800795c:	08007975 	.word	0x08007975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9dc 	bl	8007d20 <USBD_GetDescriptor>
          break;
 8007968:	e022      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fb3f 	bl	8007ff0 <USBD_SetAddress>
          break;
 8007972:	e01d      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb7e 	bl	8008078 <USBD_SetConfig>
          break;
 800797c:	e018      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc07 	bl	8008194 <USBD_GetConfig>
          break;
 8007986:	e013      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc37 	bl	80081fe <USBD_GetStatus>
          break;
 8007990:	e00e      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc65 	bl	8008264 <USBD_SetFeature>
          break;
 800799a:	e009      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fc74 	bl	800828c <USBD_ClrFeature>
          break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fccc 	bl	8008346 <USBD_CtlError>
          break;
 80079ae:	bf00      	nop
      }
      break;
 80079b0:	e004      	b.n	80079bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fcc6 	bl	8008346 <USBD_CtlError>
      break;
 80079ba:	bf00      	nop
  }

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d82e      	bhi.n	8007a44 <USBD_StdItfReq+0x7c>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d12a      	bne.n	8007a44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	3b01      	subs	r3, #1
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d81d      	bhi.n	8007a36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	889b      	ldrh	r3, [r3, #4]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d813      	bhi.n	8007a2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d110      	bne.n	8007a40 <USBD_StdItfReq+0x78>
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fd56 	bl	80084d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a2a:	e009      	b.n	8007a40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc89 	bl	8008346 <USBD_CtlError>
          break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc84 	bl	8008346 <USBD_CtlError>
          break;
 8007a3e:	e000      	b.n	8007a42 <USBD_StdItfReq+0x7a>
          break;
 8007a40:	bf00      	nop
      }
      break;
 8007a42:	e004      	b.n	8007a4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc7d 	bl	8008346 <USBD_CtlError>
      break;
 8007a4c:	bf00      	nop
  }

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	889b      	ldrh	r3, [r3, #4]
 8007a6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d007      	beq.n	8007a88 <USBD_StdEPReq+0x30>
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	f200 8146 	bhi.w	8007d0a <USBD_StdEPReq+0x2b2>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <USBD_StdEPReq+0x40>
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	f040 8141 	bne.w	8007d0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      break;
 8007a96:	e13d      	b.n	8007d14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d10a      	bne.n	8007aba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	e12d      	b.n	8007d16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d007      	beq.n	8007ad2 <USBD_StdEPReq+0x7a>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f300 811b 	bgt.w	8007cfe <USBD_StdEPReq+0x2a6>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d072      	beq.n	8007bb2 <USBD_StdEPReq+0x15a>
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d03a      	beq.n	8007b46 <USBD_StdEPReq+0xee>
 8007ad0:	e115      	b.n	8007cfe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d002      	beq.n	8007ae2 <USBD_StdEPReq+0x8a>
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d015      	beq.n	8007b0c <USBD_StdEPReq+0xb4>
 8007ae0:	e02b      	b.n	8007b3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <USBD_StdEPReq+0xaa>
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d009      	beq.n	8007b02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f8e4 	bl	8008cc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f8e0 	bl	8008cc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b00:	e020      	b.n	8007b44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fc1e 	bl	8008346 <USBD_CtlError>
              break;
 8007b0a:	e01b      	b.n	8007b44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10e      	bne.n	8007b32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <USBD_StdEPReq+0xda>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d008      	beq.n	8007b32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f8c7 	bl	8008cc0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fccf 	bl	80084d6 <USBD_CtlSendStatus>

              break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc02 	bl	8008346 <USBD_CtlError>
              break;
 8007b42:	bf00      	nop
          }
          break;
 8007b44:	e0e0      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d002      	beq.n	8007b56 <USBD_StdEPReq+0xfe>
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d015      	beq.n	8007b80 <USBD_StdEPReq+0x128>
 8007b54:	e026      	b.n	8007ba4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <USBD_StdEPReq+0x11e>
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b80      	cmp	r3, #128	; 0x80
 8007b60:	d009      	beq.n	8007b76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f8aa 	bl	8008cc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b6c:	2180      	movs	r1, #128	; 0x80
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 f8a6 	bl	8008cc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b74:	e01c      	b.n	8007bb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fbe4 	bl	8008346 <USBD_CtlError>
              break;
 8007b7e:	e017      	b.n	8007bb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d112      	bne.n	8007bae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f8b1 	bl	8008cfe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc9a 	bl	80084d6 <USBD_CtlSendStatus>
              }
              break;
 8007ba2:	e004      	b.n	8007bae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fbcd 	bl	8008346 <USBD_CtlError>
              break;
 8007bac:	e000      	b.n	8007bb0 <USBD_StdEPReq+0x158>
              break;
 8007bae:	bf00      	nop
          }
          break;
 8007bb0:	e0aa      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d002      	beq.n	8007bc2 <USBD_StdEPReq+0x16a>
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d032      	beq.n	8007c26 <USBD_StdEPReq+0x1ce>
 8007bc0:	e097      	b.n	8007cf2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <USBD_StdEPReq+0x180>
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d004      	beq.n	8007bd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fbb8 	bl	8008346 <USBD_CtlError>
                break;
 8007bd6:	e091      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0b      	bge.n	8007bf8 <USBD_StdEPReq+0x1a0>
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	3310      	adds	r3, #16
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	e00b      	b.n	8007c10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbfb 	bl	800841a <USBD_CtlSendData>
              break;
 8007c24:	e06a      	b.n	8007cfc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da11      	bge.n	8007c52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3318      	adds	r3, #24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d117      	bne.n	8007c78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb7b 	bl	8008346 <USBD_CtlError>
                  break;
 8007c50:	e054      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb68 	bl	8008346 <USBD_CtlError>
                  break;
 8007c76:	e041      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da0b      	bge.n	8007c98 <USBD_StdEPReq+0x240>
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	3310      	adds	r3, #16
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	e00b      	b.n	8007cb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	3304      	adds	r3, #4
 8007cb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <USBD_StdEPReq+0x266>
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d103      	bne.n	8007cc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e00e      	b.n	8007ce4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f836 	bl	8008d3c <USBD_LL_IsStallEP>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e002      	b.n	8007ce4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb95 	bl	800841a <USBD_CtlSendData>
              break;
 8007cf0:	e004      	b.n	8007cfc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fb26 	bl	8008346 <USBD_CtlError>
              break;
 8007cfa:	bf00      	nop
          }
          break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fb20 	bl	8008346 <USBD_CtlError>
          break;
 8007d06:	bf00      	nop
      }
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb1a 	bl	8008346 <USBD_CtlError>
      break;
 8007d12:	bf00      	nop
  }

  return ret;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	f200 8128 	bhi.w	8007f96 <USBD_GetDescriptor+0x276>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <USBD_GetDescriptor+0x2c>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d81 	.word	0x08007d81
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007f97 	.word	0x08007f97
 8007d5c:	08007f97 	.word	0x08007f97
 8007d60:	08007f37 	.word	0x08007f37
 8007d64:	08007f63 	.word	0x08007f63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
      break;
 8007d7e:	e112      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7c1b      	ldrb	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	f107 0208 	add.w	r2, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	2202      	movs	r2, #2
 8007da0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007da2:	e100      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	f107 0208 	add.w	r2, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2202      	movs	r2, #2
 8007dbc:	701a      	strb	r2, [r3, #0]
      break;
 8007dbe:	e0f2      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	f200 80ac 	bhi.w	8007f24 <USBD_GetDescriptor+0x204>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBD_GetDescriptor+0xb4>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007ded 	.word	0x08007ded
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e55 	.word	0x08007e55
 8007de0:	08007e89 	.word	0x08007e89
 8007de4:	08007ebd 	.word	0x08007ebd
 8007de8:	08007ef1 	.word	0x08007ef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0e:	e091      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa97 	bl	8008346 <USBD_CtlError>
            err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1e:	e089      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e42:	e077      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa7d 	bl	8008346 <USBD_CtlError>
            err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
          break;
 8007e52:	e06f      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e76:	e05d      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa63 	bl	8008346 <USBD_CtlError>
            err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
          break;
 8007e86:	e055      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e043      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa49 	bl	8008346 <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e03b      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ede:	e029      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa2f 	bl	8008346 <USBD_CtlError>
            err++;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	3301      	adds	r3, #1
 8007eec:	72fb      	strb	r3, [r7, #11]
          break;
 8007eee:	e021      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 0108 	add.w	r1, r7, #8
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f12:	e00f      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa15 	bl	8008346 <USBD_CtlError>
            err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
          break;
 8007f22:	e007      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa0d 	bl	8008346 <USBD_CtlError>
          err++;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f32:	e038      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
 8007f34:	e037      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7c1b      	ldrb	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	f107 0208 	add.w	r2, r7, #8
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
 8007f4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f50:	e029      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f9f6 	bl	8008346 <USBD_CtlError>
        err++;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f60:	e021      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	7c1b      	ldrb	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10d      	bne.n	8007f86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	f107 0208 	add.w	r2, r7, #8
 8007f76:	4610      	mov	r0, r2
 8007f78:	4798      	blx	r3
 8007f7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	2207      	movs	r2, #7
 8007f82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f84:	e00f      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f9dc 	bl	8008346 <USBD_CtlError>
        err++;
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	3301      	adds	r3, #1
 8007f92:	72fb      	strb	r3, [r7, #11]
      break;
 8007f94:	e007      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f9d4 	bl	8008346 <USBD_CtlError>
      err++;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fa4:	bf00      	nop
  }

  if (err != 0U)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11c      	bne.n	8007fe6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007fac:	893b      	ldrh	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d011      	beq.n	8007fd6 <USBD_GetDescriptor+0x2b6>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00d      	beq.n	8007fd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88da      	ldrh	r2, [r3, #6]
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf28      	it	cs
 8007fc4:	4613      	movcs	r3, r2
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fa22 	bl	800841a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa79 	bl	80084d6 <USBD_CtlSendStatus>
 8007fe4:	e000      	b.n	8007fe8 <USBD_GetDescriptor+0x2c8>
    return;
 8007fe6:	bf00      	nop
    }
  }
}
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop

08007ff0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d130      	bne.n	8008064 <USBD_SetAddress+0x74>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d12c      	bne.n	8008064 <USBD_SetAddress+0x74>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	2b7f      	cmp	r3, #127	; 0x7f
 8008010:	d828      	bhi.n	8008064 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	885b      	ldrh	r3, [r3, #2]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008024:	2b03      	cmp	r3, #3
 8008026:	d104      	bne.n	8008032 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f98b 	bl	8008346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	e01d      	b.n	800806e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7bfa      	ldrb	r2, [r7, #15]
 8008036:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fea8 	bl	8008d94 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa46 	bl	80084d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d004      	beq.n	800805a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	e009      	b.n	800806e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	e004      	b.n	800806e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f96d 	bl	8008346 <USBD_CtlError>
  }
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	4b41      	ldr	r3, [pc, #260]	; (8008190 <USBD_SetConfig+0x118>)
 800808a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800808c:	4b40      	ldr	r3, [pc, #256]	; (8008190 <USBD_SetConfig+0x118>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d904      	bls.n	800809e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f955 	bl	8008346 <USBD_CtlError>
 800809c:	e075      	b.n	800818a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d002      	beq.n	80080ae <USBD_SetConfig+0x36>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d023      	beq.n	80080f4 <USBD_SetConfig+0x7c>
 80080ac:	e062      	b.n	8008174 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080ae:	4b38      	ldr	r3, [pc, #224]	; (8008190 <USBD_SetConfig+0x118>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01a      	beq.n	80080ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80080b6:	4b36      	ldr	r3, [pc, #216]	; (8008190 <USBD_SetConfig+0x118>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2203      	movs	r2, #3
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080c8:	4b31      	ldr	r3, [pc, #196]	; (8008190 <USBD_SetConfig+0x118>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff f9e7 	bl	80074a2 <USBD_SetClassConfig>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d104      	bne.n	80080e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f932 	bl	8008346 <USBD_CtlError>
            return;
 80080e2:	e052      	b.n	800818a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9f6 	bl	80084d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080ea:	e04e      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9f2 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 80080f2:	e04a      	b.n	800818a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080f4:	4b26      	ldr	r3, [pc, #152]	; (8008190 <USBD_SetConfig+0x118>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d112      	bne.n	8008122 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008104:	4b22      	ldr	r3, [pc, #136]	; (8008190 <USBD_SetConfig+0x118>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <USBD_SetConfig+0x118>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff f9e3 	bl	80074e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9db 	bl	80084d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008120:	e033      	b.n	800818a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008122:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <USBD_SetConfig+0x118>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d01d      	beq.n	800816c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff f9d1 	bl	80074e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800813e:	4b14      	ldr	r3, [pc, #80]	; (8008190 <USBD_SetConfig+0x118>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008148:	4b11      	ldr	r3, [pc, #68]	; (8008190 <USBD_SetConfig+0x118>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff f9a7 	bl	80074a2 <USBD_SetClassConfig>
 8008154:	4603      	mov	r3, r0
 8008156:	2b02      	cmp	r3, #2
 8008158:	d104      	bne.n	8008164 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8f2 	bl	8008346 <USBD_CtlError>
            return;
 8008162:	e012      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f9b6 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 800816a:	e00e      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9b2 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 8008172:	e00a      	b.n	800818a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8e5 	bl	8008346 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <USBD_SetConfig+0x118>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff f9ac 	bl	80074e0 <USBD_ClrClassConfig>
        break;
 8008188:	bf00      	nop
    }
  }
}
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000334 	.word	0x20000334

08008194 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d004      	beq.n	80081b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8cc 	bl	8008346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ae:	e022      	b.n	80081f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	dc02      	bgt.n	80081c0 <USBD_GetConfig+0x2c>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dc03      	bgt.n	80081c6 <USBD_GetConfig+0x32>
 80081be:	e015      	b.n	80081ec <USBD_GetConfig+0x58>
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d00b      	beq.n	80081dc <USBD_GetConfig+0x48>
 80081c4:	e012      	b.n	80081ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3308      	adds	r3, #8
 80081d0:	2201      	movs	r2, #1
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f920 	bl	800841a <USBD_CtlSendData>
        break;
 80081da:	e00c      	b.n	80081f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	2201      	movs	r2, #1
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f918 	bl	800841a <USBD_CtlSendData>
        break;
 80081ea:	e004      	b.n	80081f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8a9 	bl	8008346 <USBD_CtlError>
        break;
 80081f4:	bf00      	nop
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	3b01      	subs	r3, #1
 8008210:	2b02      	cmp	r3, #2
 8008212:	d81e      	bhi.n	8008252 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	88db      	ldrh	r3, [r3, #6]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d004      	beq.n	8008226 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f891 	bl	8008346 <USBD_CtlError>
        break;
 8008224:	e01a      	b.n	800825c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f043 0202 	orr.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	330c      	adds	r3, #12
 8008246:	2202      	movs	r2, #2
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8e5 	bl	800841a <USBD_CtlSendData>
      break;
 8008250:	e004      	b.n	800825c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f876 	bl	8008346 <USBD_CtlError>
      break;
 800825a:	bf00      	nop
  }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d106      	bne.n	8008284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f929 	bl	80084d6 <USBD_CtlSendStatus>
  }
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	3b01      	subs	r3, #1
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d80b      	bhi.n	80082ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d10c      	bne.n	80082c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f90f 	bl	80084d6 <USBD_CtlSendStatus>
      }
      break;
 80082b8:	e004      	b.n	80082c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f842 	bl	8008346 <USBD_CtlError>
      break;
 80082c2:	e000      	b.n	80082c6 <USBD_ClrFeature+0x3a>
      break;
 80082c4:	bf00      	nop
  }
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	785a      	ldrb	r2, [r3, #1]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	3302      	adds	r3, #2
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	3303      	adds	r3, #3
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4413      	add	r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b29a      	uxth	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	3305      	adds	r3, #5
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	b29b      	uxth	r3, r3
 8008318:	4413      	add	r3, r2
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3306      	adds	r3, #6
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b29a      	uxth	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3307      	adds	r3, #7
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	b29b      	uxth	r3, r3
 8008334:	4413      	add	r3, r2
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	80da      	strh	r2, [r3, #6]

}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fcb4 	bl	8008cc0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008358:	2100      	movs	r1, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fcb0 	bl	8008cc0 <USBD_LL_StallEP>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d032      	beq.n	80083e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f834 	bl	80083ec <USBD_GetLen>
 8008384:	4603      	mov	r3, r0
 8008386:	3301      	adds	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	75fa      	strb	r2, [r7, #23]
 8008398:	461a      	mov	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	75fa      	strb	r2, [r7, #23]
 80083aa:	461a      	mov	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	2203      	movs	r2, #3
 80083b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083b4:	e012      	b.n	80083dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	60fa      	str	r2, [r7, #12]
 80083bc:	7dfa      	ldrb	r2, [r7, #23]
 80083be:	1c51      	adds	r1, r2, #1
 80083c0:	75f9      	strb	r1, [r7, #23]
 80083c2:	4611      	mov	r1, r2
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	440a      	add	r2, r1
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	75fa      	strb	r2, [r7, #23]
 80083d2:	461a      	mov	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4413      	add	r3, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e8      	bne.n	80083b6 <USBD_GetString+0x4e>
    }
  }
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083f8:	e005      	b.n	8008406 <USBD_GetLen+0x1a>
  {
    len++;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	3301      	adds	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f5      	bne.n	80083fa <USBD_GetLen+0xe>
  }

  return len;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2202      	movs	r2, #2
 800842c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fcc5 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	4613      	mov	r3, r2
 800845e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 fcb3 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2203      	movs	r2, #3
 8008488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fcb8 	bl	8008e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fca6 	bl	8008e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fc70 	bl	8008dd2 <USBD_LL_Transmit>

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2205      	movs	r2, #5
 8008508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc80 	bl	8008e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008528:	2200      	movs	r2, #0
 800852a:	4912      	ldr	r1, [pc, #72]	; (8008574 <MX_USB_DEVICE_Init+0x50>)
 800852c:	4812      	ldr	r0, [pc, #72]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 800852e:	f7fe ff5e 	bl	80073ee <USBD_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008538:	f7f8 f80e 	bl	8000558 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800853c:	490f      	ldr	r1, [pc, #60]	; (800857c <MX_USB_DEVICE_Init+0x58>)
 800853e:	480e      	ldr	r0, [pc, #56]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008540:	f7fe ff80 	bl	8007444 <USBD_RegisterClass>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800854a:	f7f8 f805 	bl	8000558 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800854e:	490c      	ldr	r1, [pc, #48]	; (8008580 <MX_USB_DEVICE_Init+0x5c>)
 8008550:	4809      	ldr	r0, [pc, #36]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe feb1 	bl	80072b8 <USBD_CDC_RegisterInterface>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800855c:	f7f7 fffc 	bl	8000558 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008560:	4805      	ldr	r0, [pc, #20]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe ff88 	bl	8007476 <USBD_Start>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800856c:	f7f7 fff4 	bl	8000558 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008570:	bf00      	nop
 8008572:	bd80      	pop	{r7, pc}
 8008574:	2000012c 	.word	0x2000012c
 8008578:	20000338 	.word	0x20000338
 800857c:	20000018 	.word	0x20000018
 8008580:	2000011c 	.word	0x2000011c

08008584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008588:	2200      	movs	r2, #0
 800858a:	4905      	ldr	r1, [pc, #20]	; (80085a0 <CDC_Init_FS+0x1c>)
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <CDC_Init_FS+0x20>)
 800858e:	f7fe fea9 	bl	80072e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008592:	4905      	ldr	r1, [pc, #20]	; (80085a8 <CDC_Init_FS+0x24>)
 8008594:	4803      	ldr	r0, [pc, #12]	; (80085a4 <CDC_Init_FS+0x20>)
 8008596:	f7fe febe 	bl	8007316 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800859a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800859c:	4618      	mov	r0, r3
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	200006fc 	.word	0x200006fc
 80085a4:	20000338 	.word	0x20000338
 80085a8:	200005fc 	.word	0x200005fc

080085ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
	...

080085bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b23      	cmp	r3, #35	; 0x23
 80085d0:	f200 808c 	bhi.w	80086ec <CDC_Control_FS+0x130>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <CDC_Control_FS+0x20>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	080086ed 	.word	0x080086ed
 80085e0:	080086ed 	.word	0x080086ed
 80085e4:	080086ed 	.word	0x080086ed
 80085e8:	080086ed 	.word	0x080086ed
 80085ec:	080086ed 	.word	0x080086ed
 80085f0:	080086ed 	.word	0x080086ed
 80085f4:	080086ed 	.word	0x080086ed
 80085f8:	080086ed 	.word	0x080086ed
 80085fc:	080086ed 	.word	0x080086ed
 8008600:	080086ed 	.word	0x080086ed
 8008604:	080086ed 	.word	0x080086ed
 8008608:	080086ed 	.word	0x080086ed
 800860c:	080086ed 	.word	0x080086ed
 8008610:	080086ed 	.word	0x080086ed
 8008614:	080086ed 	.word	0x080086ed
 8008618:	080086ed 	.word	0x080086ed
 800861c:	080086ed 	.word	0x080086ed
 8008620:	080086ed 	.word	0x080086ed
 8008624:	080086ed 	.word	0x080086ed
 8008628:	080086ed 	.word	0x080086ed
 800862c:	080086ed 	.word	0x080086ed
 8008630:	080086ed 	.word	0x080086ed
 8008634:	080086ed 	.word	0x080086ed
 8008638:	080086ed 	.word	0x080086ed
 800863c:	080086ed 	.word	0x080086ed
 8008640:	080086ed 	.word	0x080086ed
 8008644:	080086ed 	.word	0x080086ed
 8008648:	080086ed 	.word	0x080086ed
 800864c:	080086ed 	.word	0x080086ed
 8008650:	080086ed 	.word	0x080086ed
 8008654:	080086ed 	.word	0x080086ed
 8008658:	080086ed 	.word	0x080086ed
 800865c:	0800866d 	.word	0x0800866d
 8008660:	080086a7 	.word	0x080086a7
 8008664:	080086ed 	.word	0x080086ed
 8008668:	080086ed 	.word	0x080086ed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781a      	ldrb	r2, [r3, #0]
 8008670:	4b22      	ldr	r3, [pc, #136]	; (80086fc <CDC_Control_FS+0x140>)
 8008672:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	785a      	ldrb	r2, [r3, #1]
 8008678:	4b20      	ldr	r3, [pc, #128]	; (80086fc <CDC_Control_FS+0x140>)
 800867a:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	789a      	ldrb	r2, [r3, #2]
 8008680:	4b1e      	ldr	r3, [pc, #120]	; (80086fc <CDC_Control_FS+0x140>)
 8008682:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	78da      	ldrb	r2, [r3, #3]
 8008688:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <CDC_Control_FS+0x140>)
 800868a:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	791a      	ldrb	r2, [r3, #4]
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <CDC_Control_FS+0x140>)
 8008692:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	795a      	ldrb	r2, [r3, #5]
 8008698:	4b18      	ldr	r3, [pc, #96]	; (80086fc <CDC_Control_FS+0x140>)
 800869a:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	799a      	ldrb	r2, [r3, #6]
 80086a0:	4b16      	ldr	r3, [pc, #88]	; (80086fc <CDC_Control_FS+0x140>)
 80086a2:	719a      	strb	r2, [r3, #6]

    break;
 80086a4:	e023      	b.n	80086ee <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <CDC_Control_FS+0x140>)
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	4a12      	ldr	r2, [pc, #72]	; (80086fc <CDC_Control_FS+0x140>)
 80086b4:	7852      	ldrb	r2, [r2, #1]
 80086b6:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	3302      	adds	r3, #2
 80086bc:	4a0f      	ldr	r2, [pc, #60]	; (80086fc <CDC_Control_FS+0x140>)
 80086be:	7892      	ldrb	r2, [r2, #2]
 80086c0:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	3303      	adds	r3, #3
 80086c6:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <CDC_Control_FS+0x140>)
 80086c8:	78d2      	ldrb	r2, [r2, #3]
 80086ca:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <CDC_Control_FS+0x140>)
 80086d2:	7912      	ldrb	r2, [r2, #4]
 80086d4:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	3305      	adds	r3, #5
 80086da:	4a08      	ldr	r2, [pc, #32]	; (80086fc <CDC_Control_FS+0x140>)
 80086dc:	7952      	ldrb	r2, [r2, #5]
 80086de:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3306      	adds	r3, #6
 80086e4:	4a05      	ldr	r2, [pc, #20]	; (80086fc <CDC_Control_FS+0x140>)
 80086e6:	7992      	ldrb	r2, [r2, #6]
 80086e8:	701a      	strb	r2, [r3, #0]
    break;
 80086ea:	e000      	b.n	80086ee <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086ec:	bf00      	nop
  }

  return (USBD_OK);
 80086ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	200007fc 	.word	0x200007fc

08008700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <CDC_Receive_FS+0x3c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <CDC_Receive_FS+0x3c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	6812      	ldr	r2, [r2, #0]
 800871a:	b292      	uxth	r2, r2
 800871c:	4611      	mov	r1, r2
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4806      	ldr	r0, [pc, #24]	; (8008740 <CDC_Receive_FS+0x40>)
 8008726:	f7fe fdf6 	bl	8007316 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800872a:	4805      	ldr	r0, [pc, #20]	; (8008740 <CDC_Receive_FS+0x40>)
 800872c:	f7fe fe35 	bl	800739a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008730:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000804 	.word	0x20000804
 8008740:	20000338 	.word	0x20000338

08008744 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008754:	4b0d      	ldr	r3, [pc, #52]	; (800878c <CDC_Transmit_FS+0x48>)
 8008756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008766:	2301      	movs	r3, #1
 8008768:	e00b      	b.n	8008782 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800876a:	887b      	ldrh	r3, [r7, #2]
 800876c:	461a      	mov	r2, r3
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4806      	ldr	r0, [pc, #24]	; (800878c <CDC_Transmit_FS+0x48>)
 8008772:	f7fe fdb7 	bl	80072e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <CDC_Transmit_FS+0x48>)
 8008778:	f7fe fde0 	bl	800733c <USBD_CDC_TransmitPacket>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000338 	.word	0x20000338

08008790 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008798:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <CDC_AttachRxData+0x18>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr
 80087a8:	20000804 	.word	0x20000804

080087ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2212      	movs	r2, #18
 80087bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	20000148 	.word	0x20000148

080087d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2204      	movs	r2, #4
 80087e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	2000015c 	.word	0x2000015c

080087f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4907      	ldr	r1, [pc, #28]	; (8008828 <USBD_FS_ProductStrDescriptor+0x34>)
 800880a:	4808      	ldr	r0, [pc, #32]	; (800882c <USBD_FS_ProductStrDescriptor+0x38>)
 800880c:	f7ff fdac 	bl	8008368 <USBD_GetString>
 8008810:	e004      	b.n	800881c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4904      	ldr	r1, [pc, #16]	; (8008828 <USBD_FS_ProductStrDescriptor+0x34>)
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <USBD_FS_ProductStrDescriptor+0x38>)
 8008818:	f7ff fda6 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000808 	.word	0x20000808
 800882c:	08008f8c 	.word	0x08008f8c

08008830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	4904      	ldr	r1, [pc, #16]	; (8008850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008840:	4804      	ldr	r0, [pc, #16]	; (8008854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008842:	f7ff fd91 	bl	8008368 <USBD_GetString>
  return USBD_StrDesc;
 8008846:	4b02      	ldr	r3, [pc, #8]	; (8008850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000808 	.word	0x20000808
 8008854:	08008fa4 	.word	0x08008fa4

08008858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	221a      	movs	r2, #26
 8008868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800886a:	f000 f843 	bl	80088f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800886e:	4b02      	ldr	r3, [pc, #8]	; (8008878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20000160 	.word	0x20000160

0800887c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4907      	ldr	r1, [pc, #28]	; (80088b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008892:	4808      	ldr	r0, [pc, #32]	; (80088b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008894:	f7ff fd68 	bl	8008368 <USBD_GetString>
 8008898:	e004      	b.n	80088a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4904      	ldr	r1, [pc, #16]	; (80088b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800889e:	4805      	ldr	r0, [pc, #20]	; (80088b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088a0:	f7ff fd62 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000808 	.word	0x20000808
 80088b4:	08008fb8 	.word	0x08008fb8

080088b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4907      	ldr	r1, [pc, #28]	; (80088ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ce:	4808      	ldr	r0, [pc, #32]	; (80088f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088d0:	f7ff fd4a 	bl	8008368 <USBD_GetString>
 80088d4:	e004      	b.n	80088e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4904      	ldr	r1, [pc, #16]	; (80088ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088dc:	f7ff fd44 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e0:	4b02      	ldr	r3, [pc, #8]	; (80088ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000808 	.word	0x20000808
 80088f0:	08008fc4 	.word	0x08008fc4

080088f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <Get_SerialNum+0x44>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <Get_SerialNum+0x48>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008906:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <Get_SerialNum+0x4c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800891a:	2208      	movs	r2, #8
 800891c:	4909      	ldr	r1, [pc, #36]	; (8008944 <Get_SerialNum+0x50>)
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 f814 	bl	800894c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008924:	2204      	movs	r2, #4
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <Get_SerialNum+0x54>)
 8008928:	68b8      	ldr	r0, [r7, #8]
 800892a:	f000 f80f 	bl	800894c <IntToUnicode>
  }
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	1ffff7e8 	.word	0x1ffff7e8
 800893c:	1ffff7ec 	.word	0x1ffff7ec
 8008940:	1ffff7f0 	.word	0x1ffff7f0
 8008944:	20000162 	.word	0x20000162
 8008948:	20000172 	.word	0x20000172

0800894c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800895e:	2300      	movs	r3, #0
 8008960:	75fb      	strb	r3, [r7, #23]
 8008962:	e027      	b.n	80089b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	0f1b      	lsrs	r3, r3, #28
 8008968:	2b09      	cmp	r3, #9
 800896a:	d80b      	bhi.n	8008984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	0f1b      	lsrs	r3, r3, #28
 8008970:	b2da      	uxtb	r2, r3
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4619      	mov	r1, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	440b      	add	r3, r1
 800897c:	3230      	adds	r2, #48	; 0x30
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	e00a      	b.n	800899a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	0f1b      	lsrs	r3, r3, #28
 8008988:	b2da      	uxtb	r2, r3
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4619      	mov	r1, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	440b      	add	r3, r1
 8008994:	3237      	adds	r2, #55	; 0x37
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	3301      	adds	r3, #1
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	4413      	add	r3, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	3301      	adds	r3, #1
 80089b2:	75fb      	strb	r3, [r7, #23]
 80089b4:	7dfa      	ldrb	r2, [r7, #23]
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3d3      	bcc.n	8008964 <IntToUnicode+0x18>
  }
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <HAL_PCD_MspInit+0x44>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d113      	bne.n	8008a02 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <HAL_PCD_MspInit+0x48>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4a0c      	ldr	r2, [pc, #48]	; (8008a10 <HAL_PCD_MspInit+0x48>)
 80089e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089e4:	61d3      	str	r3, [r2, #28]
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <HAL_PCD_MspInit+0x48>)
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	2014      	movs	r0, #20
 80089f8:	f7f8 f82f 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80089fc:	2014      	movs	r0, #20
 80089fe:	f7f8 f848 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40005c00 	.word	0x40005c00
 8008a10:	40021000 	.word	0x40021000

08008a14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7fe fd6b 	bl	8007506 <USBD_LL_SetupStage>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7fe fd9d 	bl	80075a0 <USBD_LL_DataOutStage>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	440b      	add	r3, r1
 8008a8e:	333c      	adds	r3, #60	; 0x3c
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	4619      	mov	r1, r3
 8008a96:	f7fe fdf4 	bl	8007682 <USBD_LL_DataInStage>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe ff04 	bl	80078be <USBD_LL_SOF>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d001      	beq.n	8008ad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ad2:	f7f7 fd41 	bl	8000558 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008adc:	7bfa      	ldrb	r2, [r7, #15]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe feb4 	bl	800784e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fe6d 	bl	80077cc <USBD_LL_Reset>
}
 8008af2:	bf00      	nop
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe feae 	bl	800786c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <HAL_PCD_SuspendCallback+0x30>)
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	4a03      	ldr	r2, [pc, #12]	; (8008b2c <HAL_PCD_SuspendCallback+0x30>)
 8008b1e:	f043 0306 	orr.w	r3, r3, #6
 8008b22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fea8 	bl	8007894 <USBD_LL_Resume>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b54:	4a28      	ldr	r2, [pc, #160]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a26      	ldr	r2, [pc, #152]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b64:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b66:	4a25      	ldr	r2, [pc, #148]	; (8008bfc <USBD_LL_Init+0xb0>)
 8008b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b6a:	4b23      	ldr	r3, [pc, #140]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b70:	4b21      	ldr	r3, [pc, #132]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b72:	2202      	movs	r2, #2
 8008b74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b76:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b7c:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b82:	4b1d      	ldr	r3, [pc, #116]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b88:	481b      	ldr	r0, [pc, #108]	; (8008bf8 <USBD_LL_Init+0xac>)
 8008b8a:	f7f8 fa04 	bl	8000f96 <HAL_PCD_Init>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b94:	f7f7 fce0 	bl	8000558 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b9e:	2318      	movs	r3, #24
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	f7f9 ff23 	bl	80029ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bae:	2358      	movs	r3, #88	; 0x58
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2180      	movs	r1, #128	; 0x80
 8008bb4:	f7f9 ff1b 	bl	80029ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bbe:	23c0      	movs	r3, #192	; 0xc0
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2181      	movs	r1, #129	; 0x81
 8008bc4:	f7f9 ff13 	bl	80029ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bce:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	f7f9 ff0a 	bl	80029ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be4:	2200      	movs	r2, #0
 8008be6:	2182      	movs	r1, #130	; 0x82
 8008be8:	f7f9 ff01 	bl	80029ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000a08 	.word	0x20000a08
 8008bfc:	40005c00 	.word	0x40005c00

08008c00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f8 fabc 	bl	8001194 <HAL_PCD_Start>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f94e 	bl	8008ec4 <USBD_Get_USB_Status>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	4608      	mov	r0, r1
 8008c40:	4611      	mov	r1, r2
 8008c42:	461a      	mov	r2, r3
 8008c44:	4603      	mov	r3, r0
 8008c46:	70fb      	strb	r3, [r7, #3]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70bb      	strb	r3, [r7, #2]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c5e:	78bb      	ldrb	r3, [r7, #2]
 8008c60:	883a      	ldrh	r2, [r7, #0]
 8008c62:	78f9      	ldrb	r1, [r7, #3]
 8008c64:	f7f8 fc11 	bl	800148a <HAL_PCD_EP_Open>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f928 	bl	8008ec4 <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f8 fc4f 	bl	8001544 <HAL_PCD_EP_Close>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f909 	bl	8008ec4 <USBD_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f8 fcf7 	bl	80016d2 <HAL_PCD_EP_SetStall>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f8ea 	bl	8008ec4 <USBD_Get_USB_Status>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f8 fd38 	bl	8001792 <HAL_PCD_EP_ClrStall>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f8cb 	bl	8008ec4 <USBD_Get_USB_Status>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da0c      	bge.n	8008d72 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	e00b      	b.n	8008d8a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d78:	68f9      	ldr	r1, [r7, #12]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	440b      	add	r3, r1
 8008d84:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d88:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f8 fb44 	bl	8001440 <HAL_PCD_SetAddress>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f880 	bl	8008ec4 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	460b      	mov	r3, r1
 8008de0:	72fb      	strb	r3, [r7, #11]
 8008de2:	4613      	mov	r3, r2
 8008de4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008df4:	893b      	ldrh	r3, [r7, #8]
 8008df6:	7af9      	ldrb	r1, [r7, #11]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	f7f8 fc33 	bl	8001664 <HAL_PCD_EP_Transmit>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f85d 	bl	8008ec4 <USBD_Get_USB_Status>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	461a      	mov	r2, r3
 8008e24:	460b      	mov	r3, r1
 8008e26:	72fb      	strb	r3, [r7, #11]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e3a:	893b      	ldrh	r3, [r7, #8]
 8008e3c:	7af9      	ldrb	r1, [r7, #11]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	f7f8 fbc8 	bl	80015d4 <HAL_PCD_EP_Receive>
 8008e44:	4603      	mov	r3, r0
 8008e46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f83a 	bl	8008ec4 <USBD_Get_USB_Status>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e54:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f8 fbde 	bl	8001636 <HAL_PCD_EP_GetRxCount>
 8008e7a:	4603      	mov	r3, r0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_static_malloc+0x14>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr
 8008e98:	20000cf8 	.word	0x20000cf8

08008e9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]

}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr

08008eae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d817      	bhi.n	8008f08 <USBD_Get_USB_Status+0x44>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USBD_Get_USB_Status+0x1c>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef7 	.word	0x08008ef7
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f03 	.word	0x08008f03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	e00b      	b.n	8008f0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8008efa:	e008      	b.n	8008f0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e005      	b.n	8008f0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f02:	2302      	movs	r3, #2
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e002      	b.n	8008f0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	bf00      	nop
  }
  return usb_status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop

08008f1c <memset>:
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4402      	add	r2, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	2600      	movs	r6, #0
 8008f30:	4d0c      	ldr	r5, [pc, #48]	; (8008f64 <__libc_init_array+0x38>)
 8008f32:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f34:	1b64      	subs	r4, r4, r5
 8008f36:	10a4      	asrs	r4, r4, #2
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	f000 f81a 	bl	8008f74 <_init>
 8008f40:	2600      	movs	r6, #0
 8008f42:	4d0a      	ldr	r5, [pc, #40]	; (8008f6c <__libc_init_array+0x40>)
 8008f44:	4c0a      	ldr	r4, [pc, #40]	; (8008f70 <__libc_init_array+0x44>)
 8008f46:	1b64      	subs	r4, r4, r5
 8008f48:	10a4      	asrs	r4, r4, #2
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	08009000 	.word	0x08009000
 8008f68:	08009000 	.word	0x08009000
 8008f6c:	08009000 	.word	0x08009000
 8008f70:	08009004 	.word	0x08009004

08008f74 <_init>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr

08008f80 <_fini>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr
