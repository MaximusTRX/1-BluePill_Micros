
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a988  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800aa94  0800aa94  0000ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab08  0800ab08  0000cc04  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab08  0800ab08  0000cc04  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab08  0800ab08  0000cc04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab08  0800ab08  0000bb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800ab10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .configeeprom 00000004  0800fc00  0800fc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000012a0  20000180  20000180  0000d180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001420  20001420  0000d180  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000cc04  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193d0  00000000  00000000  0000cc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb2  00000000  00000000  00025ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00029bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001192  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5c2  00000000  00000000  0002c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2d1  00000000  00000000  00047994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096941  00000000  00000000  00064c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb5a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f2c  00000000  00000000  000fb5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00101518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aa7c 	.word	0x0800aa7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800aa7c 	.word	0x0800aa7c

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0[ir.count] = bufADC[0];
 8000154:	4b34      	ldr	r3, [pc, #208]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	4618      	mov	r0, r3
 800015a:	4b34      	ldr	r3, [pc, #208]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 800015c:	8819      	ldrh	r1, [r3, #0]
 800015e:	4a32      	ldr	r2, [pc, #200]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000160:	0043      	lsls	r3, r0, #1
 8000162:	4413      	add	r3, r2
 8000164:	460a      	mov	r2, r1
 8000166:	805a      	strh	r2, [r3, #2]
	ir.sensor1[ir.count] = bufADC[1];
 8000168:	4b2f      	ldr	r3, [pc, #188]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	4618      	mov	r0, r3
 800016e:	4b2f      	ldr	r3, [pc, #188]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000170:	8859      	ldrh	r1, [r3, #2]
 8000172:	4a2d      	ldr	r2, [pc, #180]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000174:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 8000178:	005b      	lsls	r3, r3, #1
 800017a:	4413      	add	r3, r2
 800017c:	460a      	mov	r2, r1
 800017e:	805a      	strh	r2, [r3, #2]
	ir.sensor2[ir.count] = bufADC[2];
 8000180:	4b29      	ldr	r3, [pc, #164]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	4b29      	ldr	r3, [pc, #164]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000188:	8899      	ldrh	r1, [r3, #4]
 800018a:	4a27      	ldr	r2, [pc, #156]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 800018c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	805a      	strh	r2, [r3, #2]
	ir.sensor3[ir.count] = bufADC[3];
 8000198:	4b23      	ldr	r3, [pc, #140]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	4b23      	ldr	r3, [pc, #140]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 80001a0:	88d9      	ldrh	r1, [r3, #6]
 80001a2:	4a21      	ldr	r2, [pc, #132]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001a4:	f100 0378 	add.w	r3, r0, #120	@ 0x78
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	4413      	add	r3, r2
 80001ac:	460a      	mov	r2, r1
 80001ae:	805a      	strh	r2, [r3, #2]
	ir.sensor4[ir.count] = bufADC[4];
 80001b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	4618      	mov	r0, r3
 80001b6:	4b1d      	ldr	r3, [pc, #116]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 80001b8:	8919      	ldrh	r1, [r3, #8]
 80001ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001bc:	f100 03a0 	add.w	r3, r0, #160	@ 0xa0
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	4413      	add	r3, r2
 80001c4:	460a      	mov	r2, r1
 80001c6:	805a      	strh	r2, [r3, #2]
	ir.sensor5[ir.count] = bufADC[5];
 80001c8:	4b17      	ldr	r3, [pc, #92]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	4b17      	ldr	r3, [pc, #92]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 80001d0:	8959      	ldrh	r1, [r3, #10]
 80001d2:	4a15      	ldr	r2, [pc, #84]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001d4:	f100 03c8 	add.w	r3, r0, #200	@ 0xc8
 80001d8:	005b      	lsls	r3, r3, #1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	805a      	strh	r2, [r3, #2]
	ir.sensor6[ir.count] = bufADC[6];
 80001e0:	4b11      	ldr	r3, [pc, #68]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	4b11      	ldr	r3, [pc, #68]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 80001e8:	8999      	ldrh	r1, [r3, #12]
 80001ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001ec:	f100 03f0 	add.w	r3, r0, #240	@ 0xf0
 80001f0:	005b      	lsls	r3, r3, #1
 80001f2:	4413      	add	r3, r2
 80001f4:	460a      	mov	r2, r1
 80001f6:	805a      	strh	r2, [r3, #2]
	ir.sensor7[ir.count] = bufADC[7];
 80001f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	4b0b      	ldr	r3, [pc, #44]	@ (800022c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000200:	89d9      	ldrh	r1, [r3, #14]
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000204:	f500 738c 	add.w	r3, r0, #280	@ 0x118
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	805a      	strh	r2, [r3, #2]

	ir.count++;
 8000210:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <HAL_ADC_ConvCpltCallback+0xdc>)
 800021a:	701a      	strb	r2, [r3, #0]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	200003ac 	.word	0x200003ac
 800022c:	20000824 	.word	0x20000824

08000230 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {	//Entra cada 250us, 1ms= x4, 10ms= x40, 100ms= x400
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2a      	ldr	r2, [pc, #168]	@ (80002e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d14c      	bne.n	80002dc <HAL_TIM_PeriodElapsedCallback+0xac>
		flags1.F250US = 1;
 8000242:	4a2a      	ldr	r2, [pc, #168]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000244:	7813      	ldrb	r3, [r2, #0]
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	7013      	strb	r3, [r2, #0]

		t10ms--;
 800024c:	4b28      	ldr	r3, [pc, #160]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b26      	ldr	r3, [pc, #152]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000256:	701a      	strb	r2, [r3, #0]

		if(t10ms == 0){
 8000258:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d119      	bne.n	8000294 <HAL_TIM_PeriodElapsedCallback+0x64>
			flags1.F10MS = 1;
 8000260:	4a22      	ldr	r2, [pc, #136]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000262:	7813      	ldrb	r3, [r2, #0]
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	7013      	strb	r3, [r2, #0]
			t10ms = TIME10ms;
 800026a:	4b21      	ldr	r3, [pc, #132]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800026c:	2228      	movs	r2, #40	@ 0x28
 800026e:	701a      	strb	r2, [r3, #0]

			t100ms--;
 8000270:	4b20      	ldr	r3, [pc, #128]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b1e      	ldr	r3, [pc, #120]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800027a:	701a      	strb	r2, [r3, #0]
			t500ms--;
 800027c:	4b1e      	ldr	r3, [pc, #120]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	3b01      	subs	r3, #1
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b1c      	ldr	r3, [pc, #112]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000286:	701a      	strb	r2, [r3, #0]
			t1seg--;
 8000288:	4b1c      	ldr	r3, [pc, #112]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000292:	701a      	strb	r2, [r3, #0]
		}

		if(t100ms == 0){
 8000294:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d107      	bne.n	80002ac <HAL_TIM_PeriodElapsedCallback+0x7c>
			flags1.F100MS = 1;
 800029c:	4a13      	ldr	r2, [pc, #76]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800029e:	7813      	ldrb	r3, [r2, #0]
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	7013      	strb	r3, [r2, #0]
			t100ms = TIME100ms;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80002a8:	220a      	movs	r2, #10
 80002aa:	701a      	strb	r2, [r3, #0]
		}

		if(t500ms == 0){
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d107      	bne.n	80002c4 <HAL_TIM_PeriodElapsedCallback+0x94>
			flags1.F500MS = 1;
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80002b6:	7813      	ldrb	r3, [r2, #0]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	7013      	strb	r3, [r2, #0]
			t500ms = TIME500ms;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002c0:	2232      	movs	r2, #50	@ 0x32
 80002c2:	701a      	strb	r2, [r3, #0]
		}

		if (t1seg == 0) {
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <HAL_TIM_PeriodElapsedCallback+0xac>
			flags1.F1SEG = 1;
 80002cc:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80002ce:	7813      	ldrb	r3, [r2, #0]
 80002d0:	f043 0310 	orr.w	r3, r3, #16
 80002d4:	7013      	strb	r3, [r2, #0]
			t1seg = 100;
 80002d6:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80002d8:	2264      	movs	r2, #100	@ 0x64
 80002da:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40012c00 	.word	0x40012c00
 80002ec:	200003a8 	.word	0x200003a8
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000001 	.word	0x20000001
 80002f8:	20000002 	.word	0x20000002
 80002fc:	20000003 	.word	0x20000003

08000300 <HAL_UART_RxCpltCallback>:

/*=============>Recepción de datos desde USART<=============
 * Interrupción que es llamada cuando se produce una recepción de datos.
 * Cargo los datos recibidos al Buffer de Recepción
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <HAL_UART_RxCpltCallback+0x38>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d10d      	bne.n	800032e <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 8000312:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <HAL_UART_RxCpltCallback+0x3c>)
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	b2d1      	uxtb	r1, r2
 800031a:	4a08      	ldr	r2, [pc, #32]	@ (800033c <HAL_UART_RxCpltCallback+0x3c>)
 800031c:	7111      	strb	r1, [r2, #4]
 800031e:	3308      	adds	r3, #8
 8000320:	4a06      	ldr	r2, [pc, #24]	@ (800033c <HAL_UART_RxCpltCallback+0x3c>)
 8000322:	4413      	add	r3, r2
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	@ (8000340 <HAL_UART_RxCpltCallback+0x40>)
 800032a:	f005 fa41 	bl	80057b0 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40013800 	.word	0x40013800
 800033c:	200001a0 	.word	0x200001a0
 8000340:	200007dc 	.word	0x200007dc

08000344 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00c      	b.n	8000370 <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	4a09      	ldr	r2, [pc, #36]	@ (8000384 <USBReceive+0x40>)
 800035e:	7912      	ldrb	r2, [r2, #4]
 8000360:	4611      	mov	r1, r2
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <USBReceive+0x40>)
 8000366:	440b      	add	r3, r1
 8000368:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	887b      	ldrh	r3, [r7, #2]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbee      	blt.n	8000356 <USBReceive+0x12>
	}


}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	200001a0 	.word	0x200001a0

08000388 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000390:	e0e3      	b.n	800055a <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 8000392:	4b78      	ldr	r3, [pc, #480]	@ (8000574 <decodeProtocol+0x1ec>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b06      	cmp	r3, #6
 8000398:	f200 80d8 	bhi.w	800054c <decodeProtocol+0x1c4>
 800039c:	a201      	add	r2, pc, #4	@ (adr r2, 80003a4 <decodeProtocol+0x1c>)
 800039e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a2:	bf00      	nop
 80003a4:	080003c1 	.word	0x080003c1
 80003a8:	080003e9 	.word	0x080003e9
 80003ac:	0800041d 	.word	0x0800041d
 80003b0:	08000451 	.word	0x08000451
 80003b4:	08000485 	.word	0x08000485
 80003b8:	080004ad 	.word	0x080004ad
 80003bc:	080004ef 	.word	0x080004ef
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	1c5a      	adds	r2, r3, #1
 80003c6:	b2d1      	uxtb	r1, r2
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7151      	strb	r1, [r2, #5]
 80003cc:	461a      	mov	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	2b55      	cmp	r3, #85	@ 0x55
 80003d6:	f040 80bd 	bne.w	8000554 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 80003da:	4b66      	ldr	r3, [pc, #408]	@ (8000574 <decodeProtocol+0x1ec>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	709a      	strb	r2, [r3, #2]
			}
			break;
 80003e6:	e0b5      	b.n	8000554 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	7151      	strb	r1, [r2, #5]
 80003f4:	461a      	mov	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	7a1b      	ldrb	r3, [r3, #8]
 80003fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80003fe:	d103      	bne.n	8000408 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 8000400:	4b5c      	ldr	r3, [pc, #368]	@ (8000574 <decodeProtocol+0x1ec>)
 8000402:	2202      	movs	r2, #2
 8000404:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000406:	e0a8      	b.n	800055a <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	795b      	ldrb	r3, [r3, #5]
 800040c:	3b01      	subs	r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000414:	4b57      	ldr	r3, [pc, #348]	@ (8000574 <decodeProtocol+0x1ec>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
			break;
 800041a:	e09e      	b.n	800055a <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	795b      	ldrb	r3, [r3, #5]
 8000420:	1c5a      	adds	r2, r3, #1
 8000422:	b2d1      	uxtb	r1, r2
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7151      	strb	r1, [r2, #5]
 8000428:	461a      	mov	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	7a1b      	ldrb	r3, [r3, #8]
 8000430:	2b45      	cmp	r3, #69	@ 0x45
 8000432:	d103      	bne.n	800043c <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000434:	4b4f      	ldr	r3, [pc, #316]	@ (8000574 <decodeProtocol+0x1ec>)
 8000436:	2203      	movs	r2, #3
 8000438:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800043a:	e08e      	b.n	800055a <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	3b01      	subs	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000448:	4b4a      	ldr	r3, [pc, #296]	@ (8000574 <decodeProtocol+0x1ec>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
			break;
 800044e:	e084      	b.n	800055a <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	b2d1      	uxtb	r1, r2
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7151      	strb	r1, [r2, #5]
 800045c:	461a      	mov	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	7a1b      	ldrb	r3, [r3, #8]
 8000464:	2b52      	cmp	r3, #82	@ 0x52
 8000466:	d103      	bne.n	8000470 <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000468:	4b42      	ldr	r3, [pc, #264]	@ (8000574 <decodeProtocol+0x1ec>)
 800046a:	2204      	movs	r2, #4
 800046c:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800046e:	e074      	b.n	800055a <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	3b01      	subs	r3, #1
 8000476:	b2da      	uxtb	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 800047c:	4b3d      	ldr	r3, [pc, #244]	@ (8000574 <decodeProtocol+0x1ec>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
			break;
 8000482:	e06a      	b.n	800055a <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795a      	ldrb	r2, [r3, #5]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	b2d1      	uxtb	r1, r2
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7151      	strb	r1, [r2, #5]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	7a1a      	ldrb	r2, [r3, #8]
 80004a0:	4b35      	ldr	r3, [pc, #212]	@ (8000578 <decodeProtocol+0x1f0>)
 80004a2:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 80004a4:	4b33      	ldr	r3, [pc, #204]	@ (8000574 <decodeProtocol+0x1ec>)
 80004a6:	2205      	movs	r2, #5
 80004a8:	701a      	strb	r2, [r3, #0]
			break;
 80004aa:	e056      	b.n	800055a <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	b2d1      	uxtb	r1, r2
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	7151      	strb	r1, [r2, #5]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	7a1b      	ldrb	r3, [r3, #8]
 80004c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80004c2:	d10a      	bne.n	80004da <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <decodeProtocol+0x1ec>)
 80004c6:	2206      	movs	r2, #6
 80004c8:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80004ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000578 <decodeProtocol+0x1f0>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80004d8:	e03f      	b.n	800055a <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	3b01      	subs	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 80004e6:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <decodeProtocol+0x1ec>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
			break;
 80004ec:	e035      	b.n	800055a <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 80004ee:	4b22      	ldr	r3, [pc, #136]	@ (8000578 <decodeProtocol+0x1f0>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d90f      	bls.n	8000516 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	b2d1      	uxtb	r1, r2
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7151      	strb	r1, [r2, #5]
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	7a1a      	ldrb	r2, [r3, #8]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	789b      	ldrb	r3, [r3, #2]
 800050e:	4053      	eors	r3, r2
 8000510:	b2da      	uxtb	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <decodeProtocol+0x1f0>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <decodeProtocol+0x1f0>)
 8000520:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <decodeProtocol+0x1f0>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d116      	bne.n	8000558 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <decodeProtocol+0x1ec>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	789a      	ldrb	r2, [r3, #2]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	4619      	mov	r1, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	440b      	add	r3, r1
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	429a      	cmp	r2, r3
 8000542:	d109      	bne.n	8000558 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f819 	bl	800057c <decodeData>
				}
			}
			break;
 800054a:	e005      	b.n	8000558 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <decodeProtocol+0x1ec>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
			break;
 8000552:	e002      	b.n	800055a <decodeProtocol+0x1d2>
			break;
 8000554:	bf00      	nop
 8000556:	e000      	b.n	800055a <decodeProtocol+0x1d2>
			break;
 8000558:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795a      	ldrb	r2, [r3, #5]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	f47f af15 	bne.w	8000392 <decodeProtocol+0xa>
		}
	}

}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000019c 	.word	0x2000019c
 8000578:	20000834 	.word	0x20000834

0800057c <decodeData>:

void decodeData(_sDato *datosCom){
 800057c:	b480      	push	{r7}
 800057e:	b091      	sub	sp, #68	@ 0x44
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000584:	2300      	movs	r3, #0
 8000586:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 800058a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000594:	3340      	adds	r3, #64	@ 0x40
 8000596:	443b      	add	r3, r7
 8000598:	2255      	movs	r2, #85	@ 0x55
 800059a:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 800059e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005a8:	3340      	adds	r3, #64	@ 0x40
 80005aa:	443b      	add	r3, r7
 80005ac:	224e      	movs	r2, #78	@ 0x4e
 80005ae:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80005b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005bc:	3340      	adds	r3, #64	@ 0x40
 80005be:	443b      	add	r3, r7
 80005c0:	2245      	movs	r2, #69	@ 0x45
 80005c2:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80005c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005d0:	3340      	adds	r3, #64	@ 0x40
 80005d2:	443b      	add	r3, r7
 80005d4:	2252      	movs	r2, #82	@ 0x52
 80005d6:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 80005da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005e4:	3340      	adds	r3, #64	@ 0x40
 80005e6:	443b      	add	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 80005ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80005f8:	3340      	adds	r3, #64	@ 0x40
 80005fa:	443b      	add	r3, r7
 80005fc:	223a      	movs	r2, #58	@ 0x3a
 80005fe:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	3302      	adds	r3, #2
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	7a1b      	ldrb	r3, [r3, #8]
 800060e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000610:	d116      	bne.n	8000640 <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 8000612:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800061c:	3340      	adds	r3, #64	@ 0x40
 800061e:	443b      	add	r3, r7
 8000620:	22f0      	movs	r2, #240	@ 0xf0
 8000622:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 8000626:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000630:	3340      	adds	r3, #64	@ 0x40
 8000632:	443b      	add	r3, r7
 8000634:	220d      	movs	r2, #13
 8000636:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 800063a:	2303      	movs	r3, #3
 800063c:	733b      	strb	r3, [r7, #12]
			break;
 800063e:	e00c      	b.n	800065a <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000640:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800064a:	3340      	adds	r3, #64	@ 0x40
 800064c:	443b      	add	r3, r7
 800064e:	22dd      	movs	r2, #221	@ 0xdd
 8000650:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000654:	2302      	movs	r3, #2
 8000656:	733b      	strb	r3, [r7, #12]
			break;
 8000658:	bf00      	nop
	}

	cheksum=0;
 800065a:	2300      	movs	r3, #0
 800065c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 8000660:	2300      	movs	r3, #0
 8000662:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000666:	e021      	b.n	80006ac <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000668:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800066c:	3340      	adds	r3, #64	@ 0x40
 800066e:	443b      	add	r3, r7
 8000670:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000674:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000678:	4053      	eors	r3, r2
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800067e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <decodeData+0x160>)
 8000684:	799b      	ldrb	r3, [r3, #6]
 8000686:	1c59      	adds	r1, r3, #1
 8000688:	b2c8      	uxtb	r0, r1
 800068a:	4914      	ldr	r1, [pc, #80]	@ (80006dc <decodeData+0x160>)
 800068c:	7188      	strb	r0, [r1, #6]
 800068e:	4619      	mov	r1, r3
 8000690:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8000694:	443b      	add	r3, r7
 8000696:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	440b      	add	r3, r1
 800069e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80006a2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80006a6:	3301      	adds	r3, #1
 80006a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80006ac:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80006b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3d7      	bcc.n	8000668 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <decodeData+0x160>)
 80006ba:	799b      	ldrb	r3, [r3, #6]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	b2d1      	uxtb	r1, r2
 80006c0:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <decodeData+0x160>)
 80006c2:	7191      	strb	r1, [r2, #6]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80006ce:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 80006d2:	bf00      	nop
 80006d4:	3744      	adds	r7, #68	@ 0x44
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	200001a0 	.word	0x200001a0

080006e0 <encodeData>:

void encodeData(uint8_t id){
 80006e0:	b480      	push	{r7}
 80006e2:	b091      	sub	sp, #68	@ 0x44
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80006f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006fa:	3340      	adds	r3, #64	@ 0x40
 80006fc:	443b      	add	r3, r7
 80006fe:	2255      	movs	r2, #85	@ 0x55
 8000700:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000704:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800070e:	3340      	adds	r3, #64	@ 0x40
 8000710:	443b      	add	r3, r7
 8000712:	224e      	movs	r2, #78	@ 0x4e
 8000714:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000718:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000722:	3340      	adds	r3, #64	@ 0x40
 8000724:	443b      	add	r3, r7
 8000726:	2245      	movs	r2, #69	@ 0x45
 8000728:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 800072c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000736:	3340      	adds	r3, #64	@ 0x40
 8000738:	443b      	add	r3, r7
 800073a:	2252      	movs	r2, #82	@ 0x52
 800073c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 8000740:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800074a:	3340      	adds	r3, #64	@ 0x40
 800074c:	443b      	add	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000754:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800075e:	3340      	adds	r3, #64	@ 0x40
 8000760:	443b      	add	r3, r7
 8000762:	223a      	movs	r2, #58	@ 0x3a
 8000764:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2ba0      	cmp	r3, #160	@ 0xa0
 800076c:	f040 80dd 	bne.w	800092a <encodeData+0x24a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 8000770:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800077a:	3340      	adds	r3, #64	@ 0x40
 800077c:	443b      	add	r3, r7
 800077e:	22a0      	movs	r2, #160	@ 0xa0
 8000780:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 8000784:	2312      	movs	r3, #18
 8000786:	733b      	strb	r3, [r7, #12]

		//myWord.ui16[0] = ir.sensor0;
		//myWord.ui32 = ir.sensor0;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000788:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000792:	4619      	mov	r1, r3
 8000794:	4b8c      	ldr	r3, [pc, #560]	@ (80009c8 <encodeData+0x2e8>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800079c:	443b      	add	r3, r7
 800079e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007ac:	4619      	mov	r1, r3
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <encodeData+0x2e8>)
 80007b0:	785a      	ldrb	r2, [r3, #1]
 80007b2:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007b6:	443b      	add	r3, r7
 80007b8:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor1;
		//myWord.ui32 = ir.sensor1;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c6:	4619      	mov	r1, r3
 80007c8:	4b7f      	ldr	r3, [pc, #508]	@ (80009c8 <encodeData+0x2e8>)
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007d0:	443b      	add	r3, r7
 80007d2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e0:	4619      	mov	r1, r3
 80007e2:	4b79      	ldr	r3, [pc, #484]	@ (80009c8 <encodeData+0x2e8>)
 80007e4:	785a      	ldrb	r2, [r3, #1]
 80007e6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ea:	443b      	add	r3, r7
 80007ec:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor2;
		//myWord.ui32 = ir.sensor2;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007fa:	4619      	mov	r1, r3
 80007fc:	4b72      	ldr	r3, [pc, #456]	@ (80009c8 <encodeData+0x2e8>)
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000804:	443b      	add	r3, r7
 8000806:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800080a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000814:	4619      	mov	r1, r3
 8000816:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <encodeData+0x2e8>)
 8000818:	785a      	ldrb	r2, [r3, #1]
 800081a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800081e:	443b      	add	r3, r7
 8000820:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor3;
		//myWord.ui32 = ir.sensor3;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000824:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800082e:	4619      	mov	r1, r3
 8000830:	4b65      	ldr	r3, [pc, #404]	@ (80009c8 <encodeData+0x2e8>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000838:	443b      	add	r3, r7
 800083a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800083e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000848:	4619      	mov	r1, r3
 800084a:	4b5f      	ldr	r3, [pc, #380]	@ (80009c8 <encodeData+0x2e8>)
 800084c:	785a      	ldrb	r2, [r3, #1]
 800084e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000852:	443b      	add	r3, r7
 8000854:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor4;
		//myWord.ui32 = ir.sensor4;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000858:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000862:	4619      	mov	r1, r3
 8000864:	4b58      	ldr	r3, [pc, #352]	@ (80009c8 <encodeData+0x2e8>)
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800086c:	443b      	add	r3, r7
 800086e:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000872:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800087c:	4619      	mov	r1, r3
 800087e:	4b52      	ldr	r3, [pc, #328]	@ (80009c8 <encodeData+0x2e8>)
 8000880:	785a      	ldrb	r2, [r3, #1]
 8000882:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000886:	443b      	add	r3, r7
 8000888:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor5;
		//myWord.ui32 = ir.sensor5;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800088c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000896:	4619      	mov	r1, r3
 8000898:	4b4b      	ldr	r3, [pc, #300]	@ (80009c8 <encodeData+0x2e8>)
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008a0:	443b      	add	r3, r7
 80008a2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80008a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008b0:	4619      	mov	r1, r3
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <encodeData+0x2e8>)
 80008b4:	785a      	ldrb	r2, [r3, #1]
 80008b6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008ba:	443b      	add	r3, r7
 80008bc:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor6;
		//myWord.ui32 = ir.sensor6;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80008c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008ca:	4619      	mov	r1, r3
 80008cc:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <encodeData+0x2e8>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008d4:	443b      	add	r3, r7
 80008d6:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80008da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008e4:	4619      	mov	r1, r3
 80008e6:	4b38      	ldr	r3, [pc, #224]	@ (80009c8 <encodeData+0x2e8>)
 80008e8:	785a      	ldrb	r2, [r3, #1]
 80008ea:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80008ee:	443b      	add	r3, r7
 80008f0:	f803 2c38 	strb.w	r2, [r3, #-56]

		//myWord.ui16[0] = ir.sensor7;
		//myWord.ui32 = ir.sensor7;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80008f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008fe:	4619      	mov	r1, r3
 8000900:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <encodeData+0x2e8>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000908:	443b      	add	r3, r7
 800090a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800090e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000918:	4619      	mov	r1, r3
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <encodeData+0x2e8>)
 800091c:	785a      	ldrb	r2, [r3, #1]
 800091e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000922:	443b      	add	r3, r7
 8000924:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 8000928:	e00c      	b.n	8000944 <encodeData+0x264>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800092a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000934:	3340      	adds	r3, #64	@ 0x40
 8000936:	443b      	add	r3, r7
 8000938:	22dd      	movs	r2, #221	@ 0xdd
 800093a:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 800093e:	2302      	movs	r3, #2
 8000940:	733b      	strb	r3, [r7, #12]
			break;
 8000942:	bf00      	nop
	}
	cheksum=0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000950:	e021      	b.n	8000996 <encodeData+0x2b6>
	{
		cheksum ^= auxBuffTx[a];
 8000952:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000956:	3340      	adds	r3, #64	@ 0x40
 8000958:	443b      	add	r3, r7
 800095a:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800095e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000962:	4053      	eors	r3, r2
 8000964:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 8000968:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <encodeData+0x2ec>)
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	b2c8      	uxtb	r0, r1
 8000974:	4915      	ldr	r1, [pc, #84]	@ (80009cc <encodeData+0x2ec>)
 8000976:	7188      	strb	r0, [r1, #6]
 8000978:	4619      	mov	r1, r3
 800097a:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800097e:	443b      	add	r3, r7
 8000980:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <encodeData+0x2ec>)
 8000986:	440b      	add	r3, r1
 8000988:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800098c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000990:	3301      	adds	r3, #1
 8000992:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000996:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800099a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3d7      	bcc.n	8000952 <encodeData+0x272>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <encodeData+0x2ec>)
 80009a4:	799b      	ldrb	r3, [r3, #6]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	b2d1      	uxtb	r1, r2
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <encodeData+0x2ec>)
 80009ac:	7191      	strb	r1, [r2, #6]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <encodeData+0x2ec>)
 80009b2:	4413      	add	r3, r2
 80009b4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80009b8:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 80009bc:	bf00      	nop
 80009be:	3744      	adds	r7, #68	@ 0x44
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000680 	.word	0x20000680
 80009cc:	200001a0 	.word	0x200001a0

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fd77 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f8f5 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 fb07 	bl	8000ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e2:	f000 fae7 	bl	8000fb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009e6:	f000 fabb 	bl	8000f60 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009ea:	f009 fb1f 	bl	800a02c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009ee:	f000 f949 	bl	8000c84 <MX_ADC1_Init>
  MX_I2C2_Init();
 80009f2:	f000 f9e9 	bl	8000dc8 <MX_I2C2_Init>
  MX_TIM4_Init();
 80009f6:	f000 fa65 	bl	8000ec4 <MX_TIM4_Init>
  MX_TIM1_Init();
 80009fa:	f000 fa13 	bl	8000e24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80009fe:	4869      	ldr	r0, [pc, #420]	@ (8000ba4 <main+0x1d4>)
 8000a00:	f004 fad8 	bl	8004fb4 <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000a04:	4868      	ldr	r0, [pc, #416]	@ (8000ba8 <main+0x1d8>)
 8000a06:	f009 fc47 	bl	800a298 <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepión del Buffer de Recepción
 8000a0a:	4b68      	ldr	r3, [pc, #416]	@ (8000bac <main+0x1dc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepción
 8000a10:	4b66      	ldr	r3, [pc, #408]	@ (8000bac <main+0x1dc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000a16:	4b65      	ldr	r3, [pc, #404]	@ (8000bac <main+0x1dc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 8000a1c:	4b63      	ldr	r3, [pc, #396]	@ (8000bac <main+0x1dc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;
  ir.count = 0;
 8000a22:	4b63      	ldr	r3, [pc, #396]	@ (8000bb0 <main+0x1e0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 8000a28:	4b60      	ldr	r3, [pc, #384]	@ (8000bac <main+0x1dc>)
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	3308      	adds	r3, #8
 8000a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8000bac <main+0x1dc>)
 8000a30:	4413      	add	r3, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	485f      	ldr	r0, [pc, #380]	@ (8000bb4 <main+0x1e4>)
 8000a38:	f004 feba 	bl	80057b0 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	495e      	ldr	r1, [pc, #376]	@ (8000bb8 <main+0x1e8>)
 8000a40:	485e      	ldr	r0, [pc, #376]	@ (8000bbc <main+0x1ec>)
 8000a42:	f000 fe9f 	bl	8001784 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4c:	485c      	ldr	r0, [pc, #368]	@ (8000bc0 <main+0x1f0>)
 8000a4e:	f001 feb7 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a56:	f000 fd99 	bl	800158c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a60:	4857      	ldr	r0, [pc, #348]	@ (8000bc0 <main+0x1f0>)
 8000a62:	f001 fead 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a66:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a6a:	f000 fd8f 	bl	800158c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a74:	4852      	ldr	r0, [pc, #328]	@ (8000bc0 <main+0x1f0>)
 8000a76:	f001 fea3 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a7a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a7e:	f000 fd85 	bl	800158c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a88:	484d      	ldr	r0, [pc, #308]	@ (8000bc0 <main+0x1f0>)
 8000a8a:	f001 fe99 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a8e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a92:	f000 fd7b 	bl	800158c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9c:	4848      	ldr	r0, [pc, #288]	@ (8000bc0 <main+0x1f0>)
 8000a9e:	f001 fe8f 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000aa2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000aa6:	f000 fd71 	bl	800158c <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4843      	ldr	r0, [pc, #268]	@ (8000bc0 <main+0x1f0>)
 8000ab2:	f001 fe85 	bl	80027c0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flags1.F250US == 1){
 8000ab6:	4b43      	ldr	r3, [pc, #268]	@ (8000bc4 <main+0x1f4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <main+0x108>
		  flags1.F250US = 0;
 8000ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8000bc4 <main+0x1f4>)
 8000ac6:	7813      	ldrb	r3, [r2, #0]
 8000ac8:	f36f 0300 	bfc	r3, #0, #1
 8000acc:	7013      	strb	r3, [r2, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000ace:	2208      	movs	r2, #8
 8000ad0:	4939      	ldr	r1, [pc, #228]	@ (8000bb8 <main+0x1e8>)
 8000ad2:	483a      	ldr	r0, [pc, #232]	@ (8000bbc <main+0x1ec>)
 8000ad4:	f000 fe56 	bl	8001784 <HAL_ADC_Start_DMA>
	  }

	  if (flags1.F10MS == 1){
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc4 <main+0x1f4>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <main+0x126>
		  flags1.F10MS = 0;
 8000ae6:	4a37      	ldr	r2, [pc, #220]	@ (8000bc4 <main+0x1f4>)
 8000ae8:	7813      	ldrb	r3, [r2, #0]
 8000aea:	f36f 0341 	bfc	r3, #1, #1
 8000aee:	7013      	strb	r3, [r2, #0]
		  ir.count = 0;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <main+0x1e0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]

	  }

	  if(flags1.F100MS==1){
 8000af6:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <main+0x1f4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <main+0x13e>
		  flags1.F100MS = 0;
 8000b04:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc4 <main+0x1f4>)
 8000b06:	7813      	ldrb	r3, [r2, #0]
 8000b08:	f36f 0382 	bfc	r3, #2, #1
 8000b0c:	7013      	strb	r3, [r2, #0]
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS == 1) {
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <main+0x1f4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <main+0x160>
		  flags1.F500MS = 0;
 8000b1c:	4a29      	ldr	r2, [pc, #164]	@ (8000bc4 <main+0x1f4>)
 8000b1e:	7813      	ldrb	r3, [r2, #0]
 8000b20:	f36f 03c3 	bfc	r3, #3, #1
 8000b24:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2a:	4825      	ldr	r0, [pc, #148]	@ (8000bc0 <main+0x1f0>)
 8000b2c:	f001 fe60 	bl	80027f0 <HAL_GPIO_TogglePin>
	  }

	  if (flags1.F1SEG == 1) {
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <main+0x1f4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <main+0x17e>
		  flags1.F1SEG = 0;
 8000b3e:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <main+0x1f4>)
 8000b40:	7813      	ldrb	r3, [r2, #0]
 8000b42:	f36f 1304 	bfc	r3, #4, #1
 8000b46:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000b48:	20a0      	movs	r0, #160	@ 0xa0
 8000b4a:	f7ff fdc9 	bl	80006e0 <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <main+0x1dc>)
 8000b50:	795a      	ldrb	r2, [r3, #5]
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <main+0x1dc>)
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d002      	beq.n	8000b60 <main+0x190>
		  decodeProtocol(&datosComProtocol);
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <main+0x1dc>)
 8000b5c:	f7ff fc14 	bl	8000388 <decodeProtocol>
	  }

	  if(datosComProtocol.indexReadTx != datosComProtocol.indexWriteTx){
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <main+0x1dc>)
 8000b62:	79da      	ldrb	r2, [r3, #7]
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <main+0x1dc>)
 8000b66:	799b      	ldrb	r3, [r3, #6]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d0a4      	beq.n	8000ab6 <main+0xe6>
		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <main+0x1dc>)
 8000b6e:	799a      	ldrb	r2, [r3, #6]
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <main+0x1dc>)
 8000b72:	79db      	ldrb	r3, [r3, #7]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	71fb      	strb	r3, [r7, #7]
		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK))
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <main+0x1dc>)
 8000b7a:	79db      	ldrb	r3, [r3, #7]
 8000b7c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <main+0x1dc>)
 8000b82:	4413      	add	r3, r2
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	b292      	uxth	r2, r2
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f009 fb5e 	bl	800a24c <CDC_Transmit_FS>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d18f      	bne.n	8000ab6 <main+0xe6>
			  datosComProtocol.indexReadTx++;
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <main+0x1dc>)
 8000b98:	79db      	ldrb	r3, [r3, #7]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <main+0x1dc>)
 8000ba0:	71da      	strb	r2, [r3, #7]
	  if (flags1.F250US == 1){
 8000ba2:	e788      	b.n	8000ab6 <main+0xe6>
 8000ba4:	2000074c 	.word	0x2000074c
 8000ba8:	08000345 	.word	0x08000345
 8000bac:	200001a0 	.word	0x200001a0
 8000bb0:	200003ac 	.word	0x200003ac
 8000bb4:	200007dc 	.word	0x200007dc
 8000bb8:	20000824 	.word	0x20000824
 8000bbc:	20000684 	.word	0x20000684
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	200003a8 	.word	0x200003a8

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	@ 0x50
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd2:	2228      	movs	r2, #40	@ 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f009 ff24 	bl	800aa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c14:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fcb2 	bl	8004588 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c2a:	f000 fa5f 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 ff1e 	bl	8004a8c <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c56:	f000 fa49 	bl	80010ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c62:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 f89c 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c76:	f000 fa39 	bl	80010ec <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c94:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000c96:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc4 <MX_ADC1_Init+0x140>)
 8000c98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca2:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b45      	ldr	r3, [pc, #276]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cae:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000cb0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000cbc:	4b40      	ldr	r3, [pc, #256]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc2:	483f      	ldr	r0, [pc, #252]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000cc4:	f000 fc86 	bl	80015d4 <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cce:	f000 fa0d 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4837      	ldr	r0, [pc, #220]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000ce4:	f000 fe3e 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 f9fd 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4830      	ldr	r0, [pc, #192]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d00:	f000 fe30 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d0a:	f000 f9ef 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d12:	2303      	movs	r3, #3
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4829      	ldr	r0, [pc, #164]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d1c:	f000 fe22 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d26:	f000 f9e1 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4822      	ldr	r0, [pc, #136]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d38:	f000 fe14 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d42:	f000 f9d3 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	481b      	ldr	r0, [pc, #108]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d54:	f000 fe06 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d5e:	f000 f9c5 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d62:	2305      	movs	r3, #5
 8000d64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d66:	2306      	movs	r3, #6
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d70:	f000 fdf8 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000d7a:	f000 f9b7 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d82:	2307      	movs	r3, #7
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000d8c:	f000 fdea 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d96:	f000 f9a9 	bl	80010ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_ADC1_Init+0x13c>)
 8000da8:	f000 fddc 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000db2:	f000 f99b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000684 	.word	0x20000684
 8000dc4:	40012400 	.word	0x40012400

08000dc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000dce:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <MX_I2C2_Init+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000dd4:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <MX_I2C2_Init+0x58>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_I2C2_Init+0x50>)
 8000e06:	f001 fd0d 	bl	8002824 <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f000 f96c 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200006f8 	.word	0x200006f8
 8000e1c:	40005800 	.word	0x40005800
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e42:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec0 <MX_TIM1_Init+0x9c>)
 8000e44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e48:	2247      	movs	r2, #71	@ 0x47
 8000e4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e54:	22f9      	movs	r2, #249	@ 0xf9
 8000e56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e6a:	4814      	ldr	r0, [pc, #80]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e6c:	f004 f852 	bl	8004f14 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e76:	f000 f939 	bl	80010ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000e88:	f004 f9ee 	bl	8005268 <HAL_TIM_ConfigClockSource>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e92:	f000 f92b 	bl	80010ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <MX_TIM1_Init+0x98>)
 8000ea4:	f004 fbc4 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000eae:	f000 f91d 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000074c 	.word	0x2000074c
 8000ec0:	40012c00 	.word	0x40012c00

08000ec4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f5c <MX_TIM4_Init+0x98>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000ef4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f06:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000f08:	f004 f804 	bl	8004f14 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f8eb 	bl	80010ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000f24:	f004 f9a0 	bl	8005268 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f8dd 	bl	80010ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <MX_TIM4_Init+0x94>)
 8000f40:	f004 fb76 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f4a:	f000 f8cf 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000794 	.word	0x20000794
 8000f5c:	40000800 	.word	0x40000800

08000f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <MX_USART1_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f98:	f004 fbba 	bl	8005710 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f000 f8a3 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200007dc 	.word	0x200007dc
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_DMA_Init+0x38>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	200b      	movs	r0, #11
 8000fd8:	f000 ff95 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fdc:	200b      	movs	r0, #11
 8000fde:	f000 ffae 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a34      	ldr	r2, [pc, #208]	@ (80010dc <MX_GPIO_Init+0xec>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MX_GPIO_Init+0xec>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a2e      	ldr	r2, [pc, #184]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <MX_GPIO_Init+0xec>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <MX_GPIO_Init+0xec>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <MX_GPIO_Init+0xec>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <MX_GPIO_Init+0xec>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_GPIO_Init+0xec>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106a:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <MX_GPIO_Init+0xf0>)
 800106c:	f001 fba8 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001076:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <MX_GPIO_Init+0xf4>)
 8001078:	f001 fba2 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 800107c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2302      	movs	r3, #2
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <MX_GPIO_Init+0xf0>)
 8001096:	f001 fa0f 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <MX_GPIO_Init+0xf8>)
 80010b0:	f001 fa02 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_GPIO_Init+0xf4>)
 80010ce:	f001 f9f3 	bl	80024b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <Error_Handler+0x8>

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_MspInit+0x5c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_MspInit+0x5c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_MspInit+0x5c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_MspInit+0x5c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_MspInit+0x5c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_MspInit+0x5c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_MspInit+0x60>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_MspInit+0x60>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000

0800115c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a28      	ldr	r2, [pc, #160]	@ (8001218 <HAL_ADC_MspInit+0xbc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d149      	bne.n	8001210 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a26      	ldr	r2, [pc, #152]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a20      	ldr	r2, [pc, #128]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <HAL_ADC_MspInit+0xc0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011ac:	23ff      	movs	r3, #255	@ 0xff
 80011ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4819      	ldr	r0, [pc, #100]	@ (8001220 <HAL_ADC_MspInit+0xc4>)
 80011bc:	f001 f97c 	bl	80024b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011c2:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <HAL_ADC_MspInit+0xcc>)
 80011c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 80011f6:	f000 febd 	bl	8001f74 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001200:	f7ff ff74 	bl	80010ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 8001208:	621a      	str	r2, [r3, #32]
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_ADC_MspInit+0xc8>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012400 	.word	0x40012400
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800
 8001224:	200006b4 	.word	0x200006b4
 8001228:	40020008 	.word	0x40020008

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a16      	ldr	r2, [pc, #88]	@ (80012a0 <HAL_I2C_MspInit+0x74>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d124      	bne.n	8001296 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001264:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <HAL_I2C_MspInit+0x7c>)
 800127a:	f001 f91d 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_I2C_MspInit+0x78>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40005800 	.word	0x40005800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010c00 	.word	0x40010c00

080012ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <HAL_TIM_Base_MspInit+0x68>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d114      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 80012c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2019      	movs	r0, #25
 80012dc:	f000 fe13 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012e0:	2019      	movs	r0, #25
 80012e2:	f000 fe2c 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e6:	e010      	b.n	800130a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_TIM_Base_MspInit+0x70>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_TIM_Base_MspInit+0x6c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40000800 	.word	0x40000800

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <HAL_UART_MspInit+0x9c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d139      	bne.n	80013b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a18      	ldr	r2, [pc, #96]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_UART_MspInit+0xa0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <HAL_UART_MspInit+0xa4>)
 8001386:	f001 f897 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <HAL_UART_MspInit+0xa4>)
 80013a0:	f001 f88a 	bl	80024b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2025      	movs	r0, #37	@ 0x25
 80013aa:	f000 fdac 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ae:	2025      	movs	r0, #37	@ 0x25
 80013b0:	f000 fdc5 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <NMI_Handler+0x4>

080013d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <MemManage_Handler+0x4>

080013e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <UsageFault_Handler+0x4>

080013f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f89c 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <DMA1_Channel1_IRQHandler+0x10>)
 8001426:	f000 ff13 	bl	8002250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200006b4 	.word	0x200006b4

08001434 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800143a:	f001 fc5c 	bl	8002cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000f10 	.word	0x20000f10

08001448 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM1_UP_IRQHandler+0x10>)
 800144e:	f003 fe03 	bl	8005058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000074c 	.word	0x2000074c

0800145c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <USART1_IRQHandler+0x10>)
 8001462:	f004 f9cb 	bl	80057fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200007dc 	.word	0x200007dc

08001470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff fff8 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001482:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001498:	4c09      	ldr	r4, [pc, #36]	@ (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f009 fac5 	bl	800aa34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fa91 	bl	80009d0 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80014b8:	0800ab10 	.word	0x0800ab10
  ldr r2, =_sbss
 80014bc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80014c0:	20001420 	.word	0x20001420

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fd09 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fe08 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fd21 	bl	8001f5a <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 fce9 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004
 800154c:	2000000c 	.word	0x2000000c
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	@ (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000838 	.word	0x20000838

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000838 	.word	0x20000838

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff fff0 	bl	8001578 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffe0 	bl	8001578 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000000c 	.word	0x2000000c

080015d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0be      	b.n	8001774 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fda2 	bl	800115c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 faf5 	bl	8001c08 <ADC_ConversionStop_Disable>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 8099 	bne.w	8001762 <HAL_ADC_Init+0x18e>
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8095 	bne.w	8001762 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001640:	f023 0302 	bic.w	r3, r3, #2
 8001644:	f043 0202 	orr.w	r2, r3, #2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001654:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7b1b      	ldrb	r3, [r3, #12]
 800165a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800165c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4313      	orrs	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800166c:	d003      	beq.n	8001676 <HAL_ADC_Init+0xa2>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <HAL_ADC_Init+0xa8>
 8001676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167a:	e000      	b.n	800167e <HAL_ADC_Init+0xaa>
 800167c:	2300      	movs	r3, #0
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7d1b      	ldrb	r3, [r3, #20]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d119      	bne.n	80016c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7b1b      	ldrb	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	3b01      	subs	r3, #1
 800169a:	035a      	lsls	r2, r3, #13
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e00b      	b.n	80016c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_ADC_Init+0x1a8>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f0:	d003      	beq.n	80016fa <HAL_ADC_Init+0x126>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d104      	bne.n	8001704 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	3b01      	subs	r3, #1
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	430a      	orrs	r2, r1
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_ADC_Init+0x1ac>)
 8001720:	4013      	ands	r3, r2
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	d10b      	bne.n	8001740 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	f023 0303 	bic.w	r3, r3, #3
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800173e:	e018      	b.n	8001772 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f023 0312 	bic.w	r3, r3, #18
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001760:	e007      	b.n	8001772 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	f043 0210 	orr.w	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	ffe1f7fd 	.word	0xffe1f7fd
 8001780:	ff1f0efe 	.word	0xff1f0efe

08001784 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a64      	ldr	r2, [pc, #400]	@ (800192c <HAL_ADC_Start_DMA+0x1a8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_Start_DMA+0x24>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a63      	ldr	r2, [pc, #396]	@ (8001930 <HAL_ADC_Start_DMA+0x1ac>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_Start_DMA+0x32>
 80017a8:	4b60      	ldr	r3, [pc, #384]	@ (800192c <HAL_ADC_Start_DMA+0x1a8>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 80b3 	bne.w	800191c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x40>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0ae      	b.n	8001922 <HAL_ADC_Start_DMA+0x19e>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f9c1 	bl	8001b54 <ADC_Enable>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 809a 	bne.w	8001912 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001930 <HAL_ADC_Start_DMA+0x1ac>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_Start_DMA+0x84>
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <HAL_ADC_Start_DMA+0x1a8>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d115      	bne.n	8001834 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181e:	2b00      	cmp	r3, #0
 8001820:	d026      	beq.n	8001870 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800182a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001832:	e01d      	b.n	8001870 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a39      	ldr	r2, [pc, #228]	@ (800192c <HAL_ADC_Start_DMA+0x1a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d004      	beq.n	8001854 <HAL_ADC_Start_DMA+0xd0>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a38      	ldr	r2, [pc, #224]	@ (8001930 <HAL_ADC_Start_DMA+0x1ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d10d      	bne.n	8001870 <HAL_ADC_Start_DMA+0xec>
 8001854:	4b35      	ldr	r3, [pc, #212]	@ (800192c <HAL_ADC_Start_DMA+0x1a8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001868:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	f023 0206 	bic.w	r2, r3, #6
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <HAL_ADC_Start_DMA+0x1b0>)
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a24      	ldr	r2, [pc, #144]	@ (8001938 <HAL_ADC_Start_DMA+0x1b4>)
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_ADC_Start_DMA+0x1b8>)
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0202 	mvn.w	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a18      	ldr	r0, [r3, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	334c      	adds	r3, #76	@ 0x4c
 80018d4:	4619      	mov	r1, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f000 fba5 	bl	8002028 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018e8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018ec:	d108      	bne.n	8001900 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80018fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018fe:	e00f      	b.n	8001920 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800190e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001910:	e006      	b.n	8001920 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800191a:	e001      	b.n	8001920 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001920:	7dfb      	ldrb	r3, [r7, #23]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012400 	.word	0x40012400
 8001930:	40012800 	.word	0x40012800
 8001934:	08001c8b 	.word	0x08001c8b
 8001938:	08001d07 	.word	0x08001d07
 800193c:	08001d23 	.word	0x08001d23

08001940 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x20>
 8001980:	2302      	movs	r3, #2
 8001982:	e0dc      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x1da>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d81c      	bhi.n	80019ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b05      	subs	r3, #5
 80019a6:	221f      	movs	r2, #31
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b05      	subs	r3, #5
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80019cc:	e03c      	b.n	8001a48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d81c      	bhi.n	8001a10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	@ 0x23
 80019e8:	221f      	movs	r2, #31
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4019      	ands	r1, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b23      	subs	r3, #35	@ 0x23
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a0e:	e01b      	b.n	8001a48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b41      	subs	r3, #65	@ 0x41
 8001a22:	221f      	movs	r2, #31
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4019      	ands	r1, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b41      	subs	r3, #65	@ 0x41
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d91c      	bls.n	8001a8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b1e      	subs	r3, #30
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6898      	ldr	r0, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b1e      	subs	r3, #30
 8001a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	e019      	b.n	8001abe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6919      	ldr	r1, [r3, #16]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4019      	ands	r1, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6898      	ldr	r0, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d132      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d125      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d126      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001af4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d11a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9a      	lsrs	r2, r3, #18
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x1b2>
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40012400 	.word	0x40012400
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d040      	beq.n	8001bf4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <ADC_Enable+0xac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <ADC_Enable+0xb0>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b90:	e002      	b.n	8001b98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fceb 	bl	8001578 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ba4:	e01f      	b.n	8001be6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ba6:	f7ff fce7 	bl	8001578 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d918      	bls.n	8001be6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d011      	beq.n	8001be6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1d8      	bne.n	8001ba6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000004 	.word	0x20000004
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12e      	bne.n	8001c80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c32:	f7ff fca1 	bl	8001578 <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	e01b      	b.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c3a:	f7ff fc9d 	bl	8001578 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d914      	bls.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d0dc      	beq.n	8001c3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d127      	bne.n	8001cf4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cbe:	d115      	bne.n	8001cec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d111      	bne.n	8001cec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7fe fa2d 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cf2:	e004      	b.n	8001cfe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fe13 	bl	8001940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	f043 0204 	orr.w	r2, r3, #4
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fe02 	bl	8001952 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4906      	ldr	r1, [pc, #24]	@ (8001df0 <__NVIC_EnableIRQ+0x34>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff90 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff2d 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff42 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff35 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e043      	b.n	8002012 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_DMA_Init+0xa8>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4a22      	ldr	r2, [pc, #136]	@ (8002020 <HAL_DMA_Init+0xac>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	009a      	lsls	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_DMA_Init+0xb0>)
 8001fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	bffdfff8 	.word	0xbffdfff8
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Start_IT+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e04b      	b.n	80020e0 <HAL_DMA_Start_IT+0xb8>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d13a      	bne.n	80020d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f9eb 	bl	800245c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 020e 	orr.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00f      	b.n	80020c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 020a 	orr.w	r2, r2, #10
 80020be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e005      	b.n	80020de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d008      	beq.n	8002112 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2204      	movs	r2, #4
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e020      	b.n	8002154 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 020e 	bic.w	r2, r2, #14
 8002120:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d005      	beq.n	8002184 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e051      	b.n	8002228 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020e 	bic.w	r2, r2, #14
 8002192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <HAL_DMA_Abort_IT+0xd4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d029      	beq.n	8002202 <HAL_DMA_Abort_IT+0xa2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <HAL_DMA_Abort_IT+0xd8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <HAL_DMA_Abort_IT+0x9e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	@ (800223c <HAL_DMA_Abort_IT+0xdc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x98>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_DMA_Abort_IT+0xe0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d012      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x92>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_DMA_Abort_IT+0xe4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00a      	beq.n	80021ec <HAL_DMA_Abort_IT+0x8c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_DMA_Abort_IT+0xe8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <HAL_DMA_Abort_IT+0x86>
 80021e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021e4:	e00e      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ea:	e00b      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f0:	e008      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f6:	e005      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	e002      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021fe:	2310      	movs	r3, #16
 8002200:	e000      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 8002202:	2301      	movs	r3, #1
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_DMA_Abort_IT+0xec>)
 8002206:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    } 
  }
  return status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020008 	.word	0x40020008
 8002238:	4002001c 	.word	0x4002001c
 800223c:	40020030 	.word	0x40020030
 8002240:	40020044 	.word	0x40020044
 8002244:	40020058 	.word	0x40020058
 8002248:	4002006c 	.word	0x4002006c
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	2204      	movs	r2, #4
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04f      	beq.n	8002318 <HAL_DMA_IRQHandler+0xc8>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04a      	beq.n	8002318 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a66      	ldr	r2, [pc, #408]	@ (8002440 <HAL_DMA_IRQHandler+0x1f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d029      	beq.n	80022fe <HAL_DMA_IRQHandler+0xae>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a65      	ldr	r2, [pc, #404]	@ (8002444 <HAL_DMA_IRQHandler+0x1f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0xaa>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a63      	ldr	r2, [pc, #396]	@ (8002448 <HAL_DMA_IRQHandler+0x1f8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xa4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a62      	ldr	r2, [pc, #392]	@ (800244c <HAL_DMA_IRQHandler+0x1fc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d012      	beq.n	80022ee <HAL_DMA_IRQHandler+0x9e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a60      	ldr	r2, [pc, #384]	@ (8002450 <HAL_DMA_IRQHandler+0x200>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00a      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x98>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002454 <HAL_DMA_IRQHandler+0x204>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x92>
 80022dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022e0:	e00e      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022e6:	e00b      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022ec:	e008      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022f2:	e005      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f8:	e002      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022fa:	2340      	movs	r3, #64	@ 0x40
 80022fc:	e000      	b.n	8002300 <HAL_DMA_IRQHandler+0xb0>
 80022fe:	2304      	movs	r3, #4
 8002300:	4a55      	ldr	r2, [pc, #340]	@ (8002458 <HAL_DMA_IRQHandler+0x208>)
 8002302:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8094 	beq.w	8002436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002316:	e08e      	b.n	8002436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2202      	movs	r2, #2
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d056      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x186>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d051      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020a 	bic.w	r2, r2, #10
 800234e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a38      	ldr	r2, [pc, #224]	@ (8002440 <HAL_DMA_IRQHandler+0x1f0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d029      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x166>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_DMA_IRQHandler+0x1f4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x162>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a35      	ldr	r2, [pc, #212]	@ (8002448 <HAL_DMA_IRQHandler+0x1f8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01a      	beq.n	80023ac <HAL_DMA_IRQHandler+0x15c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a34      	ldr	r2, [pc, #208]	@ (800244c <HAL_DMA_IRQHandler+0x1fc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d012      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x156>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a32      	ldr	r2, [pc, #200]	@ (8002450 <HAL_DMA_IRQHandler+0x200>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x150>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_DMA_IRQHandler+0x204>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_DMA_IRQHandler+0x14a>
 8002394:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002398:	e00e      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 800239a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800239e:	e00b      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 80023a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a4:	e008      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 80023a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023aa:	e005      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 80023ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023b0:	e002      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 80023b2:	2320      	movs	r3, #32
 80023b4:	e000      	b.n	80023b8 <HAL_DMA_IRQHandler+0x168>
 80023b6:	2302      	movs	r3, #2
 80023b8:	4a27      	ldr	r2, [pc, #156]	@ (8002458 <HAL_DMA_IRQHandler+0x208>)
 80023ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d034      	beq.n	8002436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023d4:	e02f      	b.n	8002436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2208      	movs	r2, #8
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_DMA_IRQHandler+0x1e8>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 020e 	bic.w	r2, r2, #14
 80023fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
    }
  }
  return;
 8002436:	bf00      	nop
 8002438:	bf00      	nop
}
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020008 	.word	0x40020008
 8002444:	4002001c 	.word	0x4002001c
 8002448:	40020030 	.word	0x40020030
 800244c:	40020044 	.word	0x40020044
 8002450:	40020058 	.word	0x40020058
 8002454:	4002006c 	.word	0x4002006c
 8002458:	40020000 	.word	0x40020000

0800245c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d108      	bne.n	800249c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800249a:	e007      	b.n	80024ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b08b      	sub	sp, #44	@ 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e169      	b.n	80027a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024cc:	2201      	movs	r2, #1
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8158 	bne.w	800279a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 80024f4:	4a98      	ldr	r2, [pc, #608]	@ (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d875      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 80024fa:	4a98      	ldr	r2, [pc, #608]	@ (800275c <HAL_GPIO_Init+0x2a4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d058      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002500:	4a96      	ldr	r2, [pc, #600]	@ (800275c <HAL_GPIO_Init+0x2a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d86f      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002506:	4a96      	ldr	r2, [pc, #600]	@ (8002760 <HAL_GPIO_Init+0x2a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d052      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 800250c:	4a94      	ldr	r2, [pc, #592]	@ (8002760 <HAL_GPIO_Init+0x2a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d869      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002512:	4a94      	ldr	r2, [pc, #592]	@ (8002764 <HAL_GPIO_Init+0x2ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04c      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002518:	4a92      	ldr	r2, [pc, #584]	@ (8002764 <HAL_GPIO_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d863      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800251e:	4a92      	ldr	r2, [pc, #584]	@ (8002768 <HAL_GPIO_Init+0x2b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d046      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002524:	4a90      	ldr	r2, [pc, #576]	@ (8002768 <HAL_GPIO_Init+0x2b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d85d      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800252a:	2b12      	cmp	r3, #18
 800252c:	d82a      	bhi.n	8002584 <HAL_GPIO_Init+0xcc>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d859      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002532:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <HAL_GPIO_Init+0x80>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	080025b3 	.word	0x080025b3
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800259f 	.word	0x0800259f
 8002544:	080025e1 	.word	0x080025e1
 8002548:	080025e7 	.word	0x080025e7
 800254c:	080025e7 	.word	0x080025e7
 8002550:	080025e7 	.word	0x080025e7
 8002554:	080025e7 	.word	0x080025e7
 8002558:	080025e7 	.word	0x080025e7
 800255c:	080025e7 	.word	0x080025e7
 8002560:	080025e7 	.word	0x080025e7
 8002564:	080025e7 	.word	0x080025e7
 8002568:	080025e7 	.word	0x080025e7
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025e7 	.word	0x080025e7
 8002574:	080025e7 	.word	0x080025e7
 8002578:	080025e7 	.word	0x080025e7
 800257c:	08002595 	.word	0x08002595
 8002580:	080025a9 	.word	0x080025a9
 8002584:	4a79      	ldr	r2, [pc, #484]	@ (800276c <HAL_GPIO_Init+0x2b4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258a:	e02c      	b.n	80025e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e029      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	3304      	adds	r3, #4
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e024      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e01f      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	330c      	adds	r3, #12
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e01a      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ba:	2304      	movs	r3, #4
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e013      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	611a      	str	r2, [r3, #16]
          break;
 80025d2:	e009      	b.n	80025e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d4:	2308      	movs	r3, #8
 80025d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	615a      	str	r2, [r3, #20]
          break;
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          break;
 80025e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	d801      	bhi.n	80025f2 <HAL_GPIO_Init+0x13a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_Init+0x13e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	@ 0xff
 80025fc:	d802      	bhi.n	8002604 <HAL_GPIO_Init+0x14c>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x152>
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	3b08      	subs	r3, #8
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	210f      	movs	r1, #15
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b1 	beq.w	800279a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002638:	4b4d      	ldr	r3, [pc, #308]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a4c      	ldr	r2, [pc, #304]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b4a      	ldr	r3, [pc, #296]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002650:	4a48      	ldr	r2, [pc, #288]	@ (8002774 <HAL_GPIO_Init+0x2bc>)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a40      	ldr	r2, [pc, #256]	@ (8002778 <HAL_GPIO_Init+0x2c0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3e      	ldr	r2, [pc, #248]	@ (8002780 <HAL_GPIO_Init+0x2c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3d      	ldr	r2, [pc, #244]	@ (8002784 <HAL_GPIO_Init+0x2cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1e0>
 8002694:	2303      	movs	r3, #3
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 8002698:	2304      	movs	r3, #4
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a4:	2300      	movs	r3, #0
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b6:	492f      	ldr	r1, [pc, #188]	@ (8002774 <HAL_GPIO_Init+0x2bc>)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	492c      	ldr	r1, [pc, #176]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4928      	ldr	r1, [pc, #160]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4922      	ldr	r1, [pc, #136]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	491e      	ldr	r1, [pc, #120]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002710:	4013      	ands	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4918      	ldr	r1, [pc, #96]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	43db      	mvns	r3, r3
 8002736:	4914      	ldr	r1, [pc, #80]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002738:	4013      	ands	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d021      	beq.n	800278c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e021      	b.n	800279a <HAL_GPIO_Init+0x2e2>
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40011400 	.word	0x40011400
 8002788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_GPIO_Init+0x304>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	43db      	mvns	r3, r3
 8002794:	4909      	ldr	r1, [pc, #36]	@ (80027bc <HAL_GPIO_Init+0x304>)
 8002796:	4013      	ands	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	3301      	adds	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f ae8e 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	372c      	adds	r7, #44	@ 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43d9      	mvns	r1, r3
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	400b      	ands	r3, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e12b      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fcee 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	@ 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002888:	f002 fa48 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a81      	ldr	r2, [pc, #516]	@ (8002a98 <HAL_I2C_Init+0x274>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <HAL_I2C_Init+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a80      	ldr	r2, [pc, #512]	@ (8002a9c <HAL_I2C_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x92>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa0 <HAL_I2C_Init+0x27c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e7      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a78      	ldr	r2, [pc, #480]	@ (8002aa4 <HAL_I2C_Init+0x280>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002a98 <HAL_I2C_Init+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d802      	bhi.n	80028f8 <HAL_I2C_Init+0xd4>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3301      	adds	r3, #1
 80028f6:	e009      	b.n	800290c <HAL_I2C_Init+0xe8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	4a69      	ldr	r2, [pc, #420]	@ (8002aa8 <HAL_I2C_Init+0x284>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800291e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	495c      	ldr	r1, [pc, #368]	@ (8002a98 <HAL_I2C_Init+0x274>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d819      	bhi.n	8002960 <HAL_I2C_Init+0x13c>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002940:	400b      	ands	r3, r1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_I2C_Init+0x138>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fbb1 f3f3 	udiv	r3, r1, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	e051      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 800295c:	2304      	movs	r3, #4
 800295e:	e04f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <HAL_I2C_Init+0x168>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e012      	b.n	80029b2 <HAL_I2C_Init+0x18e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x196>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <HAL_I2C_Init+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e58      	subs	r0, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029de:	e00f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6911      	ldr	r1, [r2, #16]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	000186a0 	.word	0x000186a0
 8002a9c:	001e847f 	.word	0x001e847f
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b08b      	sub	sp, #44	@ 0x2c
 8002ab0:	af06      	add	r7, sp, #24
 8002ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0f1      	b.n	8002ca2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f007 fcfc 	bl	800a4d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fbc1 	bl	800626c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	687e      	ldr	r6, [r7, #4]
 8002af2:	466d      	mov	r5, sp
 8002af4:	f106 0410 	add.w	r4, r6, #16
 8002af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	602b      	str	r3, [r5, #0]
 8002b00:	1d33      	adds	r3, r6, #4
 8002b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b04:	6838      	ldr	r0, [r7, #0]
 8002b06:	f003 fb8b 	bl	8006220 <USB_CoreInit>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0c2      	b.n	8002ca2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fbbc 	bl	80062a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e040      	b.n	8002bb0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3301      	adds	r3, #1
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	3303      	adds	r3, #3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3338      	adds	r3, #56	@ 0x38
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	333c      	adds	r3, #60	@ 0x3c
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3340      	adds	r3, #64	@ 0x40
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3b9      	bcc.n	8002b2e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3b5      	bcc.n	8002bc0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	687e      	ldr	r6, [r7, #4]
 8002c5c:	466d      	mov	r5, sp
 8002c5e:	f106 0410 	add.w	r4, r6, #16
 8002c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	1d33      	adds	r3, r6, #4
 8002c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	f003 fb22 	bl	80062b8 <USB_DevInit>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00d      	b.n	8002ca2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fda3 	bl	80087e6 <USB_DevDisconnect>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002caa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Start+0x16>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e016      	b.n	8002cee <HAL_PCD_Start+0x44>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fab7 	bl	8006240 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f007 fe6e 	bl	800a9b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fd77 	bl	80087d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fd79 	bl	80087fa <USB_ReadInterrupts>
 8002d08:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb1b 	bl	8003350 <PCD_EP_ISR_Handler>

    return;
 8002d1a:	e119      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f007 fc41 	bl	800a5c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f905 	bl	8002f56 <HAL_PCD_SetAddress>

    return;
 8002d4c:	e100      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d70:	e0ee      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d94:	e0dc      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d027      	beq.n	8002df0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0204 	bic.w	r2, r2, #4
 8002db2:	b292      	uxth	r2, r2
 8002db4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0208 	bic.w	r2, r2, #8
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f007 fc31 	bl	800a638 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002de8:	b292      	uxth	r2, r2
 8002dea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dee:	e0af      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8083 	beq.w	8002f02 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e010      	b.n	8002e24 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	8812      	ldrh	r2, [r2, #0]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	3320      	adds	r3, #32
 8002e18:	443b      	add	r3, r7
 8002e1a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	3301      	adds	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
 8002e26:	2b07      	cmp	r3, #7
 8002e28:	d9eb      	bls.n	8002e02 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	b292      	uxth	r2, r2
 8002e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e5a:	bf00      	nop
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f6      	beq.n	8002e5c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e80:	b292      	uxth	r2, r2
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e00f      	b.n	8002eac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4611      	mov	r1, r2
 8002e94:	7ffa      	ldrb	r2, [r7, #31]
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	440a      	add	r2, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	443b      	add	r3, r7
 8002ea0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ea4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
 8002eae:	2b07      	cmp	r3, #7
 8002eb0:	d9ec      	bls.n	8002e8c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0208 	orr.w	r2, r2, #8
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002edc:	b292      	uxth	r2, r2
 8002ede:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0204 	orr.w	r2, r2, #4
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f007 fb82 	bl	800a604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f00:	e026      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f007 fb40 	bl	800a5aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f2a:	e011      	b.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f4e:	bf00      	nop
  }
}
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_SetAddress+0x1a>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e013      	b.n	8002f98 <HAL_PCD_SetAddress+0x42>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f005 fc0f 	bl	80087ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	70fb      	strb	r3, [r7, #3]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	803b      	strh	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da0e      	bge.n	8002fe4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00e      	b.n	8003002 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 0207 	and.w	r2, r3, #7
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800300e:	883a      	ldrh	r2, [r7, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	78ba      	ldrb	r2, [r7, #2]
 8003018:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800301a:	78bb      	ldrb	r3, [r7, #2]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d102      	bne.n	8003026 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_PCD_EP_Open+0x94>
 8003030:	2302      	movs	r3, #2
 8003032:	e00e      	b.n	8003052 <HAL_PCD_EP_Open+0xb2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f958 	bl	80062f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003050:	7afb      	ldrb	r3, [r7, #11]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0e      	bge.n	800308c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	705a      	strb	r2, [r3, #1]
 800308a:	e00e      	b.n	80030aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 0207 	and.w	r2, r3, #7
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_PCD_EP_Close+0x6a>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e00e      	b.n	80030e2 <HAL_PCD_EP_Close+0x88>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fcd0 	bl	8006a78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	460b      	mov	r3, r1
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 0207 	and.w	r2, r3, #7
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	b2da      	uxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fe87 	bl	8006e50 <USB_EPStartXfer>

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	460b      	mov	r3, r1
 8003188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	7afb      	ldrb	r3, [r7, #11]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2201      	movs	r2, #1
 80031c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fe39 	bl	8006e50 <USB_EPStartXfer>

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0207 	and.w	r2, r3, #7
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d901      	bls.n	8003206 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e04c      	b.n	80032a0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800320a:	2b00      	cmp	r3, #0
 800320c:	da0e      	bge.n	800322c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	705a      	strb	r2, [r3, #1]
 800322a:	e00c      	b.n	8003246 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_PCD_EP_SetStall+0x7e>
 8003262:	2302      	movs	r3, #2
 8003264:	e01c      	b.n	80032a0 <HAL_PCD_EP_SetStall+0xb8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	4618      	mov	r0, r3
 8003276:	f005 f99c 	bl	80085b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	2b00      	cmp	r3, #0
 8003282:	d108      	bne.n	8003296 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f005 fac1 	bl	8008818 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d901      	bls.n	80032c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e040      	b.n	8003348 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da0e      	bge.n	80032ec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	705a      	strb	r2, [r3, #1]
 80032ea:	e00e      	b.n	800330a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 0207 	and.w	r2, r3, #7
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_PCD_EP_ClrStall+0x82>
 8003326:	2302      	movs	r3, #2
 8003328:	e00e      	b.n	8003348 <HAL_PCD_EP_ClrStall+0xa0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	f005 f98a 	bl	8008652 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b096      	sub	sp, #88	@ 0x58
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003358:	e3be      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003362:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003374:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003378:	2b00      	cmp	r3, #0
 800337a:	f040 8178 	bne.w	800366e <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800337e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d151      	bne.n	800342e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	81fb      	strh	r3, [r7, #14]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3328      	adds	r3, #40	@ 0x28
 80033b2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	3302      	adds	r3, #2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	441a      	add	r2, r3
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f007 f8c0 	bl	800a576 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 836a 	beq.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8365 	bne.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800342c:	e354      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003434:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d034      	beq.n	80034b6 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003454:	b29b      	uxth	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	3306      	adds	r3, #6
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800348a:	b29b      	uxth	r3, r3
 800348c:	f005 fa14 	bl	80088b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29a      	uxth	r2, r3
 8003498:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800349c:	4013      	ands	r3, r2
 800349e:	823b      	strh	r3, [r7, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	8a3a      	ldrh	r2, [r7, #16]
 80034a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f007 f834 	bl	800a51c <HAL_PCD_SetupStageCallback>
 80034b4:	e310      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034b6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f280 830c 	bge.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034cc:	4013      	ands	r3, r2
 80034ce:	83fb      	strh	r3, [r7, #30]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	8bfa      	ldrh	r2, [r7, #30]
 80034d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034da:	b292      	uxth	r2, r2
 80034dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	3306      	adds	r3, #6
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <PCD_EP_ISR_Handler+0x1f6>
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	6959      	ldr	r1, [r3, #20]
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800352a:	b29b      	uxth	r3, r3
 800352c:	f005 f9c4 	bl	80088b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	441a      	add	r2, r3
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f006 fffd 	bl	800a540 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003550:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 82bd 	bne.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
 800355e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003562:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003566:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800356a:	f000 82b5 	beq.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003598:	b29a      	uxth	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80035a4:	d91d      	bls.n	80035e2 <PCD_EP_ISR_Handler+0x292>
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <PCD_EP_ISR_Handler+0x270>
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	3b01      	subs	r3, #1
 80035be:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e026      	b.n	8003630 <PCD_EP_ISR_Handler+0x2e0>
 80035e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <PCD_EP_ISR_Handler+0x2b0>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	e017      	b.n	8003630 <PCD_EP_ISR_Handler+0x2e0>
 8003600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <PCD_EP_ISR_Handler+0x2ca>
 8003614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003616:	3301      	adds	r3, #1
 8003618:	647b      	str	r3, [r7, #68]	@ 0x44
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29a      	uxth	r2, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003622:	b29b      	uxth	r3, r3
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	b29b      	uxth	r3, r3
 8003628:	4313      	orrs	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800363c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003640:	827b      	strh	r3, [r7, #18]
 8003642:	8a7b      	ldrh	r3, [r7, #18]
 8003644:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003648:	827b      	strh	r3, [r7, #18]
 800364a:	8a7b      	ldrh	r3, [r7, #18]
 800364c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003650:	827b      	strh	r3, [r7, #18]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	8a7b      	ldrh	r3, [r7, #18]
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]
 800366c:	e234      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003682:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003686:	2b00      	cmp	r3, #0
 8003688:	f280 80fc 	bge.w	8003884 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29a      	uxth	r2, r3
 800369e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036a2:	4013      	ands	r3, r2
 80036a4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80036ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036be:	b292      	uxth	r2, r2
 80036c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036c2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	7b1b      	ldrb	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d125      	bne.n	800372c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	3306      	adds	r3, #6
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003708:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800370c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8092 	beq.w	800383a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	6959      	ldr	r1, [r3, #20]
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	88da      	ldrh	r2, [r3, #6]
 8003722:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003726:	f005 f8c7 	bl	80088b8 <USB_ReadPMA>
 800372a:	e086      	b.n	800383a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d10a      	bne.n	800374a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003734:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003738:	461a      	mov	r2, r3
 800373a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9d9 	bl	8003af4 <HAL_PCD_EP_DB_Receive>
 8003742:	4603      	mov	r3, r0
 8003744:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003748:	e077      	b.n	800383a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003764:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800377a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800377e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003786:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800378a:	b29b      	uxth	r3, r3
 800378c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d024      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	3302      	adds	r3, #2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80037d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02e      	beq.n	800383a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e2:	6959      	ldr	r1, [r3, #20]
 80037e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e6:	891a      	ldrh	r2, [r3, #8]
 80037e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037ec:	f005 f864 	bl	80088b8 <USB_ReadPMA>
 80037f0:	e023      	b.n	800383a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	3306      	adds	r3, #6
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800381e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	6959      	ldr	r1, [r3, #20]
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	895a      	ldrh	r2, [r3, #10]
 8003832:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003836:	f005 f83f 	bl	80088b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003842:	441a      	add	r2, r3
 8003844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003846:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003850:	441a      	add	r2, r3
 8003852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003854:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <PCD_EP_ISR_Handler+0x51a>
 800385e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d206      	bcs.n	8003878 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f006 fe65 	bl	800a540 <HAL_PCD_DataOutStageCallback>
 8003876:	e005      	b.n	8003884 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fae6 	bl	8006e50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003884:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8123 	beq.w	8003ad8 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003892:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80038bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80038d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038de:	b29b      	uxth	r3, r3
 80038e0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	78db      	ldrb	r3, [r3, #3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	f040 80a2 	bne.w	8003a30 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f4:	7b1b      	ldrb	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8093 	beq.w	8003a22 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d046      	beq.n	8003996 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d126      	bne.n	800395e <PCD_EP_ISR_Handler+0x60e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	4413      	add	r3, r2
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	011a      	lsls	r2, r3, #4
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	4413      	add	r3, r2
 8003932:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	b29a      	uxth	r2, r3
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003956:	b29a      	uxth	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e061      	b.n	8003a22 <PCD_EP_ISR_Handler+0x6d2>
 800395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d15d      	bne.n	8003a22 <PCD_EP_ISR_Handler+0x6d2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	4413      	add	r3, r2
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	011a      	lsls	r2, r3, #4
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	4413      	add	r3, r2
 8003988:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	2200      	movs	r2, #0
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	e045      	b.n	8003a22 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d126      	bne.n	80039f2 <PCD_EP_ISR_Handler+0x6a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	4413      	add	r3, r2
 80039ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80039bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	011a      	lsls	r2, r3, #4
 80039c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c4:	4413      	add	r3, r2
 80039c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	e017      	b.n	8003a22 <PCD_EP_ISR_Handler+0x6d2>
 80039f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d113      	bne.n	8003a22 <PCD_EP_ISR_Handler+0x6d2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a08:	4413      	add	r3, r2
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	011a      	lsls	r2, r3, #4
 8003a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1e:	2200      	movs	r2, #0
 8003a20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f006 fda4 	bl	800a576 <HAL_PCD_DataInStageCallback>
 8003a2e:	e053      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d146      	bne.n	8003aca <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3302      	adds	r3, #2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d907      	bls.n	8003a84 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a7c:	1ad2      	subs	r2, r2, r3
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a80:	619a      	str	r2, [r3, #24]
 8003a82:	e002      	b.n	8003a8a <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f006 fd6c 	bl	800a576 <HAL_PCD_DataInStageCallback>
 8003a9e:	e01b      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003aa8:	441a      	add	r2, r3
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ab6:	441a      	add	r2, r3
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 f9c4 	bl	8006e50 <USB_EPStartXfer>
 8003ac8:	e006      	b.n	8003ad8 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003aca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f91b 	bl	8003d0e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f6ff ac38 	blt.w	800335a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3758      	adds	r7, #88	@ 0x58
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d07e      	beq.n	8003c0a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3302      	adds	r3, #2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d306      	bcc.n	8003b4e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	8b7b      	ldrh	r3, [r7, #26]
 8003b46:	1ad2      	subs	r2, r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	619a      	str	r2, [r3, #24]
 8003b4c:	e002      	b.n	8003b54 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d123      	bne.n	8003ba4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b76:	833b      	strh	r3, [r7, #24]
 8003b78:	8b3b      	ldrh	r3, [r7, #24]
 8003b7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b7e:	833b      	strh	r3, [r7, #24]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	8b3b      	ldrh	r3, [r7, #24]
 8003b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01f      	beq.n	8003bee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc8:	82fb      	strh	r3, [r7, #22]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8afb      	ldrh	r3, [r7, #22]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8087 	beq.w	8003d04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6959      	ldr	r1, [r3, #20]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	891a      	ldrh	r2, [r3, #8]
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	f004 fe58 	bl	80088b8 <USB_ReadPMA>
 8003c08:	e07c      	b.n	8003d04 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3306      	adds	r3, #6
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d306      	bcc.n	8003c4c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	8b7b      	ldrh	r3, [r7, #26]
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	619a      	str	r2, [r3, #24]
 8003c4a:	e002      	b.n	8003c52 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d123      	bne.n	8003ca2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c74:	83fb      	strh	r3, [r7, #30]
 8003c76:	8bfb      	ldrh	r3, [r7, #30]
 8003c78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c7c:	83fb      	strh	r3, [r7, #30]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8bfb      	ldrh	r3, [r7, #30]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11f      	bne.n	8003cec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	83bb      	strh	r3, [r7, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	8bbb      	ldrh	r3, [r7, #28]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cec:	8b7b      	ldrh	r3, [r7, #26]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6959      	ldr	r1, [r3, #20]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	895a      	ldrh	r2, [r3, #10]
 8003cfe:	8b7b      	ldrh	r3, [r7, #26]
 8003d00:	f004 fdda 	bl	80088b8 <USB_ReadPMA>
    }
  }

  return count;
 8003d04:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b0a4      	sub	sp, #144	@ 0x90
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 81dd 	beq.w	80040e2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d907      	bls.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	e002      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80b9 	bne.w	8003ef2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d126      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	4413      	add	r3, r2
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e01a      	b.n	8003e0c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d116      	bne.n	8003e0c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df2:	4413      	add	r3, r2
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	011a      	lsls	r2, r3, #4
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d126      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e017      	b.n	8003e98 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d113      	bne.n	8003e98 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	4413      	add	r3, r2
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	011a      	lsls	r2, r3, #4
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f006 fb69 	bl	800a576 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 82fc 	beq.w	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	82fb      	strh	r3, [r7, #22]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]
 8003ef0:	e2da      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d021      	beq.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f040 82ae 	bne.w	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f54:	441a      	add	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f62:	441a      	add	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d30b      	bcc.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	621a      	str	r2, [r3, #32]
 8003f8a:	e017      	b.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003f94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fa4:	e00a      	b.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d165      	bne.n	8004090 <HAL_PCD_EP_DB_Transmit+0x382>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd8:	4413      	add	r3, r2
 8003fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	011a      	lsls	r2, r3, #4
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004000:	2b3e      	cmp	r3, #62	@ 0x3e
 8004002:	d91d      	bls.n	8004040 <HAL_PCD_EP_DB_Transmit+0x332>
 8004004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800400c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <HAL_PCD_EP_DB_Transmit+0x310>
 8004018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401a:	3b01      	subs	r3, #1
 800401c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29a      	uxth	r2, r3
 8004024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004026:	b29b      	uxth	r3, r3
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	b29b      	uxth	r3, r3
 800402c:	4313      	orrs	r3, r2
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e044      	b.n	80040ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <HAL_PCD_EP_DB_Transmit+0x350>
 8004048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004056:	b29a      	uxth	r2, r3
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	e035      	b.n	80040ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 800405e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004074:	3301      	adds	r3, #1
 8004076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29a      	uxth	r2, r3
 800407e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004080:	b29b      	uxth	r3, r3
 8004082:	029b      	lsls	r3, r3, #10
 8004084:	b29b      	uxth	r3, r3
 8004086:	4313      	orrs	r3, r2
 8004088:	b29a      	uxth	r2, r3
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	e01c      	b.n	80040ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d118      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ac:	4413      	add	r3, r2
 80040ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	011a      	lsls	r2, r3, #4
 80040b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b8:	4413      	add	r3, r2
 80040ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6959      	ldr	r1, [r3, #20]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	891a      	ldrh	r2, [r3, #8]
 80040d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f004 fba7 	bl	800882e <USB_WritePMA>
 80040e0:	e1e2      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	3306      	adds	r3, #6
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004116:	429a      	cmp	r2, r3
 8004118:	d307      	bcc.n	800412a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	619a      	str	r2, [r3, #24]
 8004128:	e002      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 80c0 	bne.w	80042ba <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d126      	bne.n	8004190 <HAL_PCD_EP_DB_Transmit+0x482>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004156:	4413      	add	r3, r2
 8004158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	011a      	lsls	r2, r3, #4
 8004160:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004162:	4413      	add	r3, r2
 8004164:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800416a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	b29a      	uxth	r2, r3
 8004176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004188:	b29a      	uxth	r2, r3
 800418a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	e01a      	b.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d116      	bne.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	667b      	str	r3, [r7, #100]	@ 0x64
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ac:	4413      	add	r3, r2
 80041ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	011a      	lsls	r2, r3, #4
 80041b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b8:	4413      	add	r3, r2
 80041ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041be:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c2:	2200      	movs	r2, #0
 80041c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d12b      	bne.n	800422c <HAL_PCD_EP_DB_Transmit+0x51e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e8:	4413      	add	r3, r2
 80041ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f4:	4413      	add	r3, r2
 80041f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420a:	b29a      	uxth	r2, r3
 800420c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004222:	b29a      	uxth	r2, r3
 8004224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	e017      	b.n	800425c <HAL_PCD_EP_DB_Transmit+0x54e>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d113      	bne.n	800425c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800423c:	b29b      	uxth	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004242:	4413      	add	r3, r2
 8004244:	677b      	str	r3, [r7, #116]	@ 0x74
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	011a      	lsls	r2, r3, #4
 800424c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800424e:	4413      	add	r3, r2
 8004250:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004254:	673b      	str	r3, [r7, #112]	@ 0x70
 8004256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004258:	2200      	movs	r2, #0
 800425a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f006 f987 	bl	800a576 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 811a 	bne.w	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]
 80042b8:	e0f6      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d121      	bne.n	8004308 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	441a      	add	r2, r3
 80042f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80042f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004304:	b29b      	uxth	r3, r3
 8004306:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800430e:	2b01      	cmp	r3, #1
 8004310:	f040 80ca 	bne.w	80044a8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800431c:	441a      	add	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800432a:	441a      	add	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d30b      	bcc.n	8004354 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	621a      	str	r2, [r3, #32]
 8004352:	e017      	b.n	8004384 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d108      	bne.n	800436e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800435c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800436c:	e00a      	b.n	8004384 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	657b      	str	r3, [r7, #84]	@ 0x54
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d165      	bne.n	800445e <HAL_PCD_EP_DB_Transmit+0x750>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a6:	4413      	add	r3, r2
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	011a      	lsls	r2, r3, #4
 80043b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b2:	4413      	add	r3, r2
 80043b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d0:	d91d      	bls.n	800440e <HAL_PCD_EP_DB_Transmit+0x700>
 80043d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_PCD_EP_DB_Transmit+0x6de>
 80043e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043e8:	3b01      	subs	r3, #1
 80043ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004406:	b29a      	uxth	r2, r3
 8004408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e041      	b.n	8004492 <HAL_PCD_EP_DB_Transmit+0x784>
 800440e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004424:	b29a      	uxth	r2, r3
 8004426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	e032      	b.n	8004492 <HAL_PCD_EP_DB_Transmit+0x784>
 800442c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_PCD_EP_DB_Transmit+0x738>
 8004440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004442:	3301      	adds	r3, #1
 8004444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29a      	uxth	r2, r3
 800444c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444e:	b29b      	uxth	r3, r3
 8004450:	029b      	lsls	r3, r3, #10
 8004452:	b29b      	uxth	r3, r3
 8004454:	4313      	orrs	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	e019      	b.n	8004492 <HAL_PCD_EP_DB_Transmit+0x784>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d115      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x784>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004474:	4413      	add	r3, r2
 8004476:	657b      	str	r3, [r7, #84]	@ 0x54
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	011a      	lsls	r2, r3, #4
 800447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004480:	4413      	add	r3, r2
 8004482:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004486:	653b      	str	r3, [r7, #80]	@ 0x50
 8004488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800448c:	b29a      	uxth	r2, r3
 800448e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004490:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6959      	ldr	r1, [r3, #20]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	895a      	ldrh	r2, [r3, #10]
 800449e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f004 f9c3 	bl	800882e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c2:	82bb      	strh	r3, [r7, #20]
 80044c4:	8abb      	ldrh	r3, [r7, #20]
 80044c6:	f083 0310 	eor.w	r3, r3, #16
 80044ca:	82bb      	strh	r3, [r7, #20]
 80044cc:	8abb      	ldrh	r3, [r7, #20]
 80044ce:	f083 0320 	eor.w	r3, r3, #32
 80044d2:	82bb      	strh	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	8abb      	ldrh	r3, [r7, #20]
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3790      	adds	r7, #144	@ 0x90
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	817b      	strh	r3, [r7, #10]
 8004510:	4613      	mov	r3, r2
 8004512:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004520:	897b      	ldrh	r3, [r7, #10]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e009      	b.n	800454c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004538:	897a      	ldrh	r2, [r7, #10]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d107      	bne.n	8004562 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	b29a      	uxth	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	80da      	strh	r2, [r3, #6]
 8004560:	e00b      	b.n	800457a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2201      	movs	r2, #1
 8004566:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	b29a      	uxth	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	b29a      	uxth	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
	...

08004588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e272      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8087 	beq.w	80046b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a8:	4b92      	ldr	r3, [pc, #584]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d00c      	beq.n	80045ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045b4:	4b8f      	ldr	r3, [pc, #572]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d112      	bne.n	80045e6 <HAL_RCC_OscConfig+0x5e>
 80045c0:	4b8c      	ldr	r3, [pc, #560]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ce:	4b89      	ldr	r3, [pc, #548]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d06c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x12c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d168      	bne.n	80046b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e24c      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x76>
 80045f0:	4b80      	ldr	r3, [pc, #512]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7f      	ldr	r2, [pc, #508]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e02e      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x98>
 8004606:	4b7b      	ldr	r3, [pc, #492]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7a      	ldr	r2, [pc, #488]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800460c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b78      	ldr	r3, [pc, #480]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a77      	ldr	r2, [pc, #476]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e01d      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0xbc>
 800462a:	4b72      	ldr	r3, [pc, #456]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a71      	ldr	r2, [pc, #452]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b6f      	ldr	r3, [pc, #444]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6e      	ldr	r2, [pc, #440]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 8004644:	4b6b      	ldr	r3, [pc, #428]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6a      	ldr	r2, [pc, #424]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800464a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b68      	ldr	r3, [pc, #416]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a67      	ldr	r2, [pc, #412]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc ff88 	bl	8001578 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fc ff84 	bl	8001578 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	@ 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e200      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b5d      	ldr	r3, [pc, #372]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0xe4>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fc ff74 	bl	8001578 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fc ff70 	bl	8001578 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	@ 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1ec      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x10c>
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4b4c      	ldr	r3, [pc, #304]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ce:	4b49      	ldr	r3, [pc, #292]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x18c>
 80046da:	4b46      	ldr	r3, [pc, #280]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b43      	ldr	r3, [pc, #268]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1c0      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4939      	ldr	r1, [pc, #228]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	e03a      	b.n	800478a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fc ff29 	bl	8001578 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472a:	f7fc ff25 	bl	8001578 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1a1      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	4b2d      	ldr	r3, [pc, #180]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4927      	ldr	r1, [pc, #156]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b26      	ldr	r3, [pc, #152]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fc ff08 	bl	8001578 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476c:	f7fc ff04 	bl	8001578 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e180      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d03a      	beq.n	800480c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d019      	beq.n	80047d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479e:	4b17      	ldr	r3, [pc, #92]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a4:	f7fc fee8 	bl	8001578 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fc fee4 	bl	8001578 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e160      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f000 face 	bl	8004d6c <RCC_Delay>
 80047d0:	e01c      	b.n	800480c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d2:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fc fece 	bl	8001578 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047de:	e00f      	b.n	8004800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fc feca 	bl	8001578 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d908      	bls.n	8004800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e146      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	42420000 	.word	0x42420000
 80047fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b92      	ldr	r3, [pc, #584]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e9      	bne.n	80047e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a6 	beq.w	8004966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4b88      	ldr	r3, [pc, #544]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4a87      	ldr	r2, [pc, #540]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	4b85      	ldr	r3, [pc, #532]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b82      	ldr	r3, [pc, #520]	@ (8004a50 <HAL_RCC_OscConfig+0x4c8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b7f      	ldr	r3, [pc, #508]	@ (8004a50 <HAL_RCC_OscConfig+0x4c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7e      	ldr	r2, [pc, #504]	@ (8004a50 <HAL_RCC_OscConfig+0x4c8>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fc fe8b 	bl	8001578 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fc fe87 	bl	8001578 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	@ 0x64
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e103      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b75      	ldr	r3, [pc, #468]	@ (8004a50 <HAL_RCC_OscConfig+0x4c8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x312>
 800488c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a6e      	ldr	r2, [pc, #440]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	e02d      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x334>
 80048a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4a69      	ldr	r2, [pc, #420]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6213      	str	r3, [r2, #32]
 80048ae:	4b67      	ldr	r3, [pc, #412]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4a66      	ldr	r2, [pc, #408]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	6213      	str	r3, [r2, #32]
 80048ba:	e01c      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x356>
 80048c4:	4b61      	ldr	r3, [pc, #388]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4a60      	ldr	r2, [pc, #384]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	6213      	str	r3, [r2, #32]
 80048d0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6213      	str	r3, [r2, #32]
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 80048de:	4b5b      	ldr	r3, [pc, #364]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4a5a      	ldr	r2, [pc, #360]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6213      	str	r3, [r2, #32]
 80048ea:	4b58      	ldr	r3, [pc, #352]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4a57      	ldr	r2, [pc, #348]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fc fe3b 	bl	8001578 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fc fe37 	bl	8001578 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0b1      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ee      	beq.n	8004906 <HAL_RCC_OscConfig+0x37e>
 8004928:	e014      	b.n	8004954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fc fe25 	bl	8001578 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fc fe21 	bl	8001578 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e09b      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004948:	4b40      	ldr	r3, [pc, #256]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8087 	beq.w	8004a7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004970:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d061      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d146      	bne.n	8004a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b33      	ldr	r3, [pc, #204]	@ (8004a54 <HAL_RCC_OscConfig+0x4cc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fc fdf5 	bl	8001578 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7fc fdf1 	bl	8001578 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e06d      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a4:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b8:	d108      	bne.n	80049cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049ba:	4b24      	ldr	r3, [pc, #144]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4921      	ldr	r1, [pc, #132]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a19      	ldr	r1, [r3, #32]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	430b      	orrs	r3, r1
 80049de:	491b      	ldr	r1, [pc, #108]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <HAL_RCC_OscConfig+0x4cc>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fc fdc5 	bl	8001578 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fc fdc1 	bl	8001578 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e03d      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x46a>
 8004a10:	e035      	b.n	8004a7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_RCC_OscConfig+0x4cc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fc fdae 	bl	8001578 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fc fdaa 	bl	8001578 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e026      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x498>
 8004a3e:	e01e      	b.n	8004a7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e019      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40007000 	.word	0x40007000
 8004a54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCC_OscConfig+0x500>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0d0      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d910      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b67      	ldr	r3, [pc, #412]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
 8004ab6:	4965      	ldr	r1, [pc, #404]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b63      	ldr	r3, [pc, #396]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0b8      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae8:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a58      	ldr	r2, [pc, #352]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b00:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a52      	ldr	r2, [pc, #328]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b50      	ldr	r3, [pc, #320]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	494d      	ldr	r1, [pc, #308]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d040      	beq.n	8004bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d115      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d107      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e073      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06b      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6a:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f023 0203 	bic.w	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4936      	ldr	r1, [pc, #216]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b7c:	f7fc fcfc 	bl	8001578 <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b84:	f7fc fcf8 	bl	8001578 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e053      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 020c 	and.w	r2, r3, #12
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d1eb      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d210      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 0207 	bic.w	r2, r3, #7
 8004bc2:	4922      	ldr	r1, [pc, #136]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e032      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4916      	ldr	r1, [pc, #88]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	490e      	ldr	r1, [pc, #56]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c1a:	f000 f821 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490a      	ldr	r1, [pc, #40]	@ (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <HAL_RCC_ClockConfig+0x1cc>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_ClockConfig+0x1d0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc fc5a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40021000 	.word	0x40021000
 8004c54:	0800aadc 	.word	0x0800aadc
 8004c58:	20000004 	.word	0x20000004
 8004c5c:	20000008 	.word	0x20000008

08004c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d002      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0x30>
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x36>
 8004c8e:	e027      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c92:	613b      	str	r3, [r7, #16]
      break;
 8004c94:	e027      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0c9b      	lsrs	r3, r3, #18
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ca0:	5cd3      	ldrb	r3, [r2, r3]
 8004ca2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cae:	4b11      	ldr	r3, [pc, #68]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	0c5b      	lsrs	r3, r3, #17
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	4a11      	ldr	r2, [pc, #68]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cc2:	fb03 f202 	mul.w	r2, r3, r2
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e004      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	613b      	str	r3, [r7, #16]
      break;
 8004cde:	e002      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ce2:	613b      	str	r3, [r7, #16]
      break;
 8004ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce6:	693b      	ldr	r3, [r7, #16]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	007a1200 	.word	0x007a1200
 8004cfc:	0800aaf4 	.word	0x0800aaf4
 8004d00:	0800ab04 	.word	0x0800ab04
 8004d04:	003d0900 	.word	0x003d0900

08004d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d0c:	4b02      	ldr	r3, [pc, #8]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	20000004 	.word	0x20000004

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d20:	f7ff fff2 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800aaec 	.word	0x0800aaec

08004d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d48:	f7ff ffde 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	0adb      	lsrs	r3, r3, #11
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4903      	ldr	r1, [pc, #12]	@ (8004d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40021000 	.word	0x40021000
 8004d68:	0800aaec 	.word	0x0800aaec

08004d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <RCC_Delay+0x34>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <RCC_Delay+0x38>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0a5b      	lsrs	r3, r3, #9
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d88:	bf00      	nop
  }
  while (Delay --);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	60fa      	str	r2, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f9      	bne.n	8004d88 <RCC_Delay+0x1c>
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	20000004 	.word	0x20000004
 8004da4:	10624dd3 	.word	0x10624dd3

08004da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d07d      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10d      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	61d3      	str	r3, [r2, #28]
 8004de0:	4b49      	ldr	r3, [pc, #292]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b46      	ldr	r3, [pc, #280]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d118      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfc:	4b43      	ldr	r3, [pc, #268]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a42      	ldr	r2, [pc, #264]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e08:	f7fc fbb6 	bl	8001578 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fc fbb2 	bl	8001578 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	@ 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e06d      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b3a      	ldr	r3, [pc, #232]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e2e:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02e      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d027      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e56:	4b2e      	ldr	r3, [pc, #184]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e62:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d014      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fc fb81 	bl	8001578 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e78:	e00a      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7a:	f7fc fb7d 	bl	8001578 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e036      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e90:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ee      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4917      	ldr	r1, [pc, #92]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	490b      	ldr	r1, [pc, #44]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eea:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	4904      	ldr	r1, [pc, #16]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42420440 	.word	0x42420440

08004f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e041      	b.n	8004faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc f9b6 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fa74 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e03a      	b.n	8005042 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <HAL_TIM_Base_Start_IT+0x98>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d009      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x58>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <HAL_TIM_Base_Start_IT+0xa0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d111      	bne.n	8005030 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d010      	beq.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	e007      	b.n	8005040 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800

08005058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0202 	mvn.w	r2, #2
 8005084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f9b4 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9a7 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9b6 	bl	800541a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d122      	bne.n	8005108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d11b      	bne.n	8005108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0204 	mvn.w	r2, #4
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f98a 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f97d 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f98c 	bl	800541a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b08      	cmp	r3, #8
 8005114:	d122      	bne.n	800515c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b08      	cmp	r3, #8
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0208 	mvn.w	r2, #8
 800512c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f960 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f953 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f962 	bl	800541a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0210 	mvn.w	r2, #16
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2208      	movs	r2, #8
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f936 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f929 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f938 	bl	800541a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0201 	mvn.w	r2, #1
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fb f82a 	bl	8000230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b80      	cmp	r3, #128	@ 0x80
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa7b 	bl	80056fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8fc 	bl	800542c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b20      	cmp	r3, #32
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0220 	mvn.w	r2, #32
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa46 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIM_ConfigClockSource+0x1c>
 8005280:	2302      	movs	r3, #2
 8005282:	e0b4      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x186>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052bc:	d03e      	beq.n	800533c <HAL_TIM_ConfigClockSource+0xd4>
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c2:	f200 8087 	bhi.w	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ca:	f000 8086 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x172>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d2:	d87f      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052d4:	2b70      	cmp	r3, #112	@ 0x70
 80052d6:	d01a      	beq.n	800530e <HAL_TIM_ConfigClockSource+0xa6>
 80052d8:	2b70      	cmp	r3, #112	@ 0x70
 80052da:	d87b      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052dc:	2b60      	cmp	r3, #96	@ 0x60
 80052de:	d050      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x11a>
 80052e0:	2b60      	cmp	r3, #96	@ 0x60
 80052e2:	d877      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052e4:	2b50      	cmp	r3, #80	@ 0x50
 80052e6:	d03c      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0xfa>
 80052e8:	2b50      	cmp	r3, #80	@ 0x50
 80052ea:	d873      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052ec:	2b40      	cmp	r3, #64	@ 0x40
 80052ee:	d058      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x13a>
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d86f      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052f4:	2b30      	cmp	r3, #48	@ 0x30
 80052f6:	d064      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 80052f8:	2b30      	cmp	r3, #48	@ 0x30
 80052fa:	d86b      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d060      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d867      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005308:	2b10      	cmp	r3, #16
 800530a:	d05a      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	e062      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800531e:	f000 f968 	bl	80055f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]
      break;
 800533a:	e04f      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800534c:	f000 f951 	bl	80055f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800535e:	609a      	str	r2, [r3, #8]
      break;
 8005360:	e03c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800536e:	461a      	mov	r2, r3
 8005370:	f000 f8c8 	bl	8005504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2150      	movs	r1, #80	@ 0x50
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f91f 	bl	80055be <TIM_ITRx_SetConfig>
      break;
 8005380:	e02c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800538e:	461a      	mov	r2, r3
 8005390:	f000 f8e6 	bl	8005560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2160      	movs	r1, #96	@ 0x60
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f90f 	bl	80055be <TIM_ITRx_SetConfig>
      break;
 80053a0:	e01c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 f8a8 	bl	8005504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2140      	movs	r1, #64	@ 0x40
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f8ff 	bl	80055be <TIM_ITRx_SetConfig>
      break;
 80053c0:	e00c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f000 f8f6 	bl	80055be <TIM_ITRx_SetConfig>
      break;
 80053d2:	e003      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e000      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
	...

08005440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a29      	ldr	r2, [pc, #164]	@ (80054f8 <TIM_Base_SetConfig+0xb8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_Base_SetConfig+0x30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d007      	beq.n	8005470 <TIM_Base_SetConfig+0x30>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a26      	ldr	r2, [pc, #152]	@ (80054fc <TIM_Base_SetConfig+0xbc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x30>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a25      	ldr	r2, [pc, #148]	@ (8005500 <TIM_Base_SetConfig+0xc0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <TIM_Base_SetConfig+0xb8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00b      	beq.n	80054a2 <TIM_Base_SetConfig+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005490:	d007      	beq.n	80054a2 <TIM_Base_SetConfig+0x62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a19      	ldr	r2, [pc, #100]	@ (80054fc <TIM_Base_SetConfig+0xbc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_Base_SetConfig+0x62>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <TIM_Base_SetConfig+0xc0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a07      	ldr	r2, [pc, #28]	@ (80054f8 <TIM_Base_SetConfig+0xb8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d103      	bne.n	80054e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	615a      	str	r2, [r3, #20]
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800

08005504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800552e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 030a 	bic.w	r3, r3, #10
 8005540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0210 	bic.w	r2, r3, #16
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800558a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	031b      	lsls	r3, r3, #12
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800559c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	f043 0307 	orr.w	r3, r3, #7
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800560c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	021a      	lsls	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	431a      	orrs	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4313      	orrs	r3, r2
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	609a      	str	r2, [r3, #8]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005644:	2302      	movs	r3, #2
 8005646:	e046      	b.n	80056d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d009      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a12      	ldr	r2, [pc, #72]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d10c      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr

080056fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e042      	b.n	80057a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fb fdf2 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2224      	movs	r2, #36	@ 0x24
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fcd5 	bl	8006104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d112      	bne.n	80057f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_UART_Receive_IT+0x26>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e00b      	b.n	80057f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	461a      	mov	r2, r3
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fab7 	bl	8005d5a <UART_Start_Receive_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	e000      	b.n	80057f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800583a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_UART_IRQHandler+0x66>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fb93 	bl	8005f86 <UART_Receive_IT>
      return;
 8005860:	e25b      	b.n	8005d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80de 	beq.w	8005a28 <HAL_UART_IRQHandler+0x22c>
 800586c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800587c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80d1 	beq.w	8005a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_UART_IRQHandler+0xae>
 8005892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0xd2>
 80058b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	f043 0202 	orr.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_UART_IRQHandler+0xf6>
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	f043 0204 	orr.w	r2, r3, #4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d011      	beq.n	8005922 <HAL_UART_IRQHandler+0x126>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	f043 0208 	orr.w	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 81f2 	beq.w	8005d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_UART_IRQHandler+0x14e>
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb1e 	bl	8005f86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <HAL_UART_IRQHandler+0x17a>
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04f      	beq.n	8005a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa28 	bl	8005dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d041      	beq.n	8005a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d9      	bne.n	800598a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d013      	beq.n	8005a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bdc <HAL_UART_IRQHandler+0x3e0>)
 80059e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc fbb8 	bl	8002160 <HAL_DMA_Abort_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e00e      	b.n	8005a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f993 	bl	8005d32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00a      	b.n	8005a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f98f 	bl	8005d32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e006      	b.n	8005a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f98b 	bl	8005d32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a22:	e175      	b.n	8005d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a24:	bf00      	nop
    return;
 8005a26:	e173      	b.n	8005d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 814f 	bne.w	8005cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8148 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8141 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80b6 	beq.w	8005be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8145 	beq.w	8005d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f080 813e 	bcs.w	8005d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	f000 8088 	beq.w	8005bbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ad8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ae4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1d9      	bne.n	8005aac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3314      	adds	r3, #20
 8005b18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e1      	bne.n	8005af8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e3      	bne.n	8005b34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ba0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e3      	bne.n	8005b7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fc fa96 	bl	80020e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8b6 	bl	8005d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bd8:	e09c      	b.n	8005d14 <HAL_UART_IRQHandler+0x518>
 8005bda:	bf00      	nop
 8005bdc:	08005e91 	.word	0x08005e91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 808e 	beq.w	8005d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8089 	beq.w	8005d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e3      	bne.n	8005c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e3      	bne.n	8005c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f83b 	bl	8005d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cce:	e023      	b.n	8005d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x4f4>
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8e5 	bl	8005eb8 <UART_Transmit_IT>
    return;
 8005cee:	e014      	b.n	8005d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <HAL_UART_IRQHandler+0x51e>
 8005cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f924 	bl	8005f56 <UART_EndTransmit_IT>
    return;
 8005d0e:	e004      	b.n	8005d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d18:	bf00      	nop
  }
}
 8005d1a:	37e8      	adds	r7, #232	@ 0xe8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr

08005d32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2222      	movs	r2, #34	@ 0x22
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0220 	orr.w	r2, r2, #32
 8005dbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b095      	sub	sp, #84	@ 0x54
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005df4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e5      	bne.n	8005dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d119      	bne.n	8005e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f023 0310 	bic.w	r3, r3, #16
 8005e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e64:	61ba      	str	r2, [r7, #24]
 8005e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6979      	ldr	r1, [r7, #20]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	613b      	str	r3, [r7, #16]
   return(result);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e86:	bf00      	nop
 8005e88:	3754      	adds	r7, #84	@ 0x54
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ff41 	bl	8005d32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b21      	cmp	r3, #33	@ 0x21
 8005eca:	d13e      	bne.n	8005f4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed4:	d114      	bne.n	8005f00 <UART_Transmit_IT+0x48>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d110      	bne.n	8005f00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]
 8005efe:	e008      	b.n	8005f12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6211      	str	r1, [r2, #32]
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e000      	b.n	8005f4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fed2 	bl	8005d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08c      	sub	sp, #48	@ 0x30
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b22      	cmp	r3, #34	@ 0x22
 8005f98:	f040 80ae 	bne.w	80060f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d117      	bne.n	8005fd6 <UART_Receive_IT+0x50>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fce:	1c9a      	adds	r2, r3, #2
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fd4:	e026      	b.n	8006024 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe8:	d007      	beq.n	8005ffa <UART_Receive_IT+0x74>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <UART_Receive_IT+0x82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e008      	b.n	800601a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29b      	uxth	r3, r3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006034:	2b00      	cmp	r3, #0
 8006036:	d15d      	bne.n	80060f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0220 	bic.w	r2, r2, #32
 8006046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607a:	2b01      	cmp	r3, #1
 800607c:	d135      	bne.n	80060ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	613b      	str	r3, [r7, #16]
   return(result);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	623a      	str	r2, [r7, #32]
 80060a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	6a3a      	ldr	r2, [r7, #32]
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d10a      	bne.n	80060dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fe2e 	bl	8005d44 <HAL_UARTEx_RxEventCallback>
 80060e8:	e002      	b.n	80060f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fa f908 	bl	8000300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e002      	b.n	80060fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	@ 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800613e:	f023 030c 	bic.w	r3, r3, #12
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	430b      	orrs	r3, r1
 800614a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <UART_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d103      	bne.n	8006174 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800616c:	f7fe fdea 	bl	8004d44 <HAL_RCC_GetPCLK2Freq>
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	e002      	b.n	800617a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fe fdd2 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006178:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009a      	lsls	r2, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	4a22      	ldr	r2, [pc, #136]	@ (800621c <UART_SetConfig+0x118>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	0119      	lsls	r1, r3, #4
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b0:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <UART_SetConfig+0x118>)
 80061b2:	fba3 0302 	umull	r0, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2064      	movs	r0, #100	@ 0x64
 80061ba:	fb00 f303 	mul.w	r3, r0, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	3332      	adds	r3, #50	@ 0x32
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <UART_SetConfig+0x118>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061d0:	4419      	add	r1, r3
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009a      	lsls	r2, r3, #2
 80061dc:	441a      	add	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061e8:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <UART_SetConfig+0x118>)
 80061ea:	fba3 0302 	umull	r0, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2064      	movs	r0, #100	@ 0x64
 80061f2:	fb00 f303 	mul.w	r3, r0, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	3332      	adds	r3, #50	@ 0x32
 80061fc:	4a07      	ldr	r2, [pc, #28]	@ (800621c <UART_SetConfig+0x118>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	f003 020f 	and.w	r2, r3, #15
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	440a      	add	r2, r1
 800620e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40013800 	.word	0x40013800
 800621c:	51eb851f 	.word	0x51eb851f

08006220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006220:	b084      	sub	sp, #16
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	f107 0014 	add.w	r0, r7, #20
 800622e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr

08006240 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006250:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006254:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	b29a      	uxth	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006274:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006278:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	b29b      	uxth	r3, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	b29b      	uxth	r3, r3
 800628a:	4013      	ands	r3, r2
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062b8:	b084      	sub	sp, #16
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	f107 0014 	add.w	r0, r7, #20
 80062c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	b004      	add	sp, #16
 80062f6:	4770      	bx	lr

080062f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b09d      	sub	sp, #116	@ 0x74
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800631a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	78db      	ldrb	r3, [r3, #3]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d81f      	bhi.n	800636a <USB_ActivateEndpoint+0x72>
 800632a:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <USB_ActivateEndpoint+0x38>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006341 	.word	0x08006341
 8006334:	0800635d 	.word	0x0800635d
 8006338:	08006373 	.word	0x08006373
 800633c:	0800634f 	.word	0x0800634f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006348:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800634c:	e012      	b.n	8006374 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800634e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006352:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006356:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800635a:	e00b      	b.n	8006374 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800635c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006364:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006368:	e004      	b.n	8006374 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006370:	e000      	b.n	8006374 <USB_ActivateEndpoint+0x7c>
      break;
 8006372:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	7b1b      	ldrb	r3, [r3, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f040 8178 	bne.w	80066d4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8084 	beq.w	80064f6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	4413      	add	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	011a      	lsls	r2, r3, #4
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	88db      	ldrh	r3, [r3, #6]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	827b      	strh	r3, [r7, #18]
 8006430:	8a7b      	ldrh	r3, [r7, #18]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01b      	beq.n	8006472 <USB_ActivateEndpoint+0x17a>
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006450:	823b      	strh	r3, [r7, #16]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	8a3b      	ldrh	r3, [r7, #16]
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d020      	beq.n	80064bc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006490:	81bb      	strh	r3, [r7, #12]
 8006492:	89bb      	ldrh	r3, [r7, #12]
 8006494:	f083 0320 	eor.w	r3, r3, #32
 8006498:	81bb      	strh	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	89bb      	ldrh	r3, [r7, #12]
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]
 80064ba:	e2d5      	b.n	8006a68 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d2:	81fb      	strh	r3, [r7, #14]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
 80064f4:	e2b8      	b.n	8006a68 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006500:	b29b      	uxth	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	4413      	add	r3, r2
 8006508:	633b      	str	r3, [r7, #48]	@ 0x30
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	011a      	lsls	r2, r3, #4
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	4413      	add	r3, r2
 8006514:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	88db      	ldrh	r3, [r3, #6]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006534:	b29b      	uxth	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	4413      	add	r3, r2
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	4413      	add	r3, r2
 8006548:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006558:	b29a      	uxth	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b3e      	cmp	r3, #62	@ 0x3e
 8006564:	d91d      	bls.n	80065a2 <USB_ActivateEndpoint+0x2aa>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <USB_ActivateEndpoint+0x288>
 800657a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800657c:	3b01      	subs	r3, #1
 800657e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29a      	uxth	r2, r3
 8006586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006588:	b29b      	uxth	r3, r3
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	b29b      	uxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e026      	b.n	80065f0 <USB_ActivateEndpoint+0x2f8>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <USB_ActivateEndpoint+0x2c8>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e017      	b.n	80065f0 <USB_ActivateEndpoint+0x2f8>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <USB_ActivateEndpoint+0x2e2>
 80065d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065d6:	3301      	adds	r3, #1
 80065d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80065fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <USB_ActivateEndpoint+0x348>
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661e:	843b      	strh	r3, [r7, #32]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	8c3b      	ldrh	r3, [r7, #32]
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d124      	bne.n	8006692 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800665a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800665e:	83bb      	strh	r3, [r7, #28]
 8006660:	8bbb      	ldrh	r3, [r7, #28]
 8006662:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006666:	83bb      	strh	r3, [r7, #28]
 8006668:	8bbb      	ldrh	r3, [r7, #28]
 800666a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800666e:	83bb      	strh	r3, [r7, #28]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8bbb      	ldrh	r3, [r7, #28]
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
 8006690:	e1ea      	b.n	8006a68 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a8:	83fb      	strh	r3, [r7, #30]
 80066aa:	8bfb      	ldrh	r3, [r7, #30]
 80066ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066b0:	83fb      	strh	r3, [r7, #30]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8bfb      	ldrh	r3, [r7, #30]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e1c9      	b.n	8006a68 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	78db      	ldrb	r3, [r3, #3]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d11e      	bne.n	800671a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]
 8006718:	e01d      	b.n	8006756 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800672c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006730:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006766:	4413      	add	r3, r2
 8006768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	011a      	lsls	r2, r3, #4
 8006770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006772:	4413      	add	r3, r2
 8006774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	891b      	ldrh	r3, [r3, #8]
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	b29b      	uxth	r3, r3
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	657b      	str	r3, [r7, #84]	@ 0x54
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679a:	4413      	add	r3, r2
 800679c:	657b      	str	r3, [r7, #84]	@ 0x54
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	011a      	lsls	r2, r3, #4
 80067a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80067ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	895b      	ldrh	r3, [r3, #10]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f040 8093 	bne.w	80068ee <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80067d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01b      	beq.n	800681c <USB_ActivateEndpoint+0x524>
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800682a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800682c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01b      	beq.n	800686c <USB_ActivateEndpoint+0x574>
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	441a      	add	r2, r3
 8006856:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800685c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006864:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006868:	b29b      	uxth	r3, r3
 800686a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006884:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006886:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800688a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800688c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800688e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006892:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
 80068ec:	e0bc      	b.n	8006a68 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80068fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01d      	beq.n	8006946 <USB_ActivateEndpoint+0x64e>
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006920:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006956:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800695a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01d      	beq.n	800699e <USB_ActivateEndpoint+0x6a6>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006978:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006996:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	78db      	ldrb	r3, [r3, #3]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d024      	beq.n	80069f0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80069c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80069c4:	f083 0320 	eor.w	r3, r3, #32
 80069c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
 80069ee:	e01d      	b.n	8006a2c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a68:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3774      	adds	r7, #116	@ 0x74
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b08d      	sub	sp, #52	@ 0x34
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	7b1b      	ldrb	r3, [r3, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 808e 	bne.w	8006ba8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d044      	beq.n	8006b1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	81bb      	strh	r3, [r7, #12]
 8006aa2:	89bb      	ldrh	r3, [r7, #12]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01b      	beq.n	8006ae4 <USB_DeactivateEndpoint+0x6c>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	817b      	strh	r3, [r7, #10]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006adc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afa:	813b      	strh	r3, [r7, #8]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	893b      	ldrh	r3, [r7, #8]
 8006b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	8013      	strh	r3, [r2, #0]
 8006b1c:	e192      	b.n	8006e44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	827b      	strh	r3, [r7, #18]
 8006b2c:	8a7b      	ldrh	r3, [r7, #18]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01b      	beq.n	8006b6e <USB_DeactivateEndpoint+0xf6>
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4c:	823b      	strh	r3, [r7, #16]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	8a3b      	ldrh	r3, [r7, #16]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b84:	81fb      	strh	r3, [r7, #14]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	441a      	add	r2, r3
 8006b90:	89fb      	ldrh	r3, [r7, #14]
 8006b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	8013      	strh	r3, [r2, #0]
 8006ba6:	e14d      	b.n	8006e44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f040 80a5 	bne.w	8006cfc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	843b      	strh	r3, [r7, #32]
 8006bc0:	8c3b      	ldrh	r3, [r7, #32]
 8006bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01b      	beq.n	8006c02 <USB_DeactivateEndpoint+0x18a>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be0:	83fb      	strh	r3, [r7, #30]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	83bb      	strh	r3, [r7, #28]
 8006c10:	8bbb      	ldrh	r3, [r7, #28]
 8006c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01b      	beq.n	8006c52 <USB_DeactivateEndpoint+0x1da>
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c30:	837b      	strh	r3, [r7, #26]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	8b7b      	ldrh	r3, [r7, #26]
 8006c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c68:	833b      	strh	r3, [r7, #24]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	441a      	add	r2, r3
 8006c74:	8b3b      	ldrh	r3, [r7, #24]
 8006c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca0:	82fb      	strh	r3, [r7, #22]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	441a      	add	r2, r3
 8006cac:	8afb      	ldrh	r3, [r7, #22]
 8006cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd8:	82bb      	strh	r3, [r7, #20]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	8abb      	ldrh	r3, [r7, #20]
 8006ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]
 8006cfa:	e0a3      	b.n	8006e44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006d0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01b      	beq.n	8006d4c <USB_DeactivateEndpoint+0x2d4>
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006d5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01b      	beq.n	8006d9c <USB_DeactivateEndpoint+0x324>
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d7a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	441a      	add	r2, r3
 8006dbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	441a      	add	r2, r3
 8006df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	441a      	add	r2, r3
 8006e2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006e30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3734      	adds	r7, #52	@ 0x34
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b0c2      	sub	sp, #264	@ 0x108
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5e:	6018      	str	r0, [r3, #0]
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	f040 86b7 	bne.w	8007bea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d908      	bls.n	8006eaa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ea8:	e007      	b.n	8006eba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	7b1b      	ldrb	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d13a      	bne.n	8006f40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6959      	ldr	r1, [r3, #20]
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	88da      	ldrh	r2, [r3, #6]
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ef0:	6800      	ldr	r0, [r0, #0]
 8006ef2:	f001 fc9c 	bl	800882e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	011a      	lsls	r2, r3, #4
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	f000 be1f 	b.w	8007b7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	f040 8462 	bne.w	8007816 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6a1a      	ldr	r2, [r3, #32]
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f240 83df 	bls.w	800772e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f96:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	441a      	add	r2, r3
 8006fb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	1ad2      	subs	r2, r2, r3
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 81c7 	beq.w	80073a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
 800701e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d177      	bne.n	800711e <USB_EPStartXfer+0x2ce>
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	4413      	add	r3, r2
 8007050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	011a      	lsls	r2, r3, #4
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	4413      	add	r3, r2
 8007064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007074:	b29a      	uxth	r2, r3
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007080:	d921      	bls.n	80070c6 <USB_EPStartXfer+0x276>
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <USB_EPStartXfer+0x252>
 8007098:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800709c:	3b01      	subs	r3, #1
 800709e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e050      	b.n	8007168 <USB_EPStartXfer+0x318>
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <USB_EPStartXfer+0x294>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e041      	b.n	8007168 <USB_EPStartXfer+0x318>
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <USB_EPStartXfer+0x2b4>
 80070fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070fe:	3301      	adds	r3, #1
 8007100:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800710e:	b29b      	uxth	r3, r3
 8007110:	029b      	lsls	r3, r3, #10
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e024      	b.n	8007168 <USB_EPStartXfer+0x318>
 800711e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d11c      	bne.n	8007168 <USB_EPStartXfer+0x318>
 800712e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	4413      	add	r3, r2
 8007144:	633b      	str	r3, [r7, #48]	@ 0x30
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	011a      	lsls	r2, r3, #4
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	4413      	add	r3, r2
 8007158:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	b29a      	uxth	r2, r3
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	895b      	ldrh	r3, [r3, #10]
 8007174:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6959      	ldr	r1, [r3, #20]
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007188:	b29b      	uxth	r3, r3
 800718a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800718e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007192:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	f001 fb49 	bl	800882e <USB_WritePMA>
            ep->xfer_buff += len;
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	441a      	add	r2, r3
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d90f      	bls.n	80071f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	621a      	str	r2, [r3, #32]
 80071f4:	e00e      	b.n	8007214 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d177      	bne.n	8007314 <USB_EPStartXfer+0x4c4>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	4413      	add	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	4413      	add	r3, r2
 800725a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726a:	b29a      	uxth	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	2b3e      	cmp	r3, #62	@ 0x3e
 8007276:	d921      	bls.n	80072bc <USB_EPStartXfer+0x46c>
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <USB_EPStartXfer+0x448>
 800728e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007292:	3b01      	subs	r3, #1
 8007294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e056      	b.n	800736a <USB_EPStartXfer+0x51a>
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <USB_EPStartXfer+0x48a>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e047      	b.n	800736a <USB_EPStartXfer+0x51a>
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x4aa>
 80072f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007304:	b29b      	uxth	r3, r3
 8007306:	029b      	lsls	r3, r3, #10
 8007308:	b29b      	uxth	r3, r3
 800730a:	4313      	orrs	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e02a      	b.n	800736a <USB_EPStartXfer+0x51a>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d122      	bne.n	800736a <USB_EPStartXfer+0x51a>
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	623b      	str	r3, [r7, #32]
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	4413      	add	r3, r2
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	011a      	lsls	r2, r3, #4
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	4413      	add	r3, r2
 800735a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	b29a      	uxth	r2, r3
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	891b      	ldrh	r3, [r3, #8]
 8007376:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6959      	ldr	r1, [r3, #20]
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738a:	b29b      	uxth	r3, r3
 800738c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007390:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007394:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007398:	6800      	ldr	r0, [r0, #0]
 800739a:	f001 fa48 	bl	800882e <USB_WritePMA>
 800739e:	e3ee      	b.n	8007b7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d177      	bne.n	80074a0 <USB_EPStartXfer+0x650>
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d0:	4413      	add	r3, r2
 80073d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	011a      	lsls	r2, r3, #4
 80073e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073e4:	4413      	add	r3, r2
 80073e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	2b3e      	cmp	r3, #62	@ 0x3e
 8007402:	d921      	bls.n	8007448 <USB_EPStartXfer+0x5f8>
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <USB_EPStartXfer+0x5d4>
 800741a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800741e:	3b01      	subs	r3, #1
 8007420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29a      	uxth	r2, r3
 800742a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800742e:	b29b      	uxth	r3, r3
 8007430:	029b      	lsls	r3, r3, #10
 8007432:	b29b      	uxth	r3, r3
 8007434:	4313      	orrs	r3, r2
 8007436:	b29b      	uxth	r3, r3
 8007438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007440:	b29a      	uxth	r2, r3
 8007442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e056      	b.n	80074f6 <USB_EPStartXfer+0x6a6>
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <USB_EPStartXfer+0x616>
 8007450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e047      	b.n	80074f6 <USB_EPStartXfer+0x6a6>
 8007466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <USB_EPStartXfer+0x636>
 800747c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29a      	uxth	r2, r3
 800748c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007490:	b29b      	uxth	r3, r3
 8007492:	029b      	lsls	r3, r3, #10
 8007494:	b29b      	uxth	r3, r3
 8007496:	4313      	orrs	r3, r2
 8007498:	b29a      	uxth	r2, r3
 800749a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e02a      	b.n	80074f6 <USB_EPStartXfer+0x6a6>
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d122      	bne.n	80074f6 <USB_EPStartXfer+0x6a6>
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80074bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d0:	4413      	add	r3, r2
 80074d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	011a      	lsls	r2, r3, #4
 80074e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	891b      	ldrh	r3, [r3, #8]
 8007502:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6959      	ldr	r1, [r3, #20]
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	b29b      	uxth	r3, r3
 8007518:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800751c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007520:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007524:	6800      	ldr	r0, [r0, #0]
 8007526:	f001 f982 	bl	800882e <USB_WritePMA>
            ep->xfer_buff += len;
 800752a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	441a      	add	r2, r3
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d90f      	bls.n	8007584 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	621a      	str	r2, [r3, #32]
 8007582:	e00e      	b.n	80075a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d177      	bne.n	80076ae <USB_EPStartXfer+0x85e>
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	4413      	add	r3, r2
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	011a      	lsls	r2, r3, #4
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007604:	b29a      	uxth	r2, r3
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007610:	d921      	bls.n	8007656 <USB_EPStartXfer+0x806>
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <USB_EPStartXfer+0x7e2>
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	3b01      	subs	r3, #1
 800762e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29a      	uxth	r2, r3
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	b29b      	uxth	r3, r3
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	b29b      	uxth	r3, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29a      	uxth	r2, r3
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e050      	b.n	80076f8 <USB_EPStartXfer+0x8a8>
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <USB_EPStartXfer+0x824>
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766c:	b29a      	uxth	r2, r3
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	e041      	b.n	80076f8 <USB_EPStartXfer+0x8a8>
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <USB_EPStartXfer+0x844>
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768e:	3301      	adds	r3, #1
 8007690:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769e:	b29b      	uxth	r3, r3
 80076a0:	029b      	lsls	r3, r3, #10
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e024      	b.n	80076f8 <USB_EPStartXfer+0x8a8>
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d11c      	bne.n	80076f8 <USB_EPStartXfer+0x8a8>
 80076be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d2:	4413      	add	r3, r2
 80076d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	011a      	lsls	r2, r3, #4
 80076e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e6:	4413      	add	r3, r2
 80076e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	895b      	ldrh	r3, [r3, #10]
 8007704:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6959      	ldr	r1, [r3, #20]
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	b29b      	uxth	r3, r3
 800771a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800771e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007722:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	f001 f881 	bl	800882e <USB_WritePMA>
 800772c:	e227      	b.n	8007b7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007764:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077ba:	4413      	add	r3, r2
 80077bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	011a      	lsls	r2, r3, #4
 80077cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077ce:	4413      	add	r3, r2
 80077d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	b29a      	uxth	r2, r3
 80077dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	891b      	ldrh	r3, [r3, #8]
 80077ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6959      	ldr	r1, [r3, #20]
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007800:	b29b      	uxth	r3, r3
 8007802:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007806:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800780a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800780e:	6800      	ldr	r0, [r0, #0]
 8007810:	f001 f80d 	bl	800882e <USB_WritePMA>
 8007814:	e1b3      	b.n	8007b7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a1a      	ldr	r2, [r3, #32]
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80c6 	beq.w	80079e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	673b      	str	r3, [r7, #112]	@ 0x70
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d177      	bne.n	8007968 <USB_EPStartXfer+0xb18>
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007898:	4413      	add	r3, r2
 800789a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011a      	lsls	r2, r3, #4
 80078aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80078b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078be:	b29a      	uxth	r2, r3
 80078c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078ca:	d921      	bls.n	8007910 <USB_EPStartXfer+0xac0>
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <USB_EPStartXfer+0xa9c>
 80078e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078e6:	3b01      	subs	r3, #1
 80078e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	029b      	lsls	r3, r3, #10
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4313      	orrs	r3, r2
 80078fe:	b29b      	uxth	r3, r3
 8007900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007908:	b29a      	uxth	r2, r3
 800790a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	e050      	b.n	80079b2 <USB_EPStartXfer+0xb62>
 8007910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <USB_EPStartXfer+0xade>
 8007918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	e041      	b.n	80079b2 <USB_EPStartXfer+0xb62>
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <USB_EPStartXfer+0xafe>
 8007944:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007948:	3301      	adds	r3, #1
 800794a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800794e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007958:	b29b      	uxth	r3, r3
 800795a:	029b      	lsls	r3, r3, #10
 800795c:	b29b      	uxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b29a      	uxth	r2, r3
 8007962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	e024      	b.n	80079b2 <USB_EPStartXfer+0xb62>
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d11c      	bne.n	80079b2 <USB_EPStartXfer+0xb62>
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800798c:	4413      	add	r3, r2
 800798e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	011a      	lsls	r2, r3, #4
 800799e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079a0:	4413      	add	r3, r2
 80079a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80079b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	895b      	ldrh	r3, [r3, #10]
 80079be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6959      	ldr	r1, [r3, #20]
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	f000 ff24 	bl	800882e <USB_WritePMA>
 80079e6:	e0ca      	b.n	8007b7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d177      	bne.n	8007ae8 <USB_EPStartXfer+0xc98>
 80079f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a18:	4413      	add	r3, r2
 8007a1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	011a      	lsls	r2, r3, #4
 8007a2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a4a:	d921      	bls.n	8007a90 <USB_EPStartXfer+0xc40>
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <USB_EPStartXfer+0xc1c>
 8007a62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a66:	3b01      	subs	r3, #1
 8007a68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	e05c      	b.n	8007b4a <USB_EPStartXfer+0xcfa>
 8007a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <USB_EPStartXfer+0xc5e>
 8007a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e04d      	b.n	8007b4a <USB_EPStartXfer+0xcfa>
 8007aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <USB_EPStartXfer+0xc7e>
 8007ac4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	029b      	lsls	r3, r3, #10
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	e030      	b.n	8007b4a <USB_EPStartXfer+0xcfa>
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d128      	bne.n	8007b4a <USB_EPStartXfer+0xcfa>
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	011a      	lsls	r2, r3, #4
 8007b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b34:	4413      	add	r3, r2
 8007b36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	891b      	ldrh	r3, [r3, #8]
 8007b56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6959      	ldr	r1, [r3, #20]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b78:	6800      	ldr	r0, [r0, #0]
 8007b7a:	f000 fe58 	bl	800882e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba4:	817b      	strh	r3, [r7, #10]
 8007ba6:	897b      	ldrh	r3, [r7, #10]
 8007ba8:	f083 0310 	eor.w	r3, r3, #16
 8007bac:	817b      	strh	r3, [r7, #10]
 8007bae:	897b      	ldrh	r3, [r7, #10]
 8007bb0:	f083 0320 	eor.w	r3, r3, #32
 8007bb4:	817b      	strh	r3, [r7, #10]
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	897b      	ldrh	r3, [r7, #10]
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
 8007be6:	f000 bcde 	b.w	80085a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	7b1b      	ldrb	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 80bb 	bne.w	8007d72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699a      	ldr	r2, [r3, #24]
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d917      	bls.n	8007c48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	699a      	ldr	r2, [r3, #24]
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	1ad2      	subs	r2, r2, r3
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	e00e      	b.n	8007c66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	011a      	lsls	r2, r3, #4
 8007c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc6:	d924      	bls.n	8007d12 <USB_EPStartXfer+0xec2>
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <USB_EPStartXfer+0xe98>
 8007cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	029b      	lsls	r3, r3, #10
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	f000 bc10 	b.w	8008532 <USB_EPStartXfer+0x16e2>
 8007d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10c      	bne.n	8007d34 <USB_EPStartXfer+0xee4>
 8007d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d30:	801a      	strh	r2, [r3, #0]
 8007d32:	e3fe      	b.n	8008532 <USB_EPStartXfer+0x16e2>
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <USB_EPStartXfer+0xf04>
 8007d4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	029b      	lsls	r3, r3, #10
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e3df      	b.n	8008532 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	78db      	ldrb	r3, [r3, #3]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	f040 8218 	bne.w	80081b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 809d 	bne.w	8007ed0 <USB_EPStartXfer+0x1080>
 8007d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dba:	4413      	add	r3, r2
 8007dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	011a      	lsls	r2, r3, #4
 8007dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dfe:	d92b      	bls.n	8007e58 <USB_EPStartXfer+0x1008>
 8007e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <USB_EPStartXfer+0xfe0>
 8007e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	029b      	lsls	r3, r3, #10
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	e070      	b.n	8007f3a <USB_EPStartXfer+0x10ea>
 8007e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10c      	bne.n	8007e82 <USB_EPStartXfer+0x1032>
 8007e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	e05b      	b.n	8007f3a <USB_EPStartXfer+0x10ea>
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <USB_EPStartXfer+0x1062>
 8007ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eac:	3301      	adds	r3, #1
 8007eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	029b      	lsls	r3, r3, #10
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	e034      	b.n	8007f3a <USB_EPStartXfer+0x10ea>
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d12c      	bne.n	8007f3a <USB_EPStartXfer+0x10ea>
 8007ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f04:	4413      	add	r3, r2
 8007f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	011a      	lsls	r2, r3, #4
 8007f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 809d 	bne.w	8008094 <USB_EPStartXfer+0x1244>
 8007f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f7e:	4413      	add	r3, r2
 8007f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	011a      	lsls	r2, r3, #4
 8007f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f96:	4413      	add	r3, r2
 8007f98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc2:	d92b      	bls.n	800801c <USB_EPStartXfer+0x11cc>
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <USB_EPStartXfer+0x11a4>
 8007fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29b      	uxth	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e069      	b.n	80080f0 <USB_EPStartXfer+0x12a0>
 800801c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10c      	bne.n	8008046 <USB_EPStartXfer+0x11f6>
 800802c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e054      	b.n	80080f0 <USB_EPStartXfer+0x12a0>
 8008046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <USB_EPStartXfer+0x1226>
 800806c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008070:	3301      	adds	r3, #1
 8008072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e02d      	b.n	80080f0 <USB_EPStartXfer+0x12a0>
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d125      	bne.n	80080f0 <USB_EPStartXfer+0x12a0>
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080ba:	4413      	add	r3, r2
 80080bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	011a      	lsls	r2, r3, #4
 80080ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080d2:	4413      	add	r3, r2
 80080d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8218 	beq.w	8008532 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <USB_EPStartXfer+0x12ea>
 800812e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10d      	bne.n	8008156 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800813a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800813e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 81f5 	bne.w	8008532 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008148:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 81ee 	bne.w	8008532 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]
 80081b2:	e1be      	b.n	8008532 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80081b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	78db      	ldrb	r3, [r3, #3]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	f040 81b4 	bne.w	800852e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80081c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d917      	bls.n	8008212 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80081e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	619a      	str	r2, [r3, #24]
 8008210:	e00e      	b.n	8008230 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2200      	movs	r2, #0
 800822e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8085 	bne.w	800834c <USB_EPStartXfer+0x14fc>
 8008242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800827e:	4413      	add	r3, r2
 8008280:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80082a2:	d923      	bls.n	80082ec <USB_EPStartXfer+0x149c>
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d104      	bne.n	80082c4 <USB_EPStartXfer+0x1474>
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082be:	3b01      	subs	r3, #1
 80082c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	e060      	b.n	80083ae <USB_EPStartXfer+0x155e>
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10c      	bne.n	800830e <USB_EPStartXfer+0x14be>
 80082f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	e04f      	b.n	80083ae <USB_EPStartXfer+0x155e>
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <USB_EPStartXfer+0x14de>
 8008324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008328:	3301      	adds	r3, #1
 800832a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800832e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29b      	uxth	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	e030      	b.n	80083ae <USB_EPStartXfer+0x155e>
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d128      	bne.n	80083ae <USB_EPStartXfer+0x155e>
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800836a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008378:	b29b      	uxth	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008380:	4413      	add	r3, r2
 8008382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	011a      	lsls	r2, r3, #4
 8008394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008398:	4413      	add	r3, r2
 800839a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800839e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 8085 	bne.w	80084d8 <USB_EPStartXfer+0x1688>
 80083ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80083f2:	4413      	add	r3, r2
 80083f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	011a      	lsls	r2, r3, #4
 8008406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800840a:	4413      	add	r3, r2
 800840c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842c:	2b3e      	cmp	r3, #62	@ 0x3e
 800842e:	d923      	bls.n	8008478 <USB_EPStartXfer+0x1628>
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843e:	f003 031f 	and.w	r3, r3, #31
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <USB_EPStartXfer+0x1600>
 8008446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800844a:	3b01      	subs	r3, #1
 800844c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29a      	uxth	r2, r3
 8008458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800845c:	b29b      	uxth	r3, r3
 800845e:	029b      	lsls	r3, r3, #10
 8008460:	b29b      	uxth	r3, r3
 8008462:	4313      	orrs	r3, r2
 8008464:	b29b      	uxth	r3, r3
 8008466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800846a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e05c      	b.n	8008532 <USB_EPStartXfer+0x16e2>
 8008478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <USB_EPStartXfer+0x164a>
 8008480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008490:	b29a      	uxth	r2, r3
 8008492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	e04b      	b.n	8008532 <USB_EPStartXfer+0x16e2>
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <USB_EPStartXfer+0x166a>
 80084b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084b4:	3301      	adds	r3, #1
 80084b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	e02c      	b.n	8008532 <USB_EPStartXfer+0x16e2>
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d124      	bne.n	8008532 <USB_EPStartXfer+0x16e2>
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084fe:	4413      	add	r3, r2
 8008500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	011a      	lsls	r2, r3, #4
 8008512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008516:	4413      	add	r3, r2
 8008518:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800851c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e001      	b.n	8008532 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e03a      	b.n	80085a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008558:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800855c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008560:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008564:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008568:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800856c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008570:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800859a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d020      	beq.n	8008606 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085da:	81bb      	strh	r3, [r7, #12]
 80085dc:	89bb      	ldrh	r3, [r7, #12]
 80085de:	f083 0310 	eor.w	r3, r3, #16
 80085e2:	81bb      	strh	r3, [r7, #12]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	89bb      	ldrh	r3, [r7, #12]
 80085f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008600:	b29b      	uxth	r3, r3
 8008602:	8013      	strh	r3, [r2, #0]
 8008604:	e01f      	b.n	8008646 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861c:	81fb      	strh	r3, [r7, #14]
 800861e:	89fb      	ldrh	r3, [r7, #14]
 8008620:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008624:	81fb      	strh	r3, [r7, #14]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	441a      	add	r2, r3
 8008630:	89fb      	ldrh	r3, [r7, #14]
 8008632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800863a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800863e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008642:	b29b      	uxth	r3, r3
 8008644:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008652:	b480      	push	{r7}
 8008654:	b087      	sub	sp, #28
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	7b1b      	ldrb	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 809d 	bne.w	80087a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d04c      	beq.n	8008708 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	823b      	strh	r3, [r7, #16]
 800867c:	8a3b      	ldrh	r3, [r7, #16]
 800867e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01b      	beq.n	80086be <USB_EPClearStall+0x6c>
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869c:	81fb      	strh	r3, [r7, #14]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d06c      	beq.n	80087a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086dc:	81bb      	strh	r3, [r7, #12]
 80086de:	89bb      	ldrh	r3, [r7, #12]
 80086e0:	f083 0320 	eor.w	r3, r3, #32
 80086e4:	81bb      	strh	r3, [r7, #12]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	89bb      	ldrh	r3, [r7, #12]
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]
 8008706:	e04b      	b.n	80087a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	82fb      	strh	r3, [r7, #22]
 8008716:	8afb      	ldrh	r3, [r7, #22]
 8008718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01b      	beq.n	8008758 <USB_EPClearStall+0x106>
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008736:	82bb      	strh	r3, [r7, #20]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	441a      	add	r2, r3
 8008742:	8abb      	ldrh	r3, [r7, #20]
 8008744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008754:	b29b      	uxth	r3, r3
 8008756:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800876a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800876e:	827b      	strh	r3, [r7, #18]
 8008770:	8a7b      	ldrh	r3, [r7, #18]
 8008772:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008776:	827b      	strh	r3, [r7, #18]
 8008778:	8a7b      	ldrh	r3, [r7, #18]
 800877a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800877e:	827b      	strh	r3, [r7, #18]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	8a7b      	ldrh	r3, [r7, #18]
 800878c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879c:	b29b      	uxth	r3, r3
 800879e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2280      	movs	r2, #128	@ 0x80
 80087c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bc80      	pop	{r7}
 80087d0:	4770      	bx	lr

080087d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr

080087e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr

080087fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008808:	b29b      	uxth	r3, r3
 800880a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800880c:	68fb      	ldr	r3, [r7, #12]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	4770      	bx	lr

0800882e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800882e:	b480      	push	{r7}
 8008830:	b08b      	sub	sp, #44	@ 0x2c
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	4611      	mov	r1, r2
 800883a:	461a      	mov	r2, r3
 800883c:	460b      	mov	r3, r1
 800883e:	80fb      	strh	r3, [r7, #6]
 8008840:	4613      	mov	r3, r2
 8008842:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008844:	88bb      	ldrh	r3, [r7, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008854:	88fb      	ldrh	r3, [r7, #6]
 8008856:	005a      	lsls	r2, r3, #1
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008860:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
 8008866:	e01e      	b.n	80088a6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	b21a      	sxth	r2, r3
 8008878:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800887c:	4313      	orrs	r3, r2
 800887e:	b21b      	sxth	r3, r3
 8008880:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	8a7a      	ldrh	r2, [r7, #18]
 8008886:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	3302      	adds	r3, #2
 800888c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3302      	adds	r3, #2
 8008892:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	3301      	adds	r3, #1
 8008898:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3301      	adds	r3, #1
 800889e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	3b01      	subs	r3, #1
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1dd      	bne.n	8008868 <USB_WritePMA+0x3a>
  }
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	372c      	adds	r7, #44	@ 0x2c
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b08b      	sub	sp, #44	@ 0x2c
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4611      	mov	r1, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	460b      	mov	r3, r1
 80088c8:	80fb      	strh	r3, [r7, #6]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80088ce:	88bb      	ldrh	r3, [r7, #4]
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	005a      	lsls	r2, r3, #1
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f0:	e01b      	b.n	800892a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	3302      	adds	r3, #2
 80088fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	3301      	adds	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b2da      	uxtb	r2, r3
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	3302      	adds	r3, #2
 8008922:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	3b01      	subs	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	@ 0x24
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e0      	bne.n	80088f2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008930:	88bb      	ldrh	r3, [r7, #4]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	b2da      	uxtb	r2, r3
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	701a      	strb	r2, [r3, #0]
  }
}
 800894c:	bf00      	nop
 800894e:	372c      	adds	r7, #44	@ 0x2c
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr

08008956 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	7c1b      	ldrb	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d115      	bne.n	800899a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800896e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008972:	2202      	movs	r2, #2
 8008974:	2181      	movs	r1, #129	@ 0x81
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fee1 	bl	800a73e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008986:	2202      	movs	r2, #2
 8008988:	2101      	movs	r1, #1
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fed7 	bl	800a73e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008998:	e012      	b.n	80089c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800899a:	2340      	movs	r3, #64	@ 0x40
 800899c:	2202      	movs	r2, #2
 800899e:	2181      	movs	r1, #129	@ 0x81
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 fecc 	bl	800a73e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089ac:	2340      	movs	r3, #64	@ 0x40
 80089ae:	2202      	movs	r2, #2
 80089b0:	2101      	movs	r1, #1
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fec3 	bl	800a73e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089c0:	2308      	movs	r3, #8
 80089c2:	2203      	movs	r2, #3
 80089c4:	2182      	movs	r1, #130	@ 0x82
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 feb9 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80089d6:	f001 ffd9 	bl	800a98c <USBD_static_malloc>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e026      	b.n	8008a40 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7c1b      	ldrb	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d109      	bne.n	8008a30 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a26:	2101      	movs	r1, #1
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 ff79 	bl	800a920 <USBD_LL_PrepareReceive>
 8008a2e:	e007      	b.n	8008a40 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a36:	2340      	movs	r3, #64	@ 0x40
 8008a38:	2101      	movs	r1, #1
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 ff70 	bl	800a920 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a5a:	2181      	movs	r1, #129	@ 0x81
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fe94 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a68:	2101      	movs	r1, #1
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fe8d 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a78:	2182      	movs	r1, #130	@ 0x82
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fe85 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 ff7f 	bl	800a9a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d039      	beq.n	8008b56 <USBD_CDC_Setup+0x9e>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d17f      	bne.n	8008be6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	88db      	ldrh	r3, [r3, #6]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d029      	beq.n	8008b42 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b25b      	sxtb	r3, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da11      	bge.n	8008b1c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	88d2      	ldrh	r2, [r2, #6]
 8008b0a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b0c:	6939      	ldr	r1, [r7, #16]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fa05 	bl	8009f24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b1a:	e06b      	b.n	8008bf4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 fa20 	bl	8009f80 <USBD_CtlPrepareRx>
      break;
 8008b40:	e058      	b.n	8008bf4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	7850      	ldrb	r0, [r2, #1]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	4798      	blx	r3
      break;
 8008b54:	e04e      	b.n	8008bf4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b0b      	cmp	r3, #11
 8008b5c:	d02e      	beq.n	8008bbc <USBD_CDC_Setup+0x104>
 8008b5e:	2b0b      	cmp	r3, #11
 8008b60:	dc38      	bgt.n	8008bd4 <USBD_CDC_Setup+0x11c>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <USBD_CDC_Setup+0xb4>
 8008b66:	2b0a      	cmp	r3, #10
 8008b68:	d014      	beq.n	8008b94 <USBD_CDC_Setup+0xdc>
 8008b6a:	e033      	b.n	8008bd4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d107      	bne.n	8008b86 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b76:	f107 030c 	add.w	r3, r7, #12
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f9d0 	bl	8009f24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b84:	e02e      	b.n	8008be4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f961 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	75fb      	strb	r3, [r7, #23]
          break;
 8008b92:	e027      	b.n	8008be4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d107      	bne.n	8008bae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b9e:	f107 030f 	add.w	r3, r7, #15
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f9bc 	bl	8009f24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bac:	e01a      	b.n	8008be4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 f94d 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8008bba:	e013      	b.n	8008be4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d00d      	beq.n	8008be2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 f941 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bd2:	e006      	b.n	8008be2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 f93a 	bl	8009e50 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	75fb      	strb	r3, [r7, #23]
          break;
 8008be0:	e000      	b.n	8008be4 <USBD_CDC_Setup+0x12c>
          break;
 8008be2:	bf00      	nop
      }
      break;
 8008be4:	e006      	b.n	8008bf4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f931 	bl	8009e50 <USBD_CtlError>
      ret = USBD_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf2:	bf00      	nop
  }

  return ret;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c10:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d03a      	beq.n	8008c9a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	331c      	adds	r3, #28
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d029      	beq.n	8008c8e <USBD_CDC_DataIn+0x90>
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	331c      	adds	r3, #28
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	78f9      	ldrb	r1, [r7, #3]
 8008c4e:	68b8      	ldr	r0, [r7, #8]
 8008c50:	460b      	mov	r3, r1
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4403      	add	r3, r0
 8008c5a:	3338      	adds	r3, #56	@ 0x38
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d110      	bne.n	8008c8e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	331c      	adds	r3, #28
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c80:	78f9      	ldrb	r1, [r7, #3]
 8008c82:	2300      	movs	r3, #0
 8008c84:	2200      	movs	r2, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fe27 	bl	800a8da <USBD_LL_Transmit>
 8008c8c:	e003      	b.n	8008c96 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e000      	b.n	8008c9c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c9a:	2302      	movs	r3, #2
  }
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fe52 	bl	800a966 <USBD_LL_GetRxDataSize>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4798      	blx	r3

    return USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d08:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d014      	beq.n	8008d3e <USBD_CDC_EP0_RxReady+0x44>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d1a:	2bff      	cmp	r3, #255	@ 0xff
 8008d1c:	d00f      	beq.n	8008d3e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	22ff      	movs	r2, #255	@ 0xff
 8008d3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2243      	movs	r2, #67	@ 0x43
 8008d54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d56:	4b03      	ldr	r3, [pc, #12]	@ (8008d64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000098 	.word	0x20000098

08008d68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2243      	movs	r2, #67	@ 0x43
 8008d74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d76:	4b03      	ldr	r3, [pc, #12]	@ (8008d84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000054 	.word	0x20000054

08008d88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2243      	movs	r2, #67	@ 0x43
 8008d94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d96:	4b03      	ldr	r3, [pc, #12]	@ (8008da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	200000dc 	.word	0x200000dc

08008da8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	220a      	movs	r2, #10
 8008db4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008db6:	4b03      	ldr	r3, [pc, #12]	@ (8008dc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000010 	.word	0x20000010

08008dc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr

08008df4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr

08008e26 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e36:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01c      	beq.n	8008ea0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d115      	bne.n	8008e9c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2181      	movs	r1, #129	@ 0x81
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 fd21 	bl	800a8da <USBD_LL_Transmit>

      return USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e002      	b.n	8008ea2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ea0:	2302      	movs	r3, #2
  }
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7c1b      	ldrb	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fd21 	bl	800a920 <USBD_LL_PrepareReceive>
 8008ede:	e007      	b.n	8008ef0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ee6:	2340      	movs	r3, #64	@ 0x40
 8008ee8:	2101      	movs	r1, #1
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fd18 	bl	800a920 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e000      	b.n	8008ef6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008ef4:	2302      	movs	r3, #2
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f12:	2302      	movs	r3, #2
 8008f14:	e01a      	b.n	8008f4c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f001 fb85 	bl	800a654 <USBD_LL_Init>

  return USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d006      	beq.n	8008f76 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e001      	b.n	8008f7a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bc80      	pop	{r7}
 8008f84:	4770      	bx	lr

08008f86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fbba 	bl	800a708 <USBD_LL_Start>

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr

08008fb2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00c      	beq.n	8008fe6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	4611      	mov	r1, r2
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fed8 	bl	8009dde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800903c:	461a      	mov	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2b02      	cmp	r3, #2
 8009050:	d016      	beq.n	8009080 <USBD_LL_SetupStage+0x6a>
 8009052:	2b02      	cmp	r3, #2
 8009054:	d81c      	bhi.n	8009090 <USBD_LL_SetupStage+0x7a>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <USBD_LL_SetupStage+0x4a>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d008      	beq.n	8009070 <USBD_LL_SetupStage+0x5a>
 800905e:	e017      	b.n	8009090 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9cb 	bl	8009404 <USBD_StdDevReq>
      break;
 800906e:	e01a      	b.n	80090a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa2d 	bl	80094d8 <USBD_StdItfReq>
      break;
 800907e:	e012      	b.n	80090a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa6d 	bl	8009568 <USBD_StdEPReq>
      break;
 800908e:	e00a      	b.n	80090a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009096:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800909a:	b2db      	uxtb	r3, r3
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 fb92 	bl	800a7c8 <USBD_LL_StallEP>
      break;
 80090a4:	bf00      	nop
  }

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	460b      	mov	r3, r1
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d14b      	bne.n	800915c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80090ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d134      	bne.n	8009140 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d919      	bls.n	8009116 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d203      	bcs.n	8009104 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009100:	b29b      	uxth	r3, r3
 8009102:	e002      	b.n	800910a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 ff54 	bl	8009fbc <USBD_CtlContinueRx>
 8009114:	e038      	b.n	8009188 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009128:	2b03      	cmp	r3, #3
 800912a:	d105      	bne.n	8009138 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 ff51 	bl	8009fe0 <USBD_CtlSendStatus>
 800913e:	e023      	b.n	8009188 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009146:	2b05      	cmp	r3, #5
 8009148:	d11e      	bne.n	8009188 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009152:	2100      	movs	r1, #0
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f001 fb37 	bl	800a7c8 <USBD_LL_StallEP>
 800915a:	e015      	b.n	8009188 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800916e:	2b03      	cmp	r3, #3
 8009170:	d108      	bne.n	8009184 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	7afa      	ldrb	r2, [r7, #11]
 800917c:	4611      	mov	r1, r2
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3
 8009182:	e001      	b.n	8009188 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009184:	2302      	movs	r3, #2
 8009186:	e000      	b.n	800918a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	460b      	mov	r3, r1
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d17f      	bne.n	80092a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3314      	adds	r3, #20
 80091aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d15c      	bne.n	8009270 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d915      	bls.n	80091ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	1ad2      	subs	r2, r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	461a      	mov	r2, r3
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 febe 	bl	8009f5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091e0:	2300      	movs	r3, #0
 80091e2:	2200      	movs	r2, #0
 80091e4:	2100      	movs	r1, #0
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f001 fb9a 	bl	800a920 <USBD_LL_PrepareReceive>
 80091ec:	e04e      	b.n	800928c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	6912      	ldr	r2, [r2, #16]
 80091f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80091fa:	fb01 f202 	mul.w	r2, r1, r2
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11c      	bne.n	800923e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800920c:	429a      	cmp	r2, r3
 800920e:	d316      	bcc.n	800923e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800921a:	429a      	cmp	r2, r3
 800921c:	d20f      	bcs.n	800923e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800921e:	2200      	movs	r2, #0
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fe9a 	bl	8009f5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009230:	2300      	movs	r3, #0
 8009232:	2200      	movs	r2, #0
 8009234:	2100      	movs	r1, #0
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f001 fb72 	bl	800a920 <USBD_LL_PrepareReceive>
 800923c:	e026      	b.n	800928c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009250:	2b03      	cmp	r3, #3
 8009252:	d105      	bne.n	8009260 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009260:	2180      	movs	r1, #128	@ 0x80
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f001 fab0 	bl	800a7c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fecc 	bl	800a006 <USBD_CtlReceiveStatus>
 800926e:	e00d      	b.n	800928c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009276:	2b04      	cmp	r3, #4
 8009278:	d004      	beq.n	8009284 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009284:	2180      	movs	r1, #128	@ 0x80
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f001 fa9e 	bl	800a7c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009292:	2b01      	cmp	r3, #1
 8009294:	d11d      	bne.n	80092d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7ff fe81 	bl	8008f9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80092a4:	e015      	b.n	80092d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00d      	beq.n	80092ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d108      	bne.n	80092ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	7afa      	ldrb	r2, [r7, #11]
 80092c6:	4611      	mov	r1, r2
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	4798      	blx	r3
 80092cc:	e001      	b.n	80092d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	e000      	b.n	80092d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092e4:	2340      	movs	r3, #64	@ 0x40
 80092e6:	2200      	movs	r2, #0
 80092e8:	2100      	movs	r1, #0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 fa27 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2240      	movs	r2, #64	@ 0x40
 80092fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009300:	2340      	movs	r3, #64	@ 0x40
 8009302:	2200      	movs	r2, #0
 8009304:	2180      	movs	r1, #128	@ 0x80
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 fa19 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2240      	movs	r2, #64	@ 0x40
 8009316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800933c:	2b00      	cmp	r3, #0
 800933e:	d009      	beq.n	8009354 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6852      	ldr	r2, [r2, #4]
 800934c:	b2d2      	uxtb	r2, r2
 800934e:	4611      	mov	r1, r2
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
  }

  return USBD_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2204      	movs	r2, #4
 8009394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d105      	bne.n	80093c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr

080093ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d10b      	bne.n	80093f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800941a:	2b40      	cmp	r3, #64	@ 0x40
 800941c:	d005      	beq.n	800942a <USBD_StdDevReq+0x26>
 800941e:	2b40      	cmp	r3, #64	@ 0x40
 8009420:	d84f      	bhi.n	80094c2 <USBD_StdDevReq+0xbe>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d009      	beq.n	800943a <USBD_StdDevReq+0x36>
 8009426:	2b20      	cmp	r3, #32
 8009428:	d14b      	bne.n	80094c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
      break;
 8009438:	e048      	b.n	80094cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b09      	cmp	r3, #9
 8009440:	d839      	bhi.n	80094b6 <USBD_StdDevReq+0xb2>
 8009442:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <USBD_StdDevReq+0x44>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009499 	.word	0x08009499
 800944c:	080094ad 	.word	0x080094ad
 8009450:	080094b7 	.word	0x080094b7
 8009454:	080094a3 	.word	0x080094a3
 8009458:	080094b7 	.word	0x080094b7
 800945c:	0800947b 	.word	0x0800947b
 8009460:	08009471 	.word	0x08009471
 8009464:	080094b7 	.word	0x080094b7
 8009468:	0800948f 	.word	0x0800948f
 800946c:	08009485 	.word	0x08009485
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9dc 	bl	8009830 <USBD_GetDescriptor>
          break;
 8009478:	e022      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fb3f 	bl	8009b00 <USBD_SetAddress>
          break;
 8009482:	e01d      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fb7e 	bl	8009b88 <USBD_SetConfig>
          break;
 800948c:	e018      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc07 	bl	8009ca4 <USBD_GetConfig>
          break;
 8009496:	e013      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fc37 	bl	8009d0e <USBD_GetStatus>
          break;
 80094a0:	e00e      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fc65 	bl	8009d74 <USBD_SetFeature>
          break;
 80094aa:	e009      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fc74 	bl	8009d9c <USBD_ClrFeature>
          break;
 80094b4:	e004      	b.n	80094c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fcc9 	bl	8009e50 <USBD_CtlError>
          break;
 80094be:	bf00      	nop
      }
      break;
 80094c0:	e004      	b.n	80094cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fcc3 	bl	8009e50 <USBD_CtlError>
      break;
 80094ca:	bf00      	nop
  }

  return ret;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop

080094d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094ee:	2b40      	cmp	r3, #64	@ 0x40
 80094f0:	d005      	beq.n	80094fe <USBD_StdItfReq+0x26>
 80094f2:	2b40      	cmp	r3, #64	@ 0x40
 80094f4:	d82e      	bhi.n	8009554 <USBD_StdItfReq+0x7c>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <USBD_StdItfReq+0x26>
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d12a      	bne.n	8009554 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009504:	3b01      	subs	r3, #1
 8009506:	2b02      	cmp	r3, #2
 8009508:	d81d      	bhi.n	8009546 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	889b      	ldrh	r3, [r3, #4]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	d813      	bhi.n	800953c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	88db      	ldrh	r3, [r3, #6]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d110      	bne.n	8009550 <USBD_StdItfReq+0x78>
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10d      	bne.n	8009550 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fd53 	bl	8009fe0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800953a:	e009      	b.n	8009550 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fc86 	bl	8009e50 <USBD_CtlError>
          break;
 8009544:	e004      	b.n	8009550 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc81 	bl	8009e50 <USBD_CtlError>
          break;
 800954e:	e000      	b.n	8009552 <USBD_StdItfReq+0x7a>
          break;
 8009550:	bf00      	nop
      }
      break;
 8009552:	e004      	b.n	800955e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc7a 	bl	8009e50 <USBD_CtlError>
      break;
 800955c:	bf00      	nop
  }

  return USBD_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	889b      	ldrh	r3, [r3, #4]
 800957a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009584:	2b40      	cmp	r3, #64	@ 0x40
 8009586:	d007      	beq.n	8009598 <USBD_StdEPReq+0x30>
 8009588:	2b40      	cmp	r3, #64	@ 0x40
 800958a:	f200 8146 	bhi.w	800981a <USBD_StdEPReq+0x2b2>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <USBD_StdEPReq+0x40>
 8009592:	2b20      	cmp	r3, #32
 8009594:	f040 8141 	bne.w	800981a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
      break;
 80095a6:	e13d      	b.n	8009824 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d10a      	bne.n	80095ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	e12d      	b.n	8009826 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d007      	beq.n	80095e2 <USBD_StdEPReq+0x7a>
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	f300 811b 	bgt.w	800980e <USBD_StdEPReq+0x2a6>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d072      	beq.n	80096c2 <USBD_StdEPReq+0x15a>
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d03a      	beq.n	8009656 <USBD_StdEPReq+0xee>
 80095e0:	e115      	b.n	800980e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d002      	beq.n	80095f2 <USBD_StdEPReq+0x8a>
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d015      	beq.n	800961c <USBD_StdEPReq+0xb4>
 80095f0:	e02b      	b.n	800964a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00c      	beq.n	8009612 <USBD_StdEPReq+0xaa>
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b80      	cmp	r3, #128	@ 0x80
 80095fc:	d009      	beq.n	8009612 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 f8e0 	bl	800a7c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009608:	2180      	movs	r1, #128	@ 0x80
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 f8dc 	bl	800a7c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009610:	e020      	b.n	8009654 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fc1b 	bl	8009e50 <USBD_CtlError>
              break;
 800961a:	e01b      	b.n	8009654 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10e      	bne.n	8009642 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <USBD_StdEPReq+0xda>
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b80      	cmp	r3, #128	@ 0x80
 800962e:	d008      	beq.n	8009642 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88db      	ldrh	r3, [r3, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f8c3 	bl	800a7c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fccc 	bl	8009fe0 <USBD_CtlSendStatus>

              break;
 8009648:	e004      	b.n	8009654 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fbff 	bl	8009e50 <USBD_CtlError>
              break;
 8009652:	bf00      	nop
          }
          break;
 8009654:	e0e0      	b.n	8009818 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	2b02      	cmp	r3, #2
 800965e:	d002      	beq.n	8009666 <USBD_StdEPReq+0xfe>
 8009660:	2b03      	cmp	r3, #3
 8009662:	d015      	beq.n	8009690 <USBD_StdEPReq+0x128>
 8009664:	e026      	b.n	80096b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00c      	beq.n	8009686 <USBD_StdEPReq+0x11e>
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b80      	cmp	r3, #128	@ 0x80
 8009670:	d009      	beq.n	8009686 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f001 f8a6 	bl	800a7c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800967c:	2180      	movs	r1, #128	@ 0x80
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f8a2 	bl	800a7c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009684:	e01c      	b.n	80096c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fbe1 	bl	8009e50 <USBD_CtlError>
              break;
 800968e:	e017      	b.n	80096c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	885b      	ldrh	r3, [r3, #2]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d112      	bne.n	80096be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 f8ad 	bl	800a806 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fc97 	bl	8009fe0 <USBD_CtlSendStatus>
              }
              break;
 80096b2:	e004      	b.n	80096be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fbca 	bl	8009e50 <USBD_CtlError>
              break;
 80096bc:	e000      	b.n	80096c0 <USBD_StdEPReq+0x158>
              break;
 80096be:	bf00      	nop
          }
          break;
 80096c0:	e0aa      	b.n	8009818 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d002      	beq.n	80096d2 <USBD_StdEPReq+0x16a>
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d032      	beq.n	8009736 <USBD_StdEPReq+0x1ce>
 80096d0:	e097      	b.n	8009802 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <USBD_StdEPReq+0x180>
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b80      	cmp	r3, #128	@ 0x80
 80096dc:	d004      	beq.n	80096e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fbb5 	bl	8009e50 <USBD_CtlError>
                break;
 80096e6:	e091      	b.n	800980c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da0b      	bge.n	8009708 <USBD_StdEPReq+0x1a0>
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	3310      	adds	r3, #16
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	4413      	add	r3, r2
 8009704:	3304      	adds	r3, #4
 8009706:	e00b      	b.n	8009720 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	4413      	add	r3, r2
 800971e:	3304      	adds	r3, #4
 8009720:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2202      	movs	r2, #2
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fbf8 	bl	8009f24 <USBD_CtlSendData>
              break;
 8009734:	e06a      	b.n	800980c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	da11      	bge.n	8009762 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	f003 020f 	and.w	r2, r3, #15
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	3318      	adds	r3, #24
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d117      	bne.n	8009788 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fb78 	bl	8009e50 <USBD_CtlError>
                  break;
 8009760:	e054      	b.n	800980c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d104      	bne.n	8009788 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fb65 	bl	8009e50 <USBD_CtlError>
                  break;
 8009786:	e041      	b.n	800980c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800978c:	2b00      	cmp	r3, #0
 800978e:	da0b      	bge.n	80097a8 <USBD_StdEPReq+0x240>
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	3310      	adds	r3, #16
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	4413      	add	r3, r2
 80097a4:	3304      	adds	r3, #4
 80097a6:	e00b      	b.n	80097c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	3304      	adds	r3, #4
 80097c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <USBD_StdEPReq+0x266>
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	2b80      	cmp	r3, #128	@ 0x80
 80097cc:	d103      	bne.n	80097d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e00e      	b.n	80097f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f832 	bl	800a844 <USBD_LL_IsStallEP>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e002      	b.n	80097f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2202      	movs	r2, #2
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb92 	bl	8009f24 <USBD_CtlSendData>
              break;
 8009800:	e004      	b.n	800980c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fb23 	bl	8009e50 <USBD_CtlError>
              break;
 800980a:	bf00      	nop
          }
          break;
 800980c:	e004      	b.n	8009818 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fb1d 	bl	8009e50 <USBD_CtlError>
          break;
 8009816:	bf00      	nop
      }
      break;
 8009818:	e004      	b.n	8009824 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fb17 	bl	8009e50 <USBD_CtlError>
      break;
 8009822:	bf00      	nop
  }

  return ret;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009842:	2300      	movs	r3, #0
 8009844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	885b      	ldrh	r3, [r3, #2]
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	2b06      	cmp	r3, #6
 8009852:	f200 8128 	bhi.w	8009aa6 <USBD_GetDescriptor+0x276>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <USBD_GetDescriptor+0x2c>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009879 	.word	0x08009879
 8009860:	08009891 	.word	0x08009891
 8009864:	080098d1 	.word	0x080098d1
 8009868:	08009aa7 	.word	0x08009aa7
 800986c:	08009aa7 	.word	0x08009aa7
 8009870:	08009a47 	.word	0x08009a47
 8009874:	08009a73 	.word	0x08009a73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7c12      	ldrb	r2, [r2, #16]
 8009884:	f107 0108 	add.w	r1, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
      break;
 800988e:	e112      	b.n	8009ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7c1b      	ldrb	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10d      	bne.n	80098b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	f107 0208 	add.w	r2, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	2202      	movs	r2, #2
 80098b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098b2:	e100      	b.n	8009ab6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	f107 0208 	add.w	r2, r7, #8
 80098c0:	4610      	mov	r0, r2
 80098c2:	4798      	blx	r3
 80098c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	2202      	movs	r2, #2
 80098cc:	701a      	strb	r2, [r3, #0]
      break;
 80098ce:	e0f2      	b.n	8009ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b05      	cmp	r3, #5
 80098d8:	f200 80ac 	bhi.w	8009a34 <USBD_GetDescriptor+0x204>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBD_GetDescriptor+0xb4>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080098fd 	.word	0x080098fd
 80098e8:	08009931 	.word	0x08009931
 80098ec:	08009965 	.word	0x08009965
 80098f0:	08009999 	.word	0x08009999
 80098f4:	080099cd 	.word	0x080099cd
 80098f8:	08009a01 	.word	0x08009a01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991e:	e091      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa94 	bl	8009e50 <USBD_CtlError>
            err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
          break;
 800992e:	e089      	b.n	8009a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e077      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa7a 	bl	8009e50 <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e06f      	b.n	8009a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009986:	e05d      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa60 	bl	8009e50 <USBD_CtlError>
            err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
          break;
 8009996:	e055      	b.n	8009a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ba:	e043      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa46 	bl	8009e50 <USBD_CtlError>
            err++;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	3301      	adds	r3, #1
 80099c8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ca:	e03b      	b.n	8009a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7c12      	ldrb	r2, [r2, #16]
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ee:	e029      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa2c 	bl	8009e50 <USBD_CtlError>
            err++;
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	3301      	adds	r3, #1
 80099fc:	72fb      	strb	r3, [r7, #11]
          break;
 80099fe:	e021      	b.n	8009a44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7c12      	ldrb	r2, [r2, #16]
 8009a18:	f107 0108 	add.w	r1, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a22:	e00f      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa12 	bl	8009e50 <USBD_CtlError>
            err++;
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	72fb      	strb	r3, [r7, #11]
          break;
 8009a32:	e007      	b.n	8009a44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa0a 	bl	8009e50 <USBD_CtlError>
          err++;
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009a42:	e038      	b.n	8009ab6 <USBD_GetDescriptor+0x286>
 8009a44:	e037      	b.n	8009ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	7c1b      	ldrb	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d109      	bne.n	8009a62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a56:	f107 0208 	add.w	r2, r7, #8
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4798      	blx	r3
 8009a5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a60:	e029      	b.n	8009ab6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9f3 	bl	8009e50 <USBD_CtlError>
        err++;
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a70:	e021      	b.n	8009ab6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7c1b      	ldrb	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10d      	bne.n	8009a96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a82:	f107 0208 	add.w	r2, r7, #8
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3
 8009a8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	2207      	movs	r2, #7
 8009a92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a94:	e00f      	b.n	8009ab6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f9d9 	bl	8009e50 <USBD_CtlError>
        err++;
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8009aa4:	e007      	b.n	8009ab6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f9d1 	bl	8009e50 <USBD_CtlError>
      err++;
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab4:	bf00      	nop
  }

  if (err != 0U)
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d11c      	bne.n	8009af6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009abc:	893b      	ldrh	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d011      	beq.n	8009ae6 <USBD_GetDescriptor+0x2b6>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00d      	beq.n	8009ae6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	88da      	ldrh	r2, [r3, #6]
 8009ace:	893b      	ldrh	r3, [r7, #8]
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	bf28      	it	cs
 8009ad4:	4613      	movcs	r3, r2
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ada:	893b      	ldrh	r3, [r7, #8]
 8009adc:	461a      	mov	r2, r3
 8009ade:	68f9      	ldr	r1, [r7, #12]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa1f 	bl	8009f24 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	88db      	ldrh	r3, [r3, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa76 	bl	8009fe0 <USBD_CtlSendStatus>
 8009af4:	e000      	b.n	8009af8 <USBD_GetDescriptor+0x2c8>
    return;
 8009af6:	bf00      	nop
    }
  }
}
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop

08009b00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d130      	bne.n	8009b74 <USBD_SetAddress+0x74>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88db      	ldrh	r3, [r3, #6]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d12c      	bne.n	8009b74 <USBD_SetAddress+0x74>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	885b      	ldrh	r3, [r3, #2]
 8009b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b20:	d828      	bhi.n	8009b74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d104      	bne.n	8009b42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f988 	bl	8009e50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b40:	e01d      	b.n	8009b7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7bfa      	ldrb	r2, [r7, #15]
 8009b46:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fea4 	bl	800a89c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa43 	bl	8009fe0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b68:	e009      	b.n	8009b7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b72:	e004      	b.n	8009b7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f96a 	bl	8009e50 <USBD_CtlError>
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	885b      	ldrh	r3, [r3, #2]
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	4b41      	ldr	r3, [pc, #260]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009b9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b9c:	4b40      	ldr	r3, [pc, #256]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d904      	bls.n	8009bae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f952 	bl	8009e50 <USBD_CtlError>
 8009bac:	e075      	b.n	8009c9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d002      	beq.n	8009bbe <USBD_SetConfig+0x36>
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d023      	beq.n	8009c04 <USBD_SetConfig+0x7c>
 8009bbc:	e062      	b.n	8009c84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009bbe:	4b38      	ldr	r3, [pc, #224]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01a      	beq.n	8009bfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009bc6:	4b36      	ldr	r3, [pc, #216]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bd8:	4b31      	ldr	r3, [pc, #196]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff f9e7 	bl	8008fb2 <USBD_SetClassConfig>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d104      	bne.n	8009bf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f92f 	bl	8009e50 <USBD_CtlError>
            return;
 8009bf2:	e052      	b.n	8009c9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9f3 	bl	8009fe0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bfa:	e04e      	b.n	8009c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f9ef 	bl	8009fe0 <USBD_CtlSendStatus>
        break;
 8009c02:	e04a      	b.n	8009c9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c04:	4b26      	ldr	r3, [pc, #152]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d112      	bne.n	8009c32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009c14:	4b22      	ldr	r3, [pc, #136]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c1e:	4b20      	ldr	r3, [pc, #128]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff f9e3 	bl	8008ff0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9d8 	bl	8009fe0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c30:	e033      	b.n	8009c9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009c32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d01d      	beq.n	8009c7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff f9d1 	bl	8008ff0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009c4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f9a7 	bl	8008fb2 <USBD_SetClassConfig>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d104      	bne.n	8009c74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f8ef 	bl	8009e50 <USBD_CtlError>
            return;
 8009c72:	e012      	b.n	8009c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9b3 	bl	8009fe0 <USBD_CtlSendStatus>
        break;
 8009c7a:	e00e      	b.n	8009c9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f9af 	bl	8009fe0 <USBD_CtlSendStatus>
        break;
 8009c82:	e00a      	b.n	8009c9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f8e2 	bl	8009e50 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ca0 <USBD_SetConfig+0x118>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff f9ac 	bl	8008ff0 <USBD_ClrClassConfig>
        break;
 8009c98:	bf00      	nop
    }
  }
}
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	2000083c 	.word	0x2000083c

08009ca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	88db      	ldrh	r3, [r3, #6]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d004      	beq.n	8009cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f8c9 	bl	8009e50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cbe:	e022      	b.n	8009d06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	dc02      	bgt.n	8009cd0 <USBD_GetConfig+0x2c>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dc03      	bgt.n	8009cd6 <USBD_GetConfig+0x32>
 8009cce:	e015      	b.n	8009cfc <USBD_GetConfig+0x58>
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d00b      	beq.n	8009cec <USBD_GetConfig+0x48>
 8009cd4:	e012      	b.n	8009cfc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f91d 	bl	8009f24 <USBD_CtlSendData>
        break;
 8009cea:	e00c      	b.n	8009d06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f915 	bl	8009f24 <USBD_CtlSendData>
        break;
 8009cfa:	e004      	b.n	8009d06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f8a6 	bl	8009e50 <USBD_CtlError>
        break;
 8009d04:	bf00      	nop
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d81e      	bhi.n	8009d62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	88db      	ldrh	r3, [r3, #6]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d004      	beq.n	8009d36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f88e 	bl	8009e50 <USBD_CtlError>
        break;
 8009d34:	e01a      	b.n	8009d6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f043 0202 	orr.w	r2, r3, #2
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	330c      	adds	r3, #12
 8009d56:	2202      	movs	r2, #2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f8e2 	bl	8009f24 <USBD_CtlSendData>
      break;
 8009d60:	e004      	b.n	8009d6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f873 	bl	8009e50 <USBD_CtlError>
      break;
 8009d6a:	bf00      	nop
  }
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d106      	bne.n	8009d94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f926 	bl	8009fe0 <USBD_CtlSendStatus>
  }
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dac:	3b01      	subs	r3, #1
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d80b      	bhi.n	8009dca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d10c      	bne.n	8009dd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f90c 	bl	8009fe0 <USBD_CtlSendStatus>
      }
      break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f83f 	bl	8009e50 <USBD_CtlError>
      break;
 8009dd2:	e000      	b.n	8009dd6 <USBD_ClrFeature+0x3a>
      break;
 8009dd4:	bf00      	nop
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	785a      	ldrb	r2, [r3, #1]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	3303      	adds	r3, #3
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	4413      	add	r3, r2
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	3304      	adds	r3, #4
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	3305      	adds	r3, #5
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	4413      	add	r3, r2
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	3306      	adds	r3, #6
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	3307      	adds	r3, #7
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4413      	add	r3, r2
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	80da      	strh	r2, [r3, #6]

}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr

08009e50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009e5a:	2180      	movs	r1, #128	@ 0x80
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fcb3 	bl	800a7c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009e62:	2100      	movs	r1, #0
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fcaf 	bl	800a7c8 <USBD_LL_StallEP>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d032      	beq.n	8009eee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f834 	bl	8009ef6 <USBD_GetLen>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	3301      	adds	r3, #1
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	75fa      	strb	r2, [r7, #23]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	7812      	ldrb	r2, [r2, #0]
 8009eac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	75fa      	strb	r2, [r7, #23]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	4413      	add	r3, r2
 8009eba:	2203      	movs	r2, #3
 8009ebc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ebe:	e012      	b.n	8009ee6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	60fa      	str	r2, [r7, #12]
 8009ec6:	7dfa      	ldrb	r2, [r7, #23]
 8009ec8:	1c51      	adds	r1, r2, #1
 8009eca:	75f9      	strb	r1, [r7, #23]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	440a      	add	r2, r1
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	75fa      	strb	r2, [r7, #23]
 8009edc:	461a      	mov	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e8      	bne.n	8009ec0 <USBD_GetString+0x4e>
    }
  }
}
 8009eee:	bf00      	nop
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f02:	e005      	b.n	8009f10 <USBD_GetLen+0x1a>
  {
    len++;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	3301      	adds	r3, #1
 8009f08:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f5      	bne.n	8009f04 <USBD_GetLen+0xe>
  }

  return len;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009f3a:	88fa      	ldrh	r2, [r7, #6]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 fcc4 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 fcb2 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2203      	movs	r2, #3
 8009f92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 fcb7 	bl	800a920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fca:	88fb      	ldrh	r3, [r7, #6]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	2100      	movs	r1, #0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 fca5 	bl	800a920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2204      	movs	r2, #4
 8009fec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc6f 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2205      	movs	r2, #5
 800a012:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a016:	2300      	movs	r3, #0
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fc7f 	bl	800a920 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a030:	2200      	movs	r2, #0
 800a032:	4912      	ldr	r1, [pc, #72]	@ (800a07c <MX_USB_DEVICE_Init+0x50>)
 800a034:	4812      	ldr	r0, [pc, #72]	@ (800a080 <MX_USB_DEVICE_Init+0x54>)
 800a036:	f7fe ff62 	bl	8008efe <USBD_Init>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a040:	f7f7 f854 	bl	80010ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a044:	490f      	ldr	r1, [pc, #60]	@ (800a084 <MX_USB_DEVICE_Init+0x58>)
 800a046:	480e      	ldr	r0, [pc, #56]	@ (800a080 <MX_USB_DEVICE_Init+0x54>)
 800a048:	f7fe ff84 	bl	8008f54 <USBD_RegisterClass>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a052:	f7f7 f84b 	bl	80010ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a056:	490c      	ldr	r1, [pc, #48]	@ (800a088 <MX_USB_DEVICE_Init+0x5c>)
 800a058:	4809      	ldr	r0, [pc, #36]	@ (800a080 <MX_USB_DEVICE_Init+0x54>)
 800a05a:	f7fe feb5 	bl	8008dc8 <USBD_CDC_RegisterInterface>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a064:	f7f7 f842 	bl	80010ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a068:	4805      	ldr	r0, [pc, #20]	@ (800a080 <MX_USB_DEVICE_Init+0x54>)
 800a06a:	f7fe ff8c 	bl	8008f86 <USBD_Start>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a074:	f7f7 f83a 	bl	80010ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a078:	bf00      	nop
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000130 	.word	0x20000130
 800a080:	20000840 	.word	0x20000840
 800a084:	2000001c 	.word	0x2000001c
 800a088:	20000120 	.word	0x20000120

0800a08c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a090:	2200      	movs	r2, #0
 800a092:	4905      	ldr	r1, [pc, #20]	@ (800a0a8 <CDC_Init_FS+0x1c>)
 800a094:	4805      	ldr	r0, [pc, #20]	@ (800a0ac <CDC_Init_FS+0x20>)
 800a096:	f7fe fead 	bl	8008df4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a09a:	4905      	ldr	r1, [pc, #20]	@ (800a0b0 <CDC_Init_FS+0x24>)
 800a09c:	4803      	ldr	r0, [pc, #12]	@ (800a0ac <CDC_Init_FS+0x20>)
 800a09e:	f7fe fec2 	bl	8008e26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000c04 	.word	0x20000c04
 800a0ac:	20000840 	.word	0x20000840
 800a0b0:	20000b04 	.word	0x20000b04

0800a0b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bc80      	pop	{r7}
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	2b23      	cmp	r3, #35	@ 0x23
 800a0d8:	f200 808c 	bhi.w	800a1f4 <CDC_Control_FS+0x130>
 800a0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <CDC_Control_FS+0x20>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a1f5 	.word	0x0800a1f5
 800a0e8:	0800a1f5 	.word	0x0800a1f5
 800a0ec:	0800a1f5 	.word	0x0800a1f5
 800a0f0:	0800a1f5 	.word	0x0800a1f5
 800a0f4:	0800a1f5 	.word	0x0800a1f5
 800a0f8:	0800a1f5 	.word	0x0800a1f5
 800a0fc:	0800a1f5 	.word	0x0800a1f5
 800a100:	0800a1f5 	.word	0x0800a1f5
 800a104:	0800a1f5 	.word	0x0800a1f5
 800a108:	0800a1f5 	.word	0x0800a1f5
 800a10c:	0800a1f5 	.word	0x0800a1f5
 800a110:	0800a1f5 	.word	0x0800a1f5
 800a114:	0800a1f5 	.word	0x0800a1f5
 800a118:	0800a1f5 	.word	0x0800a1f5
 800a11c:	0800a1f5 	.word	0x0800a1f5
 800a120:	0800a1f5 	.word	0x0800a1f5
 800a124:	0800a1f5 	.word	0x0800a1f5
 800a128:	0800a1f5 	.word	0x0800a1f5
 800a12c:	0800a1f5 	.word	0x0800a1f5
 800a130:	0800a1f5 	.word	0x0800a1f5
 800a134:	0800a1f5 	.word	0x0800a1f5
 800a138:	0800a1f5 	.word	0x0800a1f5
 800a13c:	0800a1f5 	.word	0x0800a1f5
 800a140:	0800a1f5 	.word	0x0800a1f5
 800a144:	0800a1f5 	.word	0x0800a1f5
 800a148:	0800a1f5 	.word	0x0800a1f5
 800a14c:	0800a1f5 	.word	0x0800a1f5
 800a150:	0800a1f5 	.word	0x0800a1f5
 800a154:	0800a1f5 	.word	0x0800a1f5
 800a158:	0800a1f5 	.word	0x0800a1f5
 800a15c:	0800a1f5 	.word	0x0800a1f5
 800a160:	0800a1f5 	.word	0x0800a1f5
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a1af 	.word	0x0800a1af
 800a16c:	0800a1f5 	.word	0x0800a1f5
 800a170:	0800a1f5 	.word	0x0800a1f5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	4b22      	ldr	r3, [pc, #136]	@ (800a204 <CDC_Control_FS+0x140>)
 800a17a:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785a      	ldrb	r2, [r3, #1]
 800a180:	4b20      	ldr	r3, [pc, #128]	@ (800a204 <CDC_Control_FS+0x140>)
 800a182:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	789a      	ldrb	r2, [r3, #2]
 800a188:	4b1e      	ldr	r3, [pc, #120]	@ (800a204 <CDC_Control_FS+0x140>)
 800a18a:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	78da      	ldrb	r2, [r3, #3]
 800a190:	4b1c      	ldr	r3, [pc, #112]	@ (800a204 <CDC_Control_FS+0x140>)
 800a192:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	791a      	ldrb	r2, [r3, #4]
 800a198:	4b1a      	ldr	r3, [pc, #104]	@ (800a204 <CDC_Control_FS+0x140>)
 800a19a:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	795a      	ldrb	r2, [r3, #5]
 800a1a0:	4b18      	ldr	r3, [pc, #96]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1a2:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	799a      	ldrb	r2, [r3, #6]
 800a1a8:	4b16      	ldr	r3, [pc, #88]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1aa:	719a      	strb	r2, [r3, #6]

    break;
 800a1ac:	e023      	b.n	800a1f6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a1ae:	4b15      	ldr	r3, [pc, #84]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1b0:	781a      	ldrb	r2, [r3, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	4a12      	ldr	r2, [pc, #72]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1bc:	7852      	ldrb	r2, [r2, #1]
 800a1be:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	4a0f      	ldr	r2, [pc, #60]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1c6:	7892      	ldrb	r2, [r2, #2]
 800a1c8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	3303      	adds	r3, #3
 800a1ce:	4a0d      	ldr	r2, [pc, #52]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1d0:	78d2      	ldrb	r2, [r2, #3]
 800a1d2:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1da:	7912      	ldrb	r2, [r2, #4]
 800a1dc:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	3305      	adds	r3, #5
 800a1e2:	4a08      	ldr	r2, [pc, #32]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1e4:	7952      	ldrb	r2, [r2, #5]
 800a1e6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	3306      	adds	r3, #6
 800a1ec:	4a05      	ldr	r2, [pc, #20]	@ (800a204 <CDC_Control_FS+0x140>)
 800a1ee:	7992      	ldrb	r2, [r2, #6]
 800a1f0:	701a      	strb	r2, [r3, #0]
    break;
 800a1f2:	e000      	b.n	800a1f6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1f4:	bf00      	nop
  }

  return (USBD_OK);
 800a1f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bc80      	pop	{r7}
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20000d04 	.word	0x20000d04

0800a208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a212:	4b0c      	ldr	r3, [pc, #48]	@ (800a244 <CDC_Receive_FS+0x3c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a21a:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <CDC_Receive_FS+0x3c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	b292      	uxth	r2, r2
 800a224:	4611      	mov	r1, r2
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	4806      	ldr	r0, [pc, #24]	@ (800a248 <CDC_Receive_FS+0x40>)
 800a22e:	f7fe fdfa 	bl	8008e26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a232:	4805      	ldr	r0, [pc, #20]	@ (800a248 <CDC_Receive_FS+0x40>)
 800a234:	f7fe fe39 	bl	8008eaa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a238:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000d0c 	.word	0x20000d0c
 800a248:	20000840 	.word	0x20000840

0800a24c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a25c:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <CDC_Transmit_FS+0x48>)
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a262:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a26e:	2301      	movs	r3, #1
 800a270:	e00b      	b.n	800a28a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a272:	887b      	ldrh	r3, [r7, #2]
 800a274:	461a      	mov	r2, r3
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	4806      	ldr	r0, [pc, #24]	@ (800a294 <CDC_Transmit_FS+0x48>)
 800a27a:	f7fe fdbb 	bl	8008df4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a27e:	4805      	ldr	r0, [pc, #20]	@ (800a294 <CDC_Transmit_FS+0x48>)
 800a280:	f7fe fde4 	bl	8008e4c <USBD_CDC_TransmitPacket>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000840 	.word	0x20000840

0800a298 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a2a0:	4a03      	ldr	r2, [pc, #12]	@ (800a2b0 <CDC_AttachRxData+0x18>)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6013      	str	r3, [r2, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr
 800a2b0:	20000d0c 	.word	0x20000d0c

0800a2b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2212      	movs	r2, #18
 800a2c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2c6:	4b03      	ldr	r3, [pc, #12]	@ (800a2d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bc80      	pop	{r7}
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	2000014c 	.word	0x2000014c

0800a2d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2204      	movs	r2, #4
 800a2e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	@ (800a2f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bc80      	pop	{r7}
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000160 	.word	0x20000160

0800a2fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	4907      	ldr	r1, [pc, #28]	@ (800a330 <USBD_FS_ProductStrDescriptor+0x34>)
 800a312:	4808      	ldr	r0, [pc, #32]	@ (800a334 <USBD_FS_ProductStrDescriptor+0x38>)
 800a314:	f7ff fdad 	bl	8009e72 <USBD_GetString>
 800a318:	e004      	b.n	800a324 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4904      	ldr	r1, [pc, #16]	@ (800a330 <USBD_FS_ProductStrDescriptor+0x34>)
 800a31e:	4805      	ldr	r0, [pc, #20]	@ (800a334 <USBD_FS_ProductStrDescriptor+0x38>)
 800a320:	f7ff fda7 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a324:	4b02      	ldr	r3, [pc, #8]	@ (800a330 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000d10 	.word	0x20000d10
 800a334:	0800aa94 	.word	0x0800aa94

0800a338 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	4904      	ldr	r1, [pc, #16]	@ (800a358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a348:	4804      	ldr	r0, [pc, #16]	@ (800a35c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a34a:	f7ff fd92 	bl	8009e72 <USBD_GetString>
  return USBD_StrDesc;
 800a34e:	4b02      	ldr	r3, [pc, #8]	@ (800a358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000d10 	.word	0x20000d10
 800a35c:	0800aaac 	.word	0x0800aaac

0800a360 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	6039      	str	r1, [r7, #0]
 800a36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	221a      	movs	r2, #26
 800a370:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a372:	f000 f843 	bl	800a3fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a376:	4b02      	ldr	r3, [pc, #8]	@ (800a380 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000164 	.word	0x20000164

0800a384 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	6039      	str	r1, [r7, #0]
 800a38e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	4907      	ldr	r1, [pc, #28]	@ (800a3b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a39a:	4808      	ldr	r0, [pc, #32]	@ (800a3bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a39c:	f7ff fd69 	bl	8009e72 <USBD_GetString>
 800a3a0:	e004      	b.n	800a3ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4904      	ldr	r1, [pc, #16]	@ (800a3b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3a6:	4805      	ldr	r0, [pc, #20]	@ (800a3bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a8:	f7ff fd63 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3ac:	4b02      	ldr	r3, [pc, #8]	@ (800a3b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000d10 	.word	0x20000d10
 800a3bc:	0800aac0 	.word	0x0800aac0

0800a3c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d105      	bne.n	800a3de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4907      	ldr	r1, [pc, #28]	@ (800a3f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3d6:	4808      	ldr	r0, [pc, #32]	@ (800a3f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3d8:	f7ff fd4b 	bl	8009e72 <USBD_GetString>
 800a3dc:	e004      	b.n	800a3e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4904      	ldr	r1, [pc, #16]	@ (800a3f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3e2:	4805      	ldr	r0, [pc, #20]	@ (800a3f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3e4:	f7ff fd45 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e8:	4b02      	ldr	r3, [pc, #8]	@ (800a3f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000d10 	.word	0x20000d10
 800a3f8:	0800aacc 	.word	0x0800aacc

0800a3fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a402:	4b0f      	ldr	r3, [pc, #60]	@ (800a440 <Get_SerialNum+0x44>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a408:	4b0e      	ldr	r3, [pc, #56]	@ (800a444 <Get_SerialNum+0x48>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a40e:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <Get_SerialNum+0x4c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4413      	add	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a422:	2208      	movs	r2, #8
 800a424:	4909      	ldr	r1, [pc, #36]	@ (800a44c <Get_SerialNum+0x50>)
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f814 	bl	800a454 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a42c:	2204      	movs	r2, #4
 800a42e:	4908      	ldr	r1, [pc, #32]	@ (800a450 <Get_SerialNum+0x54>)
 800a430:	68b8      	ldr	r0, [r7, #8]
 800a432:	f000 f80f 	bl	800a454 <IntToUnicode>
  }
}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	1ffff7e8 	.word	0x1ffff7e8
 800a444:	1ffff7ec 	.word	0x1ffff7ec
 800a448:	1ffff7f0 	.word	0x1ffff7f0
 800a44c:	20000166 	.word	0x20000166
 800a450:	20000176 	.word	0x20000176

0800a454 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
 800a46a:	e027      	b.n	800a4bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	2b09      	cmp	r3, #9
 800a472:	d80b      	bhi.n	800a48c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	0f1b      	lsrs	r3, r3, #28
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	4619      	mov	r1, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	440b      	add	r3, r1
 800a484:	3230      	adds	r2, #48	@ 0x30
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e00a      	b.n	800a4a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	0f1b      	lsrs	r3, r3, #28
 800a490:	b2da      	uxtb	r2, r3
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4619      	mov	r1, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	440b      	add	r3, r1
 800a49c:	3237      	adds	r2, #55	@ 0x37
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
 800a4bc:	7dfa      	ldrb	r2, [r7, #23]
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d3d3      	bcc.n	800a46c <IntToUnicode+0x18>
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc80      	pop	{r7}
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a514 <HAL_PCD_MspInit+0x44>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d113      	bne.n	800a50a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a518 <HAL_PCD_MspInit+0x48>)
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a518 <HAL_PCD_MspInit+0x48>)
 800a4e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4ec:	61d3      	str	r3, [r2, #28]
 800a4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <HAL_PCD_MspInit+0x48>)
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	2014      	movs	r0, #20
 800a500:	f7f7 fd01 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a504:	2014      	movs	r0, #20
 800a506:	f7f7 fd1a 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	40005c00 	.word	0x40005c00
 800a518:	40021000 	.word	0x40021000

0800a51c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	f7fe fd6f 	bl	8009016 <USBD_LL_SetupStage>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	440b      	add	r3, r1
 800a560:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	4619      	mov	r1, r3
 800a56a:	f7fe fda1 	bl	80090b0 <USBD_LL_DataOutStage>
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a588:	78fa      	ldrb	r2, [r7, #3]
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	440b      	add	r3, r1
 800a596:	333c      	adds	r3, #60	@ 0x3c
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	4619      	mov	r1, r3
 800a59e:	f7fe fdf8 	bl	8009192 <USBD_LL_DataInStage>
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe ff08 	bl	80093ce <USBD_LL_SOF>
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d001      	beq.n	800a5de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5da:	f7f6 fd87 	bl	80010ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a5e4:	7bfa      	ldrb	r2, [r7, #15]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe feb8 	bl	800935e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe fe71 	bl	80092dc <USBD_LL_Reset>
}
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe feb2 	bl	800937c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a620:	4b04      	ldr	r3, [pc, #16]	@ (800a634 <HAL_PCD_SuspendCallback+0x30>)
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4a03      	ldr	r2, [pc, #12]	@ (800a634 <HAL_PCD_SuspendCallback+0x30>)
 800a626:	f043 0306 	orr.w	r3, r3, #6
 800a62a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed00 	.word	0xe000ed00

0800a638 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe feac 	bl	80093a4 <USBD_LL_Resume>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a65c:	4a28      	ldr	r2, [pc, #160]	@ (800a700 <USBD_LL_Init+0xac>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a26      	ldr	r2, [pc, #152]	@ (800a700 <USBD_LL_Init+0xac>)
 800a668:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a66c:	4b24      	ldr	r3, [pc, #144]	@ (800a700 <USBD_LL_Init+0xac>)
 800a66e:	4a25      	ldr	r2, [pc, #148]	@ (800a704 <USBD_LL_Init+0xb0>)
 800a670:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a672:	4b23      	ldr	r3, [pc, #140]	@ (800a700 <USBD_LL_Init+0xac>)
 800a674:	2208      	movs	r2, #8
 800a676:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a678:	4b21      	ldr	r3, [pc, #132]	@ (800a700 <USBD_LL_Init+0xac>)
 800a67a:	2202      	movs	r2, #2
 800a67c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a67e:	4b20      	ldr	r3, [pc, #128]	@ (800a700 <USBD_LL_Init+0xac>)
 800a680:	2200      	movs	r2, #0
 800a682:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a684:	4b1e      	ldr	r3, [pc, #120]	@ (800a700 <USBD_LL_Init+0xac>)
 800a686:	2200      	movs	r2, #0
 800a688:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a68a:	4b1d      	ldr	r3, [pc, #116]	@ (800a700 <USBD_LL_Init+0xac>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a690:	481b      	ldr	r0, [pc, #108]	@ (800a700 <USBD_LL_Init+0xac>)
 800a692:	f7f8 fa0b 	bl	8002aac <HAL_PCD_Init>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a69c:	f7f6 fd26 	bl	80010ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6a6:	2318      	movs	r3, #24
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	f7f9 ff29 	bl	8004502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6b6:	2358      	movs	r3, #88	@ 0x58
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2180      	movs	r1, #128	@ 0x80
 800a6bc:	f7f9 ff21 	bl	8004502 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6c6:	23c0      	movs	r3, #192	@ 0xc0
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2181      	movs	r1, #129	@ 0x81
 800a6cc:	f7f9 ff19 	bl	8004502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2101      	movs	r1, #1
 800a6de:	f7f9 ff10 	bl	8004502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2182      	movs	r1, #130	@ 0x82
 800a6f0:	f7f9 ff07 	bl	8004502 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000f10 	.word	0x20000f10
 800a704:	40005c00 	.word	0x40005c00

0800a708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a71e:	4618      	mov	r0, r3
 800a720:	f7f8 fac3 	bl	8002caa <HAL_PCD_Start>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f94e 	bl	800a9cc <USBD_Get_USB_Status>
 800a730:	4603      	mov	r3, r0
 800a732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a734:	7bbb      	ldrb	r3, [r7, #14]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	4608      	mov	r0, r1
 800a748:	4611      	mov	r1, r2
 800a74a:	461a      	mov	r2, r3
 800a74c:	4603      	mov	r3, r0
 800a74e:	70fb      	strb	r3, [r7, #3]
 800a750:	460b      	mov	r3, r1
 800a752:	70bb      	strb	r3, [r7, #2]
 800a754:	4613      	mov	r3, r2
 800a756:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a766:	78bb      	ldrb	r3, [r7, #2]
 800a768:	883a      	ldrh	r2, [r7, #0]
 800a76a:	78f9      	ldrb	r1, [r7, #3]
 800a76c:	f7f8 fc18 	bl	8002fa0 <HAL_PCD_EP_Open>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f928 	bl	800a9cc <USBD_Get_USB_Status>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f8 fc56 	bl	800305a <HAL_PCD_EP_Close>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f909 	bl	800a9cc <USBD_Get_USB_Status>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f8 fcfe 	bl	80031e8 <HAL_PCD_EP_SetStall>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f8ea 	bl	800a9cc <USBD_Get_USB_Status>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7f8 fd3f 	bl	80032a8 <HAL_PCD_EP_ClrStall>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 f8cb 	bl	800a9cc <USBD_Get_USB_Status>
 800a836:	4603      	mov	r3, r0
 800a838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a856:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	da0c      	bge.n	800a87a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	4613      	mov	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	440b      	add	r3, r1
 800a874:	3302      	adds	r3, #2
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	e00b      	b.n	800a892 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a880:	68f9      	ldr	r1, [r7, #12]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	440b      	add	r3, r1
 800a88c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a890:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	bc80      	pop	{r7}
 800a89a:	4770      	bx	lr

0800a89c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8b6:	78fa      	ldrb	r2, [r7, #3]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f8 fb4b 	bl	8002f56 <HAL_PCD_SetAddress>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f880 	bl	800a9cc <USBD_Get_USB_Status>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	72fb      	strb	r3, [r7, #11]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8fc:	893b      	ldrh	r3, [r7, #8]
 800a8fe:	7af9      	ldrb	r1, [r7, #11]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	f7f8 fc3a 	bl	800317a <HAL_PCD_EP_Transmit>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 f85d 	bl	800a9cc <USBD_Get_USB_Status>
 800a912:	4603      	mov	r3, r0
 800a914:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a916:	7dbb      	ldrb	r3, [r7, #22]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	607a      	str	r2, [r7, #4]
 800a92a:	461a      	mov	r2, r3
 800a92c:	460b      	mov	r3, r1
 800a92e:	72fb      	strb	r3, [r7, #11]
 800a930:	4613      	mov	r3, r2
 800a932:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a942:	893b      	ldrh	r3, [r7, #8]
 800a944:	7af9      	ldrb	r1, [r7, #11]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	f7f8 fbcf 	bl	80030ea <HAL_PCD_EP_Receive>
 800a94c:	4603      	mov	r3, r0
 800a94e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a950:	7dfb      	ldrb	r3, [r7, #23]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f83a 	bl	800a9cc <USBD_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a95c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a978:	78fa      	ldrb	r2, [r7, #3]
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7f8 fbe5 	bl	800314c <HAL_PCD_EP_GetRxCount>
 800a982:	4603      	mov	r3, r0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a994:	4b02      	ldr	r3, [pc, #8]	@ (800a9a0 <USBD_static_malloc+0x14>)
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr
 800a9a0:	20001200 	.word	0x20001200

0800a9a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]

}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bc80      	pop	{r7}
 800a9b4:	4770      	bx	lr

0800a9b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bc80      	pop	{r7}
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d817      	bhi.n	800aa10 <USBD_Get_USB_Status+0x44>
 800a9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e8 <USBD_Get_USB_Status+0x1c>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800a9ff 	.word	0x0800a9ff
 800a9f0:	0800aa05 	.word	0x0800aa05
 800a9f4:	0800aa0b 	.word	0x0800aa0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fc:	e00b      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	73fb      	strb	r3, [r7, #15]
    break;
 800aa02:	e008      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]
    break;
 800aa08:	e005      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0e:	e002      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa10:	2302      	movs	r3, #2
 800aa12:	73fb      	strb	r3, [r7, #15]
    break;
 800aa14:	bf00      	nop
  }
  return usb_status;
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop

0800aa24 <memset>:
 800aa24:	4603      	mov	r3, r0
 800aa26:	4402      	add	r2, r0
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d100      	bne.n	800aa2e <memset+0xa>
 800aa2c:	4770      	bx	lr
 800aa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa32:	e7f9      	b.n	800aa28 <memset+0x4>

0800aa34 <__libc_init_array>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	2600      	movs	r6, #0
 800aa38:	4d0c      	ldr	r5, [pc, #48]	@ (800aa6c <__libc_init_array+0x38>)
 800aa3a:	4c0d      	ldr	r4, [pc, #52]	@ (800aa70 <__libc_init_array+0x3c>)
 800aa3c:	1b64      	subs	r4, r4, r5
 800aa3e:	10a4      	asrs	r4, r4, #2
 800aa40:	42a6      	cmp	r6, r4
 800aa42:	d109      	bne.n	800aa58 <__libc_init_array+0x24>
 800aa44:	f000 f81a 	bl	800aa7c <_init>
 800aa48:	2600      	movs	r6, #0
 800aa4a:	4d0a      	ldr	r5, [pc, #40]	@ (800aa74 <__libc_init_array+0x40>)
 800aa4c:	4c0a      	ldr	r4, [pc, #40]	@ (800aa78 <__libc_init_array+0x44>)
 800aa4e:	1b64      	subs	r4, r4, r5
 800aa50:	10a4      	asrs	r4, r4, #2
 800aa52:	42a6      	cmp	r6, r4
 800aa54:	d105      	bne.n	800aa62 <__libc_init_array+0x2e>
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa5c:	4798      	blx	r3
 800aa5e:	3601      	adds	r6, #1
 800aa60:	e7ee      	b.n	800aa40 <__libc_init_array+0xc>
 800aa62:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa66:	4798      	blx	r3
 800aa68:	3601      	adds	r6, #1
 800aa6a:	e7f2      	b.n	800aa52 <__libc_init_array+0x1e>
 800aa6c:	0800ab08 	.word	0x0800ab08
 800aa70:	0800ab08 	.word	0x0800ab08
 800aa74:	0800ab08 	.word	0x0800ab08
 800aa78:	0800ab0c 	.word	0x0800ab0c

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
