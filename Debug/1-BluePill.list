
1-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a82c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a938  0800a938  0000b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9ac  0800a9ac  0000c180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9ac  0800a9ac  0000c180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9ac  0800a9ac  0000c180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9ac  0800a9ac  0000b9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b0  0800a9b0  0000b9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a9b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  20000180  0800ab34  0000c180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800ab34  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001934c  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbe  00000000  00000000  000254f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  0002a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b0  00000000  00000000  0002b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d292  00000000  00000000  00046e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968fb  00000000  00000000  0006411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faa15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  000faa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00100980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a920 	.word	0x0800a920

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800a920 	.word	0x0800a920

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
//	HAL_ADC_GetValue(hadc);
	ir.sensor0 = bufADC[0];
 8000154:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000156:	881a      	ldrh	r2, [r3, #0]
 8000158:	4b12      	ldr	r3, [pc, #72]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800015a:	801a      	strh	r2, [r3, #0]
	ir.sensor1 = bufADC[1];
 800015c:	4b10      	ldr	r3, [pc, #64]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800015e:	885a      	ldrh	r2, [r3, #2]
 8000160:	4b10      	ldr	r3, [pc, #64]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000162:	805a      	strh	r2, [r3, #2]
	ir.sensor2 = bufADC[2];
 8000164:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000166:	889a      	ldrh	r2, [r3, #4]
 8000168:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800016a:	809a      	strh	r2, [r3, #4]
	ir.sensor3 = bufADC[3];
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800016e:	88da      	ldrh	r2, [r3, #6]
 8000170:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000172:	80da      	strh	r2, [r3, #6]
	ir.sensor4 = bufADC[4];
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000176:	891a      	ldrh	r2, [r3, #8]
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800017a:	811a      	strh	r2, [r3, #8]
	ir.sensor5 = bufADC[5];
 800017c:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800017e:	895a      	ldrh	r2, [r3, #10]
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000182:	815a      	strh	r2, [r3, #10]
	ir.sensor6 = bufADC[6];
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000186:	899a      	ldrh	r2, [r3, #12]
 8000188:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800018a:	819a      	strh	r2, [r3, #12]
	ir.sensor7 = bufADC[7];
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <HAL_ADC_ConvCpltCallback+0x54>)
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000192:	81da      	strh	r2, [r3, #14]
//		lastIR = 0;
//	}else{
//		lastIR++;
//	}

}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000564 	.word	0x20000564
 80001a4:	200003ac 	.word	0x200003ac

080001a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (htim ->Instance == TIM1) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a15      	ldr	r2, [pc, #84]	@ (800020c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d10b      	bne.n	80001d2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		t100ms--;
 80001ba:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	3b01      	subs	r3, #1
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001c4:	701a      	strb	r2, [r3, #0]
		t500ms--;
 80001c6:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001d0:	701a      	strb	r2, [r3, #0]
	}
	if(t100ms==0){
 80001d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d107      	bne.n	80001ea <HAL_TIM_PeriodElapsedCallback+0x42>
		flags1.F100MS = 1;
 80001da:	4a0f      	ldr	r2, [pc, #60]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001dc:	7813      	ldrb	r3, [r2, #0]
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	7013      	strb	r3, [r2, #0]
		t100ms=10;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001e6:	220a      	movs	r2, #10
 80001e8:	701a      	strb	r2, [r3, #0]
	}
	if(t500ms==0){
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d107      	bne.n	8000202 <HAL_TIM_PeriodElapsedCallback+0x5a>
		flags1.F500MS = 1;
 80001f2:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001f4:	7813      	ldrb	r3, [r2, #0]
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	7013      	strb	r3, [r2, #0]
		t500ms=255;
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001fe:	22ff      	movs	r2, #255	@ 0xff
 8000200:	701a      	strb	r2, [r3, #0]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40012c00 	.word	0x40012c00
 8000210:	20000000 	.word	0x20000000
 8000214:	20000001 	.word	0x20000001
 8000218:	200003a8 	.word	0x200003a8

0800021c <HAL_UART_RxCpltCallback>:

/*=============>Recepci贸n de datos desde USART<=============
 * Interrupci贸n que es llamada cuando se produce una recepci贸n de datos.
 * Cargo los datos recibidos al Buffer de Recepci贸n
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(huart ->Instance == USART1){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <HAL_UART_RxCpltCallback+0x38>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d10d      	bne.n	800024a <HAL_UART_RxCpltCallback+0x2e>
//		iw++;
		HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx++], 1);
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	b2d1      	uxtb	r1, r2
 8000236:	4a08      	ldr	r2, [pc, #32]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 8000238:	7111      	strb	r1, [r2, #4]
 800023a:	3308      	adds	r3, #8
 800023c:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <HAL_UART_RxCpltCallback+0x3c>)
 800023e:	4413      	add	r3, r2
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	4805      	ldr	r0, [pc, #20]	@ (800025c <HAL_UART_RxCpltCallback+0x40>)
 8000246:	f005 fa5c 	bl	8005702 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_IT(&huart1, &rx[iw], 1);
	}
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40013800 	.word	0x40013800
 8000258:	200001a0 	.word	0x200001a0
 800025c:	2000051c 	.word	0x2000051c

08000260 <USBReceive>:

void USBReceive(uint8_t *buf, uint16_t len){
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
//	rxUSBData = buf[0];
//	rxUSBData = len;
//	newData = 1;
	for (int i = 0; i < len; ++i) {
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e00c      	b.n	800028c <USBReceive+0x2c>
		datosComProtocol.bufferRx[datosComProtocol.indexWriteRx] = buf[i];
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <USBReceive+0x40>)
 800027a:	7912      	ldrb	r2, [r2, #4]
 800027c:	4611      	mov	r1, r2
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <USBReceive+0x40>)
 8000282:	440b      	add	r3, r1
 8000284:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < len; ++i) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	429a      	cmp	r2, r3
 8000292:	dbee      	blt.n	8000272 <USBReceive+0x12>
	}


}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	200001a0 	.word	0x200001a0

080002a4 <decodeProtocol>:

//TOKEN: ':'

//CKS: xor de todos los bytes enviados menos el CKS

void decodeProtocol(_sDato *datosCom){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes = 0;
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 80002ac:	e0e3      	b.n	8000476 <decodeProtocol+0x1d2>
		switch (estadoProtocolo){
 80002ae:	4b78      	ldr	r3, [pc, #480]	@ (8000490 <decodeProtocol+0x1ec>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	f200 80d8 	bhi.w	8000468 <decodeProtocol+0x1c4>
 80002b8:	a201      	add	r2, pc, #4	@ (adr r2, 80002c0 <decodeProtocol+0x1c>)
 80002ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002be:	bf00      	nop
 80002c0:	080002dd 	.word	0x080002dd
 80002c4:	08000305 	.word	0x08000305
 80002c8:	08000339 	.word	0x08000339
 80002cc:	0800036d 	.word	0x0800036d
 80002d0:	080003a1 	.word	0x080003a1
 80002d4:	080003c9 	.word	0x080003c9
 80002d8:	0800040b 	.word	0x0800040b
		case START:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='U') {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	b2d1      	uxtb	r1, r2
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7151      	strb	r1, [r2, #5]
 80002e8:	461a      	mov	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	7a1b      	ldrb	r3, [r3, #8]
 80002f0:	2b55      	cmp	r3, #85	@ 0x55
 80002f2:	f040 80bd 	bne.w	8000470 <decodeProtocol+0x1cc>
				estadoProtocolo = HEADER_1;
 80002f6:	4b66      	ldr	r3, [pc, #408]	@ (8000490 <decodeProtocol+0x1ec>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000302:	e0b5      	b.n	8000470 <decodeProtocol+0x1cc>
		case HEADER_1:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	795b      	ldrb	r3, [r3, #5]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	b2d1      	uxtb	r1, r2
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	7151      	strb	r1, [r2, #5]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2b4e      	cmp	r3, #78	@ 0x4e
 800031a:	d103      	bne.n	8000324 <decodeProtocol+0x80>
			   {
				   estadoProtocolo=HEADER_2;
 800031c:	4b5c      	ldr	r3, [pc, #368]	@ (8000490 <decodeProtocol+0x1ec>)
 800031e:	2202      	movs	r2, #2
 8000320:	701a      	strb	r2, [r3, #0]
			   }
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 8000322:	e0a8      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000330:	4b57      	ldr	r3, [pc, #348]	@ (8000490 <decodeProtocol+0x1ec>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
			break;
 8000336:	e09e      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_2:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	b2d1      	uxtb	r1, r2
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7151      	strb	r1, [r2, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7a1b      	ldrb	r3, [r3, #8]
 800034c:	2b45      	cmp	r3, #69	@ 0x45
 800034e:	d103      	bne.n	8000358 <decodeProtocol+0xb4>
			{
				estadoProtocolo=HEADER_3;
 8000350:	4b4f      	ldr	r3, [pc, #316]	@ (8000490 <decodeProtocol+0x1ec>)
 8000352:	2203      	movs	r2, #3
 8000354:	701a      	strb	r2, [r3, #0]
			}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 8000356:	e08e      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	3b01      	subs	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000364:	4b4a      	ldr	r3, [pc, #296]	@ (8000490 <decodeProtocol+0x1ec>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
			break;
 800036a:	e084      	b.n	8000476 <decodeProtocol+0x1d2>
		case HEADER_3:
			if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	b2d1      	uxtb	r1, r2
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7151      	strb	r1, [r2, #5]
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	7a1b      	ldrb	r3, [r3, #8]
 8000380:	2b52      	cmp	r3, #82	@ 0x52
 8000382:	d103      	bne.n	800038c <decodeProtocol+0xe8>
				{
					estadoProtocolo=NBYTES;
 8000384:	4b42      	ldr	r3, [pc, #264]	@ (8000490 <decodeProtocol+0x1ec>)
 8000386:	2204      	movs	r2, #4
 8000388:	701a      	strb	r2, [r3, #0]
				}
			else{
				datosCom->indexReadRx--;
			   estadoProtocolo=START;
			}
			break;
 800038a:	e074      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	3b01      	subs	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	715a      	strb	r2, [r3, #5]
			   estadoProtocolo=START;
 8000398:	4b3d      	ldr	r3, [pc, #244]	@ (8000490 <decodeProtocol+0x1ec>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			break;
 800039e:	e06a      	b.n	8000476 <decodeProtocol+0x1d2>
		case NBYTES:
			datosCom->indexStart=datosCom->indexReadRx;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795a      	ldrb	r2, [r3, #5]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	705a      	strb	r2, [r3, #1]
			nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	b2d1      	uxtb	r1, r2
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7151      	strb	r1, [r2, #5]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	7a1a      	ldrb	r2, [r3, #8]
 80003bc:	4b35      	ldr	r3, [pc, #212]	@ (8000494 <decodeProtocol+0x1f0>)
 80003be:	701a      	strb	r2, [r3, #0]
			estadoProtocolo=TOKEN;
 80003c0:	4b33      	ldr	r3, [pc, #204]	@ (8000490 <decodeProtocol+0x1ec>)
 80003c2:	2205      	movs	r2, #5
 80003c4:	701a      	strb	r2, [r3, #0]
			break;
 80003c6:	e056      	b.n	8000476 <decodeProtocol+0x1d2>
		case TOKEN:
			if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	b2d1      	uxtb	r1, r2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7151      	strb	r1, [r2, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80003de:	d10a      	bne.n	80003f6 <decodeProtocol+0x152>
			   estadoProtocolo=PAYLOAD;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <decodeProtocol+0x1ec>)
 80003e2:	2206      	movs	r2, #6
 80003e4:	701a      	strb	r2, [r3, #0]
				datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <decodeProtocol+0x1f0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	709a      	strb	r2, [r3, #2]
			}
			else{
				datosCom->indexReadRx--;
				estadoProtocolo=START;
			}
			break;
 80003f4:	e03f      	b.n	8000476 <decodeProtocol+0x1d2>
				datosCom->indexReadRx--;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	715a      	strb	r2, [r3, #5]
				estadoProtocolo=START;
 8000402:	4b23      	ldr	r3, [pc, #140]	@ (8000490 <decodeProtocol+0x1ec>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
			break;
 8000408:	e035      	b.n	8000476 <decodeProtocol+0x1d2>
		case PAYLOAD:
			if (nBytes>1){
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <decodeProtocol+0x1f0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d90f      	bls.n	8000432 <decodeProtocol+0x18e>
				// datosCom->payload[indice++]=datosCom->bufferRx[datosCom->indexReadRx];
				datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b2d1      	uxtb	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7151      	strb	r1, [r2, #5]
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	7a1a      	ldrb	r2, [r3, #8]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	4053      	eors	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	709a      	strb	r2, [r3, #2]
			}
			nBytes--;
 8000432:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <decodeProtocol+0x1f0>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <decodeProtocol+0x1f0>)
 800043c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <decodeProtocol+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d116      	bne.n	8000474 <decodeProtocol+0x1d0>
				estadoProtocolo=START;
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <decodeProtocol+0x1ec>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
				if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	789a      	ldrb	r2, [r3, #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	4619      	mov	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	440b      	add	r3, r1
 800045a:	7a1b      	ldrb	r3, [r3, #8]
 800045c:	429a      	cmp	r2, r3
 800045e:	d109      	bne.n	8000474 <decodeProtocol+0x1d0>
					decodeData(datosCom);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 f819 	bl	8000498 <decodeData>
				}
			}
			break;
 8000466:	e005      	b.n	8000474 <decodeProtocol+0x1d0>
		default:
			estadoProtocolo=START;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <decodeProtocol+0x1ec>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
			break;
 800046e:	e002      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000470:	bf00      	nop
 8000472:	e000      	b.n	8000476 <decodeProtocol+0x1d2>
			break;
 8000474:	bf00      	nop
	while (datosCom->indexReadRx != datosCom->indexWriteRx){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795a      	ldrb	r2, [r3, #5]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	f47f af15 	bne.w	80002ae <decodeProtocol+0xa>
		}
	}

}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000019c 	.word	0x2000019c
 8000494:	20000574 	.word	0x20000574

08000498 <decodeData>:

void decodeData(_sDato *datosCom){
 8000498:	b480      	push	{r7}
 800049a:	b091      	sub	sp, #68	@ 0x44
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	#define POSID   2
    #define POSDATA 3
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 80004a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004b0:	3340      	adds	r3, #64	@ 0x40
 80004b2:	443b      	add	r3, r7
 80004b4:	2255      	movs	r2, #85	@ 0x55
 80004b6:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 80004ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004c4:	3340      	adds	r3, #64	@ 0x40
 80004c6:	443b      	add	r3, r7
 80004c8:	224e      	movs	r2, #78	@ 0x4e
 80004ca:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 80004ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004d8:	3340      	adds	r3, #64	@ 0x40
 80004da:	443b      	add	r3, r7
 80004dc:	2245      	movs	r2, #69	@ 0x45
 80004de:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 80004e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80004ec:	3340      	adds	r3, #64	@ 0x40
 80004ee:	443b      	add	r3, r7
 80004f0:	2252      	movs	r2, #82	@ 0x52
 80004f2:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]= 0;
 80004f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000500:	3340      	adds	r3, #64	@ 0x40
 8000502:	443b      	add	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 800050a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000514:	3340      	adds	r3, #64	@ 0x40
 8000516:	443b      	add	r3, r7
 8000518:	223a      	movs	r2, #58	@ 0x3a
 800051a:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (datosCom->bufferRx[datosCom->indexStart+POSID]) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	3302      	adds	r3, #2
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	7a1b      	ldrb	r3, [r3, #8]
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d116      	bne.n	800055c <decodeData+0xc4>
		case ALIVE:
			auxBuffTx[indiceAux++]=ALIVE;
 800052e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000538:	3340      	adds	r3, #64	@ 0x40
 800053a:	443b      	add	r3, r7
 800053c:	22f0      	movs	r2, #240	@ 0xf0
 800053e:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[indiceAux++]=ACK;
 8000542:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800054c:	3340      	adds	r3, #64	@ 0x40
 800054e:	443b      	add	r3, r7
 8000550:	220d      	movs	r2, #13
 8000552:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x03;
 8000556:	2303      	movs	r3, #3
 8000558:	733b      	strb	r3, [r7, #12]
			break;
 800055a:	e00c      	b.n	8000576 <decodeData+0xde>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 800055c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000566:	3340      	adds	r3, #64	@ 0x40
 8000568:	443b      	add	r3, r7
 800056a:	22dd      	movs	r2, #221	@ 0xdd
 800056c:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 8000570:	2302      	movs	r3, #2
 8000572:	733b      	strb	r3, [r7, #12]
			break;
 8000574:	bf00      	nop
	}

	cheksum=0;
 8000576:	2300      	movs	r3, #0
 8000578:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 800057c:	2300      	movs	r3, #0
 800057e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000582:	e021      	b.n	80005c8 <decodeData+0x130>
	{
		cheksum ^= auxBuffTx[a];
 8000584:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000588:	3340      	adds	r3, #64	@ 0x40
 800058a:	443b      	add	r3, r7
 800058c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8000590:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000594:	4053      	eors	r3, r2
 8000596:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 800059a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <decodeData+0x160>)
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	b2c8      	uxtb	r0, r1
 80005a6:	4914      	ldr	r1, [pc, #80]	@ (80005f8 <decodeData+0x160>)
 80005a8:	7188      	strb	r0, [r1, #6]
 80005aa:	4619      	mov	r1, r3
 80005ac:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80005b0:	443b      	add	r3, r7
 80005b2:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	440b      	add	r3, r1
 80005ba:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80005be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80005c2:	3301      	adds	r3, #1
 80005c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80005c8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80005cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3d7      	bcc.n	8000584 <decodeData+0xec>
	}
		datosCom->bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <decodeData+0x160>)
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	b2d1      	uxtb	r1, r2
 80005dc:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <decodeData+0x160>)
 80005de:	7191      	strb	r1, [r2, #6]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80005ea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
//		CDC_Transmit_FS(datosCom->bufferTx, auxBuffTx[NBYTES]+6);

}
 80005ee:	bf00      	nop
 80005f0:	3744      	adds	r7, #68	@ 0x44
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	200001a0 	.word	0x200001a0

080005fc <encodeData>:

void encodeData(uint8_t id){
 80005fc:	b480      	push	{r7}
 80005fe:	b091      	sub	sp, #68	@ 0x44
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t auxBuffTx[50], indiceAux=0, cheksum;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	auxBuffTx[indiceAux++]='U';
 800060c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000616:	3340      	adds	r3, #64	@ 0x40
 8000618:	443b      	add	r3, r7
 800061a:	2255      	movs	r2, #85	@ 0x55
 800061c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='N';
 8000620:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800062a:	3340      	adds	r3, #64	@ 0x40
 800062c:	443b      	add	r3, r7
 800062e:	224e      	movs	r2, #78	@ 0x4e
 8000630:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='E';
 8000634:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800063e:	3340      	adds	r3, #64	@ 0x40
 8000640:	443b      	add	r3, r7
 8000642:	2245      	movs	r2, #69	@ 0x45
 8000644:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]='R';
 8000648:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000652:	3340      	adds	r3, #64	@ 0x40
 8000654:	443b      	add	r3, r7
 8000656:	2252      	movs	r2, #82	@ 0x52
 8000658:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=0;
 800065c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000666:	3340      	adds	r3, #64	@ 0x40
 8000668:	443b      	add	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	f803 2c38 	strb.w	r2, [r3, #-56]
	auxBuffTx[indiceAux++]=':';
 8000670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800067a:	3340      	adds	r3, #64	@ 0x40
 800067c:	443b      	add	r3, r7
 800067e:	223a      	movs	r2, #58	@ 0x3a
 8000680:	f803 2c38 	strb.w	r2, [r3, #-56]

	switch (id) {
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2ba0      	cmp	r3, #160	@ 0xa0
 8000688:	f040 80fd 	bne.w	8000886 <encodeData+0x28a>
	case IR_SENSOR:
		auxBuffTx[indiceAux++]=IR_SENSOR;
 800068c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000696:	3340      	adds	r3, #64	@ 0x40
 8000698:	443b      	add	r3, r7
 800069a:	22a0      	movs	r2, #160	@ 0xa0
 800069c:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[NBYTES]=0x12; //decimal= 18
 80006a0:	2312      	movs	r3, #18
 80006a2:	733b      	strb	r3, [r7, #12]

		myWord.ui16[0] = ir.sensor0;
 80006a4:	4b9f      	ldr	r3, [pc, #636]	@ (8000924 <encodeData+0x328>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b9f      	ldr	r3, [pc, #636]	@ (8000928 <encodeData+0x32c>)
 80006aa:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor0;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b9b      	ldr	r3, [pc, #620]	@ (8000928 <encodeData+0x32c>)
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80006c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b95      	ldr	r3, [pc, #596]	@ (8000928 <encodeData+0x32c>)
 80006d4:	785a      	ldrb	r2, [r3, #1]
 80006d6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006da:	443b      	add	r3, r7
 80006dc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor1;
 80006e0:	4b90      	ldr	r3, [pc, #576]	@ (8000924 <encodeData+0x328>)
 80006e2:	885a      	ldrh	r2, [r3, #2]
 80006e4:	4b90      	ldr	r3, [pc, #576]	@ (8000928 <encodeData+0x32c>)
 80006e6:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor1;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80006f2:	4619      	mov	r1, r3
 80006f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000928 <encodeData+0x32c>)
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 8000702:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800070c:	4619      	mov	r1, r3
 800070e:	4b86      	ldr	r3, [pc, #536]	@ (8000928 <encodeData+0x32c>)
 8000710:	785a      	ldrb	r2, [r3, #1]
 8000712:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000716:	443b      	add	r3, r7
 8000718:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor2;
 800071c:	4b81      	ldr	r3, [pc, #516]	@ (8000924 <encodeData+0x328>)
 800071e:	889a      	ldrh	r2, [r3, #4]
 8000720:	4b81      	ldr	r3, [pc, #516]	@ (8000928 <encodeData+0x32c>)
 8000722:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor2;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000724:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800072e:	4619      	mov	r1, r3
 8000730:	4b7d      	ldr	r3, [pc, #500]	@ (8000928 <encodeData+0x32c>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000738:	443b      	add	r3, r7
 800073a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800073e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000748:	4619      	mov	r1, r3
 800074a:	4b77      	ldr	r3, [pc, #476]	@ (8000928 <encodeData+0x32c>)
 800074c:	785a      	ldrb	r2, [r3, #1]
 800074e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000752:	443b      	add	r3, r7
 8000754:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor3;
 8000758:	4b72      	ldr	r3, [pc, #456]	@ (8000924 <encodeData+0x328>)
 800075a:	88da      	ldrh	r2, [r3, #6]
 800075c:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <encodeData+0x32c>)
 800075e:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor3;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000760:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800076a:	4619      	mov	r1, r3
 800076c:	4b6e      	ldr	r3, [pc, #440]	@ (8000928 <encodeData+0x32c>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000774:	443b      	add	r3, r7
 8000776:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800077a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000784:	4619      	mov	r1, r3
 8000786:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <encodeData+0x32c>)
 8000788:	785a      	ldrb	r2, [r3, #1]
 800078a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800078e:	443b      	add	r3, r7
 8000790:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor4;
 8000794:	4b63      	ldr	r3, [pc, #396]	@ (8000924 <encodeData+0x328>)
 8000796:	891a      	ldrh	r2, [r3, #8]
 8000798:	4b63      	ldr	r3, [pc, #396]	@ (8000928 <encodeData+0x32c>)
 800079a:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor4;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 800079c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <encodeData+0x32c>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007b0:	443b      	add	r3, r7
 80007b2:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007c0:	4619      	mov	r1, r3
 80007c2:	4b59      	ldr	r3, [pc, #356]	@ (8000928 <encodeData+0x32c>)
 80007c4:	785a      	ldrb	r2, [r3, #1]
 80007c6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ca:	443b      	add	r3, r7
 80007cc:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor5;
 80007d0:	4b54      	ldr	r3, [pc, #336]	@ (8000924 <encodeData+0x328>)
 80007d2:	895a      	ldrh	r2, [r3, #10]
 80007d4:	4b54      	ldr	r3, [pc, #336]	@ (8000928 <encodeData+0x32c>)
 80007d6:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor5;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 80007d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007e2:	4619      	mov	r1, r3
 80007e4:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <encodeData+0x32c>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80007ec:	443b      	add	r3, r7
 80007ee:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 80007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80007fc:	4619      	mov	r1, r3
 80007fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <encodeData+0x32c>)
 8000800:	785a      	ldrb	r2, [r3, #1]
 8000802:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000806:	443b      	add	r3, r7
 8000808:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor6;
 800080c:	4b45      	ldr	r3, [pc, #276]	@ (8000924 <encodeData+0x328>)
 800080e:	899a      	ldrh	r2, [r3, #12]
 8000810:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <encodeData+0x32c>)
 8000812:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor6;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000814:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800081e:	4619      	mov	r1, r3
 8000820:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <encodeData+0x32c>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000828:	443b      	add	r3, r7
 800082a:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800082e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000838:	4619      	mov	r1, r3
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <encodeData+0x32c>)
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000842:	443b      	add	r3, r7
 8000844:	f803 2c38 	strb.w	r2, [r3, #-56]

		myWord.ui16[0] = ir.sensor7;
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <encodeData+0x328>)
 800084a:	89da      	ldrh	r2, [r3, #14]
 800084c:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <encodeData+0x32c>)
 800084e:	801a      	strh	r2, [r3, #0]
		//myWord.ui32 = ir.sensor7;
		auxBuffTx[indiceAux++] = myWord.ui8[0];
 8000850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800085a:	4619      	mov	r1, r3
 800085c:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <encodeData+0x32c>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8000864:	443b      	add	r3, r7
 8000866:	f803 2c38 	strb.w	r2, [r3, #-56]
		auxBuffTx[indiceAux++] = myWord.ui8[1];
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000874:	4619      	mov	r1, r3
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <encodeData+0x32c>)
 8000878:	785a      	ldrb	r2, [r3, #1]
 800087a:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 800087e:	443b      	add	r3, r7
 8000880:	f803 2c38 	strb.w	r2, [r3, #-56]

		break;
 8000884:	e00c      	b.n	80008a0 <encodeData+0x2a4>
		default:
			auxBuffTx[indiceAux++]=0xDD;
 8000886:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8000890:	3340      	adds	r3, #64	@ 0x40
 8000892:	443b      	add	r3, r7
 8000894:	22dd      	movs	r2, #221	@ 0xdd
 8000896:	f803 2c38 	strb.w	r2, [r3, #-56]
			auxBuffTx[NBYTES]=0x02;
 800089a:	2302      	movs	r3, #2
 800089c:	733b      	strb	r3, [r7, #12]
			break;
 800089e:	bf00      	nop
	}
	cheksum=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008ac:	e021      	b.n	80008f2 <encodeData+0x2f6>
	{
		cheksum ^= auxBuffTx[a];
 80008ae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008b2:	3340      	adds	r3, #64	@ 0x40
 80008b4:	443b      	add	r3, r7
 80008b6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80008be:	4053      	eors	r3, r2
 80008c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=auxBuffTx[a];
 80008c4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <encodeData+0x330>)
 80008ca:	799b      	ldrb	r3, [r3, #6]
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	b2c8      	uxtb	r0, r1
 80008d0:	4916      	ldr	r1, [pc, #88]	@ (800092c <encodeData+0x330>)
 80008d2:	7188      	strb	r0, [r1, #6]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80008da:	443b      	add	r3, r7
 80008dc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <encodeData+0x330>)
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	for(uint8_t a=0 ;a < indiceAux ;a++)
 80008e8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80008f2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80008f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3d7      	bcc.n	80008ae <encodeData+0x2b2>
	}
		datosComProtocol.bufferTx[datosComProtocol.indexWriteTx++]=cheksum;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <encodeData+0x330>)
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	b2d1      	uxtb	r1, r2
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <encodeData+0x330>)
 8000908:	7191      	strb	r1, [r2, #6]
 800090a:	461a      	mov	r2, r3
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <encodeData+0x330>)
 800090e:	4413      	add	r3, r2
 8000910:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000914:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000918:	bf00      	nop
 800091a:	3744      	adds	r7, #68	@ 0x44
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200003ac 	.word	0x200003ac
 8000928:	200003c0 	.word	0x200003c0
 800092c:	200001a0 	.word	0x200001a0

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fd3c 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8b8 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 facc 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 faac 	bl	8000e9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000944:	f000 fa80 	bl	8000e48 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000948:	f000 f9de 	bl	8000d08 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800094c:	f009 fae6 	bl	8009f1c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000950:	f000 f90a 	bl	8000b68 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000954:	f000 f9aa 	bl	8000cac <MX_I2C2_Init>
  MX_TIM4_Init();
 8000958:	f000 fa28 	bl	8000dac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800095c:	484b      	ldr	r0, [pc, #300]	@ (8000a8c <main+0x15c>)
 800095e:	f004 fa9d 	bl	8004e9c <HAL_TIM_Base_Start_IT>
  CDC_AttachRxData(USBReceive);
 8000962:	484b      	ldr	r0, [pc, #300]	@ (8000a90 <main+0x160>)
 8000964:	f009 fbea 	bl	800a13c <CDC_AttachRxData>

  datosComProtocol.indexWriteRx = 0;		//Init indice recepi贸n del Buffer de Recepci贸n
 8000968:	4b4a      	ldr	r3, [pc, #296]	@ (8000a94 <main+0x164>)
 800096a:	2200      	movs	r2, #0
 800096c:	711a      	strb	r2, [r3, #4]
  datosComProtocol.indexReadRx = 0;			//Init indice de lectura del Buffer de Recepci贸n
 800096e:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <main+0x164>)
 8000970:	2200      	movs	r2, #0
 8000972:	715a      	strb	r2, [r3, #5]
  datosComProtocol.indexWriteTx = 0;
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <main+0x164>)
 8000976:	2200      	movs	r2, #0
 8000978:	719a      	strb	r2, [r3, #6]
  datosComProtocol.indexReadTx = 0;
 800097a:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <main+0x164>)
 800097c:	2200      	movs	r2, #0
 800097e:	71da      	strb	r2, [r3, #7]
//  ir=0,iw=0;

  HAL_UART_Receive_IT(&huart1, &datosComProtocol.bufferRx[datosComProtocol.indexWriteRx], 1);
 8000980:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <main+0x164>)
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	3308      	adds	r3, #8
 8000986:	4a43      	ldr	r2, [pc, #268]	@ (8000a94 <main+0x164>)
 8000988:	4413      	add	r3, r2
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4842      	ldr	r0, [pc, #264]	@ (8000a98 <main+0x168>)
 8000990:	f004 feb7 	bl	8005702 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
 8000994:	2208      	movs	r2, #8
 8000996:	4941      	ldr	r1, [pc, #260]	@ (8000a9c <main+0x16c>)
 8000998:	4841      	ldr	r0, [pc, #260]	@ (8000aa0 <main+0x170>)
 800099a:	f000 fe67 	bl	800166c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a4:	483f      	ldr	r0, [pc, #252]	@ (8000aa4 <main+0x174>)
 80009a6:	f001 fe7f 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ae:	f000 fd61 	bl	8001474 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b8:	483a      	ldr	r0, [pc, #232]	@ (8000aa4 <main+0x174>)
 80009ba:	f001 fe75 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009c2:	f000 fd57 	bl	8001474 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009cc:	4835      	ldr	r0, [pc, #212]	@ (8000aa4 <main+0x174>)
 80009ce:	f001 fe6b 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009d6:	f000 fd4d 	bl	8001474 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4830      	ldr	r0, [pc, #192]	@ (8000aa4 <main+0x174>)
 80009e2:	f001 fe61 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ea:	f000 fd43 	bl	8001474 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	482b      	ldr	r0, [pc, #172]	@ (8000aa4 <main+0x174>)
 80009f6:	f001 fe57 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009fe:	f000 fd39 	bl	8001474 <HAL_Delay>
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, 1);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a08:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <main+0x174>)
 8000a0a:	f001 fe4d 	bl	80026a8 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  if (flags1.F250US==1) {
//		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
//	}

	  if(flags1.F100MS==1){
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <main+0x178>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d009      	beq.n	8000a30 <main+0x100>
		  flags1.F100MS = 0;
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <main+0x178>)
 8000a1e:	7813      	ldrb	r3, [r2, #0]
 8000a20:	f36f 0341 	bfc	r3, #1, #1
 8000a24:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	481e      	ldr	r0, [pc, #120]	@ (8000aa4 <main+0x174>)
 8000a2c:	f001 fe54 	bl	80026d8 <HAL_GPIO_TogglePin>
		  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)bufADC, 8);
	  }

	  if (flags1.F500MS == 1) {
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <main+0x178>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <main+0x11e>
		  flags1.F500MS = 0;
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa8 <main+0x178>)
 8000a40:	7813      	ldrb	r3, [r2, #0]
 8000a42:	f36f 0382 	bfc	r3, #2, #1
 8000a46:	7013      	strb	r3, [r2, #0]
		  encodeData(IR_SENSOR);
 8000a48:	20a0      	movs	r0, #160	@ 0xa0
 8000a4a:	f7ff fdd7 	bl	80005fc <encodeData>
//		  if(CDC_Transmit_FS(&rxUSBData, 1) == USBD_OK){
//			  newData = 0;
//		  }
//	  }

	  if(datosComProtocol.indexReadRx != datosComProtocol.indexWriteRx){
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <main+0x164>)
 8000a50:	795a      	ldrb	r2, [r3, #5]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <main+0x164>)
 8000a54:	791b      	ldrb	r3, [r3, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d002      	beq.n	8000a60 <main+0x130>
		  decodeProtocol(&datosComProtocol);
 8000a5a:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <main+0x164>)
 8000a5c:	f7ff fc22 	bl	80002a4 <decodeProtocol>
//		  lengthTx = datosComProtocol.indexWriteTx - datosComProtocol.indexReadTx;
//		  if((CDC_Transmit_FS(&datosComProtocol.bufferTx[datosComProtocol.indexReadTx], lengthTx) == USBD_OK))
//			  datosComProtocol.indexReadTx++;
//	  }

	  if (huart1.gState == HAL_UART_STATE_READY) {
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <main+0x168>)
 8000a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d1d0      	bne.n	8000a0e <main+0xde>
		  HAL_UART_Transmit_IT(&huart1, &datosComProtocol.bufferTx[datosComProtocol.indexReadTx++], 1);
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <main+0x164>)
 8000a6e:	79db      	ldrb	r3, [r3, #7]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	b2d1      	uxtb	r1, r2
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <main+0x164>)
 8000a76:	71d1      	strb	r1, [r2, #7]
 8000a78:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000a7c:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <main+0x164>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <main+0x168>)
 8000a86:	f004 fe07 	bl	8005698 <HAL_UART_Transmit_IT>
	  if(flags1.F100MS==1){
 8000a8a:	e7c0      	b.n	8000a0e <main+0xde>
 8000a8c:	2000048c 	.word	0x2000048c
 8000a90:	08000261 	.word	0x08000261
 8000a94:	200001a0 	.word	0x200001a0
 8000a98:	2000051c 	.word	0x2000051c
 8000a9c:	20000564 	.word	0x20000564
 8000aa0:	200003c4 	.word	0x200003c4
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	200003a8 	.word	0x200003a8

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	@ 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab6:	2228      	movs	r2, #40	@ 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 ff04 	bl	800a8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000af8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fcb4 	bl	8004470 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b0e:	f000 fa61 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 ff20 	bl	8004974 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b3a:	f000 fa4b 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f89e 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b5a:	f000 fa3b 	bl	8000fd4 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca8 <MX_ADC1_Init+0x140>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b86:	4b47      	ldr	r3, [pc, #284]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b44      	ldr	r3, [pc, #272]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b94:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000ba0:	4b40      	ldr	r3, [pc, #256]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	483f      	ldr	r0, [pc, #252]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000ba8:	f000 fc88 	bl	80014bc <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 fa0f 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4837      	ldr	r0, [pc, #220]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000bc8:	f000 fe40 	bl	800184c <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f9ff 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4830      	ldr	r0, [pc, #192]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000be4:	f000 fe32 	bl	800184c <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 f9f1 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4829      	ldr	r0, [pc, #164]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c00:	f000 fe24 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f9e3 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4822      	ldr	r0, [pc, #136]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c1c:	f000 fe16 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c26:	f000 f9d5 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	481b      	ldr	r0, [pc, #108]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c38:	f000 fe08 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c42:	f000 f9c7 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c46:	2305      	movs	r3, #5
 8000c48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c54:	f000 fdfa 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c5e:	f000 f9b9 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c62:	2306      	movs	r3, #6
 8000c64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c70:	f000 fdec 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c7a:	f000 f9ab 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c82:	2308      	movs	r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_ADC1_Init+0x13c>)
 8000c8c:	f000 fdde 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c96:	f000 f99d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200003c4 	.word	0x200003c4
 8000ca8:	40012400 	.word	0x40012400

08000cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb2:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <MX_I2C2_Init+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_I2C2_Init+0x58>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_I2C2_Init+0x50>)
 8000cea:	f001 fd0f 	bl	800270c <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cf4:	f000 f96e 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000438 	.word	0x20000438
 8000d00:	40005800 	.word	0x40005800
 8000d04:	000186a0 	.word	0x000186a0

08000d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d26:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <MX_TIM1_Init+0xa0>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d2c:	f244 6250 	movw	r2, #18000	@ 0x4650
 8000d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d54:	f004 f852 	bl	8004dfc <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d5e:	f000 f939 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d70:	f004 f9ee 	bl	8005150 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d7a:	f000 f92b 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d8c:	f004 fbc4 	bl	8005518 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d96:	f000 f91d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000048c 	.word	0x2000048c
 8000da8:	40012c00 	.word	0x40012c00

08000dac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <MX_TIM4_Init+0x98>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000df0:	f004 f804 	bl	8004dfc <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f8eb 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000e0c:	f004 f9a0 	bl	8005150 <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 f8dd 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_TIM4_Init+0x94>)
 8000e28:	f004 fb76 	bl	8005518 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e32:	f000 f8cf 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200004d4 	.word	0x200004d4
 8000e44:	40000800 	.word	0x40000800

08000e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART1_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART1_UART_Init+0x4c>)
 8000e80:	f004 fbba 	bl	80055f8 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f8a3 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000051c 	.word	0x2000051c
 8000e98:	40013800 	.word	0x40013800

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_DMA_Init+0x38>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <MX_DMA_Init+0x38>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_DMA_Init+0x38>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f000 ff95 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f000 ffae 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a34      	ldr	r2, [pc, #208]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a28      	ldr	r2, [pc, #160]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a22      	ldr	r2, [pc, #136]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <MX_GPIO_Init+0xec>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBuidIn_GPIO_Port, LedBuidIn_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	481d      	ldr	r0, [pc, #116]	@ (8000fc8 <MX_GPIO_Init+0xf0>)
 8000f54:	f001 fba8 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5e:	481b      	ldr	r0, [pc, #108]	@ (8000fcc <MX_GPIO_Init+0xf4>)
 8000f60:	f001 fba2 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedBuidIn_Pin */
  GPIO_InitStruct.Pin = LedBuidIn_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedBuidIn_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4812      	ldr	r0, [pc, #72]	@ (8000fc8 <MX_GPIO_Init+0xf0>)
 8000f7e:	f001 fa0f 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <MX_GPIO_Init+0xf8>)
 8000f98:	f001 fa02 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0xf4>)
 8000fb6:	f001 f9f3 	bl	80023a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a14      	ldr	r2, [pc, #80]	@ (800103c <HAL_MspInit+0x5c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <HAL_MspInit+0x5c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_MspInit+0x60>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_MspInit+0x60>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000

08001044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <HAL_ADC_MspInit+0xbc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d149      	bne.n	80010f8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_ADC_MspInit+0xc0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001094:	23ff      	movs	r3, #255	@ 0xff
 8001096:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001098:	2303      	movs	r3, #3
 800109a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	4819      	ldr	r0, [pc, #100]	@ (8001108 <HAL_ADC_MspInit+0xc4>)
 80010a4:	f001 f97c 	bl	80023a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010aa:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <HAL_ADC_MspInit+0xcc>)
 80010ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010de:	f000 febd 	bl	8001e5c <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80010e8:	f7ff ff74 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a07      	ldr	r2, [pc, #28]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010f0:	621a      	str	r2, [r3, #32]
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_ADC_MspInit+0xc8>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40012400 	.word	0x40012400
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800
 800110c:	200003f4 	.word	0x200003f4
 8001110:	40020008 	.word	0x40020008

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <HAL_I2C_MspInit+0x74>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d124      	bne.n	800117e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_I2C_MspInit+0x78>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_I2C_MspInit+0x78>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_I2C_MspInit+0x78>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800114c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001152:	2312      	movs	r3, #18
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	@ (8001190 <HAL_I2C_MspInit+0x7c>)
 8001162:	f001 f91d 	bl	80023a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_I2C_MspInit+0x78>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_I2C_MspInit+0x78>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_I2C_MspInit+0x78>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005800 	.word	0x40005800
 800118c:	40021000 	.word	0x40021000
 8001190:	40010c00 	.word	0x40010c00

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <HAL_TIM_Base_MspInit+0x68>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d114      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a15      	ldr	r2, [pc, #84]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2019      	movs	r0, #25
 80011c4:	f000 fe13 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c8:	2019      	movs	r0, #25
 80011ca:	f000 fe2c 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ce:	e010      	b.n	80011f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_TIM_Base_MspInit+0x70>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10b      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_TIM_Base_MspInit+0x6c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40000800 	.word	0x40000800

08001208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a20      	ldr	r2, [pc, #128]	@ (80012a4 <HAL_UART_MspInit+0x9c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d139      	bne.n	800129c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_UART_MspInit+0xa0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800125c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	480f      	ldr	r0, [pc, #60]	@ (80012ac <HAL_UART_MspInit+0xa4>)
 800126e:	f001 f897 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4809      	ldr	r0, [pc, #36]	@ (80012ac <HAL_UART_MspInit+0xa4>)
 8001288:	f001 f88a 	bl	80023a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2025      	movs	r0, #37	@ 0x25
 8001292:	f000 fdac 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001296:	2025      	movs	r0, #37	@ 0x25
 8001298:	f000 fdc5 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010800 	.word	0x40010800

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f89c 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <DMA1_Channel1_IRQHandler+0x10>)
 800130e:	f000 ff13 	bl	8002138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200003f4 	.word	0x200003f4

0800131c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001322:	f001 fc5c 	bl	8002bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000c50 	.word	0x20000c50

08001330 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <TIM1_UP_IRQHandler+0x10>)
 8001336:	f003 fe03 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000048c 	.word	0x2000048c

08001344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <USART1_IRQHandler+0x10>)
 800134a:	f004 f9ff 	bl	800574c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000051c 	.word	0x2000051c

08001358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff fff8 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	@ (8001398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800136a:	490c      	ldr	r1, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001380:	4c09      	ldr	r4, [pc, #36]	@ (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f009 faa3 	bl	800a8d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff facd 	bl	8000930 <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80013a0:	0800a9b4 	.word	0x0800a9b4
  ldr r2, =_sbss
 80013a4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80013a8:	20001160 	.word	0x20001160

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <HAL_Init+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <HAL_Init+0x28>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 fd09 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fe08 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fd21 	bl	8001e42 <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 fce9 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	@ (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000004 	.word	0x20000004
 8001434:	2000000c 	.word	0x2000000c
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a03      	ldr	r2, [pc, #12]	@ (800145c <HAL_IncTick+0x20>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000578 	.word	0x20000578

08001460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000578 	.word	0x20000578

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000000c 	.word	0x2000000c

080014bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0be      	b.n	800165c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fda2 	bl	8001044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 faf5 	bl	8001af0 <ADC_ConversionStop_Disable>
 8001506:	4603      	mov	r3, r0
 8001508:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 8099 	bne.w	800164a <HAL_ADC_Init+0x18e>
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8095 	bne.w	800164a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001528:	f023 0302 	bic.w	r3, r3, #2
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800153c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7b1b      	ldrb	r3, [r3, #12]
 8001542:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001544:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4313      	orrs	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001554:	d003      	beq.n	800155e <HAL_ADC_Init+0xa2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d102      	bne.n	8001564 <HAL_ADC_Init+0xa8>
 800155e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001562:	e000      	b.n	8001566 <HAL_ADC_Init+0xaa>
 8001564:	2300      	movs	r3, #0
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7d1b      	ldrb	r3, [r3, #20]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d119      	bne.n	80015a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	3b01      	subs	r3, #1
 8001582:	035a      	lsls	r2, r3, #13
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e00b      	b.n	80015a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	f043 0220 	orr.w	r2, r3, #32
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_ADC_Init+0x1a8>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d8:	d003      	beq.n	80015e2 <HAL_ADC_Init+0x126>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	051b      	lsls	r3, r3, #20
 80015ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_ADC_Init+0x1ac>)
 8001608:	4013      	ands	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	429a      	cmp	r2, r3
 800160e:	d10b      	bne.n	8001628 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001626:	e018      	b.n	800165a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	f023 0312 	bic.w	r3, r3, #18
 8001630:	f043 0210 	orr.w	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001648:	e007      	b.n	800165a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	ffe1f7fd 	.word	0xffe1f7fd
 8001668:	ff1f0efe 	.word	0xff1f0efe

0800166c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a64      	ldr	r2, [pc, #400]	@ (8001814 <HAL_ADC_Start_DMA+0x1a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <HAL_ADC_Start_DMA+0x24>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_ADC_Start_DMA+0x1ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d106      	bne.n	800169e <HAL_ADC_Start_DMA+0x32>
 8001690:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_ADC_Start_DMA+0x1a8>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 80b3 	bne.w	8001804 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_Start_DMA+0x40>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0ae      	b.n	800180a <HAL_ADC_Start_DMA+0x19e>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f9c1 	bl	8001a3c <ADC_Enable>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 809a 	bne.w	80017fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a4e      	ldr	r2, [pc, #312]	@ (8001818 <HAL_ADC_Start_DMA+0x1ac>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_Start_DMA+0x84>
 80016e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <HAL_ADC_Start_DMA+0x1a8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d115      	bne.n	800171c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d026      	beq.n	8001758 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001712:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800171a:	e01d      	b.n	8001758 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a39      	ldr	r2, [pc, #228]	@ (8001814 <HAL_ADC_Start_DMA+0x1a8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d004      	beq.n	800173c <HAL_ADC_Start_DMA+0xd0>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a38      	ldr	r2, [pc, #224]	@ (8001818 <HAL_ADC_Start_DMA+0x1ac>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10d      	bne.n	8001758 <HAL_ADC_Start_DMA+0xec>
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_ADC_Start_DMA+0x1a8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001750:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001768:	f023 0206 	bic.w	r2, r3, #6
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001770:	e002      	b.n	8001778 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a25      	ldr	r2, [pc, #148]	@ (800181c <HAL_ADC_Start_DMA+0x1b0>)
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a24      	ldr	r2, [pc, #144]	@ (8001820 <HAL_ADC_Start_DMA+0x1b4>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_ADC_Start_DMA+0x1b8>)
 8001796:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0202 	mvn.w	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a18      	ldr	r0, [r3, #32]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	334c      	adds	r3, #76	@ 0x4c
 80017bc:	4619      	mov	r1, r3
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f000 fba5 	bl	8001f10 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017d0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017d4:	d108      	bne.n	80017e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80017e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017e6:	e00f      	b.n	8001808 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80017f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017f8:	e006      	b.n	8001808 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001802:	e001      	b.n	8001808 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012400 	.word	0x40012400
 8001818:	40012800 	.word	0x40012800
 800181c:	08001b73 	.word	0x08001b73
 8001820:	08001bef 	.word	0x08001bef
 8001824:	08001c0b 	.word	0x08001c0b

08001828 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x20>
 8001868:	2302      	movs	r3, #2
 800186a:	e0dc      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1da>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b06      	cmp	r3, #6
 800187a:	d81c      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b05      	subs	r3, #5
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b05      	subs	r3, #5
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b4:	e03c      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d81c      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b23      	subs	r3, #35	@ 0x23
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b23      	subs	r3, #35	@ 0x23
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018f6:	e01b      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	@ 0x41
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	4019      	ands	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	@ 0x41
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d91c      	bls.n	8001972 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	3b1e      	subs	r3, #30
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e019      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6919      	ldr	r1, [r3, #16]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6898      	ldr	r0, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	2b11      	cmp	r3, #17
 80019b4:	d132      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_ADC_ConfigChannel+0x1e4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d125      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d126      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_ADC_ConfigChannel+0x1e8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a13      	ldr	r2, [pc, #76]	@ (8001a38 <HAL_ADC_ConfigChannel+0x1ec>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9a      	lsrs	r2, r3, #18
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1b2>
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40012400 	.word	0x40012400
 8001a34:	20000004 	.word	0x20000004
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d040      	beq.n	8001adc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <ADC_Enable+0xac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <ADC_Enable+0xb0>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a78:	e002      	b.n	8001a80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a86:	f7ff fceb 	bl	8001460 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a8c:	e01f      	b.n	8001ace <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a8e:	f7ff fce7 	bl	8001460 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d918      	bls.n	8001ace <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d011      	beq.n	8001ace <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e007      	b.n	8001ade <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d1d8      	bne.n	8001a8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12e      	bne.n	8001b68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b1a:	f7ff fca1 	bl	8001460 <HAL_GetTick>
 8001b1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b20:	e01b      	b.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b22:	f7ff fc9d 	bl	8001460 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d914      	bls.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e007      	b.n	8001b6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d0dc      	beq.n	8001b22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d127      	bne.n	8001bdc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ba2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ba6:	d115      	bne.n	8001bd4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7fe fab9 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bda:	e004      	b.n	8001be6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fe13 	bl	8001828 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fe02 	bl	800183a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4906      	ldr	r1, [pc, #24]	@ (8001cd8 <__NVIC_EnableIRQ+0x34>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff90 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff2d 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff42 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff90 	bl	8001d30 <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5f 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff35 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e043      	b.n	8001efa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_DMA_Init+0xa8>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a22      	ldr	r2, [pc, #136]	@ (8001f08 <HAL_DMA_Init+0xac>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_DMA_Init+0xb0>)
 8001e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ea6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	bffdfff8 	.word	0xbffdfff8
 8001f08:	cccccccd 	.word	0xcccccccd
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Start_IT+0x20>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e04b      	b.n	8001fc8 <HAL_DMA_Start_IT+0xb8>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d13a      	bne.n	8001fba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f9eb 	bl	8002344 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 020e 	orr.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e00f      	b.n	8001fa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 020a 	orr.w	r2, r2, #10
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e005      	b.n	8001fc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d008      	beq.n	8001ffa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e020      	b.n	800203c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020e 	bic.w	r2, r2, #14
 8002008:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d005      	beq.n	800206c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e051      	b.n	8002110 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020e 	bic.w	r2, r2, #14
 800207a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a22      	ldr	r2, [pc, #136]	@ (800211c <HAL_DMA_Abort_IT+0xd4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d029      	beq.n	80020ea <HAL_DMA_Abort_IT+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a21      	ldr	r2, [pc, #132]	@ (8002120 <HAL_DMA_Abort_IT+0xd8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x9e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <HAL_DMA_Abort_IT+0xdc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01a      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x98>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_DMA_Abort_IT+0xe0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d012      	beq.n	80020da <HAL_DMA_Abort_IT+0x92>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_DMA_Abort_IT+0xe4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <HAL_DMA_Abort_IT+0x8c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <HAL_DMA_Abort_IT+0xe8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_DMA_Abort_IT+0x86>
 80020c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020cc:	e00e      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d2:	e00b      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020d8:	e008      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020de:	e005      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e4:	e002      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020e6:	2310      	movs	r3, #16
 80020e8:	e000      	b.n	80020ec <HAL_DMA_Abort_IT+0xa4>
 80020ea:	2301      	movs	r3, #1
 80020ec:	4a11      	ldr	r2, [pc, #68]	@ (8002134 <HAL_DMA_Abort_IT+0xec>)
 80020ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
    } 
  }
  return status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020008 	.word	0x40020008
 8002120:	4002001c 	.word	0x4002001c
 8002124:	40020030 	.word	0x40020030
 8002128:	40020044 	.word	0x40020044
 800212c:	40020058 	.word	0x40020058
 8002130:	4002006c 	.word	0x4002006c
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2204      	movs	r2, #4
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d04f      	beq.n	8002200 <HAL_DMA_IRQHandler+0xc8>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04a      	beq.n	8002200 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a66      	ldr	r2, [pc, #408]	@ (8002328 <HAL_DMA_IRQHandler+0x1f0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d029      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xae>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a65      	ldr	r2, [pc, #404]	@ (800232c <HAL_DMA_IRQHandler+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xaa>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a63      	ldr	r2, [pc, #396]	@ (8002330 <HAL_DMA_IRQHandler+0x1f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01a      	beq.n	80021dc <HAL_DMA_IRQHandler+0xa4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a62      	ldr	r2, [pc, #392]	@ (8002334 <HAL_DMA_IRQHandler+0x1fc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x9e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a60      	ldr	r2, [pc, #384]	@ (8002338 <HAL_DMA_IRQHandler+0x200>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x98>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5f      	ldr	r2, [pc, #380]	@ (800233c <HAL_DMA_IRQHandler+0x204>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <HAL_DMA_IRQHandler+0x92>
 80021c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c8:	e00e      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021ce:	e00b      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021d4:	e008      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021da:	e005      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	e002      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021e2:	2340      	movs	r3, #64	@ 0x40
 80021e4:	e000      	b.n	80021e8 <HAL_DMA_IRQHandler+0xb0>
 80021e6:	2304      	movs	r3, #4
 80021e8:	4a55      	ldr	r2, [pc, #340]	@ (8002340 <HAL_DMA_IRQHandler+0x208>)
 80021ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8094 	beq.w	800231e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021fe:	e08e      	b.n	800231e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	2202      	movs	r2, #2
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d056      	beq.n	80022be <HAL_DMA_IRQHandler+0x186>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d051      	beq.n	80022be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 020a 	bic.w	r2, r2, #10
 8002236:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a38      	ldr	r2, [pc, #224]	@ (8002328 <HAL_DMA_IRQHandler+0x1f0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d029      	beq.n	800229e <HAL_DMA_IRQHandler+0x166>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a37      	ldr	r2, [pc, #220]	@ (800232c <HAL_DMA_IRQHandler+0x1f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x162>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a35      	ldr	r2, [pc, #212]	@ (8002330 <HAL_DMA_IRQHandler+0x1f8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01a      	beq.n	8002294 <HAL_DMA_IRQHandler+0x15c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a34      	ldr	r2, [pc, #208]	@ (8002334 <HAL_DMA_IRQHandler+0x1fc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d012      	beq.n	800228e <HAL_DMA_IRQHandler+0x156>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a32      	ldr	r2, [pc, #200]	@ (8002338 <HAL_DMA_IRQHandler+0x200>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00a      	beq.n	8002288 <HAL_DMA_IRQHandler+0x150>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_DMA_IRQHandler+0x204>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d102      	bne.n	8002282 <HAL_DMA_IRQHandler+0x14a>
 800227c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002280:	e00e      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 8002282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002286:	e00b      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 8002288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800228c:	e008      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 800228e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002292:	e005      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 8002294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002298:	e002      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 800229a:	2320      	movs	r3, #32
 800229c:	e000      	b.n	80022a0 <HAL_DMA_IRQHandler+0x168>
 800229e:	2302      	movs	r3, #2
 80022a0:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <HAL_DMA_IRQHandler+0x208>)
 80022a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d034      	beq.n	800231e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022bc:	e02f      	b.n	800231e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2208      	movs	r2, #8
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d028      	beq.n	8002320 <HAL_DMA_IRQHandler+0x1e8>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020e 	bic.w	r2, r2, #14
 80022e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
    }
  }
  return;
 800231e:	bf00      	nop
 8002320:	bf00      	nop
}
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020008 	.word	0x40020008
 800232c:	4002001c 	.word	0x4002001c
 8002330:	40020030 	.word	0x40020030
 8002334:	40020044 	.word	0x40020044
 8002338:	40020058 	.word	0x40020058
 800233c:	4002006c 	.word	0x4002006c
 8002340:	40020000 	.word	0x40020000

08002344 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d108      	bne.n	8002384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002382:	e007      	b.n	8002394 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	@ 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023dc:	4a98      	ldr	r2, [pc, #608]	@ (8002640 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d875      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023e2:	4a98      	ldr	r2, [pc, #608]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d058      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023e8:	4a96      	ldr	r2, [pc, #600]	@ (8002644 <HAL_GPIO_Init+0x2a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d86f      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023ee:	4a96      	ldr	r2, [pc, #600]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d052      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023f4:	4a94      	ldr	r2, [pc, #592]	@ (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d869      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023fa:	4a94      	ldr	r2, [pc, #592]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04c      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 8002400:	4a92      	ldr	r2, [pc, #584]	@ (800264c <HAL_GPIO_Init+0x2ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d863      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002406:	4a92      	ldr	r2, [pc, #584]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d046      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 800240c:	4a90      	ldr	r2, [pc, #576]	@ (8002650 <HAL_GPIO_Init+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d85d      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d82a      	bhi.n	800246c <HAL_GPIO_Init+0xcc>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d859      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_GPIO_Init+0x80>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800249b 	.word	0x0800249b
 8002424:	08002475 	.word	0x08002475
 8002428:	08002487 	.word	0x08002487
 800242c:	080024c9 	.word	0x080024c9
 8002430:	080024cf 	.word	0x080024cf
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024cf 	.word	0x080024cf
 800243c:	080024cf 	.word	0x080024cf
 8002440:	080024cf 	.word	0x080024cf
 8002444:	080024cf 	.word	0x080024cf
 8002448:	080024cf 	.word	0x080024cf
 800244c:	080024cf 	.word	0x080024cf
 8002450:	080024cf 	.word	0x080024cf
 8002454:	080024cf 	.word	0x080024cf
 8002458:	080024cf 	.word	0x080024cf
 800245c:	080024cf 	.word	0x080024cf
 8002460:	080024cf 	.word	0x080024cf
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002491 	.word	0x08002491
 800246c:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <HAL_GPIO_Init+0x2b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e029      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e024      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01f      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e01a      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e013      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e009      	b.n	80024d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          break;
 80024ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	@ 0xff
 80024d4:	d801      	bhi.n	80024da <HAL_GPIO_Init+0x13a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_Init+0x13e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d802      	bhi.n	80024ec <HAL_GPIO_Init+0x14c>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x152>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	3b08      	subs	r3, #8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	210f      	movs	r1, #15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80b1 	beq.w	8002682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a4c      	ldr	r2, [pc, #304]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <HAL_GPIO_Init+0x2c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3f      	ldr	r2, [pc, #252]	@ (8002664 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3e      	ldr	r2, [pc, #248]	@ (8002668 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3d      	ldr	r2, [pc, #244]	@ (800266c <HAL_GPIO_Init+0x2cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1e0>
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002580:	2304      	movs	r3, #4
 8002582:	e004      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 800258c:	2300      	movs	r3, #0
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259e:	492f      	ldr	r1, [pc, #188]	@ (800265c <HAL_GPIO_Init+0x2bc>)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	492c      	ldr	r1, [pc, #176]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4922      	ldr	r1, [pc, #136]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	491e      	ldr	r1, [pc, #120]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4918      	ldr	r1, [pc, #96]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4914      	ldr	r1, [pc, #80]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x2e2>
 800263e:	bf00      	nop
 8002640:	10320000 	.word	0x10320000
 8002644:	10310000 	.word	0x10310000
 8002648:	10220000 	.word	0x10220000
 800264c:	10210000 	.word	0x10210000
 8002650:	10120000 	.word	0x10120000
 8002654:	10110000 	.word	0x10110000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4909      	ldr	r1, [pc, #36]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f ae8e 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	372c      	adds	r7, #44	@ 0x2c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43d9      	mvns	r1, r3
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	400b      	ands	r3, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e12b      	b.n	8002976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fcee 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800276e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002770:	f002 fa48 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 8002774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4a81      	ldr	r2, [pc, #516]	@ (8002980 <HAL_I2C_Init+0x274>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d807      	bhi.n	8002790 <HAL_I2C_Init+0x84>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a80      	ldr	r2, [pc, #512]	@ (8002984 <HAL_I2C_Init+0x278>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e006      	b.n	800279e <HAL_I2C_Init+0x92>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a7d      	ldr	r2, [pc, #500]	@ (8002988 <HAL_I2C_Init+0x27c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0e7      	b.n	8002976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a78      	ldr	r2, [pc, #480]	@ (800298c <HAL_I2C_Init+0x280>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9b      	lsrs	r3, r3, #18
 80027b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002980 <HAL_I2C_Init+0x274>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d802      	bhi.n	80027e0 <HAL_I2C_Init+0xd4>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	e009      	b.n	80027f4 <HAL_I2C_Init+0xe8>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	4a69      	ldr	r2, [pc, #420]	@ (8002990 <HAL_I2C_Init+0x284>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	3301      	adds	r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	495c      	ldr	r1, [pc, #368]	@ (8002980 <HAL_I2C_Init+0x274>)
 8002810:	428b      	cmp	r3, r1
 8002812:	d819      	bhi.n	8002848 <HAL_I2C_Init+0x13c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e59      	subs	r1, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002828:	400b      	ands	r3, r1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_I2C_Init+0x138>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e59      	subs	r1, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fbb1 f3f3 	udiv	r3, r1, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002842:	e051      	b.n	80028e8 <HAL_I2C_Init+0x1dc>
 8002844:	2304      	movs	r3, #4
 8002846:	e04f      	b.n	80028e8 <HAL_I2C_Init+0x1dc>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <HAL_I2C_Init+0x168>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e58      	subs	r0, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e012      	b.n	800289a <HAL_I2C_Init+0x18e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e58      	subs	r0, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	0099      	lsls	r1, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Init+0x196>
 800289e:	2301      	movs	r3, #1
 80028a0:	e022      	b.n	80028e8 <HAL_I2C_Init+0x1dc>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10e      	bne.n	80028c8 <HAL_I2C_Init+0x1bc>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e58      	subs	r0, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c6:	e00f      	b.n	80028e8 <HAL_I2C_Init+0x1dc>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e58      	subs	r0, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	0099      	lsls	r1, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	fbb0 f3f3 	udiv	r3, r0, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6809      	ldr	r1, [r1, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6911      	ldr	r1, [r2, #16]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	430b      	orrs	r3, r1
 800292a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	000186a0 	.word	0x000186a0
 8002984:	001e847f 	.word	0x001e847f
 8002988:	003d08ff 	.word	0x003d08ff
 800298c:	431bde83 	.word	0x431bde83
 8002990:	10624dd3 	.word	0x10624dd3

08002994 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b08b      	sub	sp, #44	@ 0x2c
 8002998:	af06      	add	r7, sp, #24
 800299a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0f1      	b.n	8002b8a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f007 fcda 	bl	800a374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2203      	movs	r2, #3
 80029c4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fbf5 	bl	80061bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	687e      	ldr	r6, [r7, #4]
 80029da:	466d      	mov	r5, sp
 80029dc:	f106 0410 	add.w	r4, r6, #16
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	602b      	str	r3, [r5, #0]
 80029e8:	1d33      	adds	r3, r6, #4
 80029ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ec:	6838      	ldr	r0, [r7, #0]
 80029ee:	f003 fbbf 	bl	8006170 <USB_CoreInit>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0c2      	b.n	8002b8a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fbf0 	bl	80061f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e040      	b.n	8002a98 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3301      	adds	r3, #1
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3303      	adds	r3, #3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3338      	adds	r3, #56	@ 0x38
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	333c      	adds	r3, #60	@ 0x3c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3340      	adds	r3, #64	@ 0x40
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	3301      	adds	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3b9      	bcc.n	8002a16 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e044      	b.n	8002b32 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d3b5      	bcc.n	8002aa8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	687e      	ldr	r6, [r7, #4]
 8002b44:	466d      	mov	r5, sp
 8002b46:	f106 0410 	add.w	r4, r6, #16
 8002b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	1d33      	adds	r3, r6, #4
 8002b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f003 fb56 	bl	8006208 <USB_DevInit>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00d      	b.n	8002b8a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 fdd7 	bl	8008736 <USB_DevDisconnect>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_Start+0x16>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e016      	b.n	8002bd6 <HAL_PCD_Start+0x44>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 faeb 	bl	8006190 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f007 fe4c 	bl	800a85a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fdab 	bl	8008722 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 fdad 	bl	800874a <USB_ReadInterrupts>
 8002bf0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb1b 	bl	8003238 <PCD_EP_ISR_Handler>

    return;
 8002c02:	e119      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f007 fc1f 	bl	800a46a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f905 	bl	8002e3e <HAL_PCD_SetAddress>

    return;
 8002c34:	e100      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c58:	e0ee      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c76:	b292      	uxth	r2, r2
 8002c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c7c:	e0dc      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d027      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0208 	bic.w	r2, r2, #8
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f007 fc0f 	bl	800a4dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cd6:	e0af      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8083 	beq.w	8002dea <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e010      	b.n	8002d0c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	8812      	ldrh	r2, [r2, #0]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	3320      	adds	r3, #32
 8002d00:	443b      	add	r3, r7
 8002d02:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	2b07      	cmp	r3, #7
 8002d10:	d9eb      	bls.n	8002cea <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	b292      	uxth	r2, r2
 8002d26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d42:	bf00      	nop
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f6      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e00f      	b.n	8002d94 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	7ffa      	ldrb	r2, [r7, #31]
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	440a      	add	r2, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	3320      	adds	r3, #32
 8002d86:	443b      	add	r3, r7
 8002d88:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d8c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	3301      	adds	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b07      	cmp	r3, #7
 8002d98:	d9ec      	bls.n	8002d74 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0208 	orr.w	r2, r2, #8
 8002dac:	b292      	uxth	r2, r2
 8002dae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f007 fb60 	bl	800a4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002de8:	e026      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e06:	b292      	uxth	r2, r2
 8002e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fb1e 	bl	800a44e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e12:	e011      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e36:	bf00      	nop
  }
}
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_SetAddress+0x1a>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e013      	b.n	8002e80 <HAL_PCD_SetAddress+0x42>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 fc43 	bl	80086fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	70fb      	strb	r3, [r7, #3]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	803b      	strh	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0e      	bge.n	8002ecc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
 8002eca:	e00e      	b.n	8002eea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef6:	883a      	ldrh	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	78ba      	ldrb	r2, [r7, #2]
 8002f00:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f02:	78bb      	ldrb	r3, [r7, #2]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d102      	bne.n	8002f0e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_EP_Open+0x94>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e00e      	b.n	8002f3a <HAL_PCD_EP_Open+0xb2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 f98c 	bl	8006248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0e      	bge.n	8002f74 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	705a      	strb	r2, [r3, #1]
 8002f72:	e00e      	b.n	8002f92 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 0207 	and.w	r2, r3, #7
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_PCD_EP_Close+0x6a>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e00e      	b.n	8002fca <HAL_PCD_EP_Close+0x88>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 fd04 	bl	80069c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	f003 0207 	and.w	r2, r3, #7
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	7afb      	ldrb	r3, [r7, #11]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	b2da      	uxtb	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 febb 	bl	8006da0 <USB_EPStartXfer>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0207 	and.w	r2, r3, #7
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	460b      	mov	r3, r1
 8003070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2201      	movs	r2, #1
 80030ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fe6d 	bl	8006da0 <USB_EPStartXfer>

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d901      	bls.n	80030ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e04c      	b.n	8003188 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da0e      	bge.n	8003114 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
 8003112:	e00c      	b.n	800312e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_PCD_EP_SetStall+0x7e>
 800314a:	2302      	movs	r3, #2
 800314c:	e01c      	b.n	8003188 <HAL_PCD_EP_SetStall+0xb8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f005 f9d0 	bl	8008502 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f005 faf5 	bl	8008768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d901      	bls.n	80031ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e040      	b.n	8003230 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0e      	bge.n	80031d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
 80031d2:	e00e      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_ClrStall+0x82>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_ClrStall+0xa0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f005 f9be 	bl	80085a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b096      	sub	sp, #88	@ 0x58
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003240:	e3be      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800324a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800324e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800325c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8178 	bne.w	8003556 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d151      	bne.n	8003316 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800327e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003282:	81fb      	strh	r3, [r7, #14]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	89fb      	ldrh	r3, [r7, #14]
 800328a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3328      	adds	r3, #40	@ 0x28
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	3302      	adds	r3, #2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	441a      	add	r2, r3
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032d6:	2100      	movs	r1, #0
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f007 f89e 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 836a 	beq.w	80039c0 <PCD_EP_ISR_Handler+0x788>
 80032ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 8365 	bne.w	80039c0 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003314:	e354      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800331c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800332c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003330:	2b00      	cmp	r3, #0
 8003332:	d034      	beq.n	800339e <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800333c:	b29b      	uxth	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	3306      	adds	r3, #6
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800335c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800336a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003372:	b29b      	uxth	r3, r3
 8003374:	f005 fa48 	bl	8008808 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003384:	4013      	ands	r3, r2
 8003386:	823b      	strh	r3, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	8a3a      	ldrh	r2, [r7, #16]
 800338e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003392:	b292      	uxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f007 f812 	bl	800a3c0 <HAL_PCD_SetupStageCallback>
 800339c:	e310      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800339e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f280 830c 	bge.w	80039c0 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033b4:	4013      	ands	r3, r2
 80033b6:	83fb      	strh	r3, [r7, #30]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	8bfa      	ldrh	r2, [r7, #30]
 80033be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033c2:	b292      	uxth	r2, r2
 80033c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	3306      	adds	r3, #6
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d019      	beq.n	800342e <PCD_EP_ISR_Handler+0x1f6>
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003410:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003412:	b29b      	uxth	r3, r3
 8003414:	f005 f9f8 	bl	8008808 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	441a      	add	r2, r3
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003426:	2100      	movs	r1, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f006 ffdb 	bl	800a3e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003438:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 82bd 	bne.w	80039c0 <PCD_EP_ISR_Handler+0x788>
 8003446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800344a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800344e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003452:	f000 82b5 	beq.w	80039c0 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003480:	b29a      	uxth	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b3e      	cmp	r3, #62	@ 0x3e
 800348c:	d91d      	bls.n	80034ca <PCD_EP_ISR_Handler+0x292>
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x270>
 80034a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a4:	3b01      	subs	r3, #1
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	801a      	strh	r2, [r3, #0]
 80034c8:	e026      	b.n	8003518 <PCD_EP_ISR_Handler+0x2e0>
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <PCD_EP_ISR_Handler+0x2b0>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	e017      	b.n	8003518 <PCD_EP_ISR_Handler+0x2e0>
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <PCD_EP_ISR_Handler+0x2ca>
 80034fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fe:	3301      	adds	r3, #1
 8003500:	647b      	str	r3, [r7, #68]	@ 0x44
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29a      	uxth	r2, r3
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	b29b      	uxth	r3, r3
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	b29b      	uxth	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	b29a      	uxth	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003528:	827b      	strh	r3, [r7, #18]
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003530:	827b      	strh	r3, [r7, #18]
 8003532:	8a7b      	ldrh	r3, [r7, #18]
 8003534:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003538:	827b      	strh	r3, [r7, #18]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	8a7b      	ldrh	r3, [r7, #18]
 8003540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800354c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]
 8003554:	e234      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800356a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800356e:	2b00      	cmp	r3, #0
 8003570:	f280 80fc 	bge.w	800376c <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29a      	uxth	r2, r3
 8003586:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800358a:	4013      	ands	r3, r2
 800358c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80035a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a6:	b292      	uxth	r2, r2
 80035a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c2:	7b1b      	ldrb	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d125      	bne.n	8003614 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	3306      	adds	r3, #6
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80035f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8092 	beq.w	8003722 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	6959      	ldr	r1, [r3, #20]
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	88da      	ldrh	r2, [r3, #6]
 800360a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800360e:	f005 f8fb 	bl	8008808 <USB_ReadPMA>
 8003612:	e086      	b.n	8003722 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003616:	78db      	ldrb	r3, [r3, #3]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d10a      	bne.n	8003632 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800361c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003620:	461a      	mov	r2, r3
 8003622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9d9 	bl	80039dc <HAL_PCD_EP_DB_Receive>
 800362a:	4603      	mov	r3, r0
 800362c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003630:	e077      	b.n	8003722 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800366a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003672:	b29b      	uxth	r3, r3
 8003674:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d024      	beq.n	80036da <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	3302      	adds	r3, #2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80036bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02e      	beq.n	8003722 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	6959      	ldr	r1, [r3, #20]
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	891a      	ldrh	r2, [r3, #8]
 80036d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036d4:	f005 f898 	bl	8008808 <USB_ReadPMA>
 80036d8:	e023      	b.n	8003722 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	3306      	adds	r3, #6
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003702:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003706:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003714:	6959      	ldr	r1, [r3, #20]
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	895a      	ldrh	r2, [r3, #10]
 800371a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800371e:	f005 f873 	bl	8008808 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800372a:	441a      	add	r2, r3
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003738:	441a      	add	r2, r3
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800373e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <PCD_EP_ISR_Handler+0x51a>
 8003746:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	429a      	cmp	r2, r3
 8003750:	d206      	bcs.n	8003760 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f006 fe43 	bl	800a3e4 <HAL_PCD_DataOutStageCallback>
 800375e:	e005      	b.n	800376c <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003766:	4618      	mov	r0, r3
 8003768:	f003 fb1a 	bl	8006da0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800376c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8123 	beq.w	80039c0 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 800377a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80037be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f040 80a2 	bne.w	8003918 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	2200      	movs	r2, #0
 80037d8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	7b1b      	ldrb	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8093 	beq.w	800390a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d046      	beq.n	800387e <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d126      	bne.n	8003846 <PCD_EP_ISR_Handler+0x60e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	4413      	add	r3, r2
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	011a      	lsls	r2, r3, #4
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	4413      	add	r3, r2
 800381a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800381e:	623b      	str	r3, [r7, #32]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382a:	b29a      	uxth	r2, r3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383e:	b29a      	uxth	r2, r3
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e061      	b.n	800390a <PCD_EP_ISR_Handler+0x6d2>
 8003846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d15d      	bne.n	800390a <PCD_EP_ISR_Handler+0x6d2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003862:	4413      	add	r3, r2
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	011a      	lsls	r2, r3, #4
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	4413      	add	r3, r2
 8003870:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	2200      	movs	r2, #0
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	e045      	b.n	800390a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d126      	bne.n	80038da <PCD_EP_ISR_Handler+0x6a2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a0:	4413      	add	r3, r2
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	011a      	lsls	r2, r3, #4
 80038aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ac:	4413      	add	r3, r2
 80038ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e017      	b.n	800390a <PCD_EP_ISR_Handler+0x6d2>
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d113      	bne.n	800390a <PCD_EP_ISR_Handler+0x6d2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f0:	4413      	add	r3, r2
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	011a      	lsls	r2, r3, #4
 80038fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fc:	4413      	add	r3, r2
 80038fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f006 fd82 	bl	800a41a <HAL_PCD_DataInStageCallback>
 8003916:	e053      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d146      	bne.n	80039b2 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	3302      	adds	r3, #2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003958:	429a      	cmp	r2, r3
 800395a:	d907      	bls.n	800396c <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	619a      	str	r2, [r3, #24]
 800396a:	e002      	b.n	8003972 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800397a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f006 fd4a 	bl	800a41a <HAL_PCD_DataInStageCallback>
 8003986:	e01b      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003990:	441a      	add	r2, r3
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800399e:	441a      	add	r2, r3
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 f9f8 	bl	8006da0 <USB_EPStartXfer>
 80039b0:	e006      	b.n	80039c0 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039b6:	461a      	mov	r2, r3
 80039b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f91b 	bl	8003bf6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f6ff ac38 	blt.w	8003242 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3758      	adds	r7, #88	@ 0x58
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d07e      	beq.n	8003af2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	3302      	adds	r3, #2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	8b7b      	ldrh	r3, [r7, #26]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d306      	bcc.n	8003a36 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	8b7b      	ldrh	r3, [r7, #26]
 8003a2e:	1ad2      	subs	r2, r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	619a      	str	r2, [r3, #24]
 8003a34:	e002      	b.n	8003a3c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d123      	bne.n	8003a8c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	833b      	strh	r3, [r7, #24]
 8003a60:	8b3b      	ldrh	r3, [r7, #24]
 8003a62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a66:	833b      	strh	r3, [r7, #24]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	8b3b      	ldrh	r3, [r7, #24]
 8003a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01f      	beq.n	8003ad6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab0:	82fb      	strh	r3, [r7, #22]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ad6:	8b7b      	ldrh	r3, [r7, #26]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8087 	beq.w	8003bec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6959      	ldr	r1, [r3, #20]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	891a      	ldrh	r2, [r3, #8]
 8003aea:	8b7b      	ldrh	r3, [r7, #26]
 8003aec:	f004 fe8c 	bl	8008808 <USB_ReadPMA>
 8003af0:	e07c      	b.n	8003bec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	3306      	adds	r3, #6
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	8b7b      	ldrh	r3, [r7, #26]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d306      	bcc.n	8003b34 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	8b7b      	ldrh	r3, [r7, #26]
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e002      	b.n	8003b3a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d123      	bne.n	8003b8a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5c:	83fb      	strh	r3, [r7, #30]
 8003b5e:	8bfb      	ldrh	r3, [r7, #30]
 8003b60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b64:	83fb      	strh	r3, [r7, #30]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11f      	bne.n	8003bd4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	83bb      	strh	r3, [r7, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	8bbb      	ldrh	r3, [r7, #28]
 8003bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6959      	ldr	r1, [r3, #20]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	895a      	ldrh	r2, [r3, #10]
 8003be6:	8b7b      	ldrh	r3, [r7, #26]
 8003be8:	f004 fe0e 	bl	8008808 <USB_ReadPMA>
    }
  }

  return count;
 8003bec:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b0a4      	sub	sp, #144	@ 0x90
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 81dd 	beq.w	8003fca <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	3302      	adds	r3, #2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c38:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d907      	bls.n	8003c58 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	619a      	str	r2, [r3, #24]
 8003c56:	e002      	b.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 80b9 	bne.w	8003dda <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	785b      	ldrb	r3, [r3, #1]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d126      	bne.n	8003cbe <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	4413      	add	r3, r2
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	011a      	lsls	r2, r3, #4
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	4413      	add	r3, r2
 8003c92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	e01a      	b.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d116      	bne.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	4413      	add	r3, r2
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	011a      	lsls	r2, r3, #4
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d126      	bne.n	8003d50 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	011a      	lsls	r2, r3, #4
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	e017      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d113      	bne.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	4413      	add	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	011a      	lsls	r2, r3, #4
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	4413      	add	r3, r2
 8003d74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4619      	mov	r1, r3
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f006 fb47 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 82fc 	beq.w	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db2:	82fb      	strh	r3, [r7, #22]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	8afb      	ldrh	r3, [r7, #22]
 8003dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	8013      	strh	r3, [r2, #0]
 8003dd8:	e2da      	b.n	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d021      	beq.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 82ae 	bne.w	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d30b      	bcc.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	621a      	str	r2, [r3, #32]
 8003e72:	e017      	b.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e8c:	e00a      	b.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d165      	bne.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x382>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec0:	4413      	add	r3, r2
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eea:	d91d      	bls.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x332>
 8003eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x310>
 8003f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f02:	3b01      	subs	r3, #1
 8003f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4313      	orrs	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e044      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x350>
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e035      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e01c      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d118      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f94:	4413      	add	r3, r2
 8003f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6959      	ldr	r1, [r3, #20]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	891a      	ldrh	r2, [r3, #8]
 8003fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f004 fbdb 	bl	800877e <USB_WritePMA>
 8003fc8:	e1e2      	b.n	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3306      	adds	r3, #6
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d307      	bcc.n	8004012 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	619a      	str	r2, [r3, #24]
 8004010:	e002      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 80c0 	bne.w	80041a2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d126      	bne.n	8004078 <HAL_PCD_EP_DB_Transmit+0x482>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800403e:	4413      	add	r3, r2
 8004040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	011a      	lsls	r2, r3, #4
 8004048:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800404a:	4413      	add	r3, r2
 800404c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004050:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405c:	b29a      	uxth	r2, r3
 800405e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004070:	b29a      	uxth	r2, r3
 8004072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	e01a      	b.n	80040ae <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d116      	bne.n	80040ae <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	667b      	str	r3, [r7, #100]	@ 0x64
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800408e:	b29b      	uxth	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004094:	4413      	add	r3, r2
 8004096:	667b      	str	r3, [r7, #100]	@ 0x64
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	011a      	lsls	r2, r3, #4
 800409e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a0:	4413      	add	r3, r2
 80040a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040aa:	2200      	movs	r2, #0
 80040ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d12b      	bne.n	8004114 <HAL_PCD_EP_DB_Transmit+0x51e>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d0:	4413      	add	r3, r2
 80040d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040dc:	4413      	add	r3, r2
 80040de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410a:	b29a      	uxth	r2, r3
 800410c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e017      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d113      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x54e>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004124:	b29b      	uxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800412a:	4413      	add	r3, r2
 800412c:	677b      	str	r3, [r7, #116]	@ 0x74
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004136:	4413      	add	r3, r2
 8004138:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800413c:	673b      	str	r3, [r7, #112]	@ 0x70
 800413e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004140:	2200      	movs	r2, #0
 8004142:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f006 f965 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 811a 	bne.w	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	441a      	add	r2, r3
 8004188:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800418c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004194:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]
 80041a0:	e0f6      	b.n	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d121      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	f040 80ca 	bne.w	8004390 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004204:	441a      	add	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004212:	441a      	add	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d30b      	bcc.n	800423c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	621a      	str	r2, [r3, #32]
 800423a:	e017      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004244:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004254:	e00a      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d165      	bne.n	8004346 <HAL_PCD_EP_DB_Transmit+0x750>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428e:	4413      	add	r3, r2
 8004290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	011a      	lsls	r2, r3, #4
 8004298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429a:	4413      	add	r3, r2
 800429c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80042b8:	d91d      	bls.n	80042f6 <HAL_PCD_EP_DB_Transmit+0x700>
 80042ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80042ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042d0:	3b01      	subs	r3, #1
 80042d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	e041      	b.n	800437a <HAL_PCD_EP_DB_Transmit+0x784>
 80042f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x71e>
 80042fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e032      	b.n	800437a <HAL_PCD_EP_DB_Transmit+0x784>
 8004314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_PCD_EP_DB_Transmit+0x738>
 8004328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432a:	3301      	adds	r3, #1
 800432c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800432e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29a      	uxth	r2, r3
 8004334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004336:	b29b      	uxth	r3, r3
 8004338:	029b      	lsls	r3, r3, #10
 800433a:	b29b      	uxth	r3, r3
 800433c:	4313      	orrs	r3, r2
 800433e:	b29a      	uxth	r2, r3
 8004340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e019      	b.n	800437a <HAL_PCD_EP_DB_Transmit+0x784>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d115      	bne.n	800437a <HAL_PCD_EP_DB_Transmit+0x784>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	4413      	add	r3, r2
 800435e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	011a      	lsls	r2, r3, #4
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	4413      	add	r3, r2
 800436a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800436e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004374:	b29a      	uxth	r2, r3
 8004376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004378:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6959      	ldr	r1, [r3, #20]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	895a      	ldrh	r2, [r3, #10]
 8004386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800438a:	b29b      	uxth	r3, r3
 800438c:	f004 f9f7 	bl	800877e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043aa:	82bb      	strh	r3, [r7, #20]
 80043ac:	8abb      	ldrh	r3, [r7, #20]
 80043ae:	f083 0310 	eor.w	r3, r3, #16
 80043b2:	82bb      	strh	r3, [r7, #20]
 80043b4:	8abb      	ldrh	r3, [r7, #20]
 80043b6:	f083 0320 	eor.w	r3, r3, #32
 80043ba:	82bb      	strh	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	8abb      	ldrh	r3, [r7, #20]
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3790      	adds	r7, #144	@ 0x90
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	817b      	strh	r3, [r7, #10]
 80043f8:	4613      	mov	r3, r2
 80043fa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043fc:	897b      	ldrh	r3, [r7, #10]
 80043fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e009      	b.n	8004434 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004420:	897a      	ldrh	r2, [r7, #10]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	b29a      	uxth	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	80da      	strh	r2, [r3, #6]
 8004448:	e00b      	b.n	8004462 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2201      	movs	r2, #1
 800444e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	b29a      	uxth	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
	...

08004470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e272      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8087 	beq.w	800459e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004490:	4b92      	ldr	r3, [pc, #584]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b04      	cmp	r3, #4
 800449a:	d00c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800449c:	4b8f      	ldr	r3, [pc, #572]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d112      	bne.n	80044ce <HAL_RCC_OscConfig+0x5e>
 80044a8:	4b8c      	ldr	r3, [pc, #560]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b4:	d10b      	bne.n	80044ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b6:	4b89      	ldr	r3, [pc, #548]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d06c      	beq.n	800459c <HAL_RCC_OscConfig+0x12c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d168      	bne.n	800459c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e24c      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x76>
 80044d8:	4b80      	ldr	r3, [pc, #512]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7f      	ldr	r2, [pc, #508]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e02e      	b.n	8004544 <HAL_RCC_OscConfig+0xd4>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0x98>
 80044ee:	4b7b      	ldr	r3, [pc, #492]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7a      	ldr	r2, [pc, #488]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b78      	ldr	r3, [pc, #480]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a77      	ldr	r2, [pc, #476]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e01d      	b.n	8004544 <HAL_RCC_OscConfig+0xd4>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0xbc>
 8004512:	4b72      	ldr	r3, [pc, #456]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a71      	ldr	r2, [pc, #452]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b6f      	ldr	r3, [pc, #444]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6e      	ldr	r2, [pc, #440]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0xd4>
 800452c:	4b6b      	ldr	r3, [pc, #428]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6a      	ldr	r2, [pc, #424]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b68      	ldr	r3, [pc, #416]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a67      	ldr	r2, [pc, #412]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 800453e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fc ff88 	bl	8001460 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fc ff84 	bl	8001460 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e200      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	4b5d      	ldr	r3, [pc, #372]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0xe4>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fc ff74 	bl	8001460 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fc ff70 	bl	8001460 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e1ec      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	4b53      	ldr	r3, [pc, #332]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x10c>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d063      	beq.n	8004672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045aa:	4b4c      	ldr	r3, [pc, #304]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045b6:	4b49      	ldr	r3, [pc, #292]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d11c      	bne.n	80045fc <HAL_RCC_OscConfig+0x18c>
 80045c2:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ce:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RCC_OscConfig+0x176>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e1c0      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e6:	4b3d      	ldr	r3, [pc, #244]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4939      	ldr	r1, [pc, #228]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	e03a      	b.n	8004672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fc ff29 	bl	8001460 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004612:	f7fc ff25 	bl	8001460 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e1a1      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	4b2d      	ldr	r3, [pc, #180]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004630:	4b2a      	ldr	r3, [pc, #168]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4927      	ldr	r1, [pc, #156]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	e015      	b.n	8004672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004646:	4b26      	ldr	r3, [pc, #152]	@ (80046e0 <HAL_RCC_OscConfig+0x270>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fc ff08 	bl	8001460 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fc ff04 	bl	8001460 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e180      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1d      	ldr	r3, [pc, #116]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d03a      	beq.n	80046f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b17      	ldr	r3, [pc, #92]	@ (80046e4 <HAL_RCC_OscConfig+0x274>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468c:	f7fc fee8 	bl	8001460 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004694:	f7fc fee4 	bl	8001460 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e160      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <HAL_RCC_OscConfig+0x26c>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046b2:	2001      	movs	r0, #1
 80046b4:	f000 face 	bl	8004c54 <RCC_Delay>
 80046b8:	e01c      	b.n	80046f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <HAL_RCC_OscConfig+0x274>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fc fece 	bl	8001460 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c6:	e00f      	b.n	80046e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c8:	f7fc feca 	bl	8001460 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d908      	bls.n	80046e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e146      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	42420000 	.word	0x42420000
 80046e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	4b92      	ldr	r3, [pc, #584]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e9      	bne.n	80046c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a6 	beq.w	800484e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b8b      	ldr	r3, [pc, #556]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10d      	bne.n	800472e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4a87      	ldr	r2, [pc, #540]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471c:	61d3      	str	r3, [r2, #28]
 800471e:	4b85      	ldr	r3, [pc, #532]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b82      	ldr	r3, [pc, #520]	@ (8004938 <HAL_RCC_OscConfig+0x4c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473a:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCC_OscConfig+0x4c8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7e      	ldr	r2, [pc, #504]	@ (8004938 <HAL_RCC_OscConfig+0x4c8>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fc fe8b 	bl	8001460 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fc fe87 	bl	8001460 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	@ 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e103      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	4b75      	ldr	r3, [pc, #468]	@ (8004938 <HAL_RCC_OscConfig+0x4c8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x312>
 8004774:	4b6f      	ldr	r3, [pc, #444]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4a6e      	ldr	r2, [pc, #440]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6213      	str	r3, [r2, #32]
 8004780:	e02d      	b.n	80047de <HAL_RCC_OscConfig+0x36e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x334>
 800478a:	4b6a      	ldr	r3, [pc, #424]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	4a69      	ldr	r2, [pc, #420]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6213      	str	r3, [r2, #32]
 8004796:	4b67      	ldr	r3, [pc, #412]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4a66      	ldr	r2, [pc, #408]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	6213      	str	r3, [r2, #32]
 80047a2:	e01c      	b.n	80047de <HAL_RCC_OscConfig+0x36e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x356>
 80047ac:	4b61      	ldr	r3, [pc, #388]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4a60      	ldr	r2, [pc, #384]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6213      	str	r3, [r2, #32]
 80047b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6213      	str	r3, [r2, #32]
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x36e>
 80047c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4a5a      	ldr	r2, [pc, #360]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6213      	str	r3, [r2, #32]
 80047d2:	4b58      	ldr	r3, [pc, #352]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4a57      	ldr	r2, [pc, #348]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fc fe3b 	bl	8001460 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fc fe37 	bl	8001460 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0b1      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	4b4b      	ldr	r3, [pc, #300]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ee      	beq.n	80047ee <HAL_RCC_OscConfig+0x37e>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7fc fe25 	bl	8001460 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fc fe21 	bl	8001460 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e09b      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004830:	4b40      	ldr	r3, [pc, #256]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ee      	bne.n	800481a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b3c      	ldr	r3, [pc, #240]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4a3b      	ldr	r2, [pc, #236]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8087 	beq.w	8004966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004858:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d061      	beq.n	8004928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d146      	bne.n	80048fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b33      	ldr	r3, [pc, #204]	@ (800493c <HAL_RCC_OscConfig+0x4cc>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fc fdf5 	bl	8001460 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fc fdf1 	bl	8001460 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e06d      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488c:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a0:	d108      	bne.n	80048b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048a2:	4b24      	ldr	r3, [pc, #144]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4921      	ldr	r1, [pc, #132]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a19      	ldr	r1, [r3, #32]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	430b      	orrs	r3, r1
 80048c6:	491b      	ldr	r1, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048cc:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <HAL_RCC_OscConfig+0x4cc>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d2:	f7fc fdc5 	bl	8001460 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048da:	f7fc fdc1 	bl	8001460 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e03d      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ec:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x46a>
 80048f8:	e035      	b.n	8004966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <HAL_RCC_OscConfig+0x4cc>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fc fdae 	bl	8001460 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004908:	f7fc fdaa 	bl	8001460 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e026      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x498>
 8004926:	e01e      	b.n	8004966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e019      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
 800493c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_RCC_OscConfig+0x500>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	429a      	cmp	r2, r3
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d001      	beq.n	8004966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000

08004974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0d0      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4b6a      	ldr	r3, [pc, #424]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d910      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b67      	ldr	r3, [pc, #412]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 0207 	bic.w	r2, r3, #7
 800499e:	4965      	ldr	r1, [pc, #404]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b63      	ldr	r3, [pc, #396]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b8      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a58      	ldr	r2, [pc, #352]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e8:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a52      	ldr	r2, [pc, #328]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b50      	ldr	r3, [pc, #320]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	494d      	ldr	r1, [pc, #308]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d040      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b47      	ldr	r3, [pc, #284]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d115      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e07f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b41      	ldr	r3, [pc, #260]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e073      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4b3d      	ldr	r3, [pc, #244]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e06b      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b39      	ldr	r3, [pc, #228]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4936      	ldr	r1, [pc, #216]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a64:	f7fc fcfc 	bl	8001460 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fc fcf8 	bl	8001460 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e053      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 020c 	and.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a94:	4b27      	ldr	r3, [pc, #156]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d210      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b24      	ldr	r3, [pc, #144]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 0207 	bic.w	r2, r3, #7
 8004aaa:	4922      	ldr	r1, [pc, #136]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b20      	ldr	r3, [pc, #128]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e032      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4916      	ldr	r1, [pc, #88]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	490e      	ldr	r1, [pc, #56]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b02:	f000 f821 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	490a      	ldr	r1, [pc, #40]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1cc>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1d0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc fc5a 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40022000 	.word	0x40022000
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	0800a980 	.word	0x0800a980
 8004b40:	20000004 	.word	0x20000004
 8004b44:	20000008 	.word	0x20000008

08004b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b62:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d002      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x30>
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d003      	beq.n	8004b7e <HAL_RCC_GetSysClockFreq+0x36>
 8004b76:	e027      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b7a:	613b      	str	r3, [r7, #16]
      break;
 8004b7c:	e027      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0c9b      	lsrs	r3, r3, #18
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b88:	5cd3      	ldrb	r3, [r2, r3]
 8004b8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	4a11      	ldr	r2, [pc, #68]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ba2:	5cd3      	ldrb	r3, [r2, r3]
 8004ba4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004baa:	fb03 f202 	mul.w	r2, r3, r2
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0c      	ldr	r2, [pc, #48]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	613b      	str	r3, [r7, #16]
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bca:	613b      	str	r3, [r7, #16]
      break;
 8004bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bce:	693b      	ldr	r3, [r7, #16]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	007a1200 	.word	0x007a1200
 8004be4:	0800a998 	.word	0x0800a998
 8004be8:	0800a9a8 	.word	0x0800a9a8
 8004bec:	003d0900 	.word	0x003d0900

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b02      	ldr	r3, [pc, #8]	@ (8004c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000004 	.word	0x20000004

08004c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c08:	f7ff fff2 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4903      	ldr	r1, [pc, #12]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800a990 	.word	0x0800a990

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c30:	f7ff ffde 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	0adb      	lsrs	r3, r3, #11
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	0800a990 	.word	0x0800a990

08004c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <RCC_Delay+0x34>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	@ (8004c8c <RCC_Delay+0x38>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c70:	bf00      	nop
  }
  while (Delay --);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e5a      	subs	r2, r3, #1
 8004c76:	60fa      	str	r2, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f9      	bne.n	8004c70 <RCC_Delay+0x1c>
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	20000004 	.word	0x20000004
 8004c8c:	10624dd3 	.word	0x10624dd3

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d07d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	61d3      	str	r3, [r2, #28]
 8004cc8:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b46      	ldr	r3, [pc, #280]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d118      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce4:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a42      	ldr	r2, [pc, #264]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf0:	f7fc fbb6 	bl	8001460 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	e008      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fc fbb2 	bl	8001460 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e06d      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d027      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d34:	4b2e      	ldr	r3, [pc, #184]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d44:	4b2c      	ldr	r3, [pc, #176]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d4a:	4a29      	ldr	r2, [pc, #164]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fb81 	bl	8001460 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fc fb7d 	bl	8001460 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e036      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ee      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4917      	ldr	r1, [pc, #92]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db4:	4b0e      	ldr	r3, [pc, #56]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	490b      	ldr	r1, [pc, #44]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd2:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	4904      	ldr	r1, [pc, #16]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	42420440 	.word	0x42420440

08004dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc f9b6 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fa74 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e03a      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_TIM_Base_Start_IT+0x98>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x58>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x58>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	@ (8004f38 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x58>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xa0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d111      	bne.n	8004f18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d010      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e007      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800

08004f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d122      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d11b      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0202 	mvn.w	r2, #2
 8004f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9b4 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9a7 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9b6 	bl	8005302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0204 	mvn.w	r2, #4
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f98a 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f97d 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f98c 	bl	8005302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0208 	mvn.w	r2, #8
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2204      	movs	r2, #4
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f960 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f953 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f962 	bl	8005302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b10      	cmp	r3, #16
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0210 	mvn.w	r2, #16
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2208      	movs	r2, #8
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f936 	bl	80052f0 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f929 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f938 	bl	8005302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0201 	mvn.w	r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fb f872 	bl	80001a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ce:	2b80      	cmp	r3, #128	@ 0x80
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050dc:	2b80      	cmp	r3, #128	@ 0x80
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa7b 	bl	80055e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f8fc 	bl	8005314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b20      	cmp	r3, #32
 8005128:	d10e      	bne.n	8005148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b20      	cmp	r3, #32
 8005136:	d107      	bne.n	8005148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0220 	mvn.w	r2, #32
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa46 	bl	80055d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIM_ConfigClockSource+0x1c>
 8005168:	2302      	movs	r3, #2
 800516a:	e0b4      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x186>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800518a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a4:	d03e      	beq.n	8005224 <HAL_TIM_ConfigClockSource+0xd4>
 80051a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051aa:	f200 8087 	bhi.w	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b2:	f000 8086 	beq.w	80052c2 <HAL_TIM_ConfigClockSource+0x172>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ba:	d87f      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b70      	cmp	r3, #112	@ 0x70
 80051be:	d01a      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0xa6>
 80051c0:	2b70      	cmp	r3, #112	@ 0x70
 80051c2:	d87b      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b60      	cmp	r3, #96	@ 0x60
 80051c6:	d050      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x11a>
 80051c8:	2b60      	cmp	r3, #96	@ 0x60
 80051ca:	d877      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b50      	cmp	r3, #80	@ 0x50
 80051ce:	d03c      	beq.n	800524a <HAL_TIM_ConfigClockSource+0xfa>
 80051d0:	2b50      	cmp	r3, #80	@ 0x50
 80051d2:	d873      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d058      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x13a>
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d86f      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b30      	cmp	r3, #48	@ 0x30
 80051de:	d064      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x15a>
 80051e0:	2b30      	cmp	r3, #48	@ 0x30
 80051e2:	d86b      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d060      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d867      	bhi.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d05c      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d05a      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x15a>
 80051f4:	e062      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	f000 f968 	bl	80054da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	609a      	str	r2, [r3, #8]
      break;
 8005222:	e04f      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	f000 f951 	bl	80054da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005246:	609a      	str	r2, [r3, #8]
      break;
 8005248:	e03c      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005256:	461a      	mov	r2, r3
 8005258:	f000 f8c8 	bl	80053ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2150      	movs	r1, #80	@ 0x50
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f91f 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8005268:	e02c      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005276:	461a      	mov	r2, r3
 8005278:	f000 f8e6 	bl	8005448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2160      	movs	r1, #96	@ 0x60
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f90f 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8005288:	e01c      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	461a      	mov	r2, r3
 8005298:	f000 f8a8 	bl	80053ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2140      	movs	r1, #64	@ 0x40
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f8ff 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 80052a8:	e00c      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f000 f8f6 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 80052ba:	e003      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      break;
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
	...

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a29      	ldr	r2, [pc, #164]	@ (80053e0 <TIM_Base_SetConfig+0xb8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <TIM_Base_SetConfig+0xbc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x30>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a25      	ldr	r2, [pc, #148]	@ (80053e8 <TIM_Base_SetConfig+0xc0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <TIM_Base_SetConfig+0xb8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a19      	ldr	r2, [pc, #100]	@ (80053e4 <TIM_Base_SetConfig+0xbc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <TIM_Base_SetConfig+0xc0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a07      	ldr	r2, [pc, #28]	@ (80053e0 <TIM_Base_SetConfig+0xb8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	615a      	str	r2, [r3, #20]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800

080053ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 030a 	bic.w	r3, r3, #10
 8005428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0210 	bic.w	r2, r3, #16
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 0307 	orr.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054da:	b480      	push	{r7}
 80054dc:	b087      	sub	sp, #28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	021a      	lsls	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	609a      	str	r2, [r3, #8]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800552c:	2302      	movs	r3, #2
 800552e:	e046      	b.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00e      	beq.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557c:	d009      	beq.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10c      	bne.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800

080055d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e042      	b.n	8005690 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fdf2 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	@ 0x24
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800563a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fd09 	bl	8006054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d121      	bne.n	80056f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_UART_Transmit_IT+0x26>
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01a      	b.n	80056f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2221      	movs	r2, #33	@ 0x21
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	4613      	mov	r3, r2
 800570e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	d112      	bne.n	8005742 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Receive_IT+0x26>
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e00b      	b.n	8005744 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	461a      	mov	r2, r3
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fab6 	bl	8005caa <UART_Start_Receive_IT>
 800573e:	4603      	mov	r3, r0
 8005740:	e000      	b.n	8005744 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b0ba      	sub	sp, #232	@ 0xe8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800578a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_UART_IRQHandler+0x66>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb93 	bl	8005ed6 <UART_Receive_IT>
      return;
 80057b0:	e25b      	b.n	8005c6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80de 	beq.w	8005978 <HAL_UART_IRQHandler+0x22c>
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80d1 	beq.w	8005978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_UART_IRQHandler+0xae>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_UART_IRQHandler+0xd2>
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f043 0202 	orr.w	r2, r3, #2
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_UART_IRQHandler+0xf6>
 800582a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_UART_IRQHandler+0x126>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	f043 0208 	orr.w	r2, r3, #8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 81f2 	beq.w	8005c60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_UART_IRQHandler+0x14e>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb1e 	bl	8005ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <HAL_UART_IRQHandler+0x17a>
 80058be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04f      	beq.n	8005966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa28 	bl	8005d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d041      	beq.n	800595e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3314      	adds	r3, #20
 80058e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005906:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800590a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800591e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	4a7e      	ldr	r2, [pc, #504]	@ (8005b2c <HAL_UART_IRQHandler+0x3e0>)
 8005934:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fb84 	bl	8002048 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00e      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f993 	bl	8005c82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00a      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f98f 	bl	8005c82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e006      	b.n	8005974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f98b 	bl	8005c82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005972:	e175      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	bf00      	nop
    return;
 8005976:	e173      	b.n	8005c60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	2b01      	cmp	r3, #1
 800597e:	f040 814f 	bne.w	8005c20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8148 	beq.w	8005c20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8141 	beq.w	8005c20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80b6 	beq.w	8005b30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8145 	beq.w	8005c64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059e2:	429a      	cmp	r2, r3
 80059e4:	f080 813e 	bcs.w	8005c64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	f000 8088 	beq.w	8005b0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a28:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1d9      	bne.n	80059fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a5a:	f023 0301 	bic.w	r3, r3, #1
 8005a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3314      	adds	r3, #20
 8005a68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e1      	bne.n	8005a48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aa8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005aae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e3      	bne.n	8005a84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005adc:	f023 0310 	bic.w	r3, r3, #16
 8005ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005af0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005af4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e3      	bne.n	8005aca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fc fa62 	bl	8001fd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f8b6 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b28:	e09c      	b.n	8005c64 <HAL_UART_IRQHandler+0x518>
 8005b2a:	bf00      	nop
 8005b2c:	08005de1 	.word	0x08005de1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 808e 	beq.w	8005c68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8089 	beq.w	8005c68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e3      	bne.n	8005b56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e3      	bne.n	8005b8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bf8:	61fa      	str	r2, [r7, #28]
 8005bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	69b9      	ldr	r1, [r7, #24]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	617b      	str	r3, [r7, #20]
   return(result);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e3      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f83b 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c1e:	e023      	b.n	8005c68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_UART_IRQHandler+0x4f4>
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f8e5 	bl	8005e08 <UART_Transmit_IT>
    return;
 8005c3e:	e014      	b.n	8005c6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <HAL_UART_IRQHandler+0x51e>
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f924 	bl	8005ea6 <UART_EndTransmit_IT>
    return;
 8005c5e:	e004      	b.n	8005c6a <HAL_UART_IRQHandler+0x51e>
    return;
 8005c60:	bf00      	nop
 8005c62:	e002      	b.n	8005c6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005c68:	bf00      	nop
  }
}
 8005c6a:	37e8      	adds	r7, #232	@ 0xe8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2222      	movs	r2, #34	@ 0x22
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0220 	orr.w	r2, r2, #32
 8005d0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b095      	sub	sp, #84	@ 0x54
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d44:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e5      	bne.n	8005d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d119      	bne.n	8005dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 0310 	bic.w	r3, r3, #16
 8005daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db4:	61ba      	str	r2, [r7, #24]
 8005db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dd6:	bf00      	nop
 8005dd8:	3754      	adds	r7, #84	@ 0x54
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff ff41 	bl	8005c82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b21      	cmp	r3, #33	@ 0x21
 8005e1a:	d13e      	bne.n	8005e9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e24:	d114      	bne.n	8005e50 <UART_Transmit_IT+0x48>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d110      	bne.n	8005e50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]
 8005e4e:	e008      	b.n	8005e62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6211      	str	r1, [r2, #32]
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10f      	bne.n	8005e96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fed2 	bl	8005c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08c      	sub	sp, #48	@ 0x30
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b22      	cmp	r3, #34	@ 0x22
 8005ee8:	f040 80ae 	bne.w	8006048 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef4:	d117      	bne.n	8005f26 <UART_Receive_IT+0x50>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d113      	bne.n	8005f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	1c9a      	adds	r2, r3, #2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f24:	e026      	b.n	8005f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d007      	beq.n	8005f4a <UART_Receive_IT+0x74>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <UART_Receive_IT+0x82>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	e008      	b.n	8005f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d15d      	bne.n	8006044 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0220 	bic.w	r2, r2, #32
 8005f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d135      	bne.n	800603a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f023 0310 	bic.w	r3, r3, #16
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff4:	623a      	str	r2, [r7, #32]
 8005ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69f9      	ldr	r1, [r7, #28]
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	61bb      	str	r3, [r7, #24]
   return(result);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d10a      	bne.n	800602c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fe2e 	bl	8005c94 <HAL_UARTEx_RxEventCallback>
 8006038:	e002      	b.n	8006040 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fa f8ee 	bl	800021c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e002      	b.n	800604a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3730      	adds	r7, #48	@ 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800608e:	f023 030c 	bic.w	r3, r3, #12
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	430b      	orrs	r3, r1
 800609a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006168 <UART_SetConfig+0x114>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe fdb6 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	e002      	b.n	80060ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe fd9e 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 80060c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009a      	lsls	r2, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a22      	ldr	r2, [pc, #136]	@ (800616c <UART_SetConfig+0x118>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	0119      	lsls	r1, r3, #4
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009a      	lsls	r2, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <UART_SetConfig+0x118>)
 8006102:	fba3 0302 	umull	r0, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2064      	movs	r0, #100	@ 0x64
 800610a:	fb00 f303 	mul.w	r3, r0, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	3332      	adds	r3, #50	@ 0x32
 8006114:	4a15      	ldr	r2, [pc, #84]	@ (800616c <UART_SetConfig+0x118>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006120:	4419      	add	r1, r3
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fbb2 f2f3 	udiv	r2, r2, r3
 8006138:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <UART_SetConfig+0x118>)
 800613a:	fba3 0302 	umull	r0, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2064      	movs	r0, #100	@ 0x64
 8006142:	fb00 f303 	mul.w	r3, r0, r3
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	3332      	adds	r3, #50	@ 0x32
 800614c:	4a07      	ldr	r2, [pc, #28]	@ (800616c <UART_SetConfig+0x118>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	440a      	add	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40013800 	.word	0x40013800
 800616c:	51eb851f 	.word	0x51eb851f

08006170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006170:	b084      	sub	sp, #16
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	f107 0014 	add.w	r0, r7, #20
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	b004      	add	sp, #16
 800618e:	4770      	bx	lr

08006190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061a0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061c4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4013      	ands	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006208:	b084      	sub	sp, #16
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	f107 0014 	add.w	r0, r7, #20
 8006216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr

08006248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006248:	b480      	push	{r7}
 800624a:	b09d      	sub	sp, #116	@ 0x74
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d81f      	bhi.n	80062ba <USB_ActivateEndpoint+0x72>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <USB_ActivateEndpoint+0x38>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006291 	.word	0x08006291
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062c3 	.word	0x080062c3
 800628c:	0800629f 	.word	0x0800629f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006290:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006298:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800629c:	e012      	b.n	80062c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800629e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062a2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80062a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062aa:	e00b      	b.n	80062c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062b8:	e004      	b.n	80062c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80062c0:	e000      	b.n	80062c4 <USB_ActivateEndpoint+0x7c>
      break;
 80062c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	4313      	orrs	r3, r2
 8006304:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	7b1b      	ldrb	r3, [r3, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 8178 	bne.w	8006624 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8084 	beq.w	8006446 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4413      	add	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	011a      	lsls	r2, r3, #4
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	827b      	strh	r3, [r7, #18]
 8006380:	8a7b      	ldrh	r3, [r7, #18]
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01b      	beq.n	80063c2 <USB_ActivateEndpoint+0x17a>
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a0:	823b      	strh	r3, [r7, #16]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	441a      	add	r2, r3
 80063ac:	8a3b      	ldrh	r3, [r7, #16]
 80063ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063be:	b29b      	uxth	r3, r3
 80063c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d020      	beq.n	800640c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e0:	81bb      	strh	r3, [r7, #12]
 80063e2:	89bb      	ldrh	r3, [r7, #12]
 80063e4:	f083 0320 	eor.w	r3, r3, #32
 80063e8:	81bb      	strh	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	89bb      	ldrh	r3, [r7, #12]
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
 800640a:	e2d5      	b.n	80069b8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006422:	81fb      	strh	r3, [r7, #14]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	89fb      	ldrh	r3, [r7, #14]
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]
 8006444:	e2b8      	b.n	80069b8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	4413      	add	r3, r2
 8006458:	633b      	str	r3, [r7, #48]	@ 0x30
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	011a      	lsls	r2, r3, #4
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	4413      	add	r3, r2
 8006464:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	4413      	add	r3, r2
 800648c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	011a      	lsls	r2, r3, #4
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	4413      	add	r3, r2
 8006498:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064b4:	d91d      	bls.n	80064f2 <USB_ActivateEndpoint+0x2aa>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <USB_ActivateEndpoint+0x288>
 80064ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064cc:	3b01      	subs	r3, #1
 80064ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d8:	b29b      	uxth	r3, r3
 80064da:	029b      	lsls	r3, r3, #10
 80064dc:	b29b      	uxth	r3, r3
 80064de:	4313      	orrs	r3, r2
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e026      	b.n	8006540 <USB_ActivateEndpoint+0x2f8>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <USB_ActivateEndpoint+0x2c8>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e017      	b.n	8006540 <USB_ActivateEndpoint+0x2f8>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <USB_ActivateEndpoint+0x2e2>
 8006524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006526:	3301      	adds	r3, #1
 8006528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29a      	uxth	r2, r3
 8006530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006532:	b29b      	uxth	r3, r3
 8006534:	029b      	lsls	r3, r3, #10
 8006536:	b29b      	uxth	r3, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800654e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <USB_ActivateEndpoint+0x348>
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800656a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656e:	843b      	strh	r3, [r7, #32]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	8c3b      	ldrh	r3, [r7, #32]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d124      	bne.n	80065e2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	83bb      	strh	r3, [r7, #28]
 80065b0:	8bbb      	ldrh	r3, [r7, #28]
 80065b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065b6:	83bb      	strh	r3, [r7, #28]
 80065b8:	8bbb      	ldrh	r3, [r7, #28]
 80065ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065be:	83bb      	strh	r3, [r7, #28]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	8bbb      	ldrh	r3, [r7, #28]
 80065cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065dc:	b29b      	uxth	r3, r3
 80065de:	8013      	strh	r3, [r2, #0]
 80065e0:	e1ea      	b.n	80069b8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f8:	83fb      	strh	r3, [r7, #30]
 80065fa:	8bfb      	ldrh	r3, [r7, #30]
 80065fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006600:	83fb      	strh	r3, [r7, #30]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8bfb      	ldrh	r3, [r7, #30]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]
 8006622:	e1c9      	b.n	80069b8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	78db      	ldrb	r3, [r3, #3]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d11e      	bne.n	800666a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006642:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006664:	b29b      	uxth	r3, r3
 8006666:	8013      	strh	r3, [r2, #0]
 8006668:	e01d      	b.n	80066a6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800667c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006680:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	441a      	add	r2, r3
 800668e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b6:	4413      	add	r3, r2
 80066b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	011a      	lsls	r2, r3, #4
 80066c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	891b      	ldrh	r3, [r3, #8]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ea:	4413      	add	r3, r2
 80066ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80066fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	895b      	ldrh	r3, [r3, #10]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800670c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8093 	bne.w	800683e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006728:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800672c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <USB_ActivateEndpoint+0x524>
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800677a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800677c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01b      	beq.n	80067bc <USB_ActivateEndpoint+0x574>
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067da:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800681a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]
 800683c:	e0bc      	b.n	80069b8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800684e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01d      	beq.n	8006896 <USB_ActivateEndpoint+0x64e>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006870:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800688a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800688e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80068a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01d      	beq.n	80068ee <USB_ActivateEndpoint+0x6a6>
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80068da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	78db      	ldrb	r3, [r3, #3]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d024      	beq.n	8006940 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800690c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006910:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006914:	f083 0320 	eor.w	r3, r3, #32
 8006918:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e01d      	b.n	800697c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006956:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006992:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3774      	adds	r7, #116	@ 0x74
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop

080069c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b08d      	sub	sp, #52	@ 0x34
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	7b1b      	ldrb	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 808e 	bne.w	8006af8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d044      	beq.n	8006a6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	81bb      	strh	r3, [r7, #12]
 80069f2:	89bb      	ldrh	r3, [r7, #12]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01b      	beq.n	8006a34 <USB_DeactivateEndpoint+0x6c>
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	817b      	strh	r3, [r7, #10]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a4a:	813b      	strh	r3, [r7, #8]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
 8006a6c:	e192      	b.n	8006d94 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	827b      	strh	r3, [r7, #18]
 8006a7c:	8a7b      	ldrh	r3, [r7, #18]
 8006a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01b      	beq.n	8006abe <USB_DeactivateEndpoint+0xf6>
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9c:	823b      	strh	r3, [r7, #16]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	8a3b      	ldrh	r3, [r7, #16]
 8006aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	81fb      	strh	r3, [r7, #14]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
 8006af6:	e14d      	b.n	8006d94 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 80a5 	bne.w	8006c4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	843b      	strh	r3, [r7, #32]
 8006b10:	8c3b      	ldrh	r3, [r7, #32]
 8006b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01b      	beq.n	8006b52 <USB_DeactivateEndpoint+0x18a>
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b30:	83fb      	strh	r3, [r7, #30]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	8bfb      	ldrh	r3, [r7, #30]
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	83bb      	strh	r3, [r7, #28]
 8006b60:	8bbb      	ldrh	r3, [r7, #28]
 8006b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01b      	beq.n	8006ba2 <USB_DeactivateEndpoint+0x1da>
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b80:	837b      	strh	r3, [r7, #26]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	441a      	add	r2, r3
 8006b8c:	8b7b      	ldrh	r3, [r7, #26]
 8006b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb8:	833b      	strh	r3, [r7, #24]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	8b3b      	ldrh	r3, [r7, #24]
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf0:	82fb      	strh	r3, [r7, #22]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	441a      	add	r2, r3
 8006bfc:	8afb      	ldrh	r3, [r7, #22]
 8006bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c28:	82bb      	strh	r3, [r7, #20]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8abb      	ldrh	r3, [r7, #20]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]
 8006c4a:	e0a3      	b.n	8006d94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <USB_DeactivateEndpoint+0x2d4>
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006caa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01b      	beq.n	8006cec <USB_DeactivateEndpoint+0x324>
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cca:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	441a      	add	r2, r3
 8006d46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d72:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3734      	adds	r7, #52	@ 0x34
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr

08006da0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b0c2      	sub	sp, #264	@ 0x108
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dae:	6018      	str	r0, [r3, #0]
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	f040 86b7 	bne.w	8007b3a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d908      	bls.n	8006dfa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006df8:	e007      	b.n	8006e0a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	7b1b      	ldrb	r3, [r3, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d13a      	bne.n	8006e90 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6959      	ldr	r1, [r3, #20]
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	88da      	ldrh	r2, [r3, #6]
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e3c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e40:	6800      	ldr	r0, [r0, #0]
 8006e42:	f001 fc9c 	bl	800877e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	011a      	lsls	r2, r3, #4
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	f000 be1f 	b.w	8007ace <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	78db      	ldrb	r3, [r3, #3]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f040 8462 	bne.w	8007766 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a1a      	ldr	r2, [r3, #32]
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	f240 83df 	bls.w	800767e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	441a      	add	r2, r3
 8006f04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f10:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 81c7 	beq.w	80072f0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d177      	bne.n	800706e <USB_EPStartXfer+0x2ce>
 8006f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	4413      	add	r3, r2
 8006fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	011a      	lsls	r2, r3, #4
 8006fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fce:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd0:	d921      	bls.n	8007016 <USB_EPStartXfer+0x276>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <USB_EPStartXfer+0x252>
 8006fe8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	029b      	lsls	r3, r3, #10
 8007000:	b29b      	uxth	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700e:	b29a      	uxth	r2, r3
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e050      	b.n	80070b8 <USB_EPStartXfer+0x318>
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <USB_EPStartXfer+0x294>
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702c:	b29a      	uxth	r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e041      	b.n	80070b8 <USB_EPStartXfer+0x318>
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <USB_EPStartXfer+0x2b4>
 800704a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29b      	uxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b29a      	uxth	r2, r3
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e024      	b.n	80070b8 <USB_EPStartXfer+0x318>
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d11c      	bne.n	80070b8 <USB_EPStartXfer+0x318>
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	4413      	add	r3, r2
 8007094:	633b      	str	r3, [r7, #48]	@ 0x30
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	4413      	add	r3, r2
 80070a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6959      	ldr	r1, [r3, #20]
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	f001 fb49 	bl	800877e <USB_WritePMA>
            ep->xfer_buff += len;
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	441a      	add	r2, r3
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d90f      	bls.n	8007146 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	621a      	str	r2, [r3, #32]
 8007144:	e00e      	b.n	8007164 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2200      	movs	r2, #0
 8007162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d177      	bne.n	8007264 <USB_EPStartXfer+0x4c4>
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	4413      	add	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	011a      	lsls	r2, r3, #4
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071c6:	d921      	bls.n	800720c <USB_EPStartXfer+0x46c>
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <USB_EPStartXfer+0x448>
 80071de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e2:	3b01      	subs	r3, #1
 80071e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e056      	b.n	80072ba <USB_EPStartXfer+0x51a>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <USB_EPStartXfer+0x48a>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	b29a      	uxth	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e047      	b.n	80072ba <USB_EPStartXfer+0x51a>
 800722a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <USB_EPStartXfer+0x4aa>
 8007240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007244:	3301      	adds	r3, #1
 8007246:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29b      	uxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b29a      	uxth	r2, r3
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e02a      	b.n	80072ba <USB_EPStartXfer+0x51a>
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d122      	bne.n	80072ba <USB_EPStartXfer+0x51a>
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	623b      	str	r3, [r7, #32]
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	4413      	add	r3, r2
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	011a      	lsls	r2, r3, #4
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	891b      	ldrh	r3, [r3, #8]
 80072c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6959      	ldr	r1, [r3, #20]
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072e8:	6800      	ldr	r0, [r0, #0]
 80072ea:	f001 fa48 	bl	800877e <USB_WritePMA>
 80072ee:	e3ee      	b.n	8007ace <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d177      	bne.n	80073f0 <USB_EPStartXfer+0x650>
 8007300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007320:	4413      	add	r3, r2
 8007322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	011a      	lsls	r2, r3, #4
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007334:	4413      	add	r3, r2
 8007336:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800733a:	647b      	str	r3, [r7, #68]	@ 0x44
 800733c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007346:	b29a      	uxth	r2, r3
 8007348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007350:	2b3e      	cmp	r3, #62	@ 0x3e
 8007352:	d921      	bls.n	8007398 <USB_EPStartXfer+0x5f8>
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <USB_EPStartXfer+0x5d4>
 800736a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800736e:	3b01      	subs	r3, #1
 8007370:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29a      	uxth	r2, r3
 800737a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29b      	uxth	r3, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	b29b      	uxth	r3, r3
 8007388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007390:	b29a      	uxth	r2, r3
 8007392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	e056      	b.n	8007446 <USB_EPStartXfer+0x6a6>
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <USB_EPStartXfer+0x616>
 80073a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	e047      	b.n	8007446 <USB_EPStartXfer+0x6a6>
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <USB_EPStartXfer+0x636>
 80073cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073d0:	3301      	adds	r3, #1
 80073d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	e02a      	b.n	8007446 <USB_EPStartXfer+0x6a6>
 80073f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d122      	bne.n	8007446 <USB_EPStartXfer+0x6a6>
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	653b      	str	r3, [r7, #80]	@ 0x50
 800740c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800741a:	b29b      	uxth	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007420:	4413      	add	r3, r2
 8007422:	653b      	str	r3, [r7, #80]	@ 0x50
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	011a      	lsls	r2, r3, #4
 8007432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007434:	4413      	add	r3, r2
 8007436:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800743a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	b29a      	uxth	r2, r3
 8007442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	891b      	ldrh	r3, [r3, #8]
 8007452:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6959      	ldr	r1, [r3, #20]
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007466:	b29b      	uxth	r3, r3
 8007468:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800746c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007470:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007474:	6800      	ldr	r0, [r0, #0]
 8007476:	f001 f982 	bl	800877e <USB_WritePMA>
            ep->xfer_buff += len;
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748a:	441a      	add	r2, r3
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d90f      	bls.n	80074d4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6a1a      	ldr	r2, [r3, #32]
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c4:	1ad2      	subs	r2, r2, r3
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	621a      	str	r2, [r3, #32]
 80074d2:	e00e      	b.n	80074f2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d177      	bne.n	80075fe <USB_EPStartXfer+0x85e>
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	4413      	add	r3, r2
 8007530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	011a      	lsls	r2, r3, #4
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	4413      	add	r3, r2
 8007544:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
 800754a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007554:	b29a      	uxth	r2, r3
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007560:	d921      	bls.n	80075a6 <USB_EPStartXfer+0x806>
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USB_EPStartXfer+0x7e2>
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757c:	3b01      	subs	r3, #1
 800757e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	b29b      	uxth	r3, r3
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	b29b      	uxth	r3, r3
 8007592:	4313      	orrs	r3, r2
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e050      	b.n	8007648 <USB_EPStartXfer+0x8a8>
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <USB_EPStartXfer+0x824>
 80075ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	e041      	b.n	8007648 <USB_EPStartXfer+0x8a8>
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	085b      	lsrs	r3, r3, #1
 80075ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <USB_EPStartXfer+0x844>
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075de:	3301      	adds	r3, #1
 80075e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e024      	b.n	8007648 <USB_EPStartXfer+0x8a8>
 80075fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d11c      	bne.n	8007648 <USB_EPStartXfer+0x8a8>
 800760e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800761c:	b29b      	uxth	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007622:	4413      	add	r3, r2
 8007624:	643b      	str	r3, [r7, #64]	@ 0x40
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	011a      	lsls	r2, r3, #4
 8007634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007636:	4413      	add	r3, r2
 8007638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800763c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	b29a      	uxth	r2, r3
 8007644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007646:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6959      	ldr	r1, [r3, #20]
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007668:	b29b      	uxth	r3, r3
 800766a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800766e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007672:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	f001 f881 	bl	800877e <USB_WritePMA>
 800767c:	e227      	b.n	8007ace <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800767e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	441a      	add	r2, r3
 80076d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80076d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770a:	4413      	add	r3, r2
 800770c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	011a      	lsls	r2, r3, #4
 800771c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800771e:	4413      	add	r3, r2
 8007720:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	b29a      	uxth	r2, r3
 800772c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800772e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6959      	ldr	r1, [r3, #20]
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	b29b      	uxth	r3, r3
 8007752:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007756:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800775a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	f001 f80d 	bl	800877e <USB_WritePMA>
 8007764:	e1b3      	b.n	8007ace <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1a      	ldr	r2, [r3, #32]
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 80c6 	beq.w	8007938 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d177      	bne.n	80078b8 <USB_EPStartXfer+0xb18>
 80077c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077e8:	4413      	add	r3, r2
 80077ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	011a      	lsls	r2, r3, #4
 80077fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007802:	667b      	str	r3, [r7, #100]	@ 0x64
 8007804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800780e:	b29a      	uxth	r2, r3
 8007810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	2b3e      	cmp	r3, #62	@ 0x3e
 800781a:	d921      	bls.n	8007860 <USB_EPStartXfer+0xac0>
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	095b      	lsrs	r3, r3, #5
 8007822:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <USB_EPStartXfer+0xa9c>
 8007832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007836:	3b01      	subs	r3, #1
 8007838:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800783c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29a      	uxth	r2, r3
 8007842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007846:	b29b      	uxth	r3, r3
 8007848:	029b      	lsls	r3, r3, #10
 800784a:	b29b      	uxth	r3, r3
 800784c:	4313      	orrs	r3, r2
 800784e:	b29b      	uxth	r3, r3
 8007850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007858:	b29a      	uxth	r2, r3
 800785a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e050      	b.n	8007902 <USB_EPStartXfer+0xb62>
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <USB_EPStartXfer+0xade>
 8007868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007876:	b29a      	uxth	r2, r3
 8007878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	e041      	b.n	8007902 <USB_EPStartXfer+0xb62>
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <USB_EPStartXfer+0xafe>
 8007894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007898:	3301      	adds	r3, #1
 800789a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800789e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	029b      	lsls	r3, r3, #10
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	e024      	b.n	8007902 <USB_EPStartXfer+0xb62>
 80078b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11c      	bne.n	8007902 <USB_EPStartXfer+0xb62>
 80078c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078dc:	4413      	add	r3, r2
 80078de:	673b      	str	r3, [r7, #112]	@ 0x70
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	011a      	lsls	r2, r3, #4
 80078ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007900:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	895b      	ldrh	r3, [r3, #10]
 800790e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6959      	ldr	r1, [r3, #20]
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	b29b      	uxth	r3, r3
 8007924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007928:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800792c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007930:	6800      	ldr	r0, [r0, #0]
 8007932:	f000 ff24 	bl	800877e <USB_WritePMA>
 8007936:	e0ca      	b.n	8007ace <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d177      	bne.n	8007a38 <USB_EPStartXfer+0xc98>
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007968:	4413      	add	r3, r2
 800796a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800796c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800797c:	4413      	add	r3, r2
 800797e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007982:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798e:	b29a      	uxth	r2, r3
 8007990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	2b3e      	cmp	r3, #62	@ 0x3e
 800799a:	d921      	bls.n	80079e0 <USB_EPStartXfer+0xc40>
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <USB_EPStartXfer+0xc1c>
 80079b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079b6:	3b01      	subs	r3, #1
 80079b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e05c      	b.n	8007a9a <USB_EPStartXfer+0xcfa>
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <USB_EPStartXfer+0xc5e>
 80079e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e04d      	b.n	8007a9a <USB_EPStartXfer+0xcfa>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <USB_EPStartXfer+0xc7e>
 8007a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e030      	b.n	8007a9a <USB_EPStartXfer+0xcfa>
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d128      	bne.n	8007a9a <USB_EPStartXfer+0xcfa>
 8007a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	011a      	lsls	r2, r3, #4
 8007a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a84:	4413      	add	r3, r2
 8007a86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	891b      	ldrh	r3, [r3, #8]
 8007aa6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6959      	ldr	r1, [r3, #20]
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ac0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ac4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ac8:	6800      	ldr	r0, [r0, #0]
 8007aca:	f000 fe58 	bl	800877e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af4:	817b      	strh	r3, [r7, #10]
 8007af6:	897b      	ldrh	r3, [r7, #10]
 8007af8:	f083 0310 	eor.w	r3, r3, #16
 8007afc:	817b      	strh	r3, [r7, #10]
 8007afe:	897b      	ldrh	r3, [r7, #10]
 8007b00:	f083 0320 	eor.w	r3, r3, #32
 8007b04:	817b      	strh	r3, [r7, #10]
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	897b      	ldrh	r3, [r7, #10]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
 8007b36:	f000 bcde 	b.w	80084f6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	7b1b      	ldrb	r3, [r3, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 80bb 	bne.w	8007cc2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d917      	bls.n	8007b98 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699a      	ldr	r2, [r3, #24]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	619a      	str	r2, [r3, #24]
 8007b96:	e00e      	b.n	8007bb6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bda:	4413      	add	r3, r2
 8007bdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	011a      	lsls	r2, r3, #4
 8007bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c16:	d924      	bls.n	8007c62 <USB_EPStartXfer+0xec2>
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <USB_EPStartXfer+0xe98>
 8007c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c32:	3b01      	subs	r3, #1
 8007c34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	029b      	lsls	r3, r3, #10
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	f000 bc10 	b.w	8008482 <USB_EPStartXfer+0x16e2>
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10c      	bne.n	8007c84 <USB_EPStartXfer+0xee4>
 8007c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	e3fe      	b.n	8008482 <USB_EPStartXfer+0x16e2>
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <USB_EPStartXfer+0xf04>
 8007c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e3df      	b.n	8008482 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	78db      	ldrb	r3, [r3, #3]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f040 8218 	bne.w	8008104 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 809d 	bne.w	8007e20 <USB_EPStartXfer+0x1080>
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d4e:	d92b      	bls.n	8007da8 <USB_EPStartXfer+0x1008>
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <USB_EPStartXfer+0xfe0>
 8007d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e070      	b.n	8007e8a <USB_EPStartXfer+0x10ea>
 8007da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10c      	bne.n	8007dd2 <USB_EPStartXfer+0x1032>
 8007db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e05b      	b.n	8007e8a <USB_EPStartXfer+0x10ea>
 8007dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0x1062>
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	e034      	b.n	8007e8a <USB_EPStartXfer+0x10ea>
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d12c      	bne.n	8007e8a <USB_EPStartXfer+0x10ea>
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e54:	4413      	add	r3, r2
 8007e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	011a      	lsls	r2, r3, #4
 8007e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e88:	801a      	strh	r2, [r3, #0]
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f040 809d 	bne.w	8007fe4 <USB_EPStartXfer+0x1244>
 8007eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ece:	4413      	add	r3, r2
 8007ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	011a      	lsls	r2, r3, #4
 8007ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f12:	d92b      	bls.n	8007f6c <USB_EPStartXfer+0x11cc>
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <USB_EPStartXfer+0x11a4>
 8007f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	e069      	b.n	8008040 <USB_EPStartXfer+0x12a0>
 8007f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <USB_EPStartXfer+0x11f6>
 8007f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	e054      	b.n	8008040 <USB_EPStartXfer+0x12a0>
 8007f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <USB_EPStartXfer+0x1226>
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	029b      	lsls	r3, r3, #10
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	e02d      	b.n	8008040 <USB_EPStartXfer+0x12a0>
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d125      	bne.n	8008040 <USB_EPStartXfer+0x12a0>
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	011a      	lsls	r2, r3, #4
 800801e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008022:	4413      	add	r3, r2
 8008024:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800802c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800803e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8218 	beq.w	8008482 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008072:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <USB_EPStartXfer+0x12ea>
 800807e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800808a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800808e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 81f5 	bne.w	8008482 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008098:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800809c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 81ee 	bne.w	8008482 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80080ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080fe:	b29b      	uxth	r3, r3
 8008100:	8013      	strh	r3, [r2, #0]
 8008102:	e1be      	b.n	8008482 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	78db      	ldrb	r3, [r3, #3]
 8008110:	2b01      	cmp	r3, #1
 8008112:	f040 81b4 	bne.w	800847e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d917      	bls.n	8008162 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008152:	1ad2      	subs	r2, r2, r3
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	619a      	str	r2, [r3, #24]
 8008160:	e00e      	b.n	8008180 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2200      	movs	r2, #0
 800817e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8085 	bne.w	800829c <USB_EPStartXfer+0x14fc>
 8008192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081b6:	4413      	add	r3, r2
 80081b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	011a      	lsls	r2, r3, #4
 80081ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081ce:	4413      	add	r3, r2
 80081d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80081f2:	d923      	bls.n	800823c <USB_EPStartXfer+0x149c>
 80081f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <USB_EPStartXfer+0x1474>
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820e:	3b01      	subs	r3, #1
 8008210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008220:	b29b      	uxth	r3, r3
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	b29b      	uxth	r3, r3
 8008226:	4313      	orrs	r3, r2
 8008228:	b29b      	uxth	r3, r3
 800822a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008232:	b29a      	uxth	r2, r3
 8008234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	e060      	b.n	80082fe <USB_EPStartXfer+0x155e>
 800823c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10c      	bne.n	800825e <USB_EPStartXfer+0x14be>
 8008244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	e04f      	b.n	80082fe <USB_EPStartXfer+0x155e>
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <USB_EPStartXfer+0x14de>
 8008274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008278:	3301      	adds	r3, #1
 800827a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800827e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29a      	uxth	r2, r3
 8008286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800828a:	b29b      	uxth	r3, r3
 800828c:	029b      	lsls	r3, r3, #10
 800828e:	b29b      	uxth	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b29a      	uxth	r2, r3
 8008294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	e030      	b.n	80082fe <USB_EPStartXfer+0x155e>
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d128      	bne.n	80082fe <USB_EPStartXfer+0x155e>
 80082ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082d0:	4413      	add	r3, r2
 80082d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	011a      	lsls	r2, r3, #4
 80082e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 8085 	bne.w	8008428 <USB_EPStartXfer+0x1688>
 800831e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800832c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008342:	4413      	add	r3, r2
 8008344:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	011a      	lsls	r2, r3, #4
 8008356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800835a:	4413      	add	r3, r2
 800835c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008376:	801a      	strh	r2, [r3, #0]
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837c:	2b3e      	cmp	r3, #62	@ 0x3e
 800837e:	d923      	bls.n	80083c8 <USB_EPStartXfer+0x1628>
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <USB_EPStartXfer+0x1600>
 8008396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800839a:	3b01      	subs	r3, #1
 800839c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083be:	b29a      	uxth	r2, r3
 80083c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e05c      	b.n	8008482 <USB_EPStartXfer+0x16e2>
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <USB_EPStartXfer+0x164a>
 80083d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e04b      	b.n	8008482 <USB_EPStartXfer+0x16e2>
 80083ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <USB_EPStartXfer+0x166a>
 8008400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008404:	3301      	adds	r3, #1
 8008406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800840a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29b      	uxth	r3, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	e02c      	b.n	8008482 <USB_EPStartXfer+0x16e2>
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d124      	bne.n	8008482 <USB_EPStartXfer+0x16e2>
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800844e:	4413      	add	r3, r2
 8008450:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	011a      	lsls	r2, r3, #4
 8008462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008466:	4413      	add	r3, r2
 8008468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800846c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008474:	b29a      	uxth	r2, r3
 8008476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800847a:	801a      	strh	r2, [r3, #0]
 800847c:	e001      	b.n	8008482 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e03a      	b.n	80084f8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	441a      	add	r2, r3
 80084de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800852a:	81bb      	strh	r3, [r7, #12]
 800852c:	89bb      	ldrh	r3, [r7, #12]
 800852e:	f083 0310 	eor.w	r3, r3, #16
 8008532:	81bb      	strh	r3, [r7, #12]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	89bb      	ldrh	r3, [r7, #12]
 8008540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800854c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008550:	b29b      	uxth	r3, r3
 8008552:	8013      	strh	r3, [r2, #0]
 8008554:	e01f      	b.n	8008596 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856c:	81fb      	strh	r3, [r7, #14]
 800856e:	89fb      	ldrh	r3, [r7, #14]
 8008570:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008574:	81fb      	strh	r3, [r7, #14]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800858a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800858e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008592:	b29b      	uxth	r3, r3
 8008594:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b087      	sub	sp, #28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	7b1b      	ldrb	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 809d 	bne.w	80086f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d04c      	beq.n	8008658 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	823b      	strh	r3, [r7, #16]
 80085cc:	8a3b      	ldrh	r3, [r7, #16]
 80085ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01b      	beq.n	800860e <USB_EPClearStall+0x6c>
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ec:	81fb      	strh	r3, [r7, #14]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008606:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800860a:	b29b      	uxth	r3, r3
 800860c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	78db      	ldrb	r3, [r3, #3]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d06c      	beq.n	80086f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800862c:	81bb      	strh	r3, [r7, #12]
 800862e:	89bb      	ldrh	r3, [r7, #12]
 8008630:	f083 0320 	eor.w	r3, r3, #32
 8008634:	81bb      	strh	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	89bb      	ldrh	r3, [r7, #12]
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]
 8008656:	e04b      	b.n	80086f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	82fb      	strh	r3, [r7, #22]
 8008666:	8afb      	ldrh	r3, [r7, #22]
 8008668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <USB_EPClearStall+0x106>
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008686:	82bb      	strh	r3, [r7, #20]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	441a      	add	r2, r3
 8008692:	8abb      	ldrh	r3, [r7, #20]
 8008694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800869c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086be:	827b      	strh	r3, [r7, #18]
 80086c0:	8a7b      	ldrh	r3, [r7, #18]
 80086c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086c6:	827b      	strh	r3, [r7, #18]
 80086c8:	8a7b      	ldrh	r3, [r7, #18]
 80086ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80086ce:	827b      	strh	r3, [r7, #18]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	441a      	add	r2, r3
 80086da:	8a7b      	ldrh	r3, [r7, #18]
 80086dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2280      	movs	r2, #128	@ 0x80
 8008712:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr

08008722 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr

0800874a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008758:	b29b      	uxth	r3, r3
 800875a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr

0800877e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800877e:	b480      	push	{r7}
 8008780:	b08b      	sub	sp, #44	@ 0x2c
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	4611      	mov	r1, r2
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	80fb      	strh	r3, [r7, #6]
 8008790:	4613      	mov	r3, r2
 8008792:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008794:	88bb      	ldrh	r3, [r7, #4]
 8008796:	3301      	adds	r3, #1
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	005a      	lsls	r2, r3, #1
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087b6:	e01e      	b.n	80087f6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	3301      	adds	r3, #1
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b21a      	sxth	r2, r3
 80087c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b21b      	sxth	r3, r3
 80087d0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	8a7a      	ldrh	r2, [r7, #18]
 80087d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	3302      	adds	r3, #2
 80087dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	3302      	adds	r3, #2
 80087e2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	3301      	adds	r3, #1
 80087e8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	3301      	adds	r3, #1
 80087ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f2:	3b01      	subs	r3, #1
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1dd      	bne.n	80087b8 <USB_WritePMA+0x3a>
  }
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	372c      	adds	r7, #44	@ 0x2c
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008808:	b480      	push	{r7}
 800880a:	b08b      	sub	sp, #44	@ 0x2c
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4611      	mov	r1, r2
 8008814:	461a      	mov	r2, r3
 8008816:	460b      	mov	r3, r1
 8008818:	80fb      	strh	r3, [r7, #6]
 800881a:	4613      	mov	r3, r2
 800881c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800881e:	88bb      	ldrh	r3, [r7, #4]
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	b29b      	uxth	r3, r3
 8008824:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	005a      	lsls	r2, r3, #1
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800883a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008840:	e01b      	b.n	800887a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	3302      	adds	r3, #2
 800884e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	b2da      	uxtb	r2, r3
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	3301      	adds	r3, #1
 800885c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	b2da      	uxtb	r2, r3
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	3302      	adds	r3, #2
 8008872:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	3b01      	subs	r3, #1
 8008878:	627b      	str	r3, [r7, #36]	@ 0x24
 800887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e0      	bne.n	8008842 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008880:	88bb      	ldrh	r3, [r7, #4]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	b2da      	uxtb	r2, r3
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	701a      	strb	r2, [r3, #0]
  }
}
 800889c:	bf00      	nop
 800889e:	372c      	adds	r7, #44	@ 0x2c
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7c1b      	ldrb	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d115      	bne.n	80088ea <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088c2:	2202      	movs	r2, #2
 80088c4:	2181      	movs	r1, #129	@ 0x81
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fe8b 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d6:	2202      	movs	r2, #2
 80088d8:	2101      	movs	r1, #1
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fe81 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80088e8:	e012      	b.n	8008910 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ea:	2340      	movs	r3, #64	@ 0x40
 80088ec:	2202      	movs	r2, #2
 80088ee:	2181      	movs	r1, #129	@ 0x81
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fe76 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088fc:	2340      	movs	r3, #64	@ 0x40
 80088fe:	2202      	movs	r2, #2
 8008900:	2101      	movs	r1, #1
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fe6d 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008910:	2308      	movs	r3, #8
 8008912:	2203      	movs	r2, #3
 8008914:	2182      	movs	r1, #130	@ 0x82
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fe63 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008922:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008926:	f001 ff83 	bl	800a830 <USBD_static_malloc>
 800892a:	4602      	mov	r2, r0
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
 8008940:	e026      	b.n	8008990 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008948:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7c1b      	ldrb	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008976:	2101      	movs	r1, #1
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 ff23 	bl	800a7c4 <USBD_LL_PrepareReceive>
 800897e:	e007      	b.n	8008990 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008986:	2340      	movs	r3, #64	@ 0x40
 8008988:	2101      	movs	r1, #1
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 ff1a 	bl	800a7c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089aa:	2181      	movs	r1, #129	@ 0x81
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fe3e 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089b8:	2101      	movs	r1, #1
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fe37 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089c8:	2182      	movs	r1, #130	@ 0x82
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 fe2f 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00e      	beq.n	80089fe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 ff29 	bl	800a848 <USBD_static_free>
    pdev->pClassData = NULL;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d039      	beq.n	8008aa6 <USBD_CDC_Setup+0x9e>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d17f      	bne.n	8008b36 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88db      	ldrh	r3, [r3, #6]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d029      	beq.n	8008a92 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	da11      	bge.n	8008a6c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	88d2      	ldrh	r2, [r2, #6]
 8008a5a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a5c:	6939      	ldr	r1, [r7, #16]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 f9d5 	bl	8009e14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a6a:	e06b      	b.n	8008b44 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785a      	ldrb	r2, [r3, #1]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a82:	6939      	ldr	r1, [r7, #16]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	88db      	ldrh	r3, [r3, #6]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 f9f0 	bl	8009e70 <USBD_CtlPrepareRx>
      break;
 8008a90:	e058      	b.n	8008b44 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	7850      	ldrb	r0, [r2, #1]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	4798      	blx	r3
      break;
 8008aa4:	e04e      	b.n	8008b44 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	785b      	ldrb	r3, [r3, #1]
 8008aaa:	2b0b      	cmp	r3, #11
 8008aac:	d02e      	beq.n	8008b0c <USBD_CDC_Setup+0x104>
 8008aae:	2b0b      	cmp	r3, #11
 8008ab0:	dc38      	bgt.n	8008b24 <USBD_CDC_Setup+0x11c>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <USBD_CDC_Setup+0xb4>
 8008ab6:	2b0a      	cmp	r3, #10
 8008ab8:	d014      	beq.n	8008ae4 <USBD_CDC_Setup+0xdc>
 8008aba:	e033      	b.n	8008b24 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d107      	bne.n	8008ad6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ac6:	f107 030c 	add.w	r3, r7, #12
 8008aca:	2202      	movs	r2, #2
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 f9a0 	bl	8009e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ad4:	e02e      	b.n	8008b34 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f931 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae2:	e027      	b.n	8008b34 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d107      	bne.n	8008afe <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aee:	f107 030f 	add.w	r3, r7, #15
 8008af2:	2201      	movs	r2, #1
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 f98c 	bl	8009e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008afc:	e01a      	b.n	8008b34 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 f91d 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b06:	2302      	movs	r3, #2
 8008b08:	75fb      	strb	r3, [r7, #23]
          break;
 8008b0a:	e013      	b.n	8008b34 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d00d      	beq.n	8008b32 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 f911 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b22:	e006      	b.n	8008b32 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f90a 	bl	8009d40 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	75fb      	strb	r3, [r7, #23]
          break;
 8008b30:	e000      	b.n	8008b34 <USBD_CDC_Setup+0x12c>
          break;
 8008b32:	bf00      	nop
      }
      break;
 8008b34:	e006      	b.n	8008b44 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f901 	bl	8009d40 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	75fb      	strb	r3, [r7, #23]
      break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b60:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b68:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d03a      	beq.n	8008bea <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	331c      	adds	r3, #28
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d029      	beq.n	8008bde <USBD_CDC_DataIn+0x90>
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	440b      	add	r3, r1
 8008b98:	331c      	adds	r3, #28
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	78f9      	ldrb	r1, [r7, #3]
 8008b9e:	68b8      	ldr	r0, [r7, #8]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4403      	add	r3, r0
 8008baa:	3338      	adds	r3, #56	@ 0x38
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d110      	bne.n	8008bde <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	440b      	add	r3, r1
 8008bca:	331c      	adds	r3, #28
 8008bcc:	2200      	movs	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bd0:	78f9      	ldrb	r1, [r7, #3]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 fdd1 	bl	800a77e <USBD_LL_Transmit>
 8008bdc:	e003      	b.n	8008be6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e000      	b.n	8008bec <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bea:	2302      	movs	r3, #2
  }
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fdfc 	bl	800a80a <USBD_LL_GetRxDataSize>
 8008c12:	4602      	mov	r2, r0
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00d      	beq.n	8008c40 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4798      	blx	r3

    return USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e000      	b.n	8008c42 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c40:	2302      	movs	r3, #2
  }
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c58:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d014      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x44>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c6a:	2bff      	cmp	r3, #255	@ 0xff
 8008c6c:	d00f      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	22ff      	movs	r2, #255	@ 0xff
 8008c8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2243      	movs	r2, #67	@ 0x43
 8008ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	@ (8008cb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000098 	.word	0x20000098

08008cb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2243      	movs	r2, #67	@ 0x43
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	@ (8008cd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000054 	.word	0x20000054

08008cd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2243      	movs	r2, #67	@ 0x43
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200000dc 	.word	0x200000dc

08008cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	220a      	movs	r2, #10
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	@ (8008d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000010 	.word	0x20000010

08008d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d22:	2302      	movs	r3, #2
 8008d24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr

08008d44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr

08008d76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b085      	sub	sp, #20
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7c1b      	ldrb	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dc8:	2101      	movs	r1, #1
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fcfa 	bl	800a7c4 <USBD_LL_PrepareReceive>
 8008dd0:	e007      	b.n	8008de2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dd8:	2340      	movs	r3, #64	@ 0x40
 8008dda:	2101      	movs	r1, #1
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fcf1 	bl	800a7c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e04:	2302      	movs	r3, #2
 8008e06:	e01a      	b.n	8008e3e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	79fa      	ldrb	r2, [r7, #7]
 8008e34:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f001 fb5e 	bl	800a4f8 <USBD_LL_Init>

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d006      	beq.n	8008e68 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
 8008e66:	e001      	b.n	8008e6c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 fb93 	bl	800a5ac <USBD_LL_Start>

  return USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	78fa      	ldrb	r2, [r7, #3]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fed7 	bl	8009cce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d016      	beq.n	8008f72 <USBD_LL_SetupStage+0x6a>
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d81c      	bhi.n	8008f82 <USBD_LL_SetupStage+0x7a>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <USBD_LL_SetupStage+0x4a>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d008      	beq.n	8008f62 <USBD_LL_SetupStage+0x5a>
 8008f50:	e017      	b.n	8008f82 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f9ca 	bl	80092f4 <USBD_StdDevReq>
      break;
 8008f60:	e01a      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa2c 	bl	80093c8 <USBD_StdItfReq>
      break;
 8008f70:	e012      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa6c 	bl	8009458 <USBD_StdEPReq>
      break;
 8008f80:	e00a      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fb6b 	bl	800a66c <USBD_LL_StallEP>
      break;
 8008f96:	bf00      	nop
  }

  return USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	460b      	mov	r3, r1
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d14b      	bne.n	800904e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d134      	bne.n	8009032 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d919      	bls.n	8009008 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	1ad2      	subs	r2, r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d203      	bcs.n	8008ff6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	e002      	b.n	8008ffc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 ff53 	bl	8009eac <USBD_CtlContinueRx>
 8009006:	e038      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800901a:	2b03      	cmp	r3, #3
 800901c:	d105      	bne.n	800902a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 ff50 	bl	8009ed0 <USBD_CtlSendStatus>
 8009030:	e023      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009038:	2b05      	cmp	r3, #5
 800903a:	d11e      	bne.n	800907a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f001 fb10 	bl	800a66c <USBD_LL_StallEP>
 800904c:	e015      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009060:	2b03      	cmp	r3, #3
 8009062:	d108      	bne.n	8009076 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	7afa      	ldrb	r2, [r7, #11]
 800906e:	4611      	mov	r1, r2
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	4798      	blx	r3
 8009074:	e001      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	e000      	b.n	800907c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	460b      	mov	r3, r1
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009092:	7afb      	ldrb	r3, [r7, #11]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d17f      	bne.n	8009198 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3314      	adds	r3, #20
 800909c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d15c      	bne.n	8009162 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d915      	bls.n	80090e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	1ad2      	subs	r2, r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 febd 	bl	8009e4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d2:	2300      	movs	r3, #0
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f001 fb73 	bl	800a7c4 <USBD_LL_PrepareReceive>
 80090de:	e04e      	b.n	800917e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	6912      	ldr	r2, [r2, #16]
 80090e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80090ec:	fb01 f202 	mul.w	r2, r1, r2
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d11c      	bne.n	8009130 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d316      	bcc.n	8009130 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800910c:	429a      	cmp	r2, r3
 800910e:	d20f      	bcs.n	8009130 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fe99 	bl	8009e4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009122:	2300      	movs	r3, #0
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f001 fb4b 	bl	800a7c4 <USBD_LL_PrepareReceive>
 800912e:	e026      	b.n	800917e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009142:	2b03      	cmp	r3, #3
 8009144:	d105      	bne.n	8009152 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009152:	2180      	movs	r1, #128	@ 0x80
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f001 fa89 	bl	800a66c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fecb 	bl	8009ef6 <USBD_CtlReceiveStatus>
 8009160:	e00d      	b.n	800917e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009168:	2b04      	cmp	r3, #4
 800916a:	d004      	beq.n	8009176 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009176:	2180      	movs	r1, #128	@ 0x80
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f001 fa77 	bl	800a66c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009184:	2b01      	cmp	r3, #1
 8009186:	d11d      	bne.n	80091c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff fe81 	bl	8008e90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009196:	e015      	b.n	80091c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d108      	bne.n	80091c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	7afa      	ldrb	r2, [r7, #11]
 80091b8:	4611      	mov	r1, r2
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	4798      	blx	r3
 80091be:	e001      	b.n	80091c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091c0:	2302      	movs	r3, #2
 80091c2:	e000      	b.n	80091c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d6:	2340      	movs	r3, #64	@ 0x40
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fa00 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2240      	movs	r2, #64	@ 0x40
 80091ee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091f2:	2340      	movs	r3, #64	@ 0x40
 80091f4:	2200      	movs	r2, #0
 80091f6:	2180      	movs	r1, #128	@ 0x80
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f9f2 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2240      	movs	r2, #64	@ 0x40
 8009208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6852      	ldr	r2, [r2, #4]
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	4611      	mov	r1, r2
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr

0800926e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2204      	movs	r2, #4
 8009286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr

08009296 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d105      	bne.n	80092b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr

080092c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d10b      	bne.n	80092ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800930a:	2b40      	cmp	r3, #64	@ 0x40
 800930c:	d005      	beq.n	800931a <USBD_StdDevReq+0x26>
 800930e:	2b40      	cmp	r3, #64	@ 0x40
 8009310:	d84f      	bhi.n	80093b2 <USBD_StdDevReq+0xbe>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <USBD_StdDevReq+0x36>
 8009316:	2b20      	cmp	r3, #32
 8009318:	d14b      	bne.n	80093b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
      break;
 8009328:	e048      	b.n	80093bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b09      	cmp	r3, #9
 8009330:	d839      	bhi.n	80093a6 <USBD_StdDevReq+0xb2>
 8009332:	a201      	add	r2, pc, #4	@ (adr r2, 8009338 <USBD_StdDevReq+0x44>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	08009389 	.word	0x08009389
 800933c:	0800939d 	.word	0x0800939d
 8009340:	080093a7 	.word	0x080093a7
 8009344:	08009393 	.word	0x08009393
 8009348:	080093a7 	.word	0x080093a7
 800934c:	0800936b 	.word	0x0800936b
 8009350:	08009361 	.word	0x08009361
 8009354:	080093a7 	.word	0x080093a7
 8009358:	0800937f 	.word	0x0800937f
 800935c:	08009375 	.word	0x08009375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9dc 	bl	8009720 <USBD_GetDescriptor>
          break;
 8009368:	e022      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb3f 	bl	80099f0 <USBD_SetAddress>
          break;
 8009372:	e01d      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fb7e 	bl	8009a78 <USBD_SetConfig>
          break;
 800937c:	e018      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc07 	bl	8009b94 <USBD_GetConfig>
          break;
 8009386:	e013      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fc37 	bl	8009bfe <USBD_GetStatus>
          break;
 8009390:	e00e      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc65 	bl	8009c64 <USBD_SetFeature>
          break;
 800939a:	e009      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc74 	bl	8009c8c <USBD_ClrFeature>
          break;
 80093a4:	e004      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fcc9 	bl	8009d40 <USBD_CtlError>
          break;
 80093ae:	bf00      	nop
      }
      break;
 80093b0:	e004      	b.n	80093bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcc3 	bl	8009d40 <USBD_CtlError>
      break;
 80093ba:	bf00      	nop
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop

080093c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093de:	2b40      	cmp	r3, #64	@ 0x40
 80093e0:	d005      	beq.n	80093ee <USBD_StdItfReq+0x26>
 80093e2:	2b40      	cmp	r3, #64	@ 0x40
 80093e4:	d82e      	bhi.n	8009444 <USBD_StdItfReq+0x7c>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <USBD_StdItfReq+0x26>
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d12a      	bne.n	8009444 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d81d      	bhi.n	8009436 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	889b      	ldrh	r3, [r3, #4]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	d813      	bhi.n	800942c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	88db      	ldrh	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d110      	bne.n	8009440 <USBD_StdItfReq+0x78>
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fd53 	bl	8009ed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800942a:	e009      	b.n	8009440 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fc86 	bl	8009d40 <USBD_CtlError>
          break;
 8009434:	e004      	b.n	8009440 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc81 	bl	8009d40 <USBD_CtlError>
          break;
 800943e:	e000      	b.n	8009442 <USBD_StdItfReq+0x7a>
          break;
 8009440:	bf00      	nop
      }
      break;
 8009442:	e004      	b.n	800944e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc7a 	bl	8009d40 <USBD_CtlError>
      break;
 800944c:	bf00      	nop
  }

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	889b      	ldrh	r3, [r3, #4]
 800946a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009474:	2b40      	cmp	r3, #64	@ 0x40
 8009476:	d007      	beq.n	8009488 <USBD_StdEPReq+0x30>
 8009478:	2b40      	cmp	r3, #64	@ 0x40
 800947a:	f200 8146 	bhi.w	800970a <USBD_StdEPReq+0x2b2>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <USBD_StdEPReq+0x40>
 8009482:	2b20      	cmp	r3, #32
 8009484:	f040 8141 	bne.w	800970a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
      break;
 8009496:	e13d      	b.n	8009714 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d10a      	bne.n	80094ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	e12d      	b.n	8009716 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d007      	beq.n	80094d2 <USBD_StdEPReq+0x7a>
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	f300 811b 	bgt.w	80096fe <USBD_StdEPReq+0x2a6>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d072      	beq.n	80095b2 <USBD_StdEPReq+0x15a>
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d03a      	beq.n	8009546 <USBD_StdEPReq+0xee>
 80094d0:	e115      	b.n	80096fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d002      	beq.n	80094e2 <USBD_StdEPReq+0x8a>
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d015      	beq.n	800950c <USBD_StdEPReq+0xb4>
 80094e0:	e02b      	b.n	800953a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00c      	beq.n	8009502 <USBD_StdEPReq+0xaa>
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b80      	cmp	r3, #128	@ 0x80
 80094ec:	d009      	beq.n	8009502 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f8ba 	bl	800a66c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094f8:	2180      	movs	r1, #128	@ 0x80
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 f8b6 	bl	800a66c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009500:	e020      	b.n	8009544 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc1b 	bl	8009d40 <USBD_CtlError>
              break;
 800950a:	e01b      	b.n	8009544 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	885b      	ldrh	r3, [r3, #2]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10e      	bne.n	8009532 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <USBD_StdEPReq+0xda>
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b80      	cmp	r3, #128	@ 0x80
 800951e:	d008      	beq.n	8009532 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	88db      	ldrh	r3, [r3, #6]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 f89d 	bl	800a66c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fccc 	bl	8009ed0 <USBD_CtlSendStatus>

              break;
 8009538:	e004      	b.n	8009544 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fbff 	bl	8009d40 <USBD_CtlError>
              break;
 8009542:	bf00      	nop
          }
          break;
 8009544:	e0e0      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954c:	2b02      	cmp	r3, #2
 800954e:	d002      	beq.n	8009556 <USBD_StdEPReq+0xfe>
 8009550:	2b03      	cmp	r3, #3
 8009552:	d015      	beq.n	8009580 <USBD_StdEPReq+0x128>
 8009554:	e026      	b.n	80095a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00c      	beq.n	8009576 <USBD_StdEPReq+0x11e>
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b80      	cmp	r3, #128	@ 0x80
 8009560:	d009      	beq.n	8009576 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f880 	bl	800a66c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800956c:	2180      	movs	r1, #128	@ 0x80
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f87c 	bl	800a66c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009574:	e01c      	b.n	80095b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fbe1 	bl	8009d40 <USBD_CtlError>
              break;
 800957e:	e017      	b.n	80095b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	885b      	ldrh	r3, [r3, #2]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d112      	bne.n	80095ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f887 	bl	800a6aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fc97 	bl	8009ed0 <USBD_CtlSendStatus>
              }
              break;
 80095a2:	e004      	b.n	80095ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fbca 	bl	8009d40 <USBD_CtlError>
              break;
 80095ac:	e000      	b.n	80095b0 <USBD_StdEPReq+0x158>
              break;
 80095ae:	bf00      	nop
          }
          break;
 80095b0:	e0aa      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d002      	beq.n	80095c2 <USBD_StdEPReq+0x16a>
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d032      	beq.n	8009626 <USBD_StdEPReq+0x1ce>
 80095c0:	e097      	b.n	80096f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <USBD_StdEPReq+0x180>
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2b80      	cmp	r3, #128	@ 0x80
 80095cc:	d004      	beq.n	80095d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fbb5 	bl	8009d40 <USBD_CtlError>
                break;
 80095d6:	e091      	b.n	80096fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0b      	bge.n	80095f8 <USBD_StdEPReq+0x1a0>
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	3310      	adds	r3, #16
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	3304      	adds	r3, #4
 80095f6:	e00b      	b.n	8009610 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	3304      	adds	r3, #4
 8009610:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2202      	movs	r2, #2
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fbf8 	bl	8009e14 <USBD_CtlSendData>
              break;
 8009624:	e06a      	b.n	80096fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962a:	2b00      	cmp	r3, #0
 800962c:	da11      	bge.n	8009652 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3318      	adds	r3, #24
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d117      	bne.n	8009678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb78 	bl	8009d40 <USBD_CtlError>
                  break;
 8009650:	e054      	b.n	80096fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb65 	bl	8009d40 <USBD_CtlError>
                  break;
 8009676:	e041      	b.n	80096fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800967c:	2b00      	cmp	r3, #0
 800967e:	da0b      	bge.n	8009698 <USBD_StdEPReq+0x240>
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	3310      	adds	r3, #16
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	3304      	adds	r3, #4
 8009696:	e00b      	b.n	80096b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	3304      	adds	r3, #4
 80096b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <USBD_StdEPReq+0x266>
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b80      	cmp	r3, #128	@ 0x80
 80096bc:	d103      	bne.n	80096c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e00e      	b.n	80096e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 f80c 	bl	800a6e8 <USBD_LL_IsStallEP>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2201      	movs	r2, #1
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e002      	b.n	80096e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2202      	movs	r2, #2
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fb92 	bl	8009e14 <USBD_CtlSendData>
              break;
 80096f0:	e004      	b.n	80096fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fb23 	bl	8009d40 <USBD_CtlError>
              break;
 80096fa:	bf00      	nop
          }
          break;
 80096fc:	e004      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fb1d 	bl	8009d40 <USBD_CtlError>
          break;
 8009706:	bf00      	nop
      }
      break;
 8009708:	e004      	b.n	8009714 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb17 	bl	8009d40 <USBD_CtlError>
      break;
 8009712:	bf00      	nop
  }

  return ret;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	2b06      	cmp	r3, #6
 8009742:	f200 8128 	bhi.w	8009996 <USBD_GetDescriptor+0x276>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <USBD_GetDescriptor+0x2c>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009769 	.word	0x08009769
 8009750:	08009781 	.word	0x08009781
 8009754:	080097c1 	.word	0x080097c1
 8009758:	08009997 	.word	0x08009997
 800975c:	08009997 	.word	0x08009997
 8009760:	08009937 	.word	0x08009937
 8009764:	08009963 	.word	0x08009963
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	7c12      	ldrb	r2, [r2, #16]
 8009774:	f107 0108 	add.w	r1, r7, #8
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	60f8      	str	r0, [r7, #12]
      break;
 800977e:	e112      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7c1b      	ldrb	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10d      	bne.n	80097a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	f107 0208 	add.w	r2, r7, #8
 8009794:	4610      	mov	r0, r2
 8009796:	4798      	blx	r3
 8009798:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3301      	adds	r3, #1
 800979e:	2202      	movs	r2, #2
 80097a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097a2:	e100      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	f107 0208 	add.w	r2, r7, #8
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
      break;
 80097be:	e0f2      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	885b      	ldrh	r3, [r3, #2]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	f200 80ac 	bhi.w	8009924 <USBD_GetDescriptor+0x204>
 80097cc:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <USBD_GetDescriptor+0xb4>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009855 	.word	0x08009855
 80097e0:	08009889 	.word	0x08009889
 80097e4:	080098bd 	.word	0x080098bd
 80097e8:	080098f1 	.word	0x080098f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e091      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa94 	bl	8009d40 <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e089      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e077      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa7a 	bl	8009d40 <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e06f      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e05d      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa60 	bl	8009d40 <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e055      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e043      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa46 	bl	8009d40 <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e03b      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098de:	e029      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa2c 	bl	8009d40 <USBD_CtlError>
            err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
          break;
 80098ee:	e021      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7c12      	ldrb	r2, [r2, #16]
 8009908:	f107 0108 	add.w	r1, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009912:	e00f      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa12 	bl	8009d40 <USBD_CtlError>
            err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
          break;
 8009922:	e007      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa0a 	bl	8009d40 <USBD_CtlError>
          err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009932:	e038      	b.n	80099a6 <USBD_GetDescriptor+0x286>
 8009934:	e037      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	7c1b      	ldrb	r3, [r3, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d109      	bne.n	8009952 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009946:	f107 0208 	add.w	r2, r7, #8
 800994a:	4610      	mov	r0, r2
 800994c:	4798      	blx	r3
 800994e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009950:	e029      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f9f3 	bl	8009d40 <USBD_CtlError>
        err++;
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	3301      	adds	r3, #1
 800995e:	72fb      	strb	r3, [r7, #11]
      break;
 8009960:	e021      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7c1b      	ldrb	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10d      	bne.n	8009986 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	f107 0208 	add.w	r2, r7, #8
 8009976:	4610      	mov	r0, r2
 8009978:	4798      	blx	r3
 800997a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3301      	adds	r3, #1
 8009980:	2207      	movs	r2, #7
 8009982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009984:	e00f      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9d9 	bl	8009d40 <USBD_CtlError>
        err++;
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	3301      	adds	r3, #1
 8009992:	72fb      	strb	r3, [r7, #11]
      break;
 8009994:	e007      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9d1 	bl	8009d40 <USBD_CtlError>
      err++;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	3301      	adds	r3, #1
 80099a2:	72fb      	strb	r3, [r7, #11]
      break;
 80099a4:	bf00      	nop
  }

  if (err != 0U)
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099ac:	893b      	ldrh	r3, [r7, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d011      	beq.n	80099d6 <USBD_GetDescriptor+0x2b6>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	88db      	ldrh	r3, [r3, #6]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00d      	beq.n	80099d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88da      	ldrh	r2, [r3, #6]
 80099be:	893b      	ldrh	r3, [r7, #8]
 80099c0:	4293      	cmp	r3, r2
 80099c2:	bf28      	it	cs
 80099c4:	4613      	movcs	r3, r2
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099ca:	893b      	ldrh	r3, [r7, #8]
 80099cc:	461a      	mov	r2, r3
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fa1f 	bl	8009e14 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d104      	bne.n	80099e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa76 	bl	8009ed0 <USBD_CtlSendStatus>
 80099e4:	e000      	b.n	80099e8 <USBD_GetDescriptor+0x2c8>
    return;
 80099e6:	bf00      	nop
    }
  }
}
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	889b      	ldrh	r3, [r3, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d130      	bne.n	8009a64 <USBD_SetAddress+0x74>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	88db      	ldrh	r3, [r3, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d12c      	bne.n	8009a64 <USBD_SetAddress+0x74>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	885b      	ldrh	r3, [r3, #2]
 8009a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a10:	d828      	bhi.n	8009a64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	885b      	ldrh	r3, [r3, #2]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d104      	bne.n	8009a32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f988 	bl	8009d40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a30:	e01d      	b.n	8009a6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7bfa      	ldrb	r2, [r7, #15]
 8009a36:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fe7e 	bl	800a740 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa43 	bl	8009ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a58:	e009      	b.n	8009a6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	e004      	b.n	8009a6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f96a 	bl	8009d40 <USBD_CtlError>
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	4b41      	ldr	r3, [pc, #260]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009a8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a8c:	4b40      	ldr	r3, [pc, #256]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d904      	bls.n	8009a9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f952 	bl	8009d40 <USBD_CtlError>
 8009a9c:	e075      	b.n	8009b8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d002      	beq.n	8009aae <USBD_SetConfig+0x36>
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d023      	beq.n	8009af4 <USBD_SetConfig+0x7c>
 8009aac:	e062      	b.n	8009b74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aae:	4b38      	ldr	r3, [pc, #224]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01a      	beq.n	8009aec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ab6:	4b36      	ldr	r3, [pc, #216]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ac8:	4b31      	ldr	r3, [pc, #196]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff f9e8 	bl	8008ea4 <USBD_SetClassConfig>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d104      	bne.n	8009ae4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f92f 	bl	8009d40 <USBD_CtlError>
            return;
 8009ae2:	e052      	b.n	8009b8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9f3 	bl	8009ed0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aea:	e04e      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f9ef 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009af2:	e04a      	b.n	8009b8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009af4:	4b26      	ldr	r3, [pc, #152]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d112      	bne.n	8009b22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009b04:	4b22      	ldr	r3, [pc, #136]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b0e:	4b20      	ldr	r3, [pc, #128]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff f9e4 	bl	8008ee2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9d8 	bl	8009ed0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b20:	e033      	b.n	8009b8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b22:	4b1b      	ldr	r3, [pc, #108]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d01d      	beq.n	8009b6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff f9d2 	bl	8008ee2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b3e:	4b14      	ldr	r3, [pc, #80]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b48:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff f9a8 	bl	8008ea4 <USBD_SetClassConfig>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d104      	bne.n	8009b64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8ef 	bl	8009d40 <USBD_CtlError>
            return;
 8009b62:	e012      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9b3 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009b6a:	e00e      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9af 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009b72:	e00a      	b.n	8009b8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f8e2 	bl	8009d40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b7c:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <USBD_SetConfig+0x118>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff f9ad 	bl	8008ee2 <USBD_ClrClassConfig>
        break;
 8009b88:	bf00      	nop
    }
  }
}
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	2000057c 	.word	0x2000057c

08009b94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88db      	ldrh	r3, [r3, #6]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d004      	beq.n	8009bb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8c9 	bl	8009d40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bae:	e022      	b.n	8009bf6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	dc02      	bgt.n	8009bc0 <USBD_GetConfig+0x2c>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc03      	bgt.n	8009bc6 <USBD_GetConfig+0x32>
 8009bbe:	e015      	b.n	8009bec <USBD_GetConfig+0x58>
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d00b      	beq.n	8009bdc <USBD_GetConfig+0x48>
 8009bc4:	e012      	b.n	8009bec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f91d 	bl	8009e14 <USBD_CtlSendData>
        break;
 8009bda:	e00c      	b.n	8009bf6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3304      	adds	r3, #4
 8009be0:	2201      	movs	r2, #1
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f915 	bl	8009e14 <USBD_CtlSendData>
        break;
 8009bea:	e004      	b.n	8009bf6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8a6 	bl	8009d40 <USBD_CtlError>
        break;
 8009bf4:	bf00      	nop
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d81e      	bhi.n	8009c52 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	88db      	ldrh	r3, [r3, #6]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d004      	beq.n	8009c26 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f88e 	bl	8009d40 <USBD_CtlError>
        break;
 8009c24:	e01a      	b.n	8009c5c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f043 0202 	orr.w	r2, r3, #2
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	330c      	adds	r3, #12
 8009c46:	2202      	movs	r2, #2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8e2 	bl	8009e14 <USBD_CtlSendData>
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f873 	bl	8009d40 <USBD_CtlError>
      break;
 8009c5a:	bf00      	nop
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d106      	bne.n	8009c84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f926 	bl	8009ed0 <USBD_CtlSendStatus>
  }
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d80b      	bhi.n	8009cba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d10c      	bne.n	8009cc4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f90c 	bl	8009ed0 <USBD_CtlSendStatus>
      }
      break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f83f 	bl	8009d40 <USBD_CtlError>
      break;
 8009cc2:	e000      	b.n	8009cc6 <USBD_ClrFeature+0x3a>
      break;
 8009cc4:	bf00      	nop
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781a      	ldrb	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	785a      	ldrb	r2, [r3, #1]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	3302      	adds	r3, #2
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	3303      	adds	r3, #3
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	4413      	add	r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	3304      	adds	r3, #4
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	3305      	adds	r3, #5
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	4413      	add	r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	3306      	adds	r3, #6
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	3307      	adds	r3, #7
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4413      	add	r3, r2
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	80da      	strh	r2, [r3, #6]

}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr

08009d40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d4a:	2180      	movs	r1, #128	@ 0x80
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc8d 	bl	800a66c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d52:	2100      	movs	r1, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fc89 	bl	800a66c <USBD_LL_StallEP>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d032      	beq.n	8009dde <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f834 	bl	8009de6 <USBD_GetLen>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	3301      	adds	r3, #1
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	75fa      	strb	r2, [r7, #23]
 8009d92:	461a      	mov	r2, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4413      	add	r3, r2
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	75fa      	strb	r2, [r7, #23]
 8009da4:	461a      	mov	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4413      	add	r3, r2
 8009daa:	2203      	movs	r2, #3
 8009dac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009dae:	e012      	b.n	8009dd6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	60fa      	str	r2, [r7, #12]
 8009db6:	7dfa      	ldrb	r2, [r7, #23]
 8009db8:	1c51      	adds	r1, r2, #1
 8009dba:	75f9      	strb	r1, [r7, #23]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	75fa      	strb	r2, [r7, #23]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e8      	bne.n	8009db0 <USBD_GetString+0x4e>
    }
  }
}
 8009dde:	bf00      	nop
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009df2:	e005      	b.n	8009e00 <USBD_GetLen+0x1a>
  {
    len++;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	3301      	adds	r3, #1
 8009df8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f5      	bne.n	8009df4 <USBD_GetLen+0xe>
  }

  return len;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e2a:	88fa      	ldrh	r2, [r7, #6]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e30:	88fa      	ldrh	r2, [r7, #6]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fc9e 	bl	800a77e <USBD_LL_Transmit>

  return USBD_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e5a:	88fb      	ldrh	r3, [r7, #6]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fc8c 	bl	800a77e <USBD_LL_Transmit>

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2203      	movs	r2, #3
 8009e82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 fc91 	bl	800a7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fc7f 	bl	800a7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2204      	movs	r2, #4
 8009edc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fc49 	bl	800a77e <USBD_LL_Transmit>

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2205      	movs	r2, #5
 8009f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f06:	2300      	movs	r3, #0
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc59 	bl	800a7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f20:	2200      	movs	r2, #0
 8009f22:	4912      	ldr	r1, [pc, #72]	@ (8009f6c <MX_USB_DEVICE_Init+0x50>)
 8009f24:	4812      	ldr	r0, [pc, #72]	@ (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f26:	f7fe ff63 	bl	8008df0 <USBD_Init>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f30:	f7f7 f850 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f34:	490f      	ldr	r1, [pc, #60]	@ (8009f74 <MX_USB_DEVICE_Init+0x58>)
 8009f36:	480e      	ldr	r0, [pc, #56]	@ (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f38:	f7fe ff85 	bl	8008e46 <USBD_RegisterClass>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f42:	f7f7 f847 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f46:	490c      	ldr	r1, [pc, #48]	@ (8009f78 <MX_USB_DEVICE_Init+0x5c>)
 8009f48:	4809      	ldr	r0, [pc, #36]	@ (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f4a:	f7fe fee5 	bl	8008d18 <USBD_CDC_RegisterInterface>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f54:	f7f7 f83e 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f58:	4805      	ldr	r0, [pc, #20]	@ (8009f70 <MX_USB_DEVICE_Init+0x54>)
 8009f5a:	f7fe ff8d 	bl	8008e78 <USBD_Start>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f64:	f7f7 f836 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f68:	bf00      	nop
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000130 	.word	0x20000130
 8009f70:	20000580 	.word	0x20000580
 8009f74:	2000001c 	.word	0x2000001c
 8009f78:	20000120 	.word	0x20000120

08009f7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f80:	2200      	movs	r2, #0
 8009f82:	4905      	ldr	r1, [pc, #20]	@ (8009f98 <CDC_Init_FS+0x1c>)
 8009f84:	4805      	ldr	r0, [pc, #20]	@ (8009f9c <CDC_Init_FS+0x20>)
 8009f86:	f7fe fedd 	bl	8008d44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f8a:	4905      	ldr	r1, [pc, #20]	@ (8009fa0 <CDC_Init_FS+0x24>)
 8009f8c:	4803      	ldr	r0, [pc, #12]	@ (8009f9c <CDC_Init_FS+0x20>)
 8009f8e:	f7fe fef2 	bl	8008d76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20000944 	.word	0x20000944
 8009f9c:	20000580 	.word	0x20000580
 8009fa0:	20000844 	.word	0x20000844

08009fa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr
	...

08009fb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b23      	cmp	r3, #35	@ 0x23
 8009fc8:	f200 808c 	bhi.w	800a0e4 <CDC_Control_FS+0x130>
 8009fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd4 <CDC_Control_FS+0x20>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	0800a0e5 	.word	0x0800a0e5
 8009fd8:	0800a0e5 	.word	0x0800a0e5
 8009fdc:	0800a0e5 	.word	0x0800a0e5
 8009fe0:	0800a0e5 	.word	0x0800a0e5
 8009fe4:	0800a0e5 	.word	0x0800a0e5
 8009fe8:	0800a0e5 	.word	0x0800a0e5
 8009fec:	0800a0e5 	.word	0x0800a0e5
 8009ff0:	0800a0e5 	.word	0x0800a0e5
 8009ff4:	0800a0e5 	.word	0x0800a0e5
 8009ff8:	0800a0e5 	.word	0x0800a0e5
 8009ffc:	0800a0e5 	.word	0x0800a0e5
 800a000:	0800a0e5 	.word	0x0800a0e5
 800a004:	0800a0e5 	.word	0x0800a0e5
 800a008:	0800a0e5 	.word	0x0800a0e5
 800a00c:	0800a0e5 	.word	0x0800a0e5
 800a010:	0800a0e5 	.word	0x0800a0e5
 800a014:	0800a0e5 	.word	0x0800a0e5
 800a018:	0800a0e5 	.word	0x0800a0e5
 800a01c:	0800a0e5 	.word	0x0800a0e5
 800a020:	0800a0e5 	.word	0x0800a0e5
 800a024:	0800a0e5 	.word	0x0800a0e5
 800a028:	0800a0e5 	.word	0x0800a0e5
 800a02c:	0800a0e5 	.word	0x0800a0e5
 800a030:	0800a0e5 	.word	0x0800a0e5
 800a034:	0800a0e5 	.word	0x0800a0e5
 800a038:	0800a0e5 	.word	0x0800a0e5
 800a03c:	0800a0e5 	.word	0x0800a0e5
 800a040:	0800a0e5 	.word	0x0800a0e5
 800a044:	0800a0e5 	.word	0x0800a0e5
 800a048:	0800a0e5 	.word	0x0800a0e5
 800a04c:	0800a0e5 	.word	0x0800a0e5
 800a050:	0800a0e5 	.word	0x0800a0e5
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a09f 	.word	0x0800a09f
 800a05c:	0800a0e5 	.word	0x0800a0e5
 800a060:	0800a0e5 	.word	0x0800a0e5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	mylineCodeBuf[0] = pbuf[0];
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	4b22      	ldr	r3, [pc, #136]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a06a:	701a      	strb	r2, [r3, #0]
    	mylineCodeBuf[1] = pbuf[1];
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	785a      	ldrb	r2, [r3, #1]
 800a070:	4b20      	ldr	r3, [pc, #128]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a072:	705a      	strb	r2, [r3, #1]
    	mylineCodeBuf[2] = pbuf[2];
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	789a      	ldrb	r2, [r3, #2]
 800a078:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a07a:	709a      	strb	r2, [r3, #2]
    	mylineCodeBuf[3] = pbuf[3];
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	78da      	ldrb	r2, [r3, #3]
 800a080:	4b1c      	ldr	r3, [pc, #112]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a082:	70da      	strb	r2, [r3, #3]
    	mylineCodeBuf[4] = pbuf[4];
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	791a      	ldrb	r2, [r3, #4]
 800a088:	4b1a      	ldr	r3, [pc, #104]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a08a:	711a      	strb	r2, [r3, #4]
    	mylineCodeBuf[5] = pbuf[5];
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	795a      	ldrb	r2, [r3, #5]
 800a090:	4b18      	ldr	r3, [pc, #96]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a092:	715a      	strb	r2, [r3, #5]
		mylineCodeBuf[6] = pbuf[6];
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	799a      	ldrb	r2, [r3, #6]
 800a098:	4b16      	ldr	r3, [pc, #88]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a09a:	719a      	strb	r2, [r3, #6]

    break;
 800a09c:	e023      	b.n	800a0e6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = mylineCodeBuf[0];
 800a09e:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = mylineCodeBuf[1];
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a12      	ldr	r2, [pc, #72]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0ac:	7852      	ldrb	r2, [r2, #1]
 800a0ae:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = mylineCodeBuf[2];
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	3302      	adds	r3, #2
 800a0b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0b6:	7892      	ldrb	r2, [r2, #2]
 800a0b8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = mylineCodeBuf[3];
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0c0:	78d2      	ldrb	r2, [r2, #3]
 800a0c2:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = mylineCodeBuf[4];
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0ca:	7912      	ldrb	r2, [r2, #4]
 800a0cc:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = mylineCodeBuf[5];
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	3305      	adds	r3, #5
 800a0d2:	4a08      	ldr	r2, [pc, #32]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0d4:	7952      	ldrb	r2, [r2, #5]
 800a0d6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = mylineCodeBuf[6];
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	3306      	adds	r3, #6
 800a0dc:	4a05      	ldr	r2, [pc, #20]	@ (800a0f4 <CDC_Control_FS+0x140>)
 800a0de:	7992      	ldrb	r2, [r2, #6]
 800a0e0:	701a      	strb	r2, [r3, #0]
    break;
 800a0e2:	e000      	b.n	800a0e6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0e4:	bf00      	nop
  }

  return (USBD_OK);
 800a0e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000a44 	.word	0x20000a44

0800a0f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (aPtrFunRx != NULL)
 800a102:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <CDC_Receive_FS+0x3c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800a10a:	4b0a      	ldr	r3, [pc, #40]	@ (800a134 <CDC_Receive_FS+0x3c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	6812      	ldr	r2, [r2, #0]
 800a112:	b292      	uxth	r2, r2
 800a114:	4611      	mov	r1, r2
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	4798      	blx	r3


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	4806      	ldr	r0, [pc, #24]	@ (800a138 <CDC_Receive_FS+0x40>)
 800a11e:	f7fe fe2a 	bl	8008d76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a122:	4805      	ldr	r0, [pc, #20]	@ (800a138 <CDC_Receive_FS+0x40>)
 800a124:	f7fe fe3a 	bl	8008d9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a128:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000a4c 	.word	0x20000a4c
 800a138:	20000580 	.word	0x20000580

0800a13c <CDC_AttachRxData>:
  /* USER CODE END 7 */
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 800a144:	4a03      	ldr	r2, [pc, #12]	@ (800a154 <CDC_AttachRxData+0x18>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6013      	str	r3, [r2, #0]
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr
 800a154:	20000a4c 	.word	0x20000a4c

0800a158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2212      	movs	r2, #18
 800a168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a16a:	4b03      	ldr	r3, [pc, #12]	@ (800a178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	2000014c 	.word	0x2000014c

0800a17c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	6039      	str	r1, [r7, #0]
 800a186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2204      	movs	r2, #4
 800a18c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a18e:	4b03      	ldr	r3, [pc, #12]	@ (800a19c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	bc80      	pop	{r7}
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	20000160 	.word	0x20000160

0800a1a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	6039      	str	r1, [r7, #0]
 800a1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1b6:	4808      	ldr	r0, [pc, #32]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1b8:	f7ff fdd3 	bl	8009d62 <USBD_GetString>
 800a1bc:	e004      	b.n	800a1c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4904      	ldr	r1, [pc, #16]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1c2:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c4:	f7ff fdcd 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000a50 	.word	0x20000a50
 800a1d8:	0800a938 	.word	0x0800a938

0800a1dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	4904      	ldr	r1, [pc, #16]	@ (800a1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1ec:	4804      	ldr	r0, [pc, #16]	@ (800a200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1ee:	f7ff fdb8 	bl	8009d62 <USBD_GetString>
  return USBD_StrDesc;
 800a1f2:	4b02      	ldr	r3, [pc, #8]	@ (800a1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000a50 	.word	0x20000a50
 800a200:	0800a950 	.word	0x0800a950

0800a204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	6039      	str	r1, [r7, #0]
 800a20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	221a      	movs	r2, #26
 800a214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a216:	f000 f843 	bl	800a2a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a21a:	4b02      	ldr	r3, [pc, #8]	@ (800a224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000164 	.word	0x20000164

0800a228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	4907      	ldr	r1, [pc, #28]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a23e:	4808      	ldr	r0, [pc, #32]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a240:	f7ff fd8f 	bl	8009d62 <USBD_GetString>
 800a244:	e004      	b.n	800a250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	4904      	ldr	r1, [pc, #16]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a24a:	4805      	ldr	r0, [pc, #20]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a24c:	f7ff fd89 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a250:	4b02      	ldr	r3, [pc, #8]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20000a50 	.word	0x20000a50
 800a260:	0800a964 	.word	0x0800a964

0800a264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4907      	ldr	r1, [pc, #28]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a27a:	4808      	ldr	r0, [pc, #32]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a27c:	f7ff fd71 	bl	8009d62 <USBD_GetString>
 800a280:	e004      	b.n	800a28c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4904      	ldr	r1, [pc, #16]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a286:	4805      	ldr	r0, [pc, #20]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a288:	f7ff fd6b 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a28c:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000a50 	.word	0x20000a50
 800a29c:	0800a970 	.word	0x0800a970

0800a2a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <Get_SerialNum+0x44>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a2e8 <Get_SerialNum+0x48>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ec <Get_SerialNum+0x4c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	4909      	ldr	r1, [pc, #36]	@ (800a2f0 <Get_SerialNum+0x50>)
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 f814 	bl	800a2f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	4908      	ldr	r1, [pc, #32]	@ (800a2f4 <Get_SerialNum+0x54>)
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f000 f80f 	bl	800a2f8 <IntToUnicode>
  }
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	1ffff7e8 	.word	0x1ffff7e8
 800a2e8:	1ffff7ec 	.word	0x1ffff7ec
 800a2ec:	1ffff7f0 	.word	0x1ffff7f0
 800a2f0:	20000166 	.word	0x20000166
 800a2f4:	20000176 	.word	0x20000176

0800a2f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]
 800a30e:	e027      	b.n	800a360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	0f1b      	lsrs	r3, r3, #28
 800a314:	2b09      	cmp	r3, #9
 800a316:	d80b      	bhi.n	800a330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0f1b      	lsrs	r3, r3, #28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4619      	mov	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	440b      	add	r3, r1
 800a328:	3230      	adds	r2, #48	@ 0x30
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	e00a      	b.n	800a346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	b2da      	uxtb	r2, r3
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4619      	mov	r1, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	440b      	add	r3, r1
 800a340:	3237      	adds	r2, #55	@ 0x37
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	3301      	adds	r3, #1
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	4413      	add	r3, r2
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	3301      	adds	r3, #1
 800a35e:	75fb      	strb	r3, [r7, #23]
 800a360:	7dfa      	ldrb	r2, [r7, #23]
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	429a      	cmp	r2, r3
 800a366:	d3d3      	bcc.n	800a310 <IntToUnicode+0x18>
  }
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr

0800a374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0d      	ldr	r2, [pc, #52]	@ (800a3b8 <HAL_PCD_MspInit+0x44>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d113      	bne.n	800a3ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a386:	4b0d      	ldr	r3, [pc, #52]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	4a0c      	ldr	r2, [pc, #48]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a38c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a390:	61d3      	str	r3, [r2, #28]
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	2014      	movs	r0, #20
 800a3a4:	f7f7 fd23 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3a8:	2014      	movs	r0, #20
 800a3aa:	f7f7 fd3c 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	40005c00 	.word	0x40005c00
 800a3bc:	40021000 	.word	0x40021000

0800a3c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f7fe fd96 	bl	8008f08 <USBD_LL_SetupStage>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	440b      	add	r3, r1
 800a404:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7fe fdc8 	bl	8008fa2 <USBD_LL_DataOutStage>
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	333c      	adds	r3, #60	@ 0x3c
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	4619      	mov	r1, r3
 800a442:	f7fe fe1f 	bl	8009084 <USBD_LL_DataInStage>
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe ff2f 	bl	80092c0 <USBD_LL_SOF>
}
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a472:	2301      	movs	r3, #1
 800a474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d001      	beq.n	800a482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a47e:	f7f6 fda9 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a488:	7bfa      	ldrb	r2, [r7, #15]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fedf 	bl	8009250 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fe98 	bl	80091ce <USBD_LL_Reset>
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fed9 	bl	800926e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4c4:	4b04      	ldr	r3, [pc, #16]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x30>)
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	4a03      	ldr	r2, [pc, #12]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x30>)
 800a4ca:	f043 0306 	orr.w	r3, r3, #6
 800a4ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	e000ed00 	.word	0xe000ed00

0800a4dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fed3 	bl	8009296 <USBD_LL_Resume>
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a500:	4a28      	ldr	r2, [pc, #160]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a26      	ldr	r2, [pc, #152]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a50c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a510:	4b24      	ldr	r3, [pc, #144]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a512:	4a25      	ldr	r2, [pc, #148]	@ (800a5a8 <USBD_LL_Init+0xb0>)
 800a514:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a516:	4b23      	ldr	r3, [pc, #140]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a518:	2208      	movs	r2, #8
 800a51a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a51c:	4b21      	ldr	r3, [pc, #132]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a51e:	2202      	movs	r2, #2
 800a520:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a522:	4b20      	ldr	r3, [pc, #128]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a524:	2200      	movs	r2, #0
 800a526:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a528:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a52e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a530:	2200      	movs	r2, #0
 800a532:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a534:	481b      	ldr	r0, [pc, #108]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a536:	f7f8 fa2d 	bl	8002994 <HAL_PCD_Init>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a540:	f7f6 fd48 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a54a:	2318      	movs	r3, #24
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	f7f9 ff4b 	bl	80043ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a55a:	2358      	movs	r3, #88	@ 0x58
 800a55c:	2200      	movs	r2, #0
 800a55e:	2180      	movs	r1, #128	@ 0x80
 800a560:	f7f9 ff43 	bl	80043ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a56a:	23c0      	movs	r3, #192	@ 0xc0
 800a56c:	2200      	movs	r2, #0
 800a56e:	2181      	movs	r1, #129	@ 0x81
 800a570:	f7f9 ff3b 	bl	80043ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a57a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a57e:	2200      	movs	r2, #0
 800a580:	2101      	movs	r1, #1
 800a582:	f7f9 ff32 	bl	80043ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a590:	2200      	movs	r2, #0
 800a592:	2182      	movs	r1, #130	@ 0x82
 800a594:	f7f9 ff29 	bl	80043ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000c50 	.word	0x20000c50
 800a5a8:	40005c00 	.word	0x40005c00

0800a5ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f8 fae5 	bl	8002b92 <HAL_PCD_Start>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f94e 	bl	800a870 <USBD_Get_USB_Status>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	4608      	mov	r0, r1
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	70fb      	strb	r3, [r7, #3]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70bb      	strb	r3, [r7, #2]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a60a:	78bb      	ldrb	r3, [r7, #2]
 800a60c:	883a      	ldrh	r2, [r7, #0]
 800a60e:	78f9      	ldrb	r1, [r7, #3]
 800a610:	f7f8 fc3a 	bl	8002e88 <HAL_PCD_EP_Open>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f928 	bl	800a870 <USBD_Get_USB_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a624:	7bbb      	ldrb	r3, [r7, #14]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f8 fc78 	bl	8002f42 <HAL_PCD_EP_Close>
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f909 	bl	800a870 <USBD_Get_USB_Status>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a662:	7bbb      	ldrb	r3, [r7, #14]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a686:	78fa      	ldrb	r2, [r7, #3]
 800a688:	4611      	mov	r1, r2
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f8 fd20 	bl	80030d0 <HAL_PCD_EP_SetStall>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f8ea 	bl	800a870 <USBD_Get_USB_Status>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7f8 fd61 	bl	8003190 <HAL_PCD_EP_ClrStall>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 f8cb 	bl	800a870 <USBD_Get_USB_Status>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a700:	2b00      	cmp	r3, #0
 800a702:	da0c      	bge.n	800a71e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	440b      	add	r3, r1
 800a718:	3302      	adds	r3, #2
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	e00b      	b.n	800a736 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a724:	68f9      	ldr	r1, [r7, #12]
 800a726:	4613      	mov	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	440b      	add	r3, r1
 800a730:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a734:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bc80      	pop	{r7}
 800a73e:	4770      	bx	lr

0800a740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f8 fb6d 	bl	8002e3e <HAL_PCD_SetAddress>
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f880 	bl	800a870 <USBD_Get_USB_Status>
 800a770:	4603      	mov	r3, r0
 800a772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a774:	7bbb      	ldrb	r3, [r7, #14]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	461a      	mov	r2, r3
 800a78a:	460b      	mov	r3, r1
 800a78c:	72fb      	strb	r3, [r7, #11]
 800a78e:	4613      	mov	r3, r2
 800a790:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7a0:	893b      	ldrh	r3, [r7, #8]
 800a7a2:	7af9      	ldrb	r1, [r7, #11]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	f7f8 fc5c 	bl	8003062 <HAL_PCD_EP_Transmit>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f85d 	bl	800a870 <USBD_Get_USB_Status>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	72fb      	strb	r3, [r7, #11]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7e6:	893b      	ldrh	r3, [r7, #8]
 800a7e8:	7af9      	ldrb	r1, [r7, #11]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	f7f8 fbf1 	bl	8002fd2 <HAL_PCD_EP_Receive>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f83a 	bl	800a870 <USBD_Get_USB_Status>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a800:	7dbb      	ldrb	r3, [r7, #22]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	460b      	mov	r3, r1
 800a814:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a81c:	78fa      	ldrb	r2, [r7, #3]
 800a81e:	4611      	mov	r1, r2
 800a820:	4618      	mov	r0, r3
 800a822:	f7f8 fc07 	bl	8003034 <HAL_PCD_EP_GetRxCount>
 800a826:	4603      	mov	r3, r0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <USBD_static_malloc+0x14>)
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc80      	pop	{r7}
 800a842:	4770      	bx	lr
 800a844:	20000f40 	.word	0x20000f40

0800a848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr

0800a85a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr

0800a870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d817      	bhi.n	800a8b4 <USBD_Get_USB_Status+0x44>
 800a884:	a201      	add	r2, pc, #4	@ (adr r2, 800a88c <USBD_Get_USB_Status+0x1c>)
 800a886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88a:	bf00      	nop
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800a8a3 	.word	0x0800a8a3
 800a894:	0800a8a9 	.word	0x0800a8a9
 800a898:	0800a8af 	.word	0x0800a8af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e00b      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	e008      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	e005      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b2:	e002      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	bf00      	nop
  }
  return usb_status;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop

0800a8c8 <memset>:
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	4402      	add	r2, r0
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d100      	bne.n	800a8d2 <memset+0xa>
 800a8d0:	4770      	bx	lr
 800a8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d6:	e7f9      	b.n	800a8cc <memset+0x4>

0800a8d8 <__libc_init_array>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	2600      	movs	r6, #0
 800a8dc:	4d0c      	ldr	r5, [pc, #48]	@ (800a910 <__libc_init_array+0x38>)
 800a8de:	4c0d      	ldr	r4, [pc, #52]	@ (800a914 <__libc_init_array+0x3c>)
 800a8e0:	1b64      	subs	r4, r4, r5
 800a8e2:	10a4      	asrs	r4, r4, #2
 800a8e4:	42a6      	cmp	r6, r4
 800a8e6:	d109      	bne.n	800a8fc <__libc_init_array+0x24>
 800a8e8:	f000 f81a 	bl	800a920 <_init>
 800a8ec:	2600      	movs	r6, #0
 800a8ee:	4d0a      	ldr	r5, [pc, #40]	@ (800a918 <__libc_init_array+0x40>)
 800a8f0:	4c0a      	ldr	r4, [pc, #40]	@ (800a91c <__libc_init_array+0x44>)
 800a8f2:	1b64      	subs	r4, r4, r5
 800a8f4:	10a4      	asrs	r4, r4, #2
 800a8f6:	42a6      	cmp	r6, r4
 800a8f8:	d105      	bne.n	800a906 <__libc_init_array+0x2e>
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a900:	4798      	blx	r3
 800a902:	3601      	adds	r6, #1
 800a904:	e7ee      	b.n	800a8e4 <__libc_init_array+0xc>
 800a906:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90a:	4798      	blx	r3
 800a90c:	3601      	adds	r6, #1
 800a90e:	e7f2      	b.n	800a8f6 <__libc_init_array+0x1e>
 800a910:	0800a9ac 	.word	0x0800a9ac
 800a914:	0800a9ac 	.word	0x0800a9ac
 800a918:	0800a9ac 	.word	0x0800a9ac
 800a91c:	0800a9b0 	.word	0x0800a9b0

0800a920 <_init>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr

0800a92c <_fini>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	bf00      	nop
 800a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a932:	bc08      	pop	{r3}
 800a934:	469e      	mov	lr, r3
 800a936:	4770      	bx	lr
